"use strict";(this.webpackChunkqcloud_shell=this.webpackChunkqcloud_shell||[]).push([[3694],{52107:(e,t,n)=>{n.d(t,{Z:()=>l});var i=n(34663),o=n.n(i),r=n(7638),a=n.n(r)()(o());a.push([e.id,"\nul[data-v-540ea8d1] {\n  list-style-type: none;\n}\n.new-module-text .mdi[data-v-540ea8d1] {\n  font-size: 24px;\n  margin-right: 10px;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AAwJA;EACE,qBAAqB;AACvB;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { ITreeItem, ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IFileExplorer } from \'../../../../domain/useCase/IFileExplorer\';\nimport { IObjectUseCase } from \'../../../../domain/useCase/IObjectUseCase\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\nimport { IViewModelManager } from \'../../../../domain/viewModel/IViewModelManager\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n  id: string;\n  name: string;\n  description?: string;\n  type: "module" | "model";\n  prefix?: string;\n  treeItems: Array<ITreeItem>;\n}\n\nasync function refreshTreeItems(itemId: string, itemPath: Array<String>) {\n  const fileExplorer = await executor.resolveUseCase<IFileExplorer>(IFileExplorer);\n  let item = viewModel.studio.items.find(item => item.ID == props.id);\n  if (!item) return;\n  fileExplorer.removeItem(props.id)\n  fileExplorer.addNewItem(item, itemId);\n  let children = getChildren(props.id);\n  children.forEach(async child => {\n    fileExplorer.removeItem(child.ID)\n    fileExplorer.addNewItem(child, child.path ? child.path[child.path.length - 1].toString() : undefined);\n  });\n}\n\nasync function updateChildrenPaths(itemId: string, itemPath: Array<String>, objectUseCase: IObjectUseCase) {\n  let children = getChildren(props.id);\n  children.forEach(async child => {\n    let updatedPath = updatePath(props.id, child.path ?? [], itemPath);\n    await objectUseCase.updateObject(props.id, { name: props.name, path: updatedPath });\n  });\n}\n\nfunction updatePath(updatedItemId: string, existingItemPath: Array<String>, updatedPath: Array<String>) {\n  const index = existingItemPath.indexOf(updatedItemId);\n  if (index !== -1) {\n    return [...updatedPath, ...existingItemPath.slice(index + 1)];\n  }\n  return existingItemPath;\n}\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst treeview = container.resolve<ITreeView>(ITreeView);\nconst props = defineProps<IMoveItemInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\nfunction move(itemPath: Array<String>, itemId: String) {\n  console.log("move")\n  executor.execute(async () => {\n    itemPath.push(itemId.toString());\n    const objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\n    await objectUseCase.updateObject(props.id, { name: props.name, path: itemPath });\n    //await updateChildrenPaths(itemId.toString(), itemPath, objectUseCase);\n    await refreshTreeItems(itemId.toString(), itemPath);\n    emit("close");\n  }, { loading: true });\n}\nlet actions: { path: Array<String>; icon: string; label: string; indent: number; id: String }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet treeItems = viewModel.studio.items;\nconst modelItems = treeItems.filter(item => item.objectType === "model") as IModel[];\nconst moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\nconsole.log("ooops", treeItems)\n\n\nfunction getChildren(parentId: string) {\n  return modelItems.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n}\n\nfunction getSortedItems(modelItems: IModel[]) {\n  modelItems.sort((a, b) => {\n    let aPath = a.path ?? [];\n    let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n      return aPath.length - bPath.length;\n    }\n\n    return 0;\n  });\n\n  function getChildren(parentId: string) {\n    return modelItems.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n  }\n\n  function sortItems(parentId: string) {\n    const result: IModel[] = [];\n\n    const directChildren = getChildren(parentId);\n    for (const child of directChildren) {\n      result.push(child);\n      result.push(...sortItems(child.ID));\n    }\n\n    return result;\n  }\n\n  return modelItems.filter(item => item.path ? item.path.length === 0 : true)\n    .reduce<IModel[]>((acc, rootItem) => {\n      acc.push(rootItem);\n      acc.push(...sortItems(rootItem.ID));\n      return acc;\n    }, []);\n}\nconsole.log("ooops1", getSortedItems(modelItems))\nconst sortedItems = getSortedItems(modelItems);\n\n\n\n\n\nfor (let modelItem of sortedItems) {\n  if (modelItem.modelType == "placeholder") {\n    let indentCalculated = modelItem.path ? (modelItem.path.length * 20 + 20) : 20;\n    actions.push({ path: modelItem.path ?? [], icon: "mdi mdi-folder-open", label: modelItem.name, indent: indentCalculated, id: modelItem.ID })\n  }\n}\nfor (let moduleItem of moduleItems) {\n  actions.push({ path: moduleItem.path ?? [], icon: "mdi mdi-puzzle", label: moduleItem.name, indent: 20, id: moduleItem.ID })\n}\n\n<\/script> \n\n<template>\n  <div class="moveDiv">\n    <div id="content-area" class="popover__content">\n      <div style="height: 100%" class="errorDiv">\n        <ul style="padding-left: 0px; margin-bottom: 0px">\n          <li v-for="action in actions" :key="action.label" @click="move(action.path, action.id)" style="padding-top: 1px"\n            :style="{ \'padding-left\': action.indent + \'px\' }">\n            <div class="createLi">\n              <p class="new-module-text">\n                <i :class="action.icon" style="margin-right: 10px;"></i>{{ action.label }}\n              </p>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<style scoped>\nul {\n  list-style-type: none;\n}\n\n.new-module-text .mdi {\n  font-size: 24px;\n  margin-right: 10px;\n}\n</style>\n\n\n \n\n<style scoped>\n.new-module-text {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n\n.createLi {\n  cursor: pointer;\n}\n\n.moveDiv {\n  margin-top: 5px;\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n}\n</style>'],sourceRoot:""}]);const l=a},57997:(e,t,n)=>{n.d(t,{Z:()=>l});var i=n(34663),o=n.n(i),r=n(7638),a=n.n(r)()(o());a.push([e.id,'\n.new-module-text[data-v-540ea8d1] {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n.createLi[data-v-540ea8d1] {\n  cursor: pointer;\n}\n.moveDiv[data-v-540ea8d1] {\n  margin-top: 5px;\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n}\n',"",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AAsKA;EACE,SAAS;EACT,cAAc;EACd,gBAAgB;EAChB,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,qBAAqB;AACvB;AAEA;EACE,eAAe;AACjB;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,mBAAmB;AACrB",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { ITreeItem, ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IFileExplorer } from \'../../../../domain/useCase/IFileExplorer\';\nimport { IObjectUseCase } from \'../../../../domain/useCase/IObjectUseCase\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\nimport { IViewModelManager } from \'../../../../domain/viewModel/IViewModelManager\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n  id: string;\n  name: string;\n  description?: string;\n  type: "module" | "model";\n  prefix?: string;\n  treeItems: Array<ITreeItem>;\n}\n\nasync function refreshTreeItems(itemId: string, itemPath: Array<String>) {\n  const fileExplorer = await executor.resolveUseCase<IFileExplorer>(IFileExplorer);\n  let item = viewModel.studio.items.find(item => item.ID == props.id);\n  if (!item) return;\n  fileExplorer.removeItem(props.id)\n  fileExplorer.addNewItem(item, itemId);\n  let children = getChildren(props.id);\n  children.forEach(async child => {\n    fileExplorer.removeItem(child.ID)\n    fileExplorer.addNewItem(child, child.path ? child.path[child.path.length - 1].toString() : undefined);\n  });\n}\n\nasync function updateChildrenPaths(itemId: string, itemPath: Array<String>, objectUseCase: IObjectUseCase) {\n  let children = getChildren(props.id);\n  children.forEach(async child => {\n    let updatedPath = updatePath(props.id, child.path ?? [], itemPath);\n    await objectUseCase.updateObject(props.id, { name: props.name, path: updatedPath });\n  });\n}\n\nfunction updatePath(updatedItemId: string, existingItemPath: Array<String>, updatedPath: Array<String>) {\n  const index = existingItemPath.indexOf(updatedItemId);\n  if (index !== -1) {\n    return [...updatedPath, ...existingItemPath.slice(index + 1)];\n  }\n  return existingItemPath;\n}\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst treeview = container.resolve<ITreeView>(ITreeView);\nconst props = defineProps<IMoveItemInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\nfunction move(itemPath: Array<String>, itemId: String) {\n  console.log("move")\n  executor.execute(async () => {\n    itemPath.push(itemId.toString());\n    const objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\n    await objectUseCase.updateObject(props.id, { name: props.name, path: itemPath });\n    //await updateChildrenPaths(itemId.toString(), itemPath, objectUseCase);\n    await refreshTreeItems(itemId.toString(), itemPath);\n    emit("close");\n  }, { loading: true });\n}\nlet actions: { path: Array<String>; icon: string; label: string; indent: number; id: String }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet treeItems = viewModel.studio.items;\nconst modelItems = treeItems.filter(item => item.objectType === "model") as IModel[];\nconst moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\nconsole.log("ooops", treeItems)\n\n\nfunction getChildren(parentId: string) {\n  return modelItems.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n}\n\nfunction getSortedItems(modelItems: IModel[]) {\n  modelItems.sort((a, b) => {\n    let aPath = a.path ?? [];\n    let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n      return aPath.length - bPath.length;\n    }\n\n    return 0;\n  });\n\n  function getChildren(parentId: string) {\n    return modelItems.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n  }\n\n  function sortItems(parentId: string) {\n    const result: IModel[] = [];\n\n    const directChildren = getChildren(parentId);\n    for (const child of directChildren) {\n      result.push(child);\n      result.push(...sortItems(child.ID));\n    }\n\n    return result;\n  }\n\n  return modelItems.filter(item => item.path ? item.path.length === 0 : true)\n    .reduce<IModel[]>((acc, rootItem) => {\n      acc.push(rootItem);\n      acc.push(...sortItems(rootItem.ID));\n      return acc;\n    }, []);\n}\nconsole.log("ooops1", getSortedItems(modelItems))\nconst sortedItems = getSortedItems(modelItems);\n\n\n\n\n\nfor (let modelItem of sortedItems) {\n  if (modelItem.modelType == "placeholder") {\n    let indentCalculated = modelItem.path ? (modelItem.path.length * 20 + 20) : 20;\n    actions.push({ path: modelItem.path ?? [], icon: "mdi mdi-folder-open", label: modelItem.name, indent: indentCalculated, id: modelItem.ID })\n  }\n}\nfor (let moduleItem of moduleItems) {\n  actions.push({ path: moduleItem.path ?? [], icon: "mdi mdi-puzzle", label: moduleItem.name, indent: 20, id: moduleItem.ID })\n}\n\n<\/script> \n\n<template>\n  <div class="moveDiv">\n    <div id="content-area" class="popover__content">\n      <div style="height: 100%" class="errorDiv">\n        <ul style="padding-left: 0px; margin-bottom: 0px">\n          <li v-for="action in actions" :key="action.label" @click="move(action.path, action.id)" style="padding-top: 1px"\n            :style="{ \'padding-left\': action.indent + \'px\' }">\n            <div class="createLi">\n              <p class="new-module-text">\n                <i :class="action.icon" style="margin-right: 10px;"></i>{{ action.label }}\n              </p>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<style scoped>\nul {\n  list-style-type: none;\n}\n\n.new-module-text .mdi {\n  font-size: 24px;\n  margin-right: 10px;\n}\n</style>\n\n\n \n\n<style scoped>\n.new-module-text {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n\n.createLi {\n  cursor: pointer;\n}\n\n.moveDiv {\n  margin-top: 5px;\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n}\n</style>'],sourceRoot:""}]);const l=a},73694:(e,t,n)=>{n.r(t),n.d(t,{default:()=>k});var i=n(71093),o=n(73843),r=n(66190),a=n(5627),l=n(32130),s=n(3329),d=n(29633),m=n(83487),p=n(88613),c=n(54848);const I={class:"moveDiv"},h={id:"content-area",class:"popover__content"},u={style:{height:"100%"},class:"errorDiv"},g={style:{"padding-left":"0px","margin-bottom":"0px"}},f=["onClick"],v={class:"createLi"},x={class:"new-module-text"},C=(0,i.aZ)({__name:"moveItem",props:{id:null,name:null,description:null,type:null,prefix:null,treeItems:null},emits:["close"],setup(e,{emit:t}){var n,C;const A=e;a.nC.resolve(c.B);const y=a.nC.resolve(m.y),w=(a.nC.resolve(l.J),a.nC.resolve(p.J));function b(e,n){console.log("move"),y.execute((async()=>{e.push(n.toString());const i=a.nC.resolve(d._);await i.updateObject(A.id,{name:A.name,path:e}),await async function(e,t){const n=await y.resolveUseCase(s.g);let i=w.studio.items.find((e=>e.ID==A.id));var o;i&&(n.removeItem(A.id),n.addNewItem(i,e),(o=A.id,E.filter((e=>!!e.path&&e.path[e.path.length-1]===o.toString()||!!e.parent&&e.parent.ID==o))).forEach((async e=>{n.removeItem(e.ID),n.addNewItem(e,e.path?e.path[e.path.length-1].toString():void 0)})))}(n.toString()),t("close")}),{loading:!0})}let M=[];M.push({path:[],icon:"mdi mdi-vector-polyline",label:w.studio.appName,indent:0,id:w.studio.appId});let P=w.studio.items;const E=P.filter((e=>"model"===e.objectType)),S=P.filter((e=>"module"===e.objectType));function D(e){function t(n){const i=[],o=function(t){return e.filter((e=>!!e.path&&e.path[e.path.length-1]===t.toString()||!!e.parent&&e.parent.ID==t))}(n);for(const e of o)i.push(e),i.push(...t(e.ID));return i}return e.sort(((e,t)=>{var n,i;let o=null!==(n=e.path)&&void 0!==n?n:[],r=null!==(i=t.path)&&void 0!==i?i:[];return o.length!==r.length?o.length-r.length:0})),e.filter((e=>!e.path||0===e.path.length)).reduce(((e,n)=>(e.push(n),e.push(...t(n.ID)),e)),[])}console.log("ooops",P),console.log("ooops1",D(E));const U=D(E);for(let e of U)if("placeholder"==e.modelType){let t=e.path?20*e.path.length+20:20;M.push({path:null!==(n=e.path)&&void 0!==n?n:[],icon:"mdi mdi-folder-open",label:e.name,indent:t,id:e.ID})}for(let e of S)M.push({path:null!==(C=e.path)&&void 0!==C?C:[],icon:"mdi mdi-puzzle",label:e.name,indent:20,id:e.ID});return(e,t)=>((0,i.wg)(),(0,i.iD)("div",I,[(0,i._)("div",h,[(0,i._)("div",u,[(0,i._)("ul",g,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)((0,o.SU)(M),(e=>((0,i.wg)(),(0,i.iD)("li",{key:e.label,onClick:t=>b(e.path,e.id),style:(0,r.normalizeStyle)([{"padding-top":"1px"},{"padding-left":e.indent+"px"}])},[(0,i._)("div",v,[(0,i._)("p",x,[(0,i._)("i",{class:(0,r.normalizeClass)(e.icon),style:{"margin-right":"10px"}},null,2),(0,i.Uk)((0,r.toDisplayString)(e.label),1)])])],12,f)))),128))])])])]))}});var A=n(17450),y=n.n(A),w=n(29530),b=n.n(w),M=n(16199),P=n.n(M),E=n(40458),S=n.n(E),D=n(62916),U=n.n(D),j=n(92165),T=n.n(j),B=n(52107),O={};O.styleTagTransform=T(),O.setAttributes=S(),O.insert=P().bind(null,"head"),O.domAPI=b(),O.insertStyleElement=U(),y()(B.Z,O),B.Z&&B.Z.locals&&B.Z.locals;var V=n(57997),_={};_.styleTagTransform=T(),_.setAttributes=S(),_.insert=P().bind(null,"head"),_.domAPI=b(),_.insertStyleElement=U(),y()(V.Z,_),V.Z&&V.Z.locals&&V.Z.locals;const k=(0,n(32525).Z)(C,[["__scopeId","data-v-540ea8d1"]])}}]);
//# sourceMappingURL=3694.js.map
"use strict";(this.webpackChunkqcloud_shell=this.webpackChunkqcloud_shell||[]).push([[4438,9508],{23373:(e,n,t)=>{t.d(n,{Z:()=>l});var o=t(34663),i=t.n(o),a=t(7638),s=t.n(a)()(i());s.push([e.id,"\n.row-container[data-v-ada1dc7a] {\n\twidth: 100%;\n\theight: 36px;\n\tposition: relative;\n\tbackground: #ffffff 0% 0% no-repeat padding-box;\n\tborder: 1px solid #e0e0e0;\n}\n.app-tier-model-icon[data-v-ada1dc7a] {\n\tposition: absolute;\n\twidth: 16px;\n\theight: 16px;\n\ttop: 6px;\n}\n.app-tier-model-name[data-v-ada1dc7a] {\n\tposition: absolute;\n\ttop: 9px;\n\tfont: normal normal normal 14px/19px Roboto;\n\tcolor: #212121;\n}\n.app-tier-model-name.disabled[data-v-ada1dc7a] {\n\tcolor: #D5D5D5;\n}\n.version-text[data-v-ada1dc7a] {\n\tmargin: 10px 7px 10px auto;\n\tdisplay: table;\n\tfont: normal normal normal 12px/16px Roboto;\n\tcolor: #757575;\n\tcursor: pointer;\n\tuser-select: none;\n}\n.version-text.disabled[data-v-ada1dc7a] {\n\tpointer-events: none;\n\tcursor: pointer;\n}\n.chevron[data-v-ada1dc7a] {\n\tposition: absolute;\n\tcolor: #757575;\n\tfont-size: 24px;\n}\n.button-tooltip[data-v-ada1dc7a] {\n\tvisibility: hidden;\n\tposition: absolute;\n\tbackground: #757575;\n\tcolor: #FFFFFF;\n\tfont-size: 11px;\n\tfont-family: 'Roboto';\n\ttext-align: center;\n\tborder-radius: 4px;\n\tletter-spacing: 0.2px;\n\tpadding: 6px 8px 6px 8px;\n\ttop: 56px;\n\tleft: 63px;\n\topacity: 0;\n}\n.button-disable .save-button:hover+.button-tooltip[data-v-ada1dc7a],\n.start-screen:hover .button-tooltip[data-v-ada1dc7a],\n.row-container:hover .button-tooltip[data-v-ada1dc7a],\n.publish-info:hover .button-tooltip[data-v-ada1dc7a] {\n\tvisibility: visible;\n\ttransition: opacity 0.3s ease-out 1s;\n\topacity: 1;\n}\n.bpmn-color[data-v-ada1dc7a] {\n\tcolor: #007c77;\n}\n.process-color[data-v-ada1dc7a] {\n\tcolor: #007c77;\n}\n.entity-designer-color[data-v-ada1dc7a] {\n\tcolor: #e9724c;\n}\n.qjson-color[data-v-ada1dc7a] {\n\tcolor: #449dd1;\n}\n.yaml-color[data-v-ada1dc7a] {\n\tcolor: #449dd1;\n}\n.namedcomp-color[data-v-ada1dc7a] {\n\tcolor: #212121;\n}\n.app-settings-color[data-v-ada1dc7a] {\n\tcolor: #151233;\n}\n.js-color[data-v-ada1dc7a] {\n\tcolor: #449dd1;\n}\n.css-color[data-v-ada1dc7a] {\n\tcolor: #151233;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/publish/components/exportDialogItem.vue"],names:[],mappings:";AA6FA;CACC,WAAW;CACX,YAAY;CACZ,kBAAkB;CAClB,+CAA+C;CAC/C,yBAAyB;AAC1B;AAEA;CACC,kBAAkB;CAClB,WAAW;CACX,YAAY;CACZ,QAAQ;AACT;AAEA;CACC,kBAAkB;CAClB,QAAQ;CACR,2CAA2C;CAC3C,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,0BAA0B;CAC1B,cAAc;CACd,2CAA2C;CAC3C,cAAc;CACd,eAAe;CACf,iBAAiB;AAClB;AAEA;CACC,oBAAoB;CACpB,eAAe;AAChB;AAEA;CACC,kBAAkB;CAClB,cAAc;CACd,eAAe;AAChB;AAEA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,mBAAmB;CACnB,cAAc;CACd,eAAe;CACf,qBAAqB;CACrB,kBAAkB;CAClB,kBAAkB;CAClB,qBAAqB;CACrB,wBAAwB;CACxB,SAAS;CACT,UAAU;CACV,UAAU;AACX;AAEA;;;;CAIC,mBAAmB;CACnB,oCAAoC;CACpC,UAAU;AACX;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf",sourcesContent:['<template>\n\t<div class="row-container" :id="item.id" v-if="!item.imported">\n\t\t<i v-if="item.children && item.children?.length > 0" :class="chevronClass" @click="calculateClass"\n\t\t\t:style="{ cursor: \'pointer\', left: (!item.level ? 4 : iconLeft - 20) + \'px\' }" />\n\t\t<i v-if="item.type == \'folder\'"\n\t\t\t:style="{ top: \'4px\', fontSize: \'larger\', cursor: \'pointer\', left: iconLeft + (!item.level ? 43 : 20) + \'px\', position: \'absolute\' }"\n\t\t\t@click="calculateClass" class="mdi mdi-folder app-settings-color app-tier-model-icon"></i>\n\t\t<CheckboxComp v-else\n\t\t\t:style="{ top: \'8px\', cursor: \'pointer\', left: iconLeft + (!item.level ? 43 : 20) + \'px\', position: \'absolute\' }"\n\t\t\t:check="checked" :minus="!item.allChildChecked && item.anyChildChecked" :disabled="item.disabled"\n\t\t\t@click="handleCheck" />\n\n\t\t<i v-if="item.type != \'folder\'"\n\t\t\t:class="\'app-tier-model-icon \' + ModelContants.getModelVisualInfo(item.type, undefined).icon"\n\t\t\t:style="{ color: ModelContants.getModelVisualInfo(item.type, undefined).color, left: iconLeft + (!item.level ? 69 : 45) + \'px\' }" />\n\n\t\t<span :style="{ left: iconLeft + (!item.level ? 91 : 71) + (item.type == \'folder\' ? -20 : 0) + \'px\' }"\n\t\t\t:class="[\'app-tier-model-name\', item.disabled ? \'disabled\' : \'\']">{{ item?.name }}\n\t\t\t<span class="start-screen" v-if="startScreen?.ID == item.id">\n\t\t\t\t<i class="mdi mdi-home-outline"></i>\n\t\t\t\t<span class="button-tooltip" style="top: -30px; left: 2px; z-index: 1; width: 80px;">Start\n\t\t\t\t\tScreen</span>\n\t\t\t</span>\n\t\t</span>\n\n\t\t<template v-if="item.type != \'folder\'">\n\t\t\t<span v-if="!item.usageType && item.type != \'module\'" :class="[\'version-text\', item.disabled ? \'disabled\' : \'\']"\n\t\t\t\t@click="handleVersionDialog">\n\t\t\t\t{{ item.version ? item.version : \'No version\' }} <i v-if="!item.usageType"\n\t\t\t\t\t:class="[\'mdi mdi-pencil-outline version-icon\', item.disabled ? \'disabled\' : \'\']"></i>\n\t\t\t</span>\n\t\t\t<div v-else-if="item.imported && item.type == \'module\'" class=\'version-text\' @click="moduleVersionDialog(item)">\n\t\t\t\t{{ item.version ? item.version : \'No version\' }}\n\t\t\t\t<i :class="[\'mdi mdi-pencil-outline version-icon\']"></i>\n\t\t\t</div>\n\t\t\t<span v-if="item.disabled && !item.version" class="button-tooltip" style="z-index: 1; width: 300px;">No version\n\t\t\t\tavailable for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\n\t\t\t</span>\n\t\t</template>\n\t</div>\n</template>\n\n<script setup lang="ts">\nimport CheckboxComp from "../../../checkboxComp.vue";\nimport { ITableData } from \'../../../../../../../../common/qCloudTemp/exporter\';\nimport { IModel } from \'../../../../../../domain/model/models\';\nimport { computed, ref } from "vue";\nimport { ModelContants } from "../../../../../../../../common/qCloudTemp/modelContants";\n\nconst props = defineProps<{\n\thandleItemCheckEvent: (item: ITableData) => void;\n\tstartScreen: IModel | undefined;\n\tversionDialog: (item: ITableData) => void;\n\thandleCollapse: (item: ITableData, childIterate?: boolean) => void;\n\titem: ITableData;\n\tmoduleVersionDialog: (item: ITableData) => void;\n}>()\n\nconst chevronClass = ref("mdi mdi-menu-down chevron");\nconst checked = ref(props.item.checked);\n\nfunction calculateClass() {\n\tprops.handleCollapse(props.item, true);\n\tchevronClass.value = `mdi mdi-menu${props.item.collapsed ? \'-right\' : \'-down\'} chevron`\n};\n\nfunction handleCheck() {\n\tprops.handleItemCheckEvent(props.item);\n\tchecked.value = props.item.checked;\n\treturn checked.value\n}\n\nfunction handleVersionDialog() {\n\tif (props.item.imported) {\n\t\tprops.moduleVersionDialog(props.item);\n\t} else {\n\t\tprops.versionDialog(props.item);\n\t}\n}\n\nconst iconLeft = computed(() => {\n\tconst level = props.item.level || 0;\n\treturn level * 25;\n});\n\nconst modelNameLeft = computed(() => {\n\tconst level = props.item.level || 0;\n\treturn level * 25;\n});\n\n<\/script>\n\n<style scoped>\n.row-container {\n\twidth: 100%;\n\theight: 36px;\n\tposition: relative;\n\tbackground: #ffffff 0% 0% no-repeat padding-box;\n\tborder: 1px solid #e0e0e0;\n}\n\n.app-tier-model-icon {\n\tposition: absolute;\n\twidth: 16px;\n\theight: 16px;\n\ttop: 6px;\n}\n\n.app-tier-model-name {\n\tposition: absolute;\n\ttop: 9px;\n\tfont: normal normal normal 14px/19px Roboto;\n\tcolor: #212121;\n}\n\n.app-tier-model-name.disabled {\n\tcolor: #D5D5D5;\n}\n\n.version-text {\n\tmargin: 10px 7px 10px auto;\n\tdisplay: table;\n\tfont: normal normal normal 12px/16px Roboto;\n\tcolor: #757575;\n\tcursor: pointer;\n\tuser-select: none;\n}\n\n.version-text.disabled {\n\tpointer-events: none;\n\tcursor: pointer;\n}\n\n.chevron {\n\tposition: absolute;\n\tcolor: #757575;\n\tfont-size: 24px;\n}\n\n.button-tooltip {\n\tvisibility: hidden;\n\tposition: absolute;\n\tbackground: #757575;\n\tcolor: #FFFFFF;\n\tfont-size: 11px;\n\tfont-family: \'Roboto\';\n\ttext-align: center;\n\tborder-radius: 4px;\n\tletter-spacing: 0.2px;\n\tpadding: 6px 8px 6px 8px;\n\ttop: 56px;\n\tleft: 63px;\n\topacity: 0;\n}\n\n.button-disable .save-button:hover+.button-tooltip,\n.start-screen:hover .button-tooltip,\n.row-container:hover .button-tooltip,\n.publish-info:hover .button-tooltip {\n\tvisibility: visible;\n\ttransition: opacity 0.3s ease-out 1s;\n\topacity: 1;\n}\n\n.bpmn-color {\n\tcolor: #007c77;\n}\n\n.process-color {\n\tcolor: #007c77;\n}\n\n.entity-designer-color {\n\tcolor: #e9724c;\n}\n\n.qjson-color {\n\tcolor: #449dd1;\n}\n\n.yaml-color {\n\tcolor: #449dd1;\n}\n\n.namedcomp-color {\n\tcolor: #212121;\n}\n\n.app-settings-color {\n\tcolor: #151233;\n}\n\n.js-color {\n\tcolor: #449dd1;\n}\n\n.css-color {\n\tcolor: #151233;\n}\n</style>'],sourceRoot:""}]);const l=s},34389:(e,n,t)=>{t.d(n,{Z:()=>l});var o=t(34663),i=t.n(o),a=t(7638),s=t.n(a)()(i());s.push([e.id,"\n.container[data-v-5bfad562] {\n    padding: 32px 20px 20px;\n}\n.settings-container[data-v-5bfad562] {\n    position: relative;\n    top: 0px;\n    left: 0px;\n}\n.custom-text[data-v-5bfad562] {\n    /* position: absolute; */\n    font-family: 'Roboto';\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 18px;\n    /* left: 24px; */\n    color: #212121;\n}\n\n/* .custom-text.title{\n    top: 92px;\n}\n\n.custom-text.environment{\n    top: 174px;\n} */\n.radio-button[data-v-5bfad562] {\n    position: absolute;\n    top: 60px;\n    left: 20px;\n    cursor: pointer;\n}\n.radio-text[data-v-5bfad562] {\n    position: absolute;\n    top: 59px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n    user-select: none;\n    cursor: pointer;\n}\n.existing-app-url[data-v-5bfad562] {\n    position: absolute;\n    width: 760px;\n    height: 40px;\n    top: 114px;\n    left: 20px;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #bcbcbc;\n    border-radius: 4px;\n    font: normal normal normal 14px/19px Roboto;\n    letter-spacing: 0px;\n    padding: 10px 0px 10px 10px;\n}\n.url-error[data-v-5bfad562] {\n    border: 1px solid red;\n}\n.url-disable[data-v-5bfad562] {\n    opacity: 0.5;\n}\n.existing-app-url[data-v-5bfad562]::placeholder {\n    color: #bcbcbc;\n    user-select: none;\n}\n.modules-selected-checkbox[data-v-5bfad562] {\n    cursor: pointer;\n}\n.modules-selected-text[data-v-5bfad562] {\n    font: normal normal normal 14px/19px Roboto;\n    color: #757575;\n    margin: 0 0 13px 30px;\n}\n\n/* .modules-selected-text.deploy {\n    top: 257px;\n} */\n.text-number[data-v-5bfad562] {\n    font: normal normal bold 14px/19px Roboto;\n    color: #212121;\n}\n.modules-datatable[data-v-5bfad562] {\n    width: 760px;\n    height: 288px;\n    border: 1px solid #bcbcbc;\n    overflow-x: hidden;\n    overflow-y: auto;\n    margin-bottom: 20px;\n}\n\n/* .modules-datatable.deploy {\n    top: 286px;\n} */\n.modules-datatable[data-v-5bfad562]::-webkit-scrollbar {\n    width: 4px;\n}\n.modules-datatable[data-v-5bfad562]::-webkit-scrollbar-thumb {\n    background: #bcbcbc 0% 0% no-repeat padding-box;\n    border-radius: 10px;\n}\n.modules-datatable[data-v-5bfad562]::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n.row-container[data-v-5bfad562] {\n    width: 100%;\n    height: 36px;\n    position: relative;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #e0e0e0;\n}\n.chevron[data-v-5bfad562] {\n    position: absolute;\n    left: 4px;\n    color: #757575;\n    font-size: 24px;\n}\n.chevron.disabled[data-v-5bfad562] {\n    pointer-events: none;\n    color: #D5D5D5;\n}\n.module-checkbox[data-v-5bfad562] {\n    position: absolute;\n    top: 10px;\n    left: 43px;\n    cursor: pointer;\n}\n.module-name[data-v-5bfad562] {\n    position: absolute;\n    top: 9px;\n    left: 69px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n.module-name.imported[data-v-5bfad562] {\n    top: 10px;\n    left: 87px;\n}\n.module-name.disabled[data-v-5bfad562] {\n    color: #D5D5D5;\n}\n.model-checkbox[data-v-5bfad562] {\n    position: absolute;\n    top: 10px;\n    left: 59px;\n    cursor: pointer;\n}\n.model-icon[data-v-5bfad562] {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 85px;\n}\n.app-tier-model-icon[data-v-5bfad562] {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 69px\n}\n.app-tier-model-name[data-v-5bfad562] {\n    position: absolute;\n    top: 10px;\n    left: 87px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n.app-tier-model-name.disabled[data-v-5bfad562] {\n    color: #D5D5D5;\n}\n.model-name[data-v-5bfad562] {\n    position: absolute;\n    top: 9px;\n    left: 103px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n.model-name.disabled[data-v-5bfad562] {\n    color: #D5D5D5;\n}\n.version-text[data-v-5bfad562] {\n    margin: 10px 7px 10px auto;\n    display: table;\n    font: normal normal normal 12px/16px Roboto;\n    color: #757575;\n    cursor: pointer;\n    user-select: none;\n}\n.version-text.disabled[data-v-5bfad562] {\n    pointer-events: none;\n    cursor: pointer;\n}\n.version-icon[data-v-5bfad562] {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #D5D5D5;\n}\n.version-icon.disabled[data-v-5bfad562] {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #EEEEEE;\n    pointer-events: none;\n    cursor: pointer;\n}\n.footer[data-v-5bfad562] {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: end;\n}\n.footer.deploy[data-v-5bfad562] {\n    position: relative;\n    width: 100%;\n}\n.footer.export[data-v-5bfad562] {\n    margin-top: 102px;\n}\n.cancel-button[data-v-5bfad562] {\n    border-radius: 4px;\n    user-select: none;\n    font-style: normal;\n    font-weight: 500;\n    font-family: \"ROBOTO\";\n    font-size: 15px;\n    color: #757575;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n.save-button[data-v-5bfad562] {\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    user-select: none;\n    font-weight: 500;\n    font-size: 15px;\n    color: #ffffff;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n.mobile-publish-text[data-v-5bfad562],\n.web-publish-text[data-v-5bfad562] {\n    padding: 5px 12px;\n    margin-bottom: 52px;\n    width: 100%;\n    color: #757575;\n    font-size: 14px;\n    background: #F5F5FA;\n    border-radius: 4px;\n    display: flex;\n    align-items: center;\n}\n.mobile-publish-text i[data-v-5bfad562],\n.web-publish-text i[data-v-5bfad562] {\n    font-size: 24px;\n    color: #151233;\n    margin-right: 4px;\n}\n.save-button.deploy[data-v-5bfad562] {\n    padding: 10px 16px;\n}\n.button-disable .save-button[data-v-5bfad562] {\n    color: #757575;\n    cursor: default;\n}\n.button-disable .save-button:hover+.button-tooltip[data-v-5bfad562],\n.start-screen:hover .button-tooltip[data-v-5bfad562],\n.row-container:hover .button-tooltip[data-v-5bfad562],\n.publish-info:hover .button-tooltip[data-v-5bfad562] {\n    visibility: visible;\n    transition: opacity 0.3s ease-out 1s;\n    opacity: 1;\n}\n.button-tooltip[data-v-5bfad562] {\n    visibility: hidden;\n    position: absolute;\n    background: #757575;\n    color: #FFFFFF;\n    font-size: 11px;\n    font-family: 'Roboto';\n    text-align: center;\n    border-radius: 4px;\n    letter-spacing: 0.2px;\n    padding: 6px 8px 6px 8px;\n    top: 56px;\n    left: 63px;\n    opacity: 0;\n}\n.publish-info[data-v-5bfad562] {\n    color: #757575;\n    font-size: 20px;\n    margin-left: 10px;\n}\n.select-environment[data-v-5bfad562] {\n    width: 100%;\n    font-size: 15px;\n    height: 40px;\n    line-height: 40px;\n    margin-top: 4px\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue"],names:[],mappings:";AAqiCA;IACI,uBAAuB;AAC3B;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;AACb;AAEA;IACI,wBAAwB;IACxB,qBAAqB;IACrB,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;AAClB;;AAEA;;;;;;GAMG;AAEH;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,2CAA2C;IAC3C,cAAc;IACd,iBAAiB;IACjB,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,UAAU;IACV,+CAA+C;IAC/C,yBAAyB;IACzB,kBAAkB;IAClB,2CAA2C;IAC3C,mBAAmB;IACnB,2BAA2B;AAC/B;AAEA;IACI,qBAAqB;AACzB;AAEA;IACI,YAAY;AAChB;AAEA;IACI,cAAc;IACd,iBAAiB;AACrB;AAEA;IACI,eAAe;AACnB;AAEA;IACI,2CAA2C;IAC3C,cAAc;IACd,qBAAqB;AAEzB;;AAEA;;GAEG;AAEH;IACI,yCAAyC;IACzC,cAAc;AAClB;AAEA;IACI,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;;GAEG;AAEH;IACI,UAAU;AACd;AAEA;IACI,+CAA+C;IAC/C,mBAAmB;AACvB;AAEA;IACI,gBAAgB;AACpB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,+CAA+C;IAC/C,yBAAyB;AAC7B;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,eAAe;AACnB;AAEA;IACI,oBAAoB;IACpB,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,UAAU;IACV,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,SAAS;IACT,UAAU;AACd;AAEA;IACI,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,UAAU;AACd;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR;AACJ;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,0BAA0B;IAC1B,cAAc;IACd,2CAA2C;IAC3C,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB;AAEA;IACI,oBAAoB;IACpB,eAAe;AACnB;AAEA;IACI,0DAA0D;IAC1D,cAAc;AAClB;AAEA;IACI,0DAA0D;IAC1D,cAAc;IACd,oBAAoB;IACpB,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,oBAAoB;AACxB;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;AAEA;IACI,iBAAiB;AACrB;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;IAChB,qBAAqB;IACrB,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,eAAe;AACnB;AAIA;IACI,+CAA+C;IAC/C,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,eAAe;AACnB;AAEA;;IAEI,iBAAiB;IACjB,mBAAmB;IACnB,WAAW;IACX,cAAc;IACd,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;AACvB;AAEA;;IAEI,eAAe;IACf,cAAc;IACd,iBAAiB;AACrB;AAEA;IACI,kBAAkB;AACtB;AAEA;IACI,cAAc;IACd,eAAe;AACnB;AAEA;;;;IAII,mBAAmB;IACnB,oCAAoC;IACpC,UAAU;AACd;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,cAAc;IACd,eAAe;IACf,qBAAqB;IACrB,kBAAkB;IAClB,kBAAkB;IAClB,qBAAqB;IACrB,wBAAwB;IACxB,SAAS;IACT,UAAU;IACV,UAAU;AACd;AAEA;IACI,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB;AAEA;IACI,WAAW;IACX,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB;AACJ",sourcesContent:['<template>\n    <div class="container">\n        <div>\n            <CheckboxComp :class="[\'modules-selected-checkbox\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']"\n                :minus="mainCheckboxState == false" :check="mainCheckboxState == true"\n                @click="handleModuleCountCheckboxEvent(mainCheckboxState == undefined)" />\n            <div :class="[\'modules-selected-text\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']">\n                <span class="text-number">{{ allChildCheckedModulesCount + anyChildCheckedModulesCount +\n                    checkedRootLevelModelsCount }}</span>\n                of <span class="text-number">{{ totalRootLevelCount }}</span> items selected\n            </div>\n        </div>\n        <div :class="[\'modules-datatable\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']" id="module-container-div"> </div>\n        <div v-if="props.screenType == \'Deploy\'" style="margin-bottom: 102px">\n            <div style="display: flex; align-items: center;">\n                <span class="custom-text environment"> Publish To </span>\n                <span class="publish-info">\n                    <i class="mdi mdi-information"></i>\n                    <span class="button-tooltip" style="top: 460px; left: 96px; z-index: 1; width: 231px;">Publish To\n                        options may change depending on the module type you choose.</span>\n                </span>\n            </div>\n\n            <CustomSelect :options="publishTargets" @input="onTargetSelect" :selectedOption="selectedTarget"\n                :default="selectedTarget" :disabledOptions="disabledOptions" selectedClass="selected-environment"\n                placeholder="Select the publish environment of your application" class="select-environment">\n            </CustomSelect>\n        </div>\n        \x3c!--         <div v-if="props.screenType == \'Deploy\' && !props.platformSelection.web && props.platformSelection.mobile"\n            class="mobile-publish-text">\n            <i class="mdi mdi-information"></i>\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\n        </div> --\x3e\n        <div :class="[\'footer\', props.screenType == \'Deploy\' ? \'deploy\' : \'export\']">\n            <div :class="[\'cancel-button\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']" @click="close">Cancel</div>\n            <div v-if="props.screenType == \'Export\'" :class="(saveButtonDisable ? \' button-disable\' : \'\')"\n                @click="!saveButtonDisable && save()">\n                <span class="save-button ">DOWNLOAD</span>\n                <span v-if="!isThereVersion" class="button-tooltip"\n                    style="top: -80px; left: 626px; z-index: 1; width: 145px;">There are no items ready to publish. At least\n                    one of your items must be ready to publish.</span>\n                <span v-else-if="!isStartScreenOK" class="button-tooltip"\n                    style="top: -46px; left: 640px; z-index: 1; width: 120px;">You need to include your start screen.</span>\n                <span v-else-if="!isAllDependenciesOK" class="button-tooltip"\n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">{{ dependencyErrorStr }}</span>\n            </div>\n            <div v-if="props.screenType == \'Deploy\'" :class="[(saveButtonDisable ? \' button-disable\' : \'\')]"\n                @click="!saveButtonDisable && save()">\n                <span class="save-button deploy">PUBLISH</span>\n                <span v-if="!isStartScreenOK" class="button-tooltip"\n                    style="top: -46px; left: 652px; z-index: 1; width: 120px;">You need to include your start screen.</span>\n                <span v-else-if="!selectedTarget" class="button-tooltip"\n                    style="top: -46px; left: 644px; z-index: 1; width: 123px;">You need to select a publish\n                    environment.</span>\n                <span v-else-if="!isThereVersion" class="button-tooltip"\n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">There are no items ready to publish. At least\n                    one of your items must be ready to publish.</span>\n                <span v-else-if="!isAllDependenciesOK" class="button-tooltip"\n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">{{ dependencyErrorStr }}</span>\n            </div>\n\n        </div>\n    </div>\n</template>\n\n\n<script setup lang="ts">\nimport { CryptoHelper } from "@stechquick/algae/lib/helpers/cryptoHelper";\nimport { PlateauHelper } from "@stechquick/algae/lib/helpers/plateau/plateauHelper";\nimport { computed, createApp, defineAsyncComponent, onMounted, ref } from "vue";\nimport { IOrganizationCloud } from "../../../../../../../common/clean/domain/useCases/ICloudProvider";\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem, ITableData } from "../../../../../../../common/qCloudTemp/exporter";\nimport { APP_ITEM_CONTENT_TYPES, IModuleRelatedModelItem, IQJsonAdditionals } from "../../../../../../../common/qCloudTemp/quickCloud";\nimport { container } from "../../../../../domain/core/diContainer";\nimport { IQCloudApi } from "../../../../../domain/infrastructure/IQCloudApi";\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from "../../../../../domain/model/models";\nimport { IDialog } from "../../../../../domain/presentation/IDialog";\nimport { ICreateExportJob } from "../../../../../domain/useCase/ICreateExportJob";\nimport { IDeployJobs } from "../../../../../domain/useCase/IDeployJobs";\nimport { IJobUtils } from "../../../../../domain/useCase/IJobUtils";\nimport { IListMultiModelVersions } from "../../../../../domain/useCase/IListMultiModelVersions";\nimport { IListMultiModuleVersions } from "../../../../../domain/useCase/IListMultiModuleVersions";\nimport { IPackJobs } from "../../../../../domain/useCase/IPackJobs";\nimport { IUseCaseExecutor } from "../../../../../domain/useCase/IUseCaseExecutor";\nimport { IViewModel } from "../../../../../domain/viewModel/IViewModel";\nimport { IViewModelManager } from "../../../../../domain/viewModel/IViewModelManager";\nimport { IBackofficeUseCase } from "../../../../../domain/useCase/IBackofficeUseCase";\nimport { IApplicationUseCase } from "../../../../../domain/useCase/IApplicationUseCase";\nimport ExportDialogItem from "./components/exportDialogItem.vue";\nimport CustomSelect from "../../../components/customSelect.vue";\nimport CheckboxComp from "../../checkboxComp.vue";\nimport { FileDisplayerExternalData, IFileDisplayerUseCase } from "../../../../../domain/useCase/IFileDisplayerUseCase";\nimport { ITreeItem } from "../../../../../domain/presentation/ITreeView";\nimport { PathHelper } from "../../../../../../../common/helpers/pathHelper";\nimport { FileExplorerConstants } from "../../../../../domain/useCase/IFileExplorer";\nimport { IObjectUseCase } from "../../../../../domain/useCase/IObjectUseCase";\n\ninterface IDeployScreenAdditionalProps {\n    screenType: "Export" | "Deploy";\n    platformSelection: IPlatformSelection;\n}\n\ninterface IDisabledOptions {\n    index: number\n    cause: string;\n}\n\nconst props = defineProps<IDeployScreenAdditionalProps>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\nconst fileDisplayerUseCase = container.resolve<IFileDisplayerUseCase>(IFileDisplayerUseCase);\nconst objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\n\n\nconst emit = defineEmits(["close"]);\nconst items = ref<Array<ITableData>>([]);\nconst validations = ref<boolean>(true);\nconst selectedTarget = ref<string>("");\nconst disabledOptions = ref<Array<IDisabledOptions>>();\nconst publishTargets = ref<Array<string>>();\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\nconst startScreen = ref<IModel>();\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>>();\nconst dependencyErrorStr = ref<string>(\'\');\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\n\n\nonMounted(async () => {\n    await executor.execute(async () => {\n        await Promise.all([\n            executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, {}).then(res => modelHistories.value = res),\n            executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, {}).then(res => importedModuleVersions.value = res)\n        ])\n        initDependencies();\n        handleItems();\n        props.screenType == "Deploy" && syncPublishTargets();\n        validations.value = validate();\n    }, { loading: true });\n})\n\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == "module" && e.allChildChecked).length);\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == "module" && !e.allChildChecked && e.anyChildChecked).length);\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != "module" && e.checked).length);\nconst totalRootLevelCount = computed(() => items.value.length);\nconst saveButtonDisable = computed(() => (props.screenType == "Deploy" && props.platformSelection.web && selectedTarget.value == "") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == "Export" && !validateStartScreen()) || !validateDependencies());\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true\n    : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0 ? false : undefined));\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\nconst isAllDependenciesOK = computed(validateDependencies)\nconst isStartScreenOK = computed(validateStartScreen)\n\nfunction validate() {\n    let result = true;\n    const modules = items.value.filter(e => e.type == "module" && e.anyChildChecked);\n    const appLayerItems = items.value.filter(e => e.type == "qjson" && e.checked);\n\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => (item.additionals as IQJsonAdditionals | undefined)?.isRootPage);\n    if (!startScreen.value)\n        return false;\n\n    if (props.screenType == "Deploy") {\n        if (modules.length > 0)\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == "entityDesigner" && f.checked)).length <= 0\n\n        let isApplicationWillDeploy = appLayerItems.length > 0;\n        if (isApplicationWillDeploy) {\n            result = appLayerItems\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\n        }\n    }\n\n    return result;\n}\n\nfunction validateDependencies() {\n    const checkMap = new Map<string, boolean>();\n    items.value.forEach(item => {\n        if (item.type == \'module\' && item.children && item.children.length > 0)\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\n        else\n            checkMap.set(item.id, item.checked == true)\n    })\n\n    const mustBeCheckedMap = new Map<string, Array<string>>();\n    dependencyMap.value?.forEach((deps, id) => {\n        if (!checkMap.get(id))\n            return;\n\n        deps.dependedTo.forEach(dependedId => {\n            if (checkMap.get(dependedId))\n                return;\n\n            if (mustBeCheckedMap.has(id)) {\n                const vals = mustBeCheckedMap.get(id)!\n                vals.push(dependedId)\n                mustBeCheckedMap.set(id, vals)\n            } else {\n                mustBeCheckedMap.set(id, [dependedId])\n            }\n\n        });\n    })\n\n    //set deps error text\n    const [firstItemID] = mustBeCheckedMap.keys();\n    if (firstItemID) {\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(\', \') : \'\';\n        dependencyErrorStr.value = `Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\n    }\n\n    return mustBeCheckedMap.size == 0\n}\n\nfunction validateStartScreen() {\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\n}\n\nfunction findItem(ID: string) {\n    for (const item of items.value) {\n        if (item.type != \'module\' && item.id == ID)\n            return item;\n        if (item.type == \'module\' && item.children && item.children.length > 0) {\n            const f = item.children.find(e => e.id == ID)\n            if (f) return f\n        }\n    }\n}\n\nfunction initDependencies() {\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>();\n    const depMap = new Map<string, Array<string>>();\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item) => {\n        if (item.objectType != "model") { return; }\n\n        const isImportedModule = item.owner.objectType == "module" && isModuleImported(item.owner as IModule);\n\n        let version: string | undefined;\n        if (!isImportedModule) {\n            const maxVersion = getItemMaxVersion(item)\n            if (!maxVersion)\n                return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\n            version = maxVersion;\n        }\n        else {\n            const moduleVersions = importedModuleVersions.value?.get(item.owner.ID)\n            const moduleVersion = (item.owner as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n\n            const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\n            version = importedModuleModel?.version\n        }\n\n        const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\n\n        depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\n    });\n\n\n    depMap.forEach((dependedTo, modelId) => {\n        const dependedBy = Array<string>();\n        depMap.forEach((dependencies, depModelId) => {\n            if (dependencies.some(depId => depId == modelId))\n                dependedBy.push(depModelId)\n        })\n        map.set(modelId, { dependedBy, dependedTo });\n    })\n    dependencyMap.value = map;\n}\n\nfunction isModelDepended(item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\n    if (!deps) return false;\n\n    return deps.some(dep => items.value.some(item => {\n        if (item.type == \'module\' && item.anyChildChecked) {\n            return item.children?.some(child => child.checked && child.id == dep)\n        }\n        return item.id == dep && item.checked\n    }));\n}\nfunction createDialogComp(item: ITableData) {\n    const newChild = createApp(ExportDialogItem, {\n        handleItemCheckEvent,\n        startScreen,\n        versionDialog,\n        handleCollapse,\n        item: item,\n        moduleVersionDialog\n    });\n    const mountEl = document.createElement(\'div\');\n    newChild.mount(mountEl);\n    const parentEl = document.getElementById(\'module-container-div\');\n    parentEl?.appendChild(mountEl);\n}\nfunction createAndAppendItem({ newItem }: { newItem: ITableData }) {\n    createDialogComp(newItem);\n    if ((newItem).type != "module") {\n        items.value.push(newItem);\n    }\n}\n\nfunction handleItems() {\n    // - App Settings\n    const appSettings = viewModel.studio.items.find(e => e.name == \'App Settings\');\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\n    const settingsData = appSettings && {\n        id: appSettings.ID,\n        name: appSettings.name,\n        checked: true,\n        disabled: false,\n        type: (appSettings as IModel).modelType,\n        version: !maxVersion ? \'latest\' : maxVersion\n    };\n    appSettings && settingsData && createAndAppendItem({ newItem: settingsData });\n\n\n    // - UI Settings\n    const uiSettingsID = CryptoHelper.CreateGuid();\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == "model" && item.usageType == "appSettings") as Array<IModel>;\n    const uiSettings: ITableData = {\n        id: uiSettingsID,\n        collapsed: true,\n        name: "UI Settings",\n        type: "module",\n        imported: false,\n        checked: true,\n        children: [{} as ITableData]\n    };\n    uiSettings && createAndAppendItem({ newItem: uiSettings });\n    uiSettings.children = uiSettingsModels.map(settings => {\n        const maxVersion = getItemMaxVersion(settings)\n        const childData = {\n            id: settings.ID,\n            parentId: uiSettingsID,\n            name: settings.name,\n            type: settings.modelType,\n            checked: maxVersion != undefined,\n            usageType: settings?.usageType,\n            disabled: !maxVersion,\n            version: maxVersion,\n            level: 2\n        }\n        createAndAppendItem({ newItem: childData });\n        return childData;\n    })\n    handleParentCheckedStatus(uiSettings, false);\n\n\n    // - Styled Components\n    const uiAssetID = CryptoHelper.CreateGuid();\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == "model" && item.usageType == "appAssetList") as Array<IModel>;\n    const uiAssetList: ITableData = {\n        id: uiAssetID,\n        collapsed: true,\n        name: "Styled Components",\n        type: "module",\n        imported: false,\n        anyChildChecked: true,\n        allChildChecked: true,\n        children: [{} as ITableData]\n    };\n    uiAssetList && createAndAppendItem({ newItem: uiAssetList });\n    uiAssetList.children = appAssetList.map((asset) => {\n        const childAsset = {\n            id: asset.ID,\n            parentId: uiAssetID,\n            name: asset.name,\n            type: asset.modelType,\n            checked: true,\n            usageType: asset?.usageType,\n            level: 2\n        }\n        createAndAppendItem({ newItem: childAsset });\n        return childAsset;\n    }) as Array<ITableData>;\n    handleParentCheckedStatus(uiAssetList, false);\n\n    \n    const treeItems = fileDisplayerUseCase.cloneFileExplorerTreeView({\n        displayFilterer: (item, hasChildren) => {\n            switch (item.ID) { case FileExplorerConstants.uiAssetListID: case FileExplorerConstants.uiSettingsID: return false; default: break; }\n            switch (item.objectType) {\n                case "application": return false;\n                case "module": return true;\n                case "folder": return hasChildren;\n                case "model": return true;\n            }\n        },\n    });\n\n    const converter = (treeItem: ITreeItem<FileDisplayerExternalData>, options: {ownerModule?: {isImportedModule: boolean;moduleVersion: string | undefined;relatedModelHistories: IModuleRelatedModelItem[] | undefined}}): ITableData => {\n        const item = treeItem.externalData;\n        if (item.objectType == "application") { throw new Error("unexpected item type"); }\n\n        const fullPath = objectUseCase.getFullPath(item, "self");\n        let level = fullPath.split("/").length - 1;\n\n        let tableData: ITableData;\n        switch(item.objectType) {\n            case "folder":\n                tableData = {\n                    id: item.ID, name: item.name, type: "folder", collapsed: true, level,\n                    children: treeItem.children?.map((item) => converter(item, { ownerModule: options.ownerModule })),\n                };\n                tableData.children?.forEach(child => child.parent = tableData);\n                handleParentCheckedStatus(tableData, false);\n                break;\n            case "model":\n                if (options.ownerModule) {\n                    tableData = { id: item.ID, name: item.name, type: item.modelType, level };\n                    if (!options.ownerModule.isImportedModule || item.isUnmodifiable) {\n                        const maxVersion = getItemMaxVersion(item);\n                        tableData = {\n                            ...tableData,\n                            checked: maxVersion ? true : item.isUnmodifiable,\n                            disabled: maxVersion ? false : !item.isUnmodifiable,\n                            version: item.isUnmodifiable ? \'latest\' : maxVersion,\n                        };\n                    } else {\n                        const importedModulesModel = options.ownerModule.relatedModelHistories?.find(e => e.modelID == item.ID)\n                        tableData = { ...tableData, checked: true, disabled: false, version: importedModulesModel?.version };\n                    }\n                } else {\n                    const maxVersion = getItemMaxVersion(item);\n                    tableData = {\n                        id: item.ID,\n                        name: item.name,\n                        checked: maxVersion ? true : item.isUnmodifiable,\n                        disabled: maxVersion ? false : !item.isUnmodifiable,\n                        type: item.modelType,\n                        version: item.isUnmodifiable ? \'latest\' : maxVersion,\n                        level,\n                    };\n                }\n                break;\n            case "module":\n                const isImportedModule = isModuleImported(item);\n                const moduleVersion = item.relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion;\n                const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\n                \n                tableData = {\n                    id: item.ID,\n                    collapsed: true,\n                    name: item.name,\n                    type: "module",\n                    imported: isImportedModule,\n                    version: moduleVersion,\n                    children: treeItem.children?.map((item) => converter(item, {ownerModule: {isImportedModule, moduleVersion, relatedModelHistories}})),\n                }\n                tableData.children?.forEach(child => child.parent = tableData);\n                handleParentCheckedStatus(tableData, false);\n                break;\n        }\n        return tableData;\n    };\n    const tableDatas = treeItems.map(item => converter(item, {}));\n\n    const traverser = (tableData: ITableData) => {\n        createAndAppendItem({ newItem: tableData });\n        tableData.children?.forEach(traverser);\n    };\n    \n    tableDatas.forEach(traverser);\n}\n\nfunction getItemMaxVersion(item: IModel): string | undefined {\n    if (!modelHistories.value?.has(item.ID))\n        return undefined;\n\n    const versions = modelHistories.value.get(item.ID);\n    if (!versions)\n        return undefined;\n\n    const findMaxVersion = (versions: Array<string>) => {\n        const versionNumbers = versions.map(v => {\n            const parts: Array<string> = v.split(".");\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\n        })\n\n        versionNumbers.sort((a, b) => b - a);\n\n        const maxVersion = versionNumbers[0];\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\n    }\n\n    return findMaxVersion(versions.map(e => e.version!));\n\n}\nfunction checkMaxVersionOfAllItems() {\n    let isThereVersion: boolean = false;\n    items.value.forEach(item => {\n        if (item.type == "module") {\n            item.children?.forEach(child => {\n                if (child.version) {\n                    isThereVersion = true;\n                }\n\n            })\n        }\n        else {\n            if (item.version) {\n                isThereVersion = true;\n            }\n        }\n    })\n    return isThereVersion;\n}\nfunction handleModuleCountCheckboxEvent(value: boolean) {\n    items.value.filter(e => !e.disabled).forEach((item) => {\n        item.checked = value;\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\n        if (allItemsCheckable) item.allChildChecked = value;\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\n    });\n\n    validations.value = validate();\n    props.screenType == "Deploy" && syncPublishTargets();\n}\n\nfunction handleCollapse(item: ITableData, childIterate?: boolean, collapsed?: boolean) {\n    item.collapsed = collapsed !== undefined ? collapsed : !item.collapsed;\n    if (childIterate) {\n        item.children?.forEach(child => {\n            const childEl = document.getElementById(child.id);\n            childEl!.style.display = item.collapsed ? "none" : "block";\n            handleCollapse(child, childIterate, item.collapsed);\n        })\n    }\n}\n\nfunction checkAllDependents(item: ITableData, recurseParent: boolean) {\n    if (item.disabled || item.checked) return;\n\n    item.checked = true\n    item.parent && handleParentCheckedStatus(item.parent, recurseParent);\n\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\n    if (!deps) return;\n\n    deps.forEach(dep => {\n        items.value.forEach(item => {\n            if (item.type == \'module\' && !item.allChildChecked) {\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\n                willCheckItem && checkAllDependents(willCheckItem, recurseParent);\n                handleParentCheckedStatus(item, recurseParent);\n                return;\n            }\n\n            if (!item.checked && item.id == dep) {\n                checkAllDependents(item, recurseParent);\n                item.parent && handleParentCheckedStatus(item.parent, recurseParent);\n            }\n        })\n    });\n}\n\nfunction handleItemCheckEvent(item: ITableData) {\n    if (item.disabled || isModelDepended(item) || item.name == \'App Settings\')\n        return;\n\n    if (item.type != "module" && item.type != "folder") {\n        if (item.checked) {\n            item.checked = false;\n            item.parent && handleParentCheckedStatus(item.parent, true);\n        } else {\n            checkAllDependents(item, true);\n        }\n    } else {\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\n            if (item.anyChildChecked) {\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\n                item.checked = false;\n                handleParentCheckedStatus(item, true);\n            } else {\n                item.children.forEach(child => checkAllDependents(child, true));\n                item.checked = true;\n            }\n        }\n        else {\n            item.checked = !item.checked;\n            item.allChildChecked = false;\n        }\n    }\n\n    validations.value = validate();\n    props.screenType == "Deploy" && syncPublishTargets();\n}\n\nfunction handleParentCheckedStatus(item: ITableData, recurseParent: boolean) {\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\n    if (recurseParent && item.parent) {\n        handleParentCheckedStatus(item.parent, true);\n    }\n}\n\nfunction syncPublishTargets() {\n    publishTargets.value = []; disabledOptions.value = [];\n\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\n    if (!targets)\n        return;\n\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\n    if (!isSelectAnyItem) {\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\n        const disabledOptionList = Array<IDisabledOptions>();\n        for (let i = 0; i < publishTargets.value.length; i++) {\n            disabledOptionList.push({ index: i, cause: "You need to include items to publish." })\n        }\n        disabledOptions.value = disabledOptionList;\n        return;\n    }\n\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\n\n    const disabledOptionList = Array<IDisabledOptions>();\n    for (let i = 0; i < sortedTargets.length; i++) {\n        const cause = sortedTargets[i].cause;\n        if (cause) disabledOptionList.push({ index: i, cause })\n    }\n    disabledOptions.value = disabledOptionList;\n    publishTargets.value = sortedTargets.map(e => e.optionName);\n\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : "";\n}\n\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\n    const list = Array<{ optionName: string, cause?: string }>();\n\n    Object.keys(targets).forEach(e => {\n        const key = e as keyof IOrganizationCloud;\n        const value = targets[key];\n        const optionName = cloudTargetMap(key)!;\n        if (!value)\n            return list.push({ optionName, cause: "You are not authorized to publish to this target." });\n\n\n        switch (key) {\n            case "azure":\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\n                    if (!items || items.length == 0) { return status; }\n                    for (const item of items) {\n                        if (item.checked || item.anyChildChecked) {\n                            if (item.type == "module") {\n                                status = traverseSelectedItems(status, item.children);\n                            }\n                            if (item.type == "entityDesigner" || item.type == "bpmn" || item.type == "process") {\n                                status = false;\n                                break;\n                            }\n                        }\n\n                    }\n                    return status;\n                }\n\n                const status = traverseSelectedItems(true, items.value);\n                if (!status)\n                    return list.push({ optionName, cause: "Entity and process models cannot be published to this target." });\n                break;\n            case "plateauGCP":\n                const modulesHasNotAnEDModel = items.value.filter(e => e.name != "UI Settings").find(e => e.type == "module" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == "bpmn" || c.type == "process")) && !e.children?.some(c => c.type == "entityDesigner" && c.checked))\n                if (modulesHasNotAnEDModel)\n                    return list.push({ optionName, cause: `This target not available. Selected module \'${modulesHasNotAnEDModel.name}\' has not any Data Model.` })\n                break;\n        }\n\n        list.push({ optionName });\n    })\n\n    return list;\n}\n\nfunction updateDependencyMap(newVersion: string, item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id);\n    dependencyMap.value?.set(item.id, {\n        dependedBy: deps?.dependedBy || Array<string>(),\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\n    })\n}\n\nfunction versionDialog(item: ITableData) {\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\n    const hasAnyVersion = modelHistories.value?.has(item.id);\n    const options = {\n        clickedNode, cb: (version: string) => {\n            item.version = version;\n            updateDependencyMap(version, item);\n        }\n    } as any;\n\n    if (hasAnyVersion) {\n        options.versions = modelHistories.value?.get(item.id)\n    }\n    dialog.showDialog(\n        defineAsyncComponent(() => import("../../application/modelVersionDialog.vue")),\n        { closable: true, title: "Change Version", width: "1080px", maxHeight: "500px", overflow: "auto" }, options\n    );\n}\n\n\nfunction moduleVersionDialog(item: ITableData) {\n    dialog.showDialog(\n        defineAsyncComponent(() => import("../../application/moduleVersionDialog.vue")),\n        { closable: true, title: "Change Version", width: "1080px", maxHeight: "500px", overflow: "auto" },\n        {\n            module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => {\n                item.version = moduleVersion.version;\n                item.children?.forEach(child => {\n                    const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\n                    child.version = modulesModel?.version\n                    updateDependencyMap(modulesModel?.version!, child);\n                })\n            }\n        }\n    );\n}\n\nfunction close() {\n    emit("close");\n}\n\nasync function save() {\n    executor.execute(\n        async () => {\n            const initAsGroup = async () => {\n                const groupID = CryptoHelper.CreateGuid();\n                await initHistory(groupID);\n                await packJob(groupID);\n                return groupID;\n            }\n\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\n\n            switch (props.screenType) {\n                case "Export":\n                    if (isFlowBackend) {\n                        const deployItems = await createAzureDeployItems();\n                        await packJobsUseCase.createPackJobs([{\n                            appID: viewModel.studio.appId,\n                            exportType: "qui",\n                            selectionData: deployItems\n                        }]);\n                        break;\n                    }\n\n                    const groupID = await initAsGroup();\n                    await createExportJob(groupID);\n                    break;\n                case "Deploy":\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\n                        case "plateauGCP":\n                            const groupID = await initAsGroup();\n                            await createDeployJob(groupID);\n                            break;\n                        case "azure":\n                            const deployItems = await createAzureDeployItems();\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\n                            break;\n                    }\n            }\n            const userMobileUsage = viewModel.user?.mobileUsage;\n            const appMobileUsage = currentApp.value?.mobileUsage;\n            if(props.platformSelection && props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: "backofficeUpdate"})\n                \n            }\n            emit("close");\n        },\n        { loading: true });\n}\n\nasync function createAzureDeployItems() {\n    const deployItems: Array<IExportItem> = [];\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\n        if (item.objectType != "model") { return; }\n        const path = item.owner.objectType == "module" ? PathHelper.join(item.owner.name, item.path) : item.path;\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\n        if (!items || items.length == 0) { return; }\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\n            if (item.type == "module" || item.type == "folder") {\n                traverseSelectedItems(item.children);\n                return;\n            }\n\n            const itemMap = itemIdObj[item.id];\n\n            const deployItem: IExportItem = {\n                id: item.id,\n                name: jobUtils.getFileFullname(itemMap.item),\n                path: itemMap.path,\n                type: jobUtils.getItemType(itemMap.item),\n                ver: item.version || "latest",\n                isRootPage: (itemMap.item.additionals as IQJsonAdditionals | undefined)?.isRootPage,\n                modulePrefix: itemMap.prefix,\n                ownerType: \'application\',\n                ownerName: viewModel.studio.appName,\n                size: itemMap.item.size,\n                createDate: itemMap.item.createDate,\n            };\n            deployItems.push(deployItem)\n        });\n    };\n\n    traverseSelectedItems(items.value);\n\n    return deployItems;\n}\n\nasync function initHistory(groupID: string) {\n    return qcloudApi.initPublishHistory({\n        appID: viewModel.studio.appId,\n        ID: groupID,\n        isMultiStep: true,\n        type: props.screenType == "Deploy" ? "publish" : "download",\n        cloudProvider: props.screenType == "Deploy" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\n        platform: props.platformSelection\n    });\n}\n\nasync function packJob(groupID: string) {\n    let exportItemMap = new Map<string, Array<IExportItem>>();\n    const appName = viewModel.studio.appName;\n\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\n        if (item.objectType != "model") { return; }\n        const path = item.owner.objectType == "module" ? PathHelper.join(item.owner.name, item.path) : item.path;\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const createExportObject = (tableItem: ITableData) => {\n        const itemMap = itemIdObj[tableItem.id];\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == itemMap.item.modelType);\n\n        const retVal: IExportItem = {\n            id: tableItem.id,\n            ver: tableItem.version!,\n            type: jobUtils.getItemType(itemMap.item),\n            path: itemMap.path,\n            modulePrefix: itemMap.prefix,\n            name: jobUtils.getFileFullname(itemMap.item),\n            ownerType: isAppItem ? \'application\' : (itemMap.item.owner.objectType as "module" | "application"),\n            ownerName: isAppItem ? appName : itemMap.item.owner.name,\n        };\n        return retVal;\n    }\n\n    const addToExportItem = (key: string, obj: IExportItem) => {\n        key = obj.ownerType == \'module\' ? `mdl-${key}` : key; // for same named module and app\n        let items = exportItemMap.get(key);\n        if (items && items.length > 0) {\n            items.push(obj);\n            exportItemMap.set(key, items);\n        } else\n            exportItemMap.set(key, [obj]);\n    }\n    const mapTableItemToExportItem = (tableItems: Array<ITableData>) => {\n        tableItems.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\n        if (asset.type == \'module\') {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                const obj = createExportObject(child);\n                if (obj.type == "entityDesigner")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n\n                const useSeperateModule = obj.type == \'bpmn\' || obj.type == \'entityDesigner\' || obj.type == \'process\';\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\n            });\n        } \n        else if(asset.type == "folder") {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                if(child.type == "folder") {\n                    mapTableItemToExportItem([child])\n                }\n                else {\n                    const obj = createExportObject(child);\n                    if (obj.type == "entityDesigner")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n                \n                    const useSeperateModule = obj.type == \'bpmn\' || obj.type == \'entityDesigner\' || obj.type == \'process\';\n                    addToExportItem(useSeperateModule ? asset.name : appName, obj);\n                }\n            });\n        }\n        else {\n            const obj = createExportObject(asset);\n            if (asset.type == \'qjson\') {\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == "model" && i.modelType == "qjson" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\n                obj.isRootPage = isRootPage ? true : undefined;\n            }\n            addToExportItem(appName, obj);\n        }\n    })\n    }\n    mapTableItemToExportItem(items.value);\n   \n\n    let jobs = Array<ICreateExportJobParam>();\n    exportItemMap.forEach((v, k) => {\n        jobs.push({\n            appID: viewModel.studio.appId,\n            exportType: "qui", //(props.platformSelection.mobile && !props.platformSelection.web) ? "model":  "qui"\n            selectionData: v,\n            cause: props.screenType == \'Export\' ? \'download\' : "publish",\n            layer: 0,\n            groupID: groupID,\n            platformSelection: props.platformSelection\n        })\n    })\n\n    await packJobsUseCase.createPackJobs(jobs);\n}\nasync function createExportJob(groupID: string) {\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\n        appID: viewModel.studio.appId,\n        exportType: "qui",\n        selectionData: [],\n        layer: 1,\n        groupID: groupID\n    });\n}\n\nasync function createDeployJob(groupID: string) {\n    //1-(n) L1- deployJob(build)\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\n        .then(jobs => jobs.jobs.map(e => {\n            const jobData = e.jobData as IExportJobData;\n            return {\n                ownerName: jobData.items[0].ownerName,\n                jobID: e.jobID,\n                type: jobData.items[0].ownerType,\n                mainDir: getDeployableArchiveRoot(jobData)\n            }\n        }));\n\n    if (!packages || packages.length <= 0)\n        return;\n\n    let buildJobs = Array<ICreateDeployJobParam>();\n    packages.forEach(pack => {\n        buildJobs.push({\n            appID: viewModel.studio.appId,\n            type: "build",\n            package: {\n                type: pack.type as DeployType,\n                name: pack.ownerName!,\n                mainDir: pack.mainDir,\n                zip: `${pack.jobID}.zip`,\n            },\n            layer: 1,\n            groupID: groupID\n        })\n    })\n\n    await deployJobsUseCase.createBuildJobs(buildJobs);\n\n    //2-(1) L2- deployJob(deployment)\n    let jobParam: ICreateDeployJobParam = {\n        appID: viewModel.studio.appId,\n        type: "deployment",\n        deployConfig: {\n            process: {\n                configModelIDs: getProcessConfigList(),\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == "bpmn"))\n            }\n        },\n        layer: 2,\n        groupID: groupID,\n        platformSelection: props.platformSelection\n    }\n\n    await deployJobsUseCase.startDeploymentJob(jobParam);\n}\n\nfunction getProcessConfigList() {\n    let processConfigList = Array<IProcessConfigModelItem>();\n    items.value.forEach((asset) => {\n        if (asset.type == "module" && asset.anyChildChecked && asset.children) {\n            const usingService = asset.children.find(c => c.type == "entityDesigner");\n            if (!usingService)\n                return;\n\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\n            asset.children.forEach(child => {\n                if (child.checked && child.type == "process") {\n                    processConfigList.push({\n                        moduleName: serviceName,\n                        model: {\n                            id: child.id,\n                            name: child.name,\n                            version: child.version!\n                        }\n                    })\n                }\n            })\n        }\n    })\n    return processConfigList;\n}\n\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\n    if (jobData.items[0].ownerType == "module") {\n        let edModel = jobData.items.find(e => e.type == "entityDesigner");\n        if (!edModel)\n            throw new Error("!!! this module cannot deploy. Because its have not a service");\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\n    }\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\n}\n\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\n    const map: Record<keyof IOrganizationCloud, string> = { azure: "Public Cloud", plateauGCP: "Plateau Platform Playground" };\n    if (pureVal) {\n        return Object.keys(map).find(e => {\n            if (map[e as keyof IOrganizationCloud] === name) {\n                return true;\n            }\n        })\n    } else {\n        let key = Object.keys(map).includes(name);\n        if (!key)\n            return;\n        return map[name as keyof IOrganizationCloud];\n    }\n}\n\nfunction onTargetSelect(value: string) {\n    selectedTarget.value = value\n}\n\nconst isModuleImported = (item: IModule) => {\n    return objectUseCase.isModuleImported(item);\n}\n\n<\/script>\n\n\n<style scoped>\n.container {\n    padding: 32px 20px 20px;\n}\n\n.settings-container {\n    position: relative;\n    top: 0px;\n    left: 0px;\n}\n\n.custom-text {\n    /* position: absolute; */\n    font-family: \'Roboto\';\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 18px;\n    /* left: 24px; */\n    color: #212121;\n}\n\n/* .custom-text.title{\n    top: 92px;\n}\n\n.custom-text.environment{\n    top: 174px;\n} */\n\n.radio-button {\n    position: absolute;\n    top: 60px;\n    left: 20px;\n    cursor: pointer;\n}\n\n.radio-text {\n    position: absolute;\n    top: 59px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n    user-select: none;\n    cursor: pointer;\n}\n\n.existing-app-url {\n    position: absolute;\n    width: 760px;\n    height: 40px;\n    top: 114px;\n    left: 20px;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #bcbcbc;\n    border-radius: 4px;\n    font: normal normal normal 14px/19px Roboto;\n    letter-spacing: 0px;\n    padding: 10px 0px 10px 10px;\n}\n\n.url-error {\n    border: 1px solid red;\n}\n\n.url-disable {\n    opacity: 0.5;\n}\n\n.existing-app-url::placeholder {\n    color: #bcbcbc;\n    user-select: none;\n}\n\n.modules-selected-checkbox {\n    cursor: pointer;\n}\n\n.modules-selected-text {\n    font: normal normal normal 14px/19px Roboto;\n    color: #757575;\n    margin: 0 0 13px 30px;\n    ;\n}\n\n/* .modules-selected-text.deploy {\n    top: 257px;\n} */\n\n.text-number {\n    font: normal normal bold 14px/19px Roboto;\n    color: #212121;\n}\n\n.modules-datatable {\n    width: 760px;\n    height: 288px;\n    border: 1px solid #bcbcbc;\n    overflow-x: hidden;\n    overflow-y: auto;\n    margin-bottom: 20px;\n}\n\n/* .modules-datatable.deploy {\n    top: 286px;\n} */\n\n.modules-datatable::-webkit-scrollbar {\n    width: 4px;\n}\n\n.modules-datatable::-webkit-scrollbar-thumb {\n    background: #bcbcbc 0% 0% no-repeat padding-box;\n    border-radius: 10px;\n}\n\n.modules-datatable::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n\n.row-container {\n    width: 100%;\n    height: 36px;\n    position: relative;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #e0e0e0;\n}\n\n.chevron {\n    position: absolute;\n    left: 4px;\n    color: #757575;\n    font-size: 24px;\n}\n\n.chevron.disabled {\n    pointer-events: none;\n    color: #D5D5D5;\n}\n\n.module-checkbox {\n    position: absolute;\n    top: 10px;\n    left: 43px;\n    cursor: pointer;\n}\n\n.module-name {\n    position: absolute;\n    top: 9px;\n    left: 69px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.module-name.imported {\n    top: 10px;\n    left: 87px;\n}\n\n.module-name.disabled {\n    color: #D5D5D5;\n}\n\n.model-checkbox {\n    position: absolute;\n    top: 10px;\n    left: 59px;\n    cursor: pointer;\n}\n\n.model-icon {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 85px;\n}\n\n.app-tier-model-icon {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 69px\n}\n\n.app-tier-model-name {\n    position: absolute;\n    top: 10px;\n    left: 87px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.app-tier-model-name.disabled {\n    color: #D5D5D5;\n}\n\n.model-name {\n    position: absolute;\n    top: 9px;\n    left: 103px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.model-name.disabled {\n    color: #D5D5D5;\n}\n\n.version-text {\n    margin: 10px 7px 10px auto;\n    display: table;\n    font: normal normal normal 12px/16px Roboto;\n    color: #757575;\n    cursor: pointer;\n    user-select: none;\n}\n\n.version-text.disabled {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.version-icon {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #D5D5D5;\n}\n\n.version-icon.disabled {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #EEEEEE;\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.footer {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: end;\n}\n\n.footer.deploy {\n    position: relative;\n    width: 100%;\n}\n\n.footer.export {\n    margin-top: 102px;\n}\n\n.cancel-button {\n    border-radius: 4px;\n    user-select: none;\n    font-style: normal;\n    font-weight: 500;\n    font-family: "ROBOTO";\n    font-size: 15px;\n    color: #757575;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n\n\n\n.save-button {\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    user-select: none;\n    font-weight: 500;\n    font-size: 15px;\n    color: #ffffff;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n\n.mobile-publish-text,\n.web-publish-text {\n    padding: 5px 12px;\n    margin-bottom: 52px;\n    width: 100%;\n    color: #757575;\n    font-size: 14px;\n    background: #F5F5FA;\n    border-radius: 4px;\n    display: flex;\n    align-items: center;\n}\n\n.mobile-publish-text i,\n.web-publish-text i {\n    font-size: 24px;\n    color: #151233;\n    margin-right: 4px;\n}\n\n.save-button.deploy {\n    padding: 10px 16px;\n}\n\n.button-disable .save-button {\n    color: #757575;\n    cursor: default;\n}\n\n.button-disable .save-button:hover+.button-tooltip,\n.start-screen:hover .button-tooltip,\n.row-container:hover .button-tooltip,\n.publish-info:hover .button-tooltip {\n    visibility: visible;\n    transition: opacity 0.3s ease-out 1s;\n    opacity: 1;\n}\n\n.button-tooltip {\n    visibility: hidden;\n    position: absolute;\n    background: #757575;\n    color: #FFFFFF;\n    font-size: 11px;\n    font-family: \'Roboto\';\n    text-align: center;\n    border-radius: 4px;\n    letter-spacing: 0.2px;\n    padding: 6px 8px 6px 8px;\n    top: 56px;\n    left: 63px;\n    opacity: 0;\n}\n\n.publish-info {\n    color: #757575;\n    font-size: 20px;\n    margin-left: 10px;\n}\n\n.select-environment {\n    width: 100%;\n    font-size: 15px;\n    height: 40px;\n    line-height: 40px;\n    margin-top: 4px\n}\n</style>\n\n<style>\n.selected-environment {\n    background-color: transparent;\n    border-radius: 4px;\n    border: 1px solid #BCBCBC;\n    color: #212121;\n    padding-left: 12px;\n}\n\n.custom-placeholder:empty:before {\n    color: #BCBCBC !important;\n    font-weight: 400;\n}\n\n.custom-select .items .option {\n    font-size: 14px;\n    padding-left: 12px;\n    line-height: 32px;\n}\n\n.custom-select .items .option:hover {\n    background-color: #EEEEEE;\n    color: #212121;\n}\n\n.custom-select .items .option.disabled:hover {\n    background-color: #FFFFFF;\n    color: #212121;\n}\n\n.custom-select.select-environment .items {\n    margin-top: 4px;\n    color: #212121;\n    border-radius: 4px;\n    border: 1px solid #E3E3E3;\n    overflow: hidden;\n    background-color: #FFFFFF;\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\n    position: static !important;\n}\n</style>\n'],sourceRoot:""}]);const l=s},84300:(e,n,t)=>{t.d(n,{Z:()=>l});var o=t(34663),i=t.n(o),a=t(7638),s=t.n(a)()(i());s.push([e.id,"\n.selected-environment {\n    background-color: transparent;\n    border-radius: 4px;\n    border: 1px solid #BCBCBC;\n    color: #212121;\n    padding-left: 12px;\n}\n.custom-placeholder:empty:before {\n    color: #BCBCBC !important;\n    font-weight: 400;\n}\n.custom-select .items .option {\n    font-size: 14px;\n    padding-left: 12px;\n    line-height: 32px;\n}\n.custom-select .items .option:hover {\n    background-color: #EEEEEE;\n    color: #212121;\n}\n.custom-select .items .option.disabled:hover {\n    background-color: #FFFFFF;\n    color: #212121;\n}\n.custom-select.select-environment .items {\n    margin-top: 4px;\n    color: #212121;\n    border-radius: 4px;\n    border: 1px solid #E3E3E3;\n    overflow: hidden;\n    background-color: #FFFFFF;\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\n    position: static !important;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue"],names:[],mappings:";AAg4CA;IACI,6BAA6B;IAC7B,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,yBAAyB;IACzB,gBAAgB;AACpB;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,yBAAyB;IACzB,0CAA0C;IAC1C,2BAA2B;AAC/B",sourcesContent:['<template>\n    <div class="container">\n        <div>\n            <CheckboxComp :class="[\'modules-selected-checkbox\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']"\n                :minus="mainCheckboxState == false" :check="mainCheckboxState == true"\n                @click="handleModuleCountCheckboxEvent(mainCheckboxState == undefined)" />\n            <div :class="[\'modules-selected-text\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']">\n                <span class="text-number">{{ allChildCheckedModulesCount + anyChildCheckedModulesCount +\n                    checkedRootLevelModelsCount }}</span>\n                of <span class="text-number">{{ totalRootLevelCount }}</span> items selected\n            </div>\n        </div>\n        <div :class="[\'modules-datatable\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']" id="module-container-div"> </div>\n        <div v-if="props.screenType == \'Deploy\'" style="margin-bottom: 102px">\n            <div style="display: flex; align-items: center;">\n                <span class="custom-text environment"> Publish To </span>\n                <span class="publish-info">\n                    <i class="mdi mdi-information"></i>\n                    <span class="button-tooltip" style="top: 460px; left: 96px; z-index: 1; width: 231px;">Publish To\n                        options may change depending on the module type you choose.</span>\n                </span>\n            </div>\n\n            <CustomSelect :options="publishTargets" @input="onTargetSelect" :selectedOption="selectedTarget"\n                :default="selectedTarget" :disabledOptions="disabledOptions" selectedClass="selected-environment"\n                placeholder="Select the publish environment of your application" class="select-environment">\n            </CustomSelect>\n        </div>\n        \x3c!--         <div v-if="props.screenType == \'Deploy\' && !props.platformSelection.web && props.platformSelection.mobile"\n            class="mobile-publish-text">\n            <i class="mdi mdi-information"></i>\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\n        </div> --\x3e\n        <div :class="[\'footer\', props.screenType == \'Deploy\' ? \'deploy\' : \'export\']">\n            <div :class="[\'cancel-button\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']" @click="close">Cancel</div>\n            <div v-if="props.screenType == \'Export\'" :class="(saveButtonDisable ? \' button-disable\' : \'\')"\n                @click="!saveButtonDisable && save()">\n                <span class="save-button ">DOWNLOAD</span>\n                <span v-if="!isThereVersion" class="button-tooltip"\n                    style="top: -80px; left: 626px; z-index: 1; width: 145px;">There are no items ready to publish. At least\n                    one of your items must be ready to publish.</span>\n                <span v-else-if="!isStartScreenOK" class="button-tooltip"\n                    style="top: -46px; left: 640px; z-index: 1; width: 120px;">You need to include your start screen.</span>\n                <span v-else-if="!isAllDependenciesOK" class="button-tooltip"\n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">{{ dependencyErrorStr }}</span>\n            </div>\n            <div v-if="props.screenType == \'Deploy\'" :class="[(saveButtonDisable ? \' button-disable\' : \'\')]"\n                @click="!saveButtonDisable && save()">\n                <span class="save-button deploy">PUBLISH</span>\n                <span v-if="!isStartScreenOK" class="button-tooltip"\n                    style="top: -46px; left: 652px; z-index: 1; width: 120px;">You need to include your start screen.</span>\n                <span v-else-if="!selectedTarget" class="button-tooltip"\n                    style="top: -46px; left: 644px; z-index: 1; width: 123px;">You need to select a publish\n                    environment.</span>\n                <span v-else-if="!isThereVersion" class="button-tooltip"\n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">There are no items ready to publish. At least\n                    one of your items must be ready to publish.</span>\n                <span v-else-if="!isAllDependenciesOK" class="button-tooltip"\n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">{{ dependencyErrorStr }}</span>\n            </div>\n\n        </div>\n    </div>\n</template>\n\n\n<script setup lang="ts">\nimport { CryptoHelper } from "@stechquick/algae/lib/helpers/cryptoHelper";\nimport { PlateauHelper } from "@stechquick/algae/lib/helpers/plateau/plateauHelper";\nimport { computed, createApp, defineAsyncComponent, onMounted, ref } from "vue";\nimport { IOrganizationCloud } from "../../../../../../../common/clean/domain/useCases/ICloudProvider";\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem, ITableData } from "../../../../../../../common/qCloudTemp/exporter";\nimport { APP_ITEM_CONTENT_TYPES, IModuleRelatedModelItem, IQJsonAdditionals } from "../../../../../../../common/qCloudTemp/quickCloud";\nimport { container } from "../../../../../domain/core/diContainer";\nimport { IQCloudApi } from "../../../../../domain/infrastructure/IQCloudApi";\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from "../../../../../domain/model/models";\nimport { IDialog } from "../../../../../domain/presentation/IDialog";\nimport { ICreateExportJob } from "../../../../../domain/useCase/ICreateExportJob";\nimport { IDeployJobs } from "../../../../../domain/useCase/IDeployJobs";\nimport { IJobUtils } from "../../../../../domain/useCase/IJobUtils";\nimport { IListMultiModelVersions } from "../../../../../domain/useCase/IListMultiModelVersions";\nimport { IListMultiModuleVersions } from "../../../../../domain/useCase/IListMultiModuleVersions";\nimport { IPackJobs } from "../../../../../domain/useCase/IPackJobs";\nimport { IUseCaseExecutor } from "../../../../../domain/useCase/IUseCaseExecutor";\nimport { IViewModel } from "../../../../../domain/viewModel/IViewModel";\nimport { IViewModelManager } from "../../../../../domain/viewModel/IViewModelManager";\nimport { IBackofficeUseCase } from "../../../../../domain/useCase/IBackofficeUseCase";\nimport { IApplicationUseCase } from "../../../../../domain/useCase/IApplicationUseCase";\nimport ExportDialogItem from "./components/exportDialogItem.vue";\nimport CustomSelect from "../../../components/customSelect.vue";\nimport CheckboxComp from "../../checkboxComp.vue";\nimport { FileDisplayerExternalData, IFileDisplayerUseCase } from "../../../../../domain/useCase/IFileDisplayerUseCase";\nimport { ITreeItem } from "../../../../../domain/presentation/ITreeView";\nimport { PathHelper } from "../../../../../../../common/helpers/pathHelper";\nimport { FileExplorerConstants } from "../../../../../domain/useCase/IFileExplorer";\nimport { IObjectUseCase } from "../../../../../domain/useCase/IObjectUseCase";\n\ninterface IDeployScreenAdditionalProps {\n    screenType: "Export" | "Deploy";\n    platformSelection: IPlatformSelection;\n}\n\ninterface IDisabledOptions {\n    index: number\n    cause: string;\n}\n\nconst props = defineProps<IDeployScreenAdditionalProps>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\nconst fileDisplayerUseCase = container.resolve<IFileDisplayerUseCase>(IFileDisplayerUseCase);\nconst objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\n\n\nconst emit = defineEmits(["close"]);\nconst items = ref<Array<ITableData>>([]);\nconst validations = ref<boolean>(true);\nconst selectedTarget = ref<string>("");\nconst disabledOptions = ref<Array<IDisabledOptions>>();\nconst publishTargets = ref<Array<string>>();\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\nconst startScreen = ref<IModel>();\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>>();\nconst dependencyErrorStr = ref<string>(\'\');\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\n\n\nonMounted(async () => {\n    await executor.execute(async () => {\n        await Promise.all([\n            executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, {}).then(res => modelHistories.value = res),\n            executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, {}).then(res => importedModuleVersions.value = res)\n        ])\n        initDependencies();\n        handleItems();\n        props.screenType == "Deploy" && syncPublishTargets();\n        validations.value = validate();\n    }, { loading: true });\n})\n\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == "module" && e.allChildChecked).length);\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == "module" && !e.allChildChecked && e.anyChildChecked).length);\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != "module" && e.checked).length);\nconst totalRootLevelCount = computed(() => items.value.length);\nconst saveButtonDisable = computed(() => (props.screenType == "Deploy" && props.platformSelection.web && selectedTarget.value == "") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == "Export" && !validateStartScreen()) || !validateDependencies());\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true\n    : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0 ? false : undefined));\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\nconst isAllDependenciesOK = computed(validateDependencies)\nconst isStartScreenOK = computed(validateStartScreen)\n\nfunction validate() {\n    let result = true;\n    const modules = items.value.filter(e => e.type == "module" && e.anyChildChecked);\n    const appLayerItems = items.value.filter(e => e.type == "qjson" && e.checked);\n\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => (item.additionals as IQJsonAdditionals | undefined)?.isRootPage);\n    if (!startScreen.value)\n        return false;\n\n    if (props.screenType == "Deploy") {\n        if (modules.length > 0)\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == "entityDesigner" && f.checked)).length <= 0\n\n        let isApplicationWillDeploy = appLayerItems.length > 0;\n        if (isApplicationWillDeploy) {\n            result = appLayerItems\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\n        }\n    }\n\n    return result;\n}\n\nfunction validateDependencies() {\n    const checkMap = new Map<string, boolean>();\n    items.value.forEach(item => {\n        if (item.type == \'module\' && item.children && item.children.length > 0)\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\n        else\n            checkMap.set(item.id, item.checked == true)\n    })\n\n    const mustBeCheckedMap = new Map<string, Array<string>>();\n    dependencyMap.value?.forEach((deps, id) => {\n        if (!checkMap.get(id))\n            return;\n\n        deps.dependedTo.forEach(dependedId => {\n            if (checkMap.get(dependedId))\n                return;\n\n            if (mustBeCheckedMap.has(id)) {\n                const vals = mustBeCheckedMap.get(id)!\n                vals.push(dependedId)\n                mustBeCheckedMap.set(id, vals)\n            } else {\n                mustBeCheckedMap.set(id, [dependedId])\n            }\n\n        });\n    })\n\n    //set deps error text\n    const [firstItemID] = mustBeCheckedMap.keys();\n    if (firstItemID) {\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(\', \') : \'\';\n        dependencyErrorStr.value = `Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\n    }\n\n    return mustBeCheckedMap.size == 0\n}\n\nfunction validateStartScreen() {\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\n}\n\nfunction findItem(ID: string) {\n    for (const item of items.value) {\n        if (item.type != \'module\' && item.id == ID)\n            return item;\n        if (item.type == \'module\' && item.children && item.children.length > 0) {\n            const f = item.children.find(e => e.id == ID)\n            if (f) return f\n        }\n    }\n}\n\nfunction initDependencies() {\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>();\n    const depMap = new Map<string, Array<string>>();\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item) => {\n        if (item.objectType != "model") { return; }\n\n        const isImportedModule = item.owner.objectType == "module" && isModuleImported(item.owner as IModule);\n\n        let version: string | undefined;\n        if (!isImportedModule) {\n            const maxVersion = getItemMaxVersion(item)\n            if (!maxVersion)\n                return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\n            version = maxVersion;\n        }\n        else {\n            const moduleVersions = importedModuleVersions.value?.get(item.owner.ID)\n            const moduleVersion = (item.owner as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n\n            const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\n            version = importedModuleModel?.version\n        }\n\n        const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\n\n        depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\n    });\n\n\n    depMap.forEach((dependedTo, modelId) => {\n        const dependedBy = Array<string>();\n        depMap.forEach((dependencies, depModelId) => {\n            if (dependencies.some(depId => depId == modelId))\n                dependedBy.push(depModelId)\n        })\n        map.set(modelId, { dependedBy, dependedTo });\n    })\n    dependencyMap.value = map;\n}\n\nfunction isModelDepended(item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\n    if (!deps) return false;\n\n    return deps.some(dep => items.value.some(item => {\n        if (item.type == \'module\' && item.anyChildChecked) {\n            return item.children?.some(child => child.checked && child.id == dep)\n        }\n        return item.id == dep && item.checked\n    }));\n}\nfunction createDialogComp(item: ITableData) {\n    const newChild = createApp(ExportDialogItem, {\n        handleItemCheckEvent,\n        startScreen,\n        versionDialog,\n        handleCollapse,\n        item: item,\n        moduleVersionDialog\n    });\n    const mountEl = document.createElement(\'div\');\n    newChild.mount(mountEl);\n    const parentEl = document.getElementById(\'module-container-div\');\n    parentEl?.appendChild(mountEl);\n}\nfunction createAndAppendItem({ newItem }: { newItem: ITableData }) {\n    createDialogComp(newItem);\n    if ((newItem).type != "module") {\n        items.value.push(newItem);\n    }\n}\n\nfunction handleItems() {\n    // - App Settings\n    const appSettings = viewModel.studio.items.find(e => e.name == \'App Settings\');\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\n    const settingsData = appSettings && {\n        id: appSettings.ID,\n        name: appSettings.name,\n        checked: true,\n        disabled: false,\n        type: (appSettings as IModel).modelType,\n        version: !maxVersion ? \'latest\' : maxVersion\n    };\n    appSettings && settingsData && createAndAppendItem({ newItem: settingsData });\n\n\n    // - UI Settings\n    const uiSettingsID = CryptoHelper.CreateGuid();\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == "model" && item.usageType == "appSettings") as Array<IModel>;\n    const uiSettings: ITableData = {\n        id: uiSettingsID,\n        collapsed: true,\n        name: "UI Settings",\n        type: "module",\n        imported: false,\n        checked: true,\n        children: [{} as ITableData]\n    };\n    uiSettings && createAndAppendItem({ newItem: uiSettings });\n    uiSettings.children = uiSettingsModels.map(settings => {\n        const maxVersion = getItemMaxVersion(settings)\n        const childData = {\n            id: settings.ID,\n            parentId: uiSettingsID,\n            name: settings.name,\n            type: settings.modelType,\n            checked: maxVersion != undefined,\n            usageType: settings?.usageType,\n            disabled: !maxVersion,\n            version: maxVersion,\n            level: 2\n        }\n        createAndAppendItem({ newItem: childData });\n        return childData;\n    })\n    handleParentCheckedStatus(uiSettings, false);\n\n\n    // - Styled Components\n    const uiAssetID = CryptoHelper.CreateGuid();\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == "model" && item.usageType == "appAssetList") as Array<IModel>;\n    const uiAssetList: ITableData = {\n        id: uiAssetID,\n        collapsed: true,\n        name: "Styled Components",\n        type: "module",\n        imported: false,\n        anyChildChecked: true,\n        allChildChecked: true,\n        children: [{} as ITableData]\n    };\n    uiAssetList && createAndAppendItem({ newItem: uiAssetList });\n    uiAssetList.children = appAssetList.map((asset) => {\n        const childAsset = {\n            id: asset.ID,\n            parentId: uiAssetID,\n            name: asset.name,\n            type: asset.modelType,\n            checked: true,\n            usageType: asset?.usageType,\n            level: 2\n        }\n        createAndAppendItem({ newItem: childAsset });\n        return childAsset;\n    }) as Array<ITableData>;\n    handleParentCheckedStatus(uiAssetList, false);\n\n    \n    const treeItems = fileDisplayerUseCase.cloneFileExplorerTreeView({\n        displayFilterer: (item, hasChildren) => {\n            switch (item.ID) { case FileExplorerConstants.uiAssetListID: case FileExplorerConstants.uiSettingsID: return false; default: break; }\n            switch (item.objectType) {\n                case "application": return false;\n                case "module": return true;\n                case "folder": return hasChildren;\n                case "model": return true;\n            }\n        },\n    });\n\n    const converter = (treeItem: ITreeItem<FileDisplayerExternalData>, options: {ownerModule?: {isImportedModule: boolean;moduleVersion: string | undefined;relatedModelHistories: IModuleRelatedModelItem[] | undefined}}): ITableData => {\n        const item = treeItem.externalData;\n        if (item.objectType == "application") { throw new Error("unexpected item type"); }\n\n        const fullPath = objectUseCase.getFullPath(item, "self");\n        let level = fullPath.split("/").length - 1;\n\n        let tableData: ITableData;\n        switch(item.objectType) {\n            case "folder":\n                tableData = {\n                    id: item.ID, name: item.name, type: "folder", collapsed: true, level,\n                    children: treeItem.children?.map((item) => converter(item, { ownerModule: options.ownerModule })),\n                };\n                tableData.children?.forEach(child => child.parent = tableData);\n                handleParentCheckedStatus(tableData, false);\n                break;\n            case "model":\n                if (options.ownerModule) {\n                    tableData = { id: item.ID, name: item.name, type: item.modelType, level };\n                    if (!options.ownerModule.isImportedModule || item.isUnmodifiable) {\n                        const maxVersion = getItemMaxVersion(item);\n                        tableData = {\n                            ...tableData,\n                            checked: maxVersion ? true : item.isUnmodifiable,\n                            disabled: maxVersion ? false : !item.isUnmodifiable,\n                            version: item.isUnmodifiable ? \'latest\' : maxVersion,\n                        };\n                    } else {\n                        const importedModulesModel = options.ownerModule.relatedModelHistories?.find(e => e.modelID == item.ID)\n                        tableData = { ...tableData, checked: true, disabled: false, version: importedModulesModel?.version };\n                    }\n                } else {\n                    const maxVersion = getItemMaxVersion(item);\n                    tableData = {\n                        id: item.ID,\n                        name: item.name,\n                        checked: maxVersion ? true : item.isUnmodifiable,\n                        disabled: maxVersion ? false : !item.isUnmodifiable,\n                        type: item.modelType,\n                        version: item.isUnmodifiable ? \'latest\' : maxVersion,\n                        level,\n                    };\n                }\n                break;\n            case "module":\n                const isImportedModule = isModuleImported(item);\n                const moduleVersion = item.relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion;\n                const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\n                \n                tableData = {\n                    id: item.ID,\n                    collapsed: true,\n                    name: item.name,\n                    type: "module",\n                    imported: isImportedModule,\n                    version: moduleVersion,\n                    children: treeItem.children?.map((item) => converter(item, {ownerModule: {isImportedModule, moduleVersion, relatedModelHistories}})),\n                }\n                tableData.children?.forEach(child => child.parent = tableData);\n                handleParentCheckedStatus(tableData, false);\n                break;\n        }\n        return tableData;\n    };\n    const tableDatas = treeItems.map(item => converter(item, {}));\n\n    const traverser = (tableData: ITableData) => {\n        createAndAppendItem({ newItem: tableData });\n        tableData.children?.forEach(traverser);\n    };\n    \n    tableDatas.forEach(traverser);\n}\n\nfunction getItemMaxVersion(item: IModel): string | undefined {\n    if (!modelHistories.value?.has(item.ID))\n        return undefined;\n\n    const versions = modelHistories.value.get(item.ID);\n    if (!versions)\n        return undefined;\n\n    const findMaxVersion = (versions: Array<string>) => {\n        const versionNumbers = versions.map(v => {\n            const parts: Array<string> = v.split(".");\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\n        })\n\n        versionNumbers.sort((a, b) => b - a);\n\n        const maxVersion = versionNumbers[0];\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\n    }\n\n    return findMaxVersion(versions.map(e => e.version!));\n\n}\nfunction checkMaxVersionOfAllItems() {\n    let isThereVersion: boolean = false;\n    items.value.forEach(item => {\n        if (item.type == "module") {\n            item.children?.forEach(child => {\n                if (child.version) {\n                    isThereVersion = true;\n                }\n\n            })\n        }\n        else {\n            if (item.version) {\n                isThereVersion = true;\n            }\n        }\n    })\n    return isThereVersion;\n}\nfunction handleModuleCountCheckboxEvent(value: boolean) {\n    items.value.filter(e => !e.disabled).forEach((item) => {\n        item.checked = value;\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\n        if (allItemsCheckable) item.allChildChecked = value;\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\n    });\n\n    validations.value = validate();\n    props.screenType == "Deploy" && syncPublishTargets();\n}\n\nfunction handleCollapse(item: ITableData, childIterate?: boolean, collapsed?: boolean) {\n    item.collapsed = collapsed !== undefined ? collapsed : !item.collapsed;\n    if (childIterate) {\n        item.children?.forEach(child => {\n            const childEl = document.getElementById(child.id);\n            childEl!.style.display = item.collapsed ? "none" : "block";\n            handleCollapse(child, childIterate, item.collapsed);\n        })\n    }\n}\n\nfunction checkAllDependents(item: ITableData, recurseParent: boolean) {\n    if (item.disabled || item.checked) return;\n\n    item.checked = true\n    item.parent && handleParentCheckedStatus(item.parent, recurseParent);\n\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\n    if (!deps) return;\n\n    deps.forEach(dep => {\n        items.value.forEach(item => {\n            if (item.type == \'module\' && !item.allChildChecked) {\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\n                willCheckItem && checkAllDependents(willCheckItem, recurseParent);\n                handleParentCheckedStatus(item, recurseParent);\n                return;\n            }\n\n            if (!item.checked && item.id == dep) {\n                checkAllDependents(item, recurseParent);\n                item.parent && handleParentCheckedStatus(item.parent, recurseParent);\n            }\n        })\n    });\n}\n\nfunction handleItemCheckEvent(item: ITableData) {\n    if (item.disabled || isModelDepended(item) || item.name == \'App Settings\')\n        return;\n\n    if (item.type != "module" && item.type != "folder") {\n        if (item.checked) {\n            item.checked = false;\n            item.parent && handleParentCheckedStatus(item.parent, true);\n        } else {\n            checkAllDependents(item, true);\n        }\n    } else {\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\n            if (item.anyChildChecked) {\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\n                item.checked = false;\n                handleParentCheckedStatus(item, true);\n            } else {\n                item.children.forEach(child => checkAllDependents(child, true));\n                item.checked = true;\n            }\n        }\n        else {\n            item.checked = !item.checked;\n            item.allChildChecked = false;\n        }\n    }\n\n    validations.value = validate();\n    props.screenType == "Deploy" && syncPublishTargets();\n}\n\nfunction handleParentCheckedStatus(item: ITableData, recurseParent: boolean) {\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\n    if (recurseParent && item.parent) {\n        handleParentCheckedStatus(item.parent, true);\n    }\n}\n\nfunction syncPublishTargets() {\n    publishTargets.value = []; disabledOptions.value = [];\n\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\n    if (!targets)\n        return;\n\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\n    if (!isSelectAnyItem) {\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\n        const disabledOptionList = Array<IDisabledOptions>();\n        for (let i = 0; i < publishTargets.value.length; i++) {\n            disabledOptionList.push({ index: i, cause: "You need to include items to publish." })\n        }\n        disabledOptions.value = disabledOptionList;\n        return;\n    }\n\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\n\n    const disabledOptionList = Array<IDisabledOptions>();\n    for (let i = 0; i < sortedTargets.length; i++) {\n        const cause = sortedTargets[i].cause;\n        if (cause) disabledOptionList.push({ index: i, cause })\n    }\n    disabledOptions.value = disabledOptionList;\n    publishTargets.value = sortedTargets.map(e => e.optionName);\n\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : "";\n}\n\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\n    const list = Array<{ optionName: string, cause?: string }>();\n\n    Object.keys(targets).forEach(e => {\n        const key = e as keyof IOrganizationCloud;\n        const value = targets[key];\n        const optionName = cloudTargetMap(key)!;\n        if (!value)\n            return list.push({ optionName, cause: "You are not authorized to publish to this target." });\n\n\n        switch (key) {\n            case "azure":\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\n                    if (!items || items.length == 0) { return status; }\n                    for (const item of items) {\n                        if (item.checked || item.anyChildChecked) {\n                            if (item.type == "module") {\n                                status = traverseSelectedItems(status, item.children);\n                            }\n                            if (item.type == "entityDesigner" || item.type == "bpmn" || item.type == "process") {\n                                status = false;\n                                break;\n                            }\n                        }\n\n                    }\n                    return status;\n                }\n\n                const status = traverseSelectedItems(true, items.value);\n                if (!status)\n                    return list.push({ optionName, cause: "Entity and process models cannot be published to this target." });\n                break;\n            case "plateauGCP":\n                const modulesHasNotAnEDModel = items.value.filter(e => e.name != "UI Settings").find(e => e.type == "module" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == "bpmn" || c.type == "process")) && !e.children?.some(c => c.type == "entityDesigner" && c.checked))\n                if (modulesHasNotAnEDModel)\n                    return list.push({ optionName, cause: `This target not available. Selected module \'${modulesHasNotAnEDModel.name}\' has not any Data Model.` })\n                break;\n        }\n\n        list.push({ optionName });\n    })\n\n    return list;\n}\n\nfunction updateDependencyMap(newVersion: string, item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id);\n    dependencyMap.value?.set(item.id, {\n        dependedBy: deps?.dependedBy || Array<string>(),\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\n    })\n}\n\nfunction versionDialog(item: ITableData) {\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\n    const hasAnyVersion = modelHistories.value?.has(item.id);\n    const options = {\n        clickedNode, cb: (version: string) => {\n            item.version = version;\n            updateDependencyMap(version, item);\n        }\n    } as any;\n\n    if (hasAnyVersion) {\n        options.versions = modelHistories.value?.get(item.id)\n    }\n    dialog.showDialog(\n        defineAsyncComponent(() => import("../../application/modelVersionDialog.vue")),\n        { closable: true, title: "Change Version", width: "1080px", maxHeight: "500px", overflow: "auto" }, options\n    );\n}\n\n\nfunction moduleVersionDialog(item: ITableData) {\n    dialog.showDialog(\n        defineAsyncComponent(() => import("../../application/moduleVersionDialog.vue")),\n        { closable: true, title: "Change Version", width: "1080px", maxHeight: "500px", overflow: "auto" },\n        {\n            module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => {\n                item.version = moduleVersion.version;\n                item.children?.forEach(child => {\n                    const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\n                    child.version = modulesModel?.version\n                    updateDependencyMap(modulesModel?.version!, child);\n                })\n            }\n        }\n    );\n}\n\nfunction close() {\n    emit("close");\n}\n\nasync function save() {\n    executor.execute(\n        async () => {\n            const initAsGroup = async () => {\n                const groupID = CryptoHelper.CreateGuid();\n                await initHistory(groupID);\n                await packJob(groupID);\n                return groupID;\n            }\n\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\n\n            switch (props.screenType) {\n                case "Export":\n                    if (isFlowBackend) {\n                        const deployItems = await createAzureDeployItems();\n                        await packJobsUseCase.createPackJobs([{\n                            appID: viewModel.studio.appId,\n                            exportType: "qui",\n                            selectionData: deployItems\n                        }]);\n                        break;\n                    }\n\n                    const groupID = await initAsGroup();\n                    await createExportJob(groupID);\n                    break;\n                case "Deploy":\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\n                        case "plateauGCP":\n                            const groupID = await initAsGroup();\n                            await createDeployJob(groupID);\n                            break;\n                        case "azure":\n                            const deployItems = await createAzureDeployItems();\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\n                            break;\n                    }\n            }\n            const userMobileUsage = viewModel.user?.mobileUsage;\n            const appMobileUsage = currentApp.value?.mobileUsage;\n            if(props.platformSelection && props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: "backofficeUpdate"})\n                \n            }\n            emit("close");\n        },\n        { loading: true });\n}\n\nasync function createAzureDeployItems() {\n    const deployItems: Array<IExportItem> = [];\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\n        if (item.objectType != "model") { return; }\n        const path = item.owner.objectType == "module" ? PathHelper.join(item.owner.name, item.path) : item.path;\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\n        if (!items || items.length == 0) { return; }\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\n            if (item.type == "module" || item.type == "folder") {\n                traverseSelectedItems(item.children);\n                return;\n            }\n\n            const itemMap = itemIdObj[item.id];\n\n            const deployItem: IExportItem = {\n                id: item.id,\n                name: jobUtils.getFileFullname(itemMap.item),\n                path: itemMap.path,\n                type: jobUtils.getItemType(itemMap.item),\n                ver: item.version || "latest",\n                isRootPage: (itemMap.item.additionals as IQJsonAdditionals | undefined)?.isRootPage,\n                modulePrefix: itemMap.prefix,\n                ownerType: \'application\',\n                ownerName: viewModel.studio.appName,\n                size: itemMap.item.size,\n                createDate: itemMap.item.createDate,\n            };\n            deployItems.push(deployItem)\n        });\n    };\n\n    traverseSelectedItems(items.value);\n\n    return deployItems;\n}\n\nasync function initHistory(groupID: string) {\n    return qcloudApi.initPublishHistory({\n        appID: viewModel.studio.appId,\n        ID: groupID,\n        isMultiStep: true,\n        type: props.screenType == "Deploy" ? "publish" : "download",\n        cloudProvider: props.screenType == "Deploy" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\n        platform: props.platformSelection\n    });\n}\n\nasync function packJob(groupID: string) {\n    let exportItemMap = new Map<string, Array<IExportItem>>();\n    const appName = viewModel.studio.appName;\n\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\n        if (item.objectType != "model") { return; }\n        const path = item.owner.objectType == "module" ? PathHelper.join(item.owner.name, item.path) : item.path;\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const createExportObject = (tableItem: ITableData) => {\n        const itemMap = itemIdObj[tableItem.id];\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == itemMap.item.modelType);\n\n        const retVal: IExportItem = {\n            id: tableItem.id,\n            ver: tableItem.version!,\n            type: jobUtils.getItemType(itemMap.item),\n            path: itemMap.path,\n            modulePrefix: itemMap.prefix,\n            name: jobUtils.getFileFullname(itemMap.item),\n            ownerType: isAppItem ? \'application\' : (itemMap.item.owner.objectType as "module" | "application"),\n            ownerName: isAppItem ? appName : itemMap.item.owner.name,\n        };\n        return retVal;\n    }\n\n    const addToExportItem = (key: string, obj: IExportItem) => {\n        key = obj.ownerType == \'module\' ? `mdl-${key}` : key; // for same named module and app\n        let items = exportItemMap.get(key);\n        if (items && items.length > 0) {\n            items.push(obj);\n            exportItemMap.set(key, items);\n        } else\n            exportItemMap.set(key, [obj]);\n    }\n    const mapTableItemToExportItem = (tableItems: Array<ITableData>) => {\n        tableItems.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\n        if (asset.type == \'module\') {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                const obj = createExportObject(child);\n                if (obj.type == "entityDesigner")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n\n                const useSeperateModule = obj.type == \'bpmn\' || obj.type == \'entityDesigner\' || obj.type == \'process\';\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\n            });\n        } \n        else if(asset.type == "folder") {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                if(child.type == "folder") {\n                    mapTableItemToExportItem([child])\n                }\n                else {\n                    const obj = createExportObject(child);\n                    if (obj.type == "entityDesigner")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n                \n                    const useSeperateModule = obj.type == \'bpmn\' || obj.type == \'entityDesigner\' || obj.type == \'process\';\n                    addToExportItem(useSeperateModule ? asset.name : appName, obj);\n                }\n            });\n        }\n        else {\n            const obj = createExportObject(asset);\n            if (asset.type == \'qjson\') {\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == "model" && i.modelType == "qjson" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\n                obj.isRootPage = isRootPage ? true : undefined;\n            }\n            addToExportItem(appName, obj);\n        }\n    })\n    }\n    mapTableItemToExportItem(items.value);\n   \n\n    let jobs = Array<ICreateExportJobParam>();\n    exportItemMap.forEach((v, k) => {\n        jobs.push({\n            appID: viewModel.studio.appId,\n            exportType: "qui", //(props.platformSelection.mobile && !props.platformSelection.web) ? "model":  "qui"\n            selectionData: v,\n            cause: props.screenType == \'Export\' ? \'download\' : "publish",\n            layer: 0,\n            groupID: groupID,\n            platformSelection: props.platformSelection\n        })\n    })\n\n    await packJobsUseCase.createPackJobs(jobs);\n}\nasync function createExportJob(groupID: string) {\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\n        appID: viewModel.studio.appId,\n        exportType: "qui",\n        selectionData: [],\n        layer: 1,\n        groupID: groupID\n    });\n}\n\nasync function createDeployJob(groupID: string) {\n    //1-(n) L1- deployJob(build)\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\n        .then(jobs => jobs.jobs.map(e => {\n            const jobData = e.jobData as IExportJobData;\n            return {\n                ownerName: jobData.items[0].ownerName,\n                jobID: e.jobID,\n                type: jobData.items[0].ownerType,\n                mainDir: getDeployableArchiveRoot(jobData)\n            }\n        }));\n\n    if (!packages || packages.length <= 0)\n        return;\n\n    let buildJobs = Array<ICreateDeployJobParam>();\n    packages.forEach(pack => {\n        buildJobs.push({\n            appID: viewModel.studio.appId,\n            type: "build",\n            package: {\n                type: pack.type as DeployType,\n                name: pack.ownerName!,\n                mainDir: pack.mainDir,\n                zip: `${pack.jobID}.zip`,\n            },\n            layer: 1,\n            groupID: groupID\n        })\n    })\n\n    await deployJobsUseCase.createBuildJobs(buildJobs);\n\n    //2-(1) L2- deployJob(deployment)\n    let jobParam: ICreateDeployJobParam = {\n        appID: viewModel.studio.appId,\n        type: "deployment",\n        deployConfig: {\n            process: {\n                configModelIDs: getProcessConfigList(),\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == "bpmn"))\n            }\n        },\n        layer: 2,\n        groupID: groupID,\n        platformSelection: props.platformSelection\n    }\n\n    await deployJobsUseCase.startDeploymentJob(jobParam);\n}\n\nfunction getProcessConfigList() {\n    let processConfigList = Array<IProcessConfigModelItem>();\n    items.value.forEach((asset) => {\n        if (asset.type == "module" && asset.anyChildChecked && asset.children) {\n            const usingService = asset.children.find(c => c.type == "entityDesigner");\n            if (!usingService)\n                return;\n\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\n            asset.children.forEach(child => {\n                if (child.checked && child.type == "process") {\n                    processConfigList.push({\n                        moduleName: serviceName,\n                        model: {\n                            id: child.id,\n                            name: child.name,\n                            version: child.version!\n                        }\n                    })\n                }\n            })\n        }\n    })\n    return processConfigList;\n}\n\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\n    if (jobData.items[0].ownerType == "module") {\n        let edModel = jobData.items.find(e => e.type == "entityDesigner");\n        if (!edModel)\n            throw new Error("!!! this module cannot deploy. Because its have not a service");\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\n    }\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\n}\n\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\n    const map: Record<keyof IOrganizationCloud, string> = { azure: "Public Cloud", plateauGCP: "Plateau Platform Playground" };\n    if (pureVal) {\n        return Object.keys(map).find(e => {\n            if (map[e as keyof IOrganizationCloud] === name) {\n                return true;\n            }\n        })\n    } else {\n        let key = Object.keys(map).includes(name);\n        if (!key)\n            return;\n        return map[name as keyof IOrganizationCloud];\n    }\n}\n\nfunction onTargetSelect(value: string) {\n    selectedTarget.value = value\n}\n\nconst isModuleImported = (item: IModule) => {\n    return objectUseCase.isModuleImported(item);\n}\n\n<\/script>\n\n\n<style scoped>\n.container {\n    padding: 32px 20px 20px;\n}\n\n.settings-container {\n    position: relative;\n    top: 0px;\n    left: 0px;\n}\n\n.custom-text {\n    /* position: absolute; */\n    font-family: \'Roboto\';\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 18px;\n    /* left: 24px; */\n    color: #212121;\n}\n\n/* .custom-text.title{\n    top: 92px;\n}\n\n.custom-text.environment{\n    top: 174px;\n} */\n\n.radio-button {\n    position: absolute;\n    top: 60px;\n    left: 20px;\n    cursor: pointer;\n}\n\n.radio-text {\n    position: absolute;\n    top: 59px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n    user-select: none;\n    cursor: pointer;\n}\n\n.existing-app-url {\n    position: absolute;\n    width: 760px;\n    height: 40px;\n    top: 114px;\n    left: 20px;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #bcbcbc;\n    border-radius: 4px;\n    font: normal normal normal 14px/19px Roboto;\n    letter-spacing: 0px;\n    padding: 10px 0px 10px 10px;\n}\n\n.url-error {\n    border: 1px solid red;\n}\n\n.url-disable {\n    opacity: 0.5;\n}\n\n.existing-app-url::placeholder {\n    color: #bcbcbc;\n    user-select: none;\n}\n\n.modules-selected-checkbox {\n    cursor: pointer;\n}\n\n.modules-selected-text {\n    font: normal normal normal 14px/19px Roboto;\n    color: #757575;\n    margin: 0 0 13px 30px;\n    ;\n}\n\n/* .modules-selected-text.deploy {\n    top: 257px;\n} */\n\n.text-number {\n    font: normal normal bold 14px/19px Roboto;\n    color: #212121;\n}\n\n.modules-datatable {\n    width: 760px;\n    height: 288px;\n    border: 1px solid #bcbcbc;\n    overflow-x: hidden;\n    overflow-y: auto;\n    margin-bottom: 20px;\n}\n\n/* .modules-datatable.deploy {\n    top: 286px;\n} */\n\n.modules-datatable::-webkit-scrollbar {\n    width: 4px;\n}\n\n.modules-datatable::-webkit-scrollbar-thumb {\n    background: #bcbcbc 0% 0% no-repeat padding-box;\n    border-radius: 10px;\n}\n\n.modules-datatable::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n\n.row-container {\n    width: 100%;\n    height: 36px;\n    position: relative;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #e0e0e0;\n}\n\n.chevron {\n    position: absolute;\n    left: 4px;\n    color: #757575;\n    font-size: 24px;\n}\n\n.chevron.disabled {\n    pointer-events: none;\n    color: #D5D5D5;\n}\n\n.module-checkbox {\n    position: absolute;\n    top: 10px;\n    left: 43px;\n    cursor: pointer;\n}\n\n.module-name {\n    position: absolute;\n    top: 9px;\n    left: 69px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.module-name.imported {\n    top: 10px;\n    left: 87px;\n}\n\n.module-name.disabled {\n    color: #D5D5D5;\n}\n\n.model-checkbox {\n    position: absolute;\n    top: 10px;\n    left: 59px;\n    cursor: pointer;\n}\n\n.model-icon {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 85px;\n}\n\n.app-tier-model-icon {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 69px\n}\n\n.app-tier-model-name {\n    position: absolute;\n    top: 10px;\n    left: 87px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.app-tier-model-name.disabled {\n    color: #D5D5D5;\n}\n\n.model-name {\n    position: absolute;\n    top: 9px;\n    left: 103px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.model-name.disabled {\n    color: #D5D5D5;\n}\n\n.version-text {\n    margin: 10px 7px 10px auto;\n    display: table;\n    font: normal normal normal 12px/16px Roboto;\n    color: #757575;\n    cursor: pointer;\n    user-select: none;\n}\n\n.version-text.disabled {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.version-icon {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #D5D5D5;\n}\n\n.version-icon.disabled {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #EEEEEE;\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.footer {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: end;\n}\n\n.footer.deploy {\n    position: relative;\n    width: 100%;\n}\n\n.footer.export {\n    margin-top: 102px;\n}\n\n.cancel-button {\n    border-radius: 4px;\n    user-select: none;\n    font-style: normal;\n    font-weight: 500;\n    font-family: "ROBOTO";\n    font-size: 15px;\n    color: #757575;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n\n\n\n.save-button {\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    user-select: none;\n    font-weight: 500;\n    font-size: 15px;\n    color: #ffffff;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n\n.mobile-publish-text,\n.web-publish-text {\n    padding: 5px 12px;\n    margin-bottom: 52px;\n    width: 100%;\n    color: #757575;\n    font-size: 14px;\n    background: #F5F5FA;\n    border-radius: 4px;\n    display: flex;\n    align-items: center;\n}\n\n.mobile-publish-text i,\n.web-publish-text i {\n    font-size: 24px;\n    color: #151233;\n    margin-right: 4px;\n}\n\n.save-button.deploy {\n    padding: 10px 16px;\n}\n\n.button-disable .save-button {\n    color: #757575;\n    cursor: default;\n}\n\n.button-disable .save-button:hover+.button-tooltip,\n.start-screen:hover .button-tooltip,\n.row-container:hover .button-tooltip,\n.publish-info:hover .button-tooltip {\n    visibility: visible;\n    transition: opacity 0.3s ease-out 1s;\n    opacity: 1;\n}\n\n.button-tooltip {\n    visibility: hidden;\n    position: absolute;\n    background: #757575;\n    color: #FFFFFF;\n    font-size: 11px;\n    font-family: \'Roboto\';\n    text-align: center;\n    border-radius: 4px;\n    letter-spacing: 0.2px;\n    padding: 6px 8px 6px 8px;\n    top: 56px;\n    left: 63px;\n    opacity: 0;\n}\n\n.publish-info {\n    color: #757575;\n    font-size: 20px;\n    margin-left: 10px;\n}\n\n.select-environment {\n    width: 100%;\n    font-size: 15px;\n    height: 40px;\n    line-height: 40px;\n    margin-top: 4px\n}\n</style>\n\n<style>\n.selected-environment {\n    background-color: transparent;\n    border-radius: 4px;\n    border: 1px solid #BCBCBC;\n    color: #212121;\n    padding-left: 12px;\n}\n\n.custom-placeholder:empty:before {\n    color: #BCBCBC !important;\n    font-weight: 400;\n}\n\n.custom-select .items .option {\n    font-size: 14px;\n    padding-left: 12px;\n    line-height: 32px;\n}\n\n.custom-select .items .option:hover {\n    background-color: #EEEEEE;\n    color: #212121;\n}\n\n.custom-select .items .option.disabled:hover {\n    background-color: #FFFFFF;\n    color: #212121;\n}\n\n.custom-select.select-environment .items {\n    margin-top: 4px;\n    color: #212121;\n    border-radius: 4px;\n    border: 1px solid #E3E3E3;\n    overflow: hidden;\n    background-color: #FFFFFF;\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\n    position: static !important;\n}\n</style>\n'],sourceRoot:""}]);const l=s},43147:(e,n)=>{n.b=void 0;var t=function(){function e(){}return e.purify=function(e){return e.replace(/[^a-zA-Z0-9]/g,"").toLowerCase()},e.getPlateauEnvironmentName=function(n,t){if(!n||!t)throw new Error("Environment name prefix or application name not found!!!");return""+(n=(n.endsWith("-")?n:n+"-").toLowerCase())+e.purify(t)},e.getQuiPackageNameFromAppName=function(n){return e.purify(n)+"-qui"},e.getApplicationUINameFromQuiPkg=function(n){return e.purify(n.replace("-qui","ui"))},e.getApplicationHostNamePrefix=function(n){return e.purify(n)+"ui"},e.getServiceNameFromModel=function(n){return e.purify(n.replace(".dm",""))},e}();n.b=t},80338:(e,n,t)=>{t.d(n,{I:()=>o});class o{static join(e,n){let t=(e.endsWith("/")?e.substring(0,e.length-1):e)+"/"+(n.startsWith("/")?n.substring(1):n);return t=t.endsWith("/")?t.substring(0,t.length-1):t,t}}},66059:(e,n,t)=>{let o;t.d(n,{T:()=>i,o:()=>p});const i=o={quick:{modelKeys:{self:"qjson"}},flow:{modelKeys:{design:"flow-design",runtime:"flow-runtime"}},flowEntity:{modelKeys:{single:"flow-entity"}}},a={color:"#449DD1",icon:"mdi mdi-cog-outline"},s={color:"#212121",icon:"mdi mdi-image-outline "},l={color:"#212121",icon:"mdi mdi-format-font "},r={color:"#007C77",icon:"mdi mdi-puzzle"},d={qjson:e=>e&&"quickComponent"==e.qjsonType?{color:"#449DD1",icon:"mdi mdi-shape-outline"}:{color:"#449DD1",icon:"mdi mdi-palette"},css:{color:"#151233",icon:"mdi mdi-music-accidental-sharp"},js:a,ts:a,yaml:a,entityDesigner:{color:"#E9724C",icon:"mdi mdi-database"},bpmn:{color:"#007C77",icon:"mdi mdi-vector-polyline"},process:{color:"#007C77",icon:"mdi mdi-auto-fix"},flow:{color:"#007C77",icon:"mdi mdi-step-forward"},flowEntity:{color:"blue",icon:"mdi mdi-step-forward"},namedComponent:{color:"#212121",icon:"mdi mdi-cube-outline"},step:new Error("unimplemented for namedComponent"),jpeg:s,jpg:s,png:s,svg:s,gif:s,woff:l,woff2:l,ttf:l,otf:l,lottie:s,appSettings:{color:"#151233",icon:"mdi mdi-cog"},json:new Error("unimplemented for json")};class p{static getModelVisualInfo(e,n){const t="module"==e?r:d[e];if(t instanceof Error)throw t;return"function"==typeof t?t(n):t}}},55398:(e,n,t)=>{t.d(n,{P1:()=>i,P4:()=>o,X$:()=>a});const o=["png","jpg","jpeg","svg","gif"],i=["qjson","css","png","jpg","jpeg","svg","gif","lottie","json","woff","woff2","ttf","otf"],a={alert:"Alert Component",pipeline:"Pipeline",loading:"Loading Component",settings:"Settings File",localProxy:"Local Proxy File",contSvc:"Container Services File",css:"Style File",compList:"Component List",globalLocalization:"Global Localization",assetList:"Asset List"}},19508:(e,n,t)=>{t.d(n,{h:()=>o});const o=Symbol.for("IApplicationUseCase")},20559:(e,n,t)=>{t.d(n,{X:()=>i,q:()=>o});const o=["7vipy7ub-v6v1-jnvx-mcdw-2avf532","kc5tkrxi-knql-fbnx-zokw-6yymka7b"],i=Symbol.for("IBackofficeUseCase")},89139:(e,n,t)=>{t.d(n,{i:()=>o});const o=Symbol.for("ICreateExportJob")},31705:(e,n,t)=>{t.d(n,{F:()=>o});const o=Symbol.for("IDeployJobs")},29307:(e,n,t)=>{t.d(n,{w:()=>o});const o=Symbol.for("IFileDisplayerUseCase")},81616:(e,n,t)=>{t.d(n,{y:()=>o});const o=Symbol.for("IJobUtils")},62376:(e,n,t)=>{t.d(n,{q:()=>o});const o=Symbol.for("IListMultiModelVersions")},17379:(e,n,t)=>{t.d(n,{y:()=>o});const o=Symbol.for("IListMultiModuleVersions")},26580:(e,n,t)=>{t.d(n,{k:()=>o});const o=Symbol.for("IPackJobs")},84438:(e,n,t)=>{t.r(n),t.d(n,{default:()=>ge});var o=t(71093),i=t(66190),a=t(73843),s=t(30647),l=t(43147),r=t(46233),d=t(55398),p=t(5627),c=t(28246),m=t(91056),u=t(89139),h=t(31705),f=t(81616),b=t(62376),A=t(17379),v=t(26580),y=t(83487),I=t(88613),C=t(54848),g=t(20559),x=t(19508),D=t(74137),k=t(66059);const M=e=>((0,o.dD)("data-v-ada1dc7a"),e=e(),(0,o.Cn)(),e),w=["id"],B={key:0,class:"start-screen"},T=[M((()=>(0,o._)("i",{class:"mdi mdi-home-outline"},null,-1))),M((()=>(0,o._)("span",{class:"button-tooltip",style:{top:"-30px",left:"2px","z-index":"1",width:"80px"}},"Start Screen",-1)))],E=M((()=>(0,o._)("i",{class:(0,i.normalizeClass)(["mdi mdi-pencil-outline version-icon"])},null,-1))),S={key:2,class:"button-tooltip",style:{"z-index":"1",width:"300px"}},P=M((()=>(0,o._)("b",null,"Stop Working",-1))),j=M((()=>(0,o._)("b",null,"Ready to Publish",-1))),U=(0,o.aZ)({__name:"exportDialogItem",props:{handleItemCheckEvent:{type:Function},startScreen:null,versionDialog:{type:Function},handleCollapse:{type:Function},item:null,moduleVersionDialog:{type:Function}},setup(e){const n=e,t=(0,a.iH)("mdi mdi-menu-down chevron"),s=(0,a.iH)(n.item.checked);function l(){n.handleCollapse(n.item,!0),t.value=`mdi mdi-menu${n.item.collapsed?"-right":"-down"} chevron`}function r(){return n.handleItemCheckEvent(n.item),s.value=n.item.checked,s.value}function d(){n.item.imported?n.moduleVersionDialog(n.item):n.versionDialog(n.item)}const p=(0,o.Fl)((()=>25*(n.item.level||0)));return(0,o.Fl)((()=>25*(n.item.level||0))),(n,c)=>{var m,u,h;return e.item.imported?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("div",{key:0,class:"row-container",id:e.item.id},[e.item.children&&(null===(m=e.item.children)||void 0===m?void 0:m.length)>0?((0,o.wg)(),(0,o.iD)("i",{key:0,class:(0,i.normalizeClass)(t.value),onClick:l,style:(0,i.normalizeStyle)({cursor:"pointer",left:(e.item.level?(0,a.SU)(p)-20:4)+"px"})},null,6)):(0,o.kq)("v-if",!0),"folder"==e.item.type?((0,o.wg)(),(0,o.iD)("i",{key:1,style:(0,i.normalizeStyle)({top:"4px",fontSize:"larger",cursor:"pointer",left:(0,a.SU)(p)+(e.item.level?20:43)+"px",position:"absolute"}),onClick:l,class:"mdi mdi-folder app-settings-color app-tier-model-icon"},null,4)):((0,o.wg)(),(0,o.j4)(D.Z,{key:2,style:(0,i.normalizeStyle)({top:"8px",cursor:"pointer",left:(0,a.SU)(p)+(e.item.level?20:43)+"px",position:"absolute"}),check:s.value,minus:!e.item.allChildChecked&&e.item.anyChildChecked,disabled:e.item.disabled,onClick:r},null,8,["style","check","minus","disabled"])),"folder"!=e.item.type?((0,o.wg)(),(0,o.iD)("i",{key:3,class:(0,i.normalizeClass)("app-tier-model-icon "+(0,a.SU)(k.o).getModelVisualInfo(e.item.type,void 0).icon),style:(0,i.normalizeStyle)({color:(0,a.SU)(k.o).getModelVisualInfo(e.item.type,void 0).color,left:(0,a.SU)(p)+(e.item.level?45:69)+"px"})},null,6)):(0,o.kq)("v-if",!0),(0,o._)("span",{style:(0,i.normalizeStyle)({left:(0,a.SU)(p)+(e.item.level?71:91)+("folder"==e.item.type?-20:0)+"px"}),class:(0,i.normalizeClass)(["app-tier-model-name",e.item.disabled?"disabled":""])},[(0,o.Uk)((0,i.toDisplayString)(null===(u=e.item)||void 0===u?void 0:u.name)+" ",1),(null===(h=e.startScreen)||void 0===h?void 0:h.ID)==e.item.id?((0,o.wg)(),(0,o.iD)("span",B,T)):(0,o.kq)("v-if",!0)],6),"folder"!=e.item.type?((0,o.wg)(),(0,o.iD)(o.HY,{key:4},[e.item.usageType||"module"==e.item.type?e.item.imported&&"module"==e.item.type?((0,o.wg)(),(0,o.iD)("div",{key:1,class:"version-text",onClick:c[0]||(c[0]=n=>e.moduleVersionDialog(e.item))},[(0,o.Uk)((0,i.toDisplayString)(e.item.version?e.item.version:"No version")+" ",1),E])):(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("span",{key:0,class:(0,i.normalizeClass)(["version-text",e.item.disabled?"disabled":""]),onClick:d},[(0,o.Uk)((0,i.toDisplayString)(e.item.version?e.item.version:"No version")+" ",1),e.item.usageType?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("i",{key:0,class:(0,i.normalizeClass)(["mdi mdi-pencil-outline version-icon",e.item.disabled?"disabled":""])},null,2))],2)),e.item.disabled&&!e.item.version?((0,o.wg)(),(0,o.iD)("span",S,[(0,o.Uk)("No version available for publishing. "),P,(0,o.Uk)(" on this item and choose the "),j,(0,o.Uk)(" option. ")])):(0,o.kq)("v-if",!0)],64)):(0,o.kq)("v-if",!0)],8,w))}}});var V=t(17450),z=t.n(V),F=t(29530),O=t.n(F),J=t(16199),N=t.n(J),H=t(40458),L=t.n(H),R=t(62916),q=t.n(R),G=t(92165),Y=t.n(G),_=t(23373),Q={};Q.styleTagTransform=Y(),Q.setAttributes=L(),Q.insert=N().bind(null,"head"),Q.domAPI=O(),Q.insertStyleElement=q(),z()(_.Z,Q),_.Z&&_.Z.locals&&_.Z.locals;var W=t(32525);const Z=(0,W.Z)(U,[["__scopeId","data-v-ada1dc7a"]]);var $=t(84039),K=t(29307),X=t(80338),ee=t(3329),ne=t(29633);const te=e=>((0,o.dD)("data-v-5bfad562"),e=e(),(0,o.Cn)(),e),oe={class:"container"},ie={class:"text-number"},ae={class:"text-number"},se={key:0,style:{"margin-bottom":"102px"}},le=(0,o.uE)('<div style="display:flex;align-items:center;" data-v-5bfad562><span class="custom-text environment" data-v-5bfad562> Publish To </span><span class="publish-info" data-v-5bfad562><i class="mdi mdi-information" data-v-5bfad562></i><span class="button-tooltip" style="top:460px;left:96px;z-index:1;width:231px;" data-v-5bfad562>Publish To options may change depending on the module type you choose.</span></span></div>',1),re=te((()=>(0,o._)("span",{class:"save-button"},"DOWNLOAD",-1))),de={key:0,class:"button-tooltip",style:{top:"-80px",left:"626px","z-index":"1",width:"145px"}},pe={key:1,class:"button-tooltip",style:{top:"-46px",left:"640px","z-index":"1",width:"120px"}},ce={key:2,class:"button-tooltip",style:{top:"-95px",left:"644px","z-index":"1",width:"135px"}},me=te((()=>(0,o._)("span",{class:"save-button deploy"},"PUBLISH",-1))),ue={key:0,class:"button-tooltip",style:{top:"-46px",left:"652px","z-index":"1",width:"120px"}},he={key:1,class:"button-tooltip",style:{top:"-46px",left:"644px","z-index":"1",width:"123px"}},fe={key:2,class:"button-tooltip",style:{top:"-95px",left:"644px","z-index":"1",width:"135px"}},be={key:3,class:"button-tooltip",style:{top:"-95px",left:"644px","z-index":"1",width:"135px"}},Ae=(0,o.aZ)({__name:"publishDialog",props:{screenType:null,platformSelection:null},emits:["close"],setup(e,{emit:n}){const k=e,M=p.nC.resolve(I.J),w=p.nC.resolve(C.B),B=p.nC.resolve(m.u),T=p.nC.resolve(y.y),E=p.nC.resolve(h.F),S=p.nC.resolve(c.B),P=p.nC.resolve(v.k),j=p.nC.resolve(f.y),U=p.nC.resolve(g.X),V=p.nC.resolve(x.h),z=p.nC.resolve(K.w),F=p.nC.resolve(ne._),O=(0,a.iH)([]),J=(0,a.iH)(!0),N=(0,a.iH)(""),H=(0,a.iH)(),L=(0,a.iH)(),R=(0,a.iH)(),q=(0,a.iH)(),G=(0,a.iH)(),Y=(0,a.iH)(),_=(0,a.iH)(""),Q=(0,o.Fl)((()=>M.apps.find((e=>e.ID==M.studio.appId))));(0,o.bv)((async()=>{await T.execute((async()=>{await Promise.all([T.executeUseCase(b.q,{}).then((e=>R.value=e)),T.executeUseCase(A.y,{}).then((e=>q.value=e))]),function(){const e=new Map,n=new Map;w.flatMapItems(M.studio.items,(e=>{var t,o,i,a;if("model"!=e.objectType)return;let s;if("module"==e.owner.objectType&&Ge(e.owner)){const n=null===(t=q.value)||void 0===t?void 0:t.get(e.owner.ID),i=null===(o=e.owner.relatedApplications.find((e=>e.applicationID==M.studio.appId)))||void 0===o?void 0:o.importedVersion,a=null==n?void 0:n.filter((e=>e.version==i)).flatMap((e=>e.relatedModelHistories)).find((n=>n.modelID==e.ID));s=null==a?void 0:a.version}else{const t=Te(e);if(!t)return n.set(e.ID,e.dependentModels?e.dependentModels.map((e=>e.modelId)):Array());s=t}const l=null===(a=null===(i=R.value)||void 0===i?void 0:i.get(e.ID))||void 0===a?void 0:a.find((e=>e.version==s));n.set(e.ID,(null==l?void 0:l.dependentModels)?null==l?void 0:l.dependentModels.map((e=>e.modelId)):Array())})),n.forEach(((t,o)=>{const i=Array();n.forEach(((e,n)=>{e.some((e=>e==o))&&i.push(n)})),e.set(o,{dependedBy:i,dependedTo:t})})),Y.value=e}(),function(){const e=M.studio.items.find((e=>"App Settings"==e.name)),n=Te(e),t=e&&{id:e.ID,name:e.name,checked:!0,disabled:!1,type:e.modelType,version:n||"latest"};e&&t&&Be({newItem:t});const o=s.CryptoHelper.CreateGuid(),i=M.studio.items.filter((e=>"model"==e.objectType&&"appSettings"==e.usageType)),a={id:o,collapsed:!0,name:"UI Settings",type:"module",imported:!1,checked:!0,children:[{}]};a&&Be({newItem:a}),a.children=i.map((e=>{const n=Te(e),t={id:e.ID,parentId:o,name:e.name,type:e.modelType,checked:null!=n,usageType:null==e?void 0:e.usageType,disabled:!n,version:n,level:2};return Be({newItem:t}),t})),je(a,!1);const l=s.CryptoHelper.CreateGuid(),r=M.studio.items.filter((e=>"model"==e.objectType&&"appAssetList"==e.usageType)),d={id:l,collapsed:!0,name:"Styled Components",type:"module",imported:!1,anyChildChecked:!0,allChildChecked:!0,children:[{}]};d&&Be({newItem:d}),d.children=r.map((e=>{const n={id:e.ID,parentId:l,name:e.name,type:e.modelType,checked:!0,usageType:null==e?void 0:e.usageType,level:2};return Be({newItem:n}),n})),je(d,!1);const p=z.cloneFileExplorerTreeView({displayFilterer:(e,n)=>{switch(e.ID){case ee.oA.uiAssetListID:case ee.oA.uiSettingsID:return!1}switch(e.objectType){case"application":return!1;case"module":case"model":return!0;case"folder":return n}}}),c=(e,n)=>{var t,o,i,a,s,l,r,d,p;const m=e.externalData;if("application"==m.objectType)throw new Error("unexpected item type");let u,h=F.getFullPath(m,"self").split("/").length-1;switch(m.objectType){case"folder":u={id:m.ID,name:m.name,type:"folder",collapsed:!0,level:h,children:null===(t=e.children)||void 0===t?void 0:t.map((e=>c(e,{ownerModule:n.ownerModule})))},null===(o=u.children)||void 0===o||o.forEach((e=>e.parent=u)),je(u,!1);break;case"model":if(n.ownerModule)if(u={id:m.ID,name:m.name,type:m.modelType,level:h},!n.ownerModule.isImportedModule||m.isUnmodifiable){const e=Te(m);u={...u,checked:!!e||m.isUnmodifiable,disabled:!e&&!m.isUnmodifiable,version:m.isUnmodifiable?"latest":e}}else{const e=null===(i=n.ownerModule.relatedModelHistories)||void 0===i?void 0:i.find((e=>e.modelID==m.ID));u={...u,checked:!0,disabled:!1,version:null==e?void 0:e.version}}else{const e=Te(m);u={id:m.ID,name:m.name,checked:!!e||m.isUnmodifiable,disabled:!e&&!m.isUnmodifiable,type:m.modelType,version:m.isUnmodifiable?"latest":e,level:h}}break;case"module":const f=Ge(m),b=null===(a=m.relatedApplications.find((e=>e.applicationID==M.studio.appId)))||void 0===a?void 0:a.importedVersion,A=f?null===(r=null===(l=null===(s=q.value)||void 0===s?void 0:s.get(m.ID))||void 0===l?void 0:l.find((e=>e.version==b)))||void 0===r?void 0:r.relatedModelHistories:void 0;u={id:m.ID,collapsed:!0,name:m.name,type:"module",imported:f,version:b,children:null===(d=e.children)||void 0===d?void 0:d.map((e=>c(e,{ownerModule:{isImportedModule:f,moduleVersion:b,relatedModelHistories:A}})))},null===(p=u.children)||void 0===p||p.forEach((e=>e.parent=u)),je(u,!1)}return u},m=p.map((e=>c(e,{}))),u=e=>{var n;Be({newItem:e}),null===(n=e.children)||void 0===n||n.forEach(u)};m.forEach(u)}(),"Deploy"==k.screenType&&Ue(),J.value=De()}),{loading:!0})}));const W=(0,o.Fl)((()=>O.value.filter((e=>"module"==e.type&&e.allChildChecked)).length)),te=(0,o.Fl)((()=>O.value.filter((e=>"module"==e.type&&!e.allChildChecked&&e.anyChildChecked)).length)),Ae=(0,o.Fl)((()=>O.value.filter((e=>"module"!=e.type&&e.checked)).length)),ve=(0,o.Fl)((()=>O.value.length)),ye=(0,o.Fl)((()=>"Deploy"==k.screenType&&k.platformSelection.web&&""==N.value||!J.value||!O.value.some((e=>e.checked||e.anyChildChecked))||"Export"==k.screenType&&!Me()||!ke())),Ie=(0,o.Fl)((()=>O.value.length==W.value||!(te.value+Ae.value>0)&&void 0)),Ce=(0,o.Fl)((()=>function(){let e=!1;return O.value.forEach((n=>{var t;"module"==n.type?null===(t=n.children)||void 0===t||t.forEach((n=>{n.version&&(e=!0)})):n.version&&(e=!0)})),e}())),ge=(0,o.Fl)(ke),xe=(0,o.Fl)(Me);function De(){let e=!0;const n=O.value.filter((e=>"module"==e.type&&e.anyChildChecked)),t=O.value.filter((e=>"qjson"==e.type&&e.checked));return G.value=M.studio.items.find((e=>{var n;return null===(n=e.additionals)||void 0===n?void 0:n.isRootPage})),!!G.value&&("Deploy"==k.screenType&&(n.length>0&&(e=n.map((e=>e.children)).filter((e=>!(null==e?void 0:e.find((e=>"entityDesigner"==e.type&&e.checked))))).length<=0),t.length>0&&(e=-1!=t.map((e=>M.studio.items.find((n=>n.ID==e.id)))).findIndex((e=>e.additionals.isRootPage)))),e)}function ke(){var e,n;const t=new Map;O.value.forEach((e=>{"module"==e.type&&e.children&&e.children.length>0?e.children.forEach((e=>t.set(e.id,1==e.checked))):t.set(e.id,1==e.checked)}));const o=new Map;null===(e=Y.value)||void 0===e||e.forEach(((e,n)=>{t.get(n)&&e.dependedTo.forEach((e=>{if(!t.get(e))if(o.has(n)){const t=o.get(n);t.push(e),o.set(n,t)}else o.set(n,[e])}))}));const[i]=o.keys();if(i){const e=o.get(i),t=e?e.map(we).map((e=>null==e?void 0:e.name)).join(", "):"";_.value=`Select ${t} first. ${null===(n=we(i))||void 0===n?void 0:n.name} depends on ${t}.`}return 0==o.size}function Me(){var e;return null===(e=O.value.find((e=>{var n;return e.id==(null===(n=G.value)||void 0===n?void 0:n.ID)})))||void 0===e?void 0:e.checked}function we(e){for(const n of O.value){if("module"!=n.type&&n.id==e)return n;if("module"==n.type&&n.children&&n.children.length>0){const t=n.children.find((n=>n.id==e));if(t)return t}}}function Be({newItem:e}){!function(e){const n=(0,r.createApp)(Z,{handleItemCheckEvent:Pe,startScreen:G,versionDialog:ze,handleCollapse:Ee,item:e,moduleVersionDialog:Fe}),t=document.createElement("div");n.mount(t);const o=document.getElementById("module-container-div");null==o||o.appendChild(t)}(e),"module"!=e.type&&O.value.push(e)}function Te(e){var n;if(!(null===(n=R.value)||void 0===n?void 0:n.has(e.ID)))return;const t=R.value.get(e.ID);return t?(e=>{const n=e.map((e=>{const n=e.split(".");return 10*parseInt(n[0])+1*parseInt(n[1])}));n.sort(((e,n)=>n-e));const t=n[0];return`${Math.floor(t/10)}.${t%10}`})(t.map((e=>e.version))):void 0}function Ee(e,n,t){var o;e.collapsed=void 0!==t?t:!e.collapsed,n&&(null===(o=e.children)||void 0===o||o.forEach((t=>{document.getElementById(t.id).style.display=e.collapsed?"none":"block",Ee(t,n,e.collapsed)})))}function Se(e,n){var t,o;if(e.disabled||e.checked)return;e.checked=!0,e.parent&&je(e.parent,n);const i=null===(o=null===(t=Y.value)||void 0===t?void 0:t.get(e.id))||void 0===o?void 0:o.dependedTo;i&&i.forEach((e=>{O.value.forEach((t=>{var o;if("module"==t.type&&!t.allChildChecked){const i=null===(o=t.children)||void 0===o?void 0:o.find((n=>!n.checked&&n.id==e));return i&&Se(i,n),void je(t,n)}t.checked||t.id!=e||(Se(t,n),t.parent&&je(t.parent,n))}))}))}function Pe(e){e.disabled||function(e){var n,t;const o=null===(t=null===(n=Y.value)||void 0===n?void 0:n.get(e.id))||void 0===t?void 0:t.dependedBy;return!!o&&o.some((e=>O.value.some((n=>{var t;return"module"==n.type&&n.anyChildChecked?null===(t=n.children)||void 0===t?void 0:t.some((n=>n.checked&&n.id==e)):n.id==e&&n.checked}))))}(e)||"App Settings"==e.name||("module"!=e.type&&"folder"!=e.type?e.checked?(e.checked=!1,e.parent&&je(e.parent,!0)):Se(e,!0):e.children&&e.children.filter((e=>!e.disabled)).length>0?e.anyChildChecked?(e.children.filter((e=>!e.disabled)).forEach((e=>e.checked=!1)),e.checked=!1,je(e,!0)):(e.children.forEach((e=>Se(e,!0))),e.checked=!0):(e.checked=!e.checked,e.allChildChecked=!1),J.value=De(),"Deploy"==k.screenType&&Ue())}function je(e,n){var t,o;e.disabled=e.children&&(0==e.children.length||!(null===(t=e.children)||void 0===t?void 0:t.some((e=>!e.disabled)))),e.allChildChecked=e.children&&e.children.length>0&&!e.children.some((e=>!e.checked||e.disabled)),e.anyChildChecked=null===(o=e.children)||void 0===o?void 0:o.some((e=>e.checked&&!e.disabled)),n&&e.parent&&je(e.parent,!0)}function Ue(){var e,n,t,o;L.value=[],H.value=[];const i=null===(o=null===(t=null===(n=null===(e=M.user)||void 0===e?void 0:e.selectedOrganization)||void 0===n?void 0:n.actions)||void 0===t?void 0:t.publish)||void 0===o?void 0:o.targets;if(!i)return;if(!O.value.find((e=>e.anyChildChecked||e.checked))){L.value=Object.entries(i).map((e=>Re(e[0])));const e=Array();for(let n=0;n<L.value.length;n++)e.push({index:n,cause:"You need to include items to publish."});return void(H.value=e)}const a=function(e){const n=Array();return Object.keys(e).forEach((t=>{const o=t,i=e[o],a=Re(o);if(!i)return n.push({optionName:a,cause:"You are not authorized to publish to this target."});switch(o){case"azure":const e=(n,t)=>{if(!t||0==t.length)return n;for(const o of t)if((o.checked||o.anyChildChecked)&&("module"==o.type&&(n=e(n,o.children)),"entityDesigner"==o.type||"bpmn"==o.type||"process"==o.type)){n=!1;break}return n};if(!e(!0,O.value))return n.push({optionName:a,cause:"Entity and process models cannot be published to this target."});break;case"plateauGCP":const t=O.value.filter((e=>"UI Settings"!=e.name)).find((e=>{var n,t;return"module"==e.type&&e.anyChildChecked&&(null===(n=e.children)||void 0===n?void 0:n.some((e=>e.checked&&("bpmn"==e.type||"process"==e.type))))&&!(null===(t=e.children)||void 0===t?void 0:t.some((e=>"entityDesigner"==e.type&&e.checked)))}));if(t)return n.push({optionName:a,cause:`This target not available. Selected module '${t.name}' has not any Data Model.`})}n.push({optionName:a})})),n}(i),s=a.sort(((e,n)=>!e.cause==!n.cause?0:e.cause?1:-1)),l=Array();for(let e=0;e<s.length;e++){const n=s[e].cause;n&&l.push({index:e,cause:n})}H.value=l,L.value=s.map((e=>e.optionName)),N.value=s[0].cause?"":s[0].optionName}function Ve(e,n){var t,o,i,a,s,l;const r=null===(t=Y.value)||void 0===t?void 0:t.get(n.id);null===(o=Y.value)||void 0===o||o.set(n.id,{dependedBy:(null==r?void 0:r.dependedBy)||Array(),dependedTo:(null===(l=null===(s=null===(a=null===(i=R.value)||void 0===i?void 0:i.get(n.id))||void 0===a?void 0:a.find((n=>n.version==e)))||void 0===s?void 0:s.dependentModels)||void 0===l?void 0:l.map((e=>e.modelId)))||Array()})}function ze(e){var n,i;const a={clickedNode:{id:e.id,state:{checked:e.checked},text:e.name,type:e.type,version:e.version},cb:n=>{e.version=n,Ve(n,e)}};(null===(n=R.value)||void 0===n?void 0:n.has(e.id))&&(a.versions=null===(i=R.value)||void 0===i?void 0:i.get(e.id)),B.showDialog((0,o.RC)((()=>t.e(245).then(t.bind(t,60801)))),{closable:!0,title:"Change Version",width:"1080px",maxHeight:"500px",overflow:"auto"},a)}function Fe(e){var n;B.showDialog((0,o.RC)((()=>t.e(5872).then(t.bind(t,45872)))),{closable:!0,title:"Change Version",width:"1080px",maxHeight:"500px",overflow:"auto"},{module:{ID:e.id},versions:null===(n=q.value)||void 0===n?void 0:n.get(e.id),cb:n=>{var t;e.version=n.version,null===(t=e.children)||void 0===t||t.forEach((e=>{const t=n.relatedModelHistories.find((n=>n.modelID==e.id));e.version=null==t?void 0:t.version,Ve(null==t?void 0:t.version,e)}))}})}function Oe(){n("close")}async function Je(){T.execute((async()=>{var e,t,o,i,a;const l=async()=>{const e=s.CryptoHelper.CreateGuid();return await async function(e){return S.initPublishHistory({appID:M.studio.appId,ID:e,isMultiStep:!0,type:"Deploy"==k.screenType?"publish":"download",cloudProvider:"Deploy"==k.screenType?Re(N.value,!0):void 0,platform:k.platformSelection})}(e),await async function(e){let n=new Map;const t=M.studio.appName,o={};w.flatMapItems(M.studio.items,((e,n)=>{if("model"!=e.objectType)return;const t="module"==e.owner.objectType?X.I.join(e.owner.name,e.path):e.path;return o[e.ID]={item:e,path:t,prefix:n},e}));const i=e=>{const n=o[e.id],i=d.P1.some((e=>e==n.item.modelType));return{id:e.id,ver:e.version,type:j.getItemType(n.item),path:n.path,modulePrefix:n.prefix,name:j.getFileFullname(n.item),ownerType:i?"application":n.item.owner.objectType,ownerName:i?t:n.item.owner.name}},a=(e,t)=>{e="module"==t.ownerType?`mdl-${e}`:e;let o=n.get(e);o&&o.length>0?(o.push(t),n.set(e,o)):n.set(e,[t])},s=e=>{e.filter((e=>{var n;return null!==(n=e.checked)&&void 0!==n?n:e.anyChildChecked})).forEach((e=>{if("module"==e.type)e.children.filter((e=>e.checked)).forEach((n=>{var o;const s=i(n);"entityDesigner"==s.type&&(s.entityGenerationDomain=null===(o=M.user.selectedOrganization.actions)||void 0===o?void 0:o.entityGenerationDomain);const l="bpmn"==s.type||"entityDesigner"==s.type||"process"==s.type;a(l?e.name:t,s)}));else if("folder"==e.type)e.children.filter((e=>e.checked)).forEach((n=>{var o;if("folder"==n.type)s([n]);else{const s=i(n);"entityDesigner"==s.type&&(s.entityGenerationDomain=null===(o=M.user.selectedOrganization.actions)||void 0===o?void 0:o.entityGenerationDomain);const l="bpmn"==s.type||"entityDesigner"==s.type||"process"==s.type;a(l?e.name:t,s)}}));else{const n=i(e);if("qjson"==e.type){const t=M.studio.items.find((n=>"model"==n.objectType&&"qjson"==n.modelType&&n.additionals.isRootPage&&n.ID==e.id));n.isRootPage=!!t||void 0}a(t,n)}}))};s(O.value);let l=Array();n.forEach(((n,t)=>{l.push({appID:M.studio.appId,exportType:"qui",selectionData:n,cause:"Export"==k.screenType?"download":"publish",layer:0,groupID:e,platformSelection:k.platformSelection})})),await P.createPackJobs(l)}(e),e},r=null===(t=null===(e=M.user)||void 0===e?void 0:e.selectedOrganization)||void 0===t?void 0:t.applications.flow;switch(k.screenType){case"Export":if(r){const e=await Ne();await P.createPackJobs([{appID:M.studio.appId,exportType:"qui",selectionData:e}]);break}const e=await l();await async function(e){await T.executeUseCase(u.i,{appID:M.studio.appId,exportType:"qui",selectionData:[],layer:1,groupID:e})}(e);break;case"Deploy":switch(Re(N.value,!0)){case"plateauGCP":const e=await l();await async function(e){let n=await S.getExportJobsByGroupId({groupID:e}).then((e=>e.jobs.map((e=>{const n=e.jobData;return{ownerName:n.items[0].ownerName,jobID:e.jobID,type:n.items[0].ownerType,mainDir:Le(n)}}))));if(!n||n.length<=0)return;let t=Array();n.forEach((n=>{t.push({appID:M.studio.appId,type:"build",package:{type:n.type,name:n.ownerName,mainDir:n.mainDir,zip:`${n.jobID}.zip`},layer:1,groupID:e})})),await E.createBuildJobs(t);let o={appID:M.studio.appId,type:"deployment",deployConfig:{process:{configModelIDs:He(),enabled:O.value.some((e=>{var n;return e.anyChildChecked&&(null===(n=e.children)||void 0===n?void 0:n.some((e=>e.checked&&"bpmn"==e.type)))}))}},layer:2,groupID:e,platformSelection:k.platformSelection};await E.startDeploymentJob(o)}(e);break;case"azure":const n=await Ne();await E.createAppDeployJob(n,k.platformSelection)}}const p=null===(o=M.user)||void 0===o?void 0:o.mobileUsage,c=null===(i=Q.value)||void 0===i?void 0:i.mobileUsage;!k.platformSelection||!k.platformSelection.mobile||(null==p?void 0:p.isMobilePublished)&&(null==c?void 0:c.isMobilePublished)||(U.updateUserMobileUsage({...p,isMobilePublished:!0}),V.updateApplication({ID:null===(a=Q.value)||void 0===a?void 0:a.ID,mobileUsage:{...c,isMobilePublished:!0},updateReason:"backofficeUpdate"})),n("close")}),{loading:!0})}async function Ne(){const e=[],n={};w.flatMapItems(M.studio.items,((e,t)=>{if("model"!=e.objectType)return;const o="module"==e.owner.objectType?X.I.join(e.owner.name,e.path):e.path;return n[e.ID]={item:e,path:o,prefix:t},e}));const t=o=>{o&&0!=o.length&&o.filter((e=>e.checked||e.anyChildChecked)).forEach((o=>{var i;if("module"==o.type||"folder"==o.type)return void t(o.children);const a=n[o.id],s={id:o.id,name:j.getFileFullname(a.item),path:a.path,type:j.getItemType(a.item),ver:o.version||"latest",isRootPage:null===(i=a.item.additionals)||void 0===i?void 0:i.isRootPage,modulePrefix:a.prefix,ownerType:"application",ownerName:M.studio.appName,size:a.item.size,createDate:a.item.createDate};e.push(s)}))};return t(O.value),e}function He(){let e=Array();return O.value.forEach((n=>{if("module"==n.type&&n.anyChildChecked&&n.children){const t=n.children.find((e=>"entityDesigner"==e.type));if(!t)return;const o=l.b.getServiceNameFromModel(t.name);n.children.forEach((n=>{n.checked&&"process"==n.type&&e.push({moduleName:o,model:{id:n.id,name:n.name,version:n.version}})}))}})),e}function Le(e){if("module"==e.items[0].ownerType){let n=e.items.find((e=>"entityDesigner"==e.type));if(!n)throw new Error("!!! this module cannot deploy. Because its have not a service");return l.b.getServiceNameFromModel(n.name)}return l.b.getQuiPackageNameFromAppName(e.app.name)}function Re(e,n=!1){const t={azure:"Public Cloud",plateauGCP:"Plateau Platform Playground"};return n?Object.keys(t).find((n=>{if(t[n]===e)return!0})):Object.keys(t).includes(e)?t[e]:void 0}function qe(e){N.value=e}const Ge=e=>F.isModuleImported(e);return(e,n)=>((0,o.wg)(),(0,o.iD)("div",oe,[(0,o._)("div",null,[(0,o.Wm)(D.Z,{class:(0,i.normalizeClass)(["modules-selected-checkbox","Deploy"==k.screenType?"deploy":""]),minus:0==(0,a.SU)(Ie),check:1==(0,a.SU)(Ie),onClick:n[0]||(n[0]=e=>{return n=null==(0,a.SU)(Ie),O.value.filter((e=>!e.disabled)).forEach((e=>{e.checked=n,null!=e.allChildChecked&&e.children&&e.children.length>0&&!e.children.some((e=>e.disabled))&&(e.allChildChecked=n),null!=e.anyChildChecked&&(e.anyChildChecked=n),e.children&&e.children.filter((e=>!e.disabled)).forEach((e=>e.checked=n))})),J.value=De(),void("Deploy"==k.screenType&&Ue());var n})},null,8,["class","minus","check"]),(0,o._)("div",{class:(0,i.normalizeClass)(["modules-selected-text","Deploy"==k.screenType?"deploy":""])},[(0,o._)("span",ie,(0,i.toDisplayString)((0,a.SU)(W)+(0,a.SU)(te)+(0,a.SU)(Ae)),1),(0,o.Uk)(" of "),(0,o._)("span",ae,(0,i.toDisplayString)((0,a.SU)(ve)),1),(0,o.Uk)(" items selected ")],2)]),(0,o._)("div",{class:(0,i.normalizeClass)(["modules-datatable","Deploy"==k.screenType?"deploy":""]),id:"module-container-div"},null,2),"Deploy"==k.screenType?((0,o.wg)(),(0,o.iD)("div",se,[le,(0,o.Wm)($.Z,{options:L.value,onInput:qe,selectedOption:N.value,default:N.value,disabledOptions:H.value,selectedClass:"selected-environment",placeholder:"Select the publish environment of your application",class:"select-environment"},null,8,["options","selectedOption","default","disabledOptions"])])):(0,o.kq)("v-if",!0),(0,o.kq)('         <div v-if="props.screenType == \'Deploy\' && !props.platformSelection.web && props.platformSelection.mobile"\n            class="mobile-publish-text">\n            <i class="mdi mdi-information"></i>\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\n        </div> '),(0,o._)("div",{class:(0,i.normalizeClass)(["footer","Deploy"==k.screenType?"deploy":"export"])},[(0,o._)("div",{class:(0,i.normalizeClass)(["cancel-button","Deploy"==k.screenType?"deploy":""]),onClick:Oe},"Cancel",2),"Export"==k.screenType?((0,o.wg)(),(0,o.iD)("div",{key:0,class:(0,i.normalizeClass)((0,a.SU)(ye)?" button-disable":""),onClick:n[1]||(n[1]=e=>!(0,a.SU)(ye)&&Je())},[re,(0,a.SU)(Ce)?(0,a.SU)(xe)?(0,a.SU)(ge)?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("span",ce,(0,i.toDisplayString)(_.value),1)):((0,o.wg)(),(0,o.iD)("span",pe,"You need to include your start screen.")):((0,o.wg)(),(0,o.iD)("span",de,"There are no items ready to publish. At least one of your items must be ready to publish."))],2)):(0,o.kq)("v-if",!0),"Deploy"==k.screenType?((0,o.wg)(),(0,o.iD)("div",{key:1,class:(0,i.normalizeClass)([(0,a.SU)(ye)?" button-disable":""]),onClick:n[2]||(n[2]=e=>!(0,a.SU)(ye)&&Je())},[me,(0,a.SU)(xe)?N.value?(0,a.SU)(Ce)?(0,a.SU)(ge)?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("span",be,(0,i.toDisplayString)(_.value),1)):((0,o.wg)(),(0,o.iD)("span",fe,"There are no items ready to publish. At least one of your items must be ready to publish.")):((0,o.wg)(),(0,o.iD)("span",he,"You need to select a publish environment.")):((0,o.wg)(),(0,o.iD)("span",ue,"You need to include your start screen."))],2)):(0,o.kq)("v-if",!0)],2)]))}});var ve=t(34389),ye={};ye.styleTagTransform=Y(),ye.setAttributes=L(),ye.insert=N().bind(null,"head"),ye.domAPI=O(),ye.insertStyleElement=q(),z()(ve.Z,ye),ve.Z&&ve.Z.locals&&ve.Z.locals;var Ie=t(84300),Ce={};Ce.styleTagTransform=Y(),Ce.setAttributes=L(),Ce.insert=N().bind(null,"head"),Ce.domAPI=O(),Ce.insertStyleElement=q(),z()(Ie.Z,Ce),Ie.Z&&Ie.Z.locals&&Ie.Z.locals;const ge=(0,W.Z)(Ae,[["__scopeId","data-v-5bfad562"]])}}]);
//# sourceMappingURL=4438.js.map?ver=0.0.295_1705491712164
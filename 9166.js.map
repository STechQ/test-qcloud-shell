{"version":3,"file":"9166.js","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?ee73","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?20b9","webpack://qcloud_shell/./node_modules/@stechquick/algae/src/helpers/cryptoHelper.ts","webpack://qcloud_shell/./node_modules/@stechquick/algae/src/helpers/plateau/plateauHelper.ts","webpack://qcloud_shell/../common/qCloudTemp/modelContants.ts","webpack://qcloud_shell/./src/domain/useCase/ICreateExportJob.ts","webpack://qcloud_shell/./src/domain/useCase/IDeployJobs.ts","webpack://qcloud_shell/./src/domain/useCase/IJobUtils.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModelVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModuleVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IPackJobs.ts","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?3bef","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?faa2","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?b82e","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.container[data-v-4da75764] {\\n    padding: 32px 20px 20px;\\n}\\n.settings-container[data-v-4da75764] {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n.custom-text[data-v-4da75764] {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n.radio-button[data-v-4da75764] {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n.radio-text[data-v-4da75764] {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n.existing-app-url[data-v-4da75764] {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n.url-error[data-v-4da75764] {\\n    border: 1px solid red;\\n}\\n.url-disable[data-v-4da75764] {\\n    opacity: 0.5;\\n}\\n.existing-app-url[data-v-4da75764]::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n.modules-selected-checkbox[data-v-4da75764] {\\n    cursor: pointer;\\n}\\n.modules-selected-text[data-v-4da75764] {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n.text-number[data-v-4da75764] {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n.modules-datatable[data-v-4da75764] {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n.modules-datatable[data-v-4da75764]::-webkit-scrollbar {\\n    width: 4px;\\n}\\n.modules-datatable[data-v-4da75764]::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n.modules-datatable[data-v-4da75764]::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n.row-container[data-v-4da75764] {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n.chevron[data-v-4da75764] {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n.chevron.disabled[data-v-4da75764] {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n.module-checkbox[data-v-4da75764] {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n.module-name[data-v-4da75764] {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.module-name.imported[data-v-4da75764] {\\n    top: 10px;\\n    left: 87px;\\n}\\n.module-name.disabled[data-v-4da75764] {\\n    color: #D5D5D5;\\n}\\n.model-checkbox[data-v-4da75764] {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n.model-icon[data-v-4da75764] {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n.app-tier-model-icon[data-v-4da75764] {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n.app-tier-model-name[data-v-4da75764] {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.app-tier-model-name.disabled[data-v-4da75764] {\\n    color: #D5D5D5;\\n}\\n.model-name[data-v-4da75764] {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.model-name.disabled[data-v-4da75764] {\\n    color: #D5D5D5;\\n}\\n.version-text[data-v-4da75764] {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n.version-text.disabled[data-v-4da75764] {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n.version-icon[data-v-4da75764] {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n.version-icon.disabled[data-v-4da75764] {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n.footer[data-v-4da75764] {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n.footer.deploy[data-v-4da75764] {\\n    position: relative;\\n    width: 100%;\\n}\\n.footer.export[data-v-4da75764] {\\n    margin-top: 102px;\\n}\\n.cancel-button[data-v-4da75764] {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n.save-button[data-v-4da75764] {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n.mobile-publish-text[data-v-4da75764],\\n.web-publish-text[data-v-4da75764] {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n.mobile-publish-text i[data-v-4da75764],\\n.web-publish-text i[data-v-4da75764] {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n.save-button.deploy[data-v-4da75764] {\\n    padding: 10px 16px;\\n}\\n.button-disable .save-button[data-v-4da75764] {\\n    color: #757575;\\n    cursor: default;\\n}\\n.button-disable .save-button:hover+.button-tooltip[data-v-4da75764],\\n.start-screen:hover .button-tooltip[data-v-4da75764],\\n.row-container:hover .button-tooltip[data-v-4da75764],\\n.publish-info:hover .button-tooltip[data-v-4da75764] {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n.button-tooltip[data-v-4da75764] {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n.publish-info[data-v-4da75764] {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n.qjson-color[data-v-4da75764] {\\n    color: #449dd1;\\n}\\n.yaml-color[data-v-4da75764] {\\n    color: #449dd1;\\n}\\n.namedcomp-color[data-v-4da75764] {\\n    color: #212121;\\n}\\n.app-settings-color[data-v-4da75764] {\\n    color: #151233;\\n}\\n.js-color[data-v-4da75764] {\\n    color: #449dd1;\\n}\\n.css-color[data-v-4da75764] {\\n    color: #151233;\\n}\\n.process-color[data-v-4da75764] {\\n    color: #007c77;\\n}\\n.bpmn-color[data-v-4da75764] {\\n    color: #007c77;\\n}\\n.entity-designer-color[data-v-4da75764] {\\n    color: #e9724c;\\n}\\n.select-environment[data-v-4da75764] {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container\\\">\\n        <div>\\n            <CheckboxComp :class=\\\"['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']\\\"\\n                :minus=\\\"mainCheckboxState == false\\\" :check=\\\"mainCheckboxState == true\\\"\\n                @click=\\\"handleModuleCountCheckboxEvent(mainCheckboxState == undefined)\\\" />\\n            <div :class=\\\"['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n                <span class=\\\"text-number\\\">{{  allChildCheckedModulesCount + anyChildCheckedModulesCount + checkedRootLevelModelsCount }}</span>\\n                of <span class=\\\"text-number\\\">{{ totalRootLevelCount }}</span> items selected\\n            </div>\\n        </div>\\n\\n        <div :class=\\\"['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n            <div v-for=\\\"item in items\\\">\\n                <div v-if=\\\"item?.type == 'module'\\\">\\n                    <div class=\\\"row-container\\\">\\n                        <i v-if=\\\"!item.imported\\\" :class=\\\"'mdi mdi-menu' + (item.collapsed ? '-right' : '-down') + ' chevron' + (!item.children || item.children.length == 0 ? ' disabled': '')\\\"\\n                            @click=\\\"handleCollapse(item)\\\" />\\n                        <CheckboxComp class=\\\"module-checkbox\\\" :check=\\\"item.allChildChecked\\\"\\n                            :minus=\\\"!item.allChildChecked && item.anyChildChecked\\\" :disabled=\\\"item.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(item)\\\" />\\n                        <i v-if=\\\"item.imported\\\" class=\\\"app-tier-model-icon mdi mdi-puzzle\\\" />\\n                        <span :class=\\\"['module-name', item.imported ? ` imported` : (item.disabled ? ' disabled': '')]\\\">{{ item.name }}</span>\\n                        <div v-if=\\\"item.imported\\\" class='version-text' @click=\\\"moduleVersionDialog(item)\\\">\\n                            {{ item.version ? item.version : 'No version' }}\\n                            <i :class=\\\"['mdi mdi-pencil-outline version-icon']\\\"></i>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row-container\\\" v-show=\\\"!item.imported && !item.collapsed\\\" v-for=\\\"child in item?.children\\\">\\n                        <CheckboxComp class=\\\"model-checkbox\\\" :check=\\\"child.checked\\\" :disabled=\\\"child.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(child)\\\" />\\n                        <i v-if=\\\"child.type != 'module'\\\" :class=\\\"'model-icon ' + ModelContants.getModelVisualInfo(child.type, undefined).icon\\\" \\n                            :style=\\\"{ color: ModelContants.getModelVisualInfo(child.type, undefined).color }\\\" />\\n                        \\n                        <span :class=\\\"['model-name', child.disabled ? ' disabled' : '']\\\">{{ child.name }}</span>\\n                        <div v-if=\\\"!child.usageType || child.usageType == 'appSettings'\\\" :class=\\\"['version-text', child.disabled ? 'disabled' : '']\\\" @click=\\\"versionDialog(child)\\\">\\n                            {{ child.version ? child.version : 'No version' }} <i v-if=\\\"!child.usageType || child.usageType == 'appSettings'\\\" :class=\\\"['mdi mdi-pencil-outline version-icon', child.disabled ? 'disabled' : '']\\\"></i>\\n                        </div>\\n                        <span v-if=\\\"child.disabled && !child.version\\\" class=\\\"button-tooltip\\\" \\n                            style=\\\"z-index: 1; width: 300px;\\\">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n                        </span>\\n                    </div>\\n                </div>\\n                <div v-else>\\n                    <div class=\\\"row-container\\\">\\n                        <CheckboxComp class=\\\"module-checkbox\\\" :check=\\\"item?.checked\\\" :disabled=\\\"item.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(item)\\\" />\\n                        <i v-if=\\\"item?.type == 'qjson'\\\" class=\\\"mdi mdi-palette qjson-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'yaml'\\\" class=\\\"mdi mdi-cog-outline yaml-color app-tier-model-icon\\\" />\\n                        <i v-if=\\\"item?.type == 'js'\\\"\\n                            class=\\\"mdi mdi-cog-outline js-color app-tier-model-icon\\\" />\\n                        <i v-if=\\\"item?.type == 'css'\\\"\\n                            class=\\\"mdi mdi-music-accidental-sharp css-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'process'\\\" class=\\\"mdi mdi-auto-fix process-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'bpmn'\\\" class=\\\"mdi mdi-vector-polyline bpmn-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'entityDesigner'\\\"\\n                            class=\\\"mdi mdi-database entity-designer-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'flow'\\\" class=\\\"mdi mdi-step-forward bpmn-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item.type == 'namedComponent'\\\" class=\\\"mdi mdi-cube-outline namedcomp-color app-tier-model-icon\\\"></i>\\n                        <i v-else-if=\\\"item.type == 'appSettings'\\\" class=\\\"mdi mdi-cog app-settings-color app-tier-model-icon\\\"></i>\\n                        <span class=\\\"app-tier-model-name\\\">{{ item?.name }}\\n                            <span class=\\\"start-screen\\\" v-if=\\\"startScreen?.ID == item.id\\\">\\n                                <i class=\\\"mdi mdi-home-outline\\\"></i>\\n                                <span class=\\\"button-tooltip\\\" style=\\\"top: -30px; left: 2px; z-index: 1; width: 80px;\\\">Start\\n                                    Screen</span>\\n                            </span>\\n                        </span>\\n\\n                        <span v-if=\\\"!item.usageType\\\" :class=\\\"['version-text', item.disabled ? 'disabled' : '']\\\" @click=\\\"versionDialog(item)\\\">\\n                            {{ item.version ? item.version : 'No version' }} <i v-if=\\\"!item.usageType\\\" :class=\\\"['mdi mdi-pencil-outline version-icon', item.disabled ? 'disabled' : '']\\\"></i>\\n                        </span>\\n                        <span v-if=\\\"item.disabled && !item.version\\\" class=\\\"button-tooltip\\\"\\n                            style=\\\"z-index: 1; width: 300px;\\\">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n                        </span>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div v-if=\\\"props.screenType == 'Deploy'\\\" style=\\\"margin-bottom: 102px\\\">\\n            <div style=\\\"display: flex; align-items: center;\\\">\\n                <span class=\\\"custom-text environment\\\"> Publish To </span>\\n                <span class=\\\"publish-info\\\">\\n                    <i class=\\\"mdi mdi-information\\\"></i>\\n                    <span class=\\\"button-tooltip\\\" style=\\\"top: 460px; left: 96px; z-index: 1; width: 231px;\\\">Publish To\\n                        options may change depending on the module type you choose.</span>\\n                </span>\\n            </div>\\n\\n            <CustomSelect :options=\\\"publishTargets\\\" @input=\\\"onTargetSelect\\\" :selectedOption=\\\"selectedTarget\\\"\\n                :default=\\\"selectedTarget\\\" :disabledOptions=\\\"disabledOptions\\\" selectedClass=\\\"selected-environment\\\"\\n                placeholder=\\\"Select the publish environment of your application\\\" class=\\\"select-environment\\\">\\n            </CustomSelect>\\n        </div>\\n<!--         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> -->\\n        <div :class=\\\"['footer', props.screenType == 'Deploy' ? 'deploy' : 'export']\\\">\\n            <div :class=\\\"['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']\\\" @click=\\\"close\\\">Cancel</div>\\n            <div v-if=\\\"props.screenType == 'Export'\\\" :class=\\\"(saveButtonDisable ? ' button-disable' : '')\\\" @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button \\\">DOWNLOAD</span>\\n                <span v-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -80px; left: 626px; z-index: 1; width: 145px;\\\">There are no items ready to publish. At least one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 640px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n            <div v-if=\\\"props.screenType == 'Deploy'\\\" :class=\\\"[(saveButtonDisable ? ' button-disable' : '')]\\\" @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button deploy\\\">PUBLISH</span>\\n                <span v-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 652px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!selectedTarget\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 644px; z-index: 1; width: 123px;\\\">You need to select a publish environment.</span>\\n                <span v-else-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">There are no items ready to publish. At least one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n\\n        </div>\\n    </div>\\n</template>\\n\\n\\n<script setup lang=\\\"ts\\\">\\nimport { CryptoHelper } from \\\"@stechquick/algae/lib/helpers/cryptoHelper\\\";\\nimport { PlateauHelper } from \\\"@stechquick/algae/lib/helpers/plateau/plateauHelper\\\";\\nimport { computed, defineAsyncComponent, onMounted, ref } from \\\"vue\\\";\\nimport { IOrganizationCloud } from \\\"../../../../../../../common/clean/domain/useCases/ICloudProvider\\\";\\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem } from \\\"../../../../../../../common/qCloudTemp/exporter\\\";\\nimport { ModelContants } from \\\"../../../../../../../common/qCloudTemp/modelContants\\\";\\nimport { IFolder, IQJsonAdditionals, UsageType } from \\\"../../../../../../../common/qCloudTemp/quickCloud\\\";\\nimport { container } from \\\"../../../../../domain/core/diContainer\\\";\\nimport { IQCloudApi } from \\\"../../../../../domain/infrastructure/IQCloudApi\\\";\\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \\\"../../../../../domain/model/models\\\";\\nimport { IDialog } from \\\"../../../../../domain/presentation/IDialog\\\";\\nimport { ICreateExportJob } from \\\"../../../../../domain/useCase/ICreateExportJob\\\";\\nimport { IDeployJobs } from \\\"../../../../../domain/useCase/IDeployJobs\\\";\\nimport { IJobUtils } from \\\"../../../../../domain/useCase/IJobUtils\\\";\\nimport { IListMultiModelVersions } from \\\"../../../../../domain/useCase/IListMultiModelVersions\\\";\\nimport { IModelUseCase } from \\\"../../../../../domain/useCase/IModelUseCase\\\";\\nimport { IPackJobs } from \\\"../../../../../domain/useCase/IPackJobs\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IViewModel } from \\\"../../../../../domain/viewModel/IViewModel\\\";\\nimport { IViewModelManager } from \\\"../../../../../domain/viewModel/IViewModelManager\\\";\\nimport CustomSelect from \\\"../../../components/customSelect.vue\\\";\\nimport CheckboxComp from \\\"../../checkboxComp.vue\\\";\\nimport { IListMultiModuleVersions } from \\\"../../../../../domain/useCase/IListMultiModuleVersions\\\";\\n\\ninterface ITableData {\\n    id: string;\\n    parentId?: string;\\n    collapsed?: boolean;\\n    anyChildChecked?: boolean;\\n    allChildChecked?: boolean;\\n    checked?: boolean;\\n    name: string;\\n    type: IModel[\\\"modelType\\\"] | IModule[\\\"objectType\\\"];\\n    version?: string;\\n    disabled?: boolean | true;\\n    children?: Array<ITableData>;\\n    usageType?: UsageType;\\n    imported?: boolean;\\n}\\n\\ninterface IDeployScreenAdditionalProps {\\n    screenType: \\\"Export\\\" | \\\"Deploy\\\";\\n    platformSelection: IPlatformSelection;\\n}\\n\\ninterface IDisabledOptions {\\n    index: number\\n    cause: string;\\n}\\n\\nconst props = defineProps<IDeployScreenAdditionalProps>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\\nconst emit = defineEmits([\\\"close\\\"]);\\nconst items = ref<Array<ITableData>>([]);\\nconst validations = ref<boolean>(true);\\nconst selectedTarget = ref<string>(\\\"\\\");\\nconst disabledOptions = ref<Array<IDisabledOptions>>();\\nconst publishTargets = ref<Array<string>>();\\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\\nconst startScreen = ref<IModel>();\\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>>();\\nconst dependencyErrorStr = ref<string>('');\\n\\nonMounted(async () => {\\n    await Promise.all([\\n        executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, { }).then(res => modelHistories.value = res),\\n        executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, { }).then(res => importedModuleVersions.value = res)\\n    ])\\n    initDependencies();\\n    handleItems();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n    validations.value = validate();\\n})\\n\\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && e.allChildChecked).length);\\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && !e.allChildChecked && e.anyChildChecked).length);\\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \\\"module\\\" && e.checked).length);\\nconst totalRootLevelCount = computed(() => items.value.length);\\nconst saveButtonDisable = computed(() => (props.screenType == \\\"Deploy\\\" && props.platformSelection.web && selectedTarget.value == \\\"\\\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \\\"Export\\\" && !validateStartScreen()) || !validateDependencies());\\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true \\n        : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0  ? false : undefined));\\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\\nconst isAllDependenciesOK = computed(validateDependencies)\\nconst isStartScreenOK = computed(validateStartScreen)\\n\\nfunction validate() {\\n    let result = true;\\n    const modules = items.value.filter(e => e.type == \\\"module\\\" && e.anyChildChecked);\\n    const appLayerItems = items.value.filter(e => e.type == \\\"qjson\\\" && e.checked);\\n\\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => item.isRootPage);\\n    if(!startScreen.value)\\n        return false;\\n\\n    if (props.screenType == \\\"Deploy\\\") {\\n        if (modules.length > 0)\\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \\\"entityDesigner\\\" && f.checked)).length <= 0\\n\\n        let isApplicationWillDeploy = appLayerItems.length > 0;\\n        if (isApplicationWillDeploy) {\\n            result = appLayerItems\\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nfunction validateDependencies() {\\n    const checkMap = new Map<string, boolean>();\\n    items.value.forEach(item => {\\n        if(item.type == 'module' && item.children && item.children.length > 0)\\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\\n        else\\n            checkMap.set(item.id, item.checked == true)\\n    })\\n\\n    const mustBeCheckedMap = new Map<string, Array<string>>();\\n    dependencyMap.value?.forEach((deps, id) => {\\n        if(!checkMap.get(id)) \\n            return;\\n\\n        deps.dependedTo.forEach(dependedId => {\\n            if(checkMap.get(dependedId))\\n                return;\\n\\n            if(mustBeCheckedMap.has(id)){\\n                const vals = mustBeCheckedMap.get(id)!\\n                vals.push(dependedId)\\n                mustBeCheckedMap.set(id, vals)\\n            }else {\\n                mustBeCheckedMap.set(id, [dependedId])\\n            }\\n            \\n        });\\n    })\\n\\n    //set deps error text\\n    const [firstItemID] = mustBeCheckedMap.keys();\\n    if(firstItemID) {\\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\\n        dependencyErrorStr.value =`Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\\n    }\\n\\n    return mustBeCheckedMap.size == 0\\n}\\n\\nfunction validateStartScreen() {\\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\\n}\\n\\nfunction findItem (ID: string) {\\n    for(const item of items.value){\\n        if(item.type != 'module' && item.id == ID)\\n            return item;\\n        if(item.type == 'module' && item.children && item.children.length> 0 ){\\n            const f = item.children.find(e => e.id == ID)\\n            if(f) return f\\n        }\\n    }\\n}\\n\\nfunction initDependencies() {\\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>();\\n    const depMap = new Map<string, Array<string>>();\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path) => {\\n            if (item.objectType != \\\"model\\\") { return; }\\n\\n            const isImportedModule = item.parent.objectType == \\\"module\\\" && isModuleImported(item.parent);\\n            \\n            let version: string | undefined;\\n            if(!isImportedModule){\\n                const maxVersion = getItemMaxVersion(item)\\n                if(!maxVersion)\\n                    return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\\n                version = maxVersion;\\n            }\\n            else {\\n                const moduleVersions = importedModuleVersions.value?.get(item.parent.ID)\\n                const moduleVersion = (item.parent as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n\\n                const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\\n                version = importedModuleModel?.version\\n            }\\n\\n            const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\\n\\n            depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\\n    });\\n\\n    \\n    depMap.forEach((dependedTo, modelId) => {\\n        const dependedBy = Array<string>();\\n        depMap.forEach((dependencies, depModelId) => {\\n            if (dependencies.some(depId => depId == modelId))\\n                dependedBy.push(depModelId)\\n        })\\n        map.set(modelId, {dependedBy, dependedTo});\\n    })\\n    dependencyMap.value = map;\\n}\\n\\nfunction isModelDepended(item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\\n    if(!deps) return false;\\n\\n    return deps.some(dep => items.value.some(item => {\\n        if(item.type == 'module' && item.anyChildChecked){\\n            return item.children?.some(child => child.checked && child.id == dep)\\n        }\\n        return item.id == dep && item.checked\\n    }));\\n}\\n\\nasync function handleItems() {\\n    items.value = viewModel.studio.items\\n        .filter((item) => item.objectType == \\\"module\\\" && item.children.length > 0)\\n        .map((item) => {\\n            const isImportedModule = isModuleImported(item as IModule);\\n            const moduleVersion = (item as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n            const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\\n            const tableData: ITableData = {\\n                id: item.ID,\\n                collapsed: true,\\n                name: item.name,\\n                type: \\\"module\\\",\\n                imported: isImportedModule,\\n                version: moduleVersion,\\n                children: (item as IModule).children\\n                    .filter((child) => child.objectType == \\\"model\\\")\\n                    .map(child => child as IModel)\\n                    .map(child => {\\n                        const childModel: ITableData = {id: child.ID,parentId: item.ID,name: child.name,type: (child as IModel).modelType}\\n                        if(!isImportedModule || child.isUnmodifiable){\\n                            const maxVersion = getItemMaxVersion(child)                         \\n                            return {\\n                                ...childModel,\\n                                checked: maxVersion ? true : child.isUnmodifiable,\\n                                disabled: maxVersion ? false : !child.isUnmodifiable,\\n                                version: child.isUnmodifiable ? 'latest' : maxVersion,\\n                            } as ITableData\\n                        }\\n                        \\n                        const importedModulesModel = relatedModelHistories?.find(e => e.modelID == child.ID)\\n                        return {...childModel, checked: true,disabled: false, version: importedModulesModel?.version } as ITableData\\n                    })\\n            }\\n            handleParentCheckedStatus(tableData);\\n            return tableData;\\n        });\\n\\n    viewModel.studio.items\\n        .filter((item) => item.objectType == \\\"model\\\" && item.usageType != \\\"appSettings\\\" && item.usageType != \\\"appAssetList\\\")\\n        .map(item => item as IModel)\\n        .forEach((item) => {\\n            const maxVersion = getItemMaxVersion(item as IModel)\\n            items.value.push({\\n                    id: item.ID,\\n                    name: item.name,\\n                    checked: maxVersion || item.modelType==\\\"appSettings\\\" ? true : item.isUnmodifiable,\\n                    disabled: maxVersion || item.modelType==\\\"appSettings\\\" ? false : !item.isUnmodifiable,\\n                    type: (item as IModel).modelType,\\n                    version: item.isUnmodifiable || item.modelType==\\\"appSettings\\\" ? 'latest' : maxVersion,\\n                });\\n        });\\n    const uiSettingsID = CryptoHelper.CreateGuid();\\n    const appSettings = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appSettings\\\") as Array<IModel>;\\n    const uiSettings: ITableData = {\\n        id: uiSettingsID,\\n        collapsed: true,\\n        name: \\\"UI Settings\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        children: appSettings.map(settings => {\\n            const maxVersion = getItemMaxVersion(settings)\\n            return {\\n                id: settings.ID,\\n                parentId: uiSettingsID,\\n                name: settings.name,\\n                type: settings.modelType,\\n                checked: maxVersion != undefined,\\n                usageType: settings?.usageType,\\n                disabled: !maxVersion,\\n                version: maxVersion,\\n            }\\n        }) as Array<ITableData>,\\n    };\\n    handleParentCheckedStatus(uiSettings);\\n\\n    const uiAssetID = CryptoHelper.CreateGuid();\\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appAssetList\\\") as Array<IModel>;\\n    const uiAssetList: ITableData = {\\n        id: uiAssetID,\\n        collapsed: true,\\n        name: \\\"Styled Components\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        anyChildChecked: true,\\n        allChildChecked: true,\\n        children: appAssetList.map((asset) => ({\\n            id: asset.ID,\\n            parentId: uiSettingsID,\\n            name: asset.name,\\n            type: asset.modelType,\\n            checked: true,\\n            usageType: asset?.usageType,\\n        })) as Array<ITableData>,\\n    };\\n    handleParentCheckedStatus(uiAssetList);\\n\\n    items.value.unshift(uiAssetList);\\n    items.value.unshift(uiSettings);\\n    console.log(\\\"items => \\\", items.value);\\n}\\n\\nfunction getItemMaxVersion(item: IModel): string | undefined {\\n    if (!modelHistories.value?.has(item.ID))\\n        return undefined;\\n\\n    const versions = modelHistories.value.get(item.ID);\\n    if (!versions)\\n        return undefined;\\n\\n    const findMaxVersion = (versions: Array<string>) => {\\n        const versionNumbers = versions.map(v => {\\n            const parts: Array<string> = v.split(\\\".\\\");\\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\\n        })\\n\\n        versionNumbers.sort((a, b) => b - a);\\n\\n        const maxVersion = versionNumbers[0];\\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\\n    }\\n\\n    return findMaxVersion(versions.map(e => e.version!));\\n\\n}\\nfunction checkMaxVersionOfAllItems() {\\n    let isThereVersion: boolean = false;\\n    items.value.forEach(item => {\\n        if(item.type == \\\"module\\\") {\\n            item.children?.forEach(child => {\\n                if(child.version) {\\n                    isThereVersion = true;\\n                }\\n                \\n            })\\n        }\\n        else {\\n            if(item.version) {\\n                isThereVersion = true;\\n            }\\n        }\\n    })\\n    return isThereVersion;\\n}\\nfunction handleModuleCountCheckboxEvent(value: boolean) {\\n    items.value.filter(e => !e.disabled).forEach((item) => {\\n        item.checked = value;\\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\\n        if (allItemsCheckable) item.allChildChecked = value;\\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\\n    });\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleCollapse(item: ITableData) {\\n    item.collapsed = !item.collapsed;\\n}\\n\\nfunction checkAllDependents(item: ITableData) {\\n    if(item.disabled || item.checked) return;\\n\\n    item.checked = true\\n    item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!);\\n\\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\\n    if(!deps) return;\\n\\n    deps.forEach(dep => {\\n        items.value.forEach(item => {\\n            if(item.type == 'module' && !item.allChildChecked){\\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\\n                willCheckItem && checkAllDependents(willCheckItem)\\n                handleParentCheckedStatus(item)\\n                return;\\n            }\\n\\n            if(!item.checked && item.id == dep) {\\n                checkAllDependents(item)\\n                item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\\n            }\\n        })\\n    });\\n}\\n\\nfunction handleItemCheckEvent(item: ITableData) {\\n    if(item.disabled || isModelDepended(item))\\n        return;\\n\\n    if(item.type != \\\"module\\\") {\\n        if(item.checked){\\n            item.checked = false;\\n            item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\\n        } else {\\n            checkAllDependents(item)\\n        }\\n    } else {\\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\\n            if (item.anyChildChecked) {\\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\\n                item.checked = false;\\n                handleParentCheckedStatus(item);\\n            } else {\\n                item.children.forEach(checkAllDependents);\\n                item.checked = true;\\n            }\\n        }\\n        else {\\n            item.checked = !item.checked;\\n            item.allChildChecked = false;\\n        }\\n    }\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleParentCheckedStatus(item: ITableData) {\\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\\n}\\n\\nfunction syncPublishTargets() {\\n    publishTargets.value = []; disabledOptions.value = [];\\n\\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\\n    if (!targets)\\n        return;\\n\\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\\n    if (!isSelectAnyItem) {\\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\\n        const disabledOptionList = Array<IDisabledOptions>();\\n        for (let i = 0; i < publishTargets.value.length; i++) {\\n            disabledOptionList.push({ index: i, cause: \\\"You need to include items to publish.\\\" })\\n        }\\n        disabledOptions.value = disabledOptionList;\\n        return;\\n    }\\n\\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\\n\\n    const disabledOptionList = Array<IDisabledOptions>();\\n    for (let i = 0; i < sortedTargets.length; i++) {\\n        const cause = sortedTargets[i].cause;\\n        if (cause) disabledOptionList.push({ index: i, cause })\\n    }\\n    disabledOptions.value = disabledOptionList;\\n    publishTargets.value = sortedTargets.map(e => e.optionName);\\n\\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \\\"\\\";\\n}\\n\\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\\n    const list = Array<{ optionName: string, cause?: string }>();\\n\\n    Object.keys(targets).forEach(e => {\\n        const key = e as keyof IOrganizationCloud;\\n        const value = targets[key];\\n        const optionName = cloudTargetMap(key)!;\\n        if (!value)\\n            return list.push({ optionName, cause: \\\"You are not authorized to publish to this target.\\\" });\\n\\n\\n        switch (key) {\\n            case \\\"azure\\\":\\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\\n                    if (!items || items.length == 0) { return status; }\\n                    for (const item of items) {\\n                        if (item.checked || item.anyChildChecked) {\\n                            if (item.type == \\\"module\\\") {\\n                                status = traverseSelectedItems(status, item.children);\\n                            }\\n                            if (item.type == \\\"entityDesigner\\\" || item.type == \\\"bpmn\\\" || item.type == \\\"process\\\") {\\n                                status = false;\\n                                break;\\n                            }\\n                        }\\n\\n                    }\\n                    return status;\\n                }\\n\\n                const status = traverseSelectedItems(true, items.value);\\n                if (!status)\\n                    return list.push({ optionName, cause: \\\"Entity and process models cannot be published to this target.\\\" });\\n                break;\\n            case \\\"plateauGCP\\\":\\n                const modulesHasNotAnEDModel =  items.value.filter(e => e.name != \\\"UI Settings\\\").find(e => e.type == \\\"module\\\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \\\"bpmn\\\" || c.type == \\\"process\\\")) && !e.children?.some(c => c.type == \\\"entityDesigner\\\" && c.checked))\\n                if (modulesHasNotAnEDModel)\\n                    return list.push({optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.`})\\n                break;\\n        }\\n\\n        list.push({ optionName });\\n    })\\n\\n    return list;\\n}\\n\\nfunction updateDependencyMap(newVersion: string, item: ITableData) { \\n    const deps = dependencyMap.value?.get(item.id);\\n    dependencyMap.value?.set(item.id, {\\n        dependedBy: deps?.dependedBy || Array<string>(), \\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\\n    })\\n}\\n\\nfunction versionDialog(item: ITableData) {\\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\\n    const hasAnyVersion = modelHistories.value?.has(item.id);\\n    const options = { clickedNode, cb: (version: string) => { \\n        item.version = version;\\n        updateDependencyMap(version, item);\\n    } } as any;\\n\\n    if (hasAnyVersion) {\\n        options.versions = modelHistories.value?.get(item.id)\\n    }\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/modelVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" }, options\\n    );\\n}\\n\\n\\nfunction moduleVersionDialog(item: ITableData) {\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/moduleVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" },\\n        { module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => { \\n            item.version = moduleVersion.version;\\n            item.children?.forEach(child => {\\n                const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\\n                child.version = modulesModel?.version\\n                updateDependencyMap(modulesModel?.version!, child);\\n            })\\n        }}\\n    );\\n}\\n\\nfunction close() {\\n    emit(\\\"close\\\");\\n}\\n\\nasync function save() {\\n    executor.execute(\\n        async () => {\\n            const initAsGroup = async () => {\\n                const groupID = CryptoHelper.CreateGuid();\\n                await initHistory(groupID);\\n                await packJob(groupID);\\n                return groupID;\\n            }\\n\\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\\n\\n            switch (props.screenType) {\\n                case \\\"Export\\\":\\n                    if(isFlowBackend) {\\n                        const deployItems = await createAzureDeployItems();\\n                        await packJobsUseCase.createPackJobs([{\\n                            appID: viewModel.studio.appId,\\n                            exportType: \\\"qui\\\",\\n                            selectionData: deployItems\\n                        }]);\\n                        break;\\n                    }\\n\\n                    const groupID = await initAsGroup();\\n                    await createExportJob(groupID);\\n                    break;\\n                case \\\"Deploy\\\":\\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\\n                        case \\\"plateauGCP\\\":\\n                            const groupID = await initAsGroup();\\n                            await createDeployJob(groupID);\\n                            break;\\n                        case \\\"azure\\\":\\n                            const deployItems = await createAzureDeployItems();\\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\\n                            break;\\n                    }\\n            }\\n            emit(\\\"close\\\");\\n        },\\n        { loading: true });\\n}\\n\\nasync function createAzureDeployItems() {\\n    const deployItems: Array<IExportItem> = [];\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\\n        if (!items || items.length == 0) { return; }\\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\\n            if (item.type == \\\"module\\\") {\\n                traverseSelectedItems(item.children);\\n                return;\\n            }\\n\\n            const itemMap = itemIdObj[item.id];\\n\\n            const deployItem: IExportItem = {\\n                id: item.id,\\n                name: jobUtils.getFileFullname(itemMap.item),\\n                path: itemMap.path,\\n                type: jobUtils.getItemType(itemMap.item),\\n                ver: item.version || \\\"latest\\\",\\n                isRootPage: itemMap.item.isRootPage,\\n                prefix: itemMap.prefix,\\n                ownerType: 'application',\\n                ownerName: viewModel.studio.appName,\\n                size: itemMap.item.size,\\n                createDate: itemMap.item.createDate,\\n            };\\n            deployItems.push(deployItem)\\n        });\\n    };\\n\\n    traverseSelectedItems(items.value);\\n\\n    return deployItems;\\n}\\n\\nasync function initHistory(groupID: string) {\\n    return qcloudApi.initPublishHistory({\\n        appID: viewModel.studio.appId,\\n        ID: groupID,\\n        isMultiStep: true,\\n        type: props.screenType == \\\"Deploy\\\" ? \\\"publish\\\" : \\\"download\\\",\\n        cloudProvider: props.screenType == \\\"Deploy\\\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\\n        platform: props.platformSelection\\n    });\\n}\\n\\nasync function packJob(groupID: string) {\\n    let exportItemMap = new Map<string, Array<IExportItem>>();\\n    const appName = viewModel.studio.appName;\\n\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const createExportObject = (tableItem: ITableData) => {\\n        const item = itemIdObj[tableItem.id].item;\\n        const isAppItem = item.modelType == 'qjson' ;\\n        return {\\n            id: tableItem.id,\\n            ver: tableItem.version,\\n            type: jobUtils.getItemType(item),\\n            path: itemIdObj[tableItem.id].path,\\n            prefix: itemIdObj[tableItem.id].prefix,\\n            name: jobUtils.getFileFullname(item),\\n            ownerType: isAppItem ? 'application' : item.parent.objectType,\\n            ownerName: isAppItem ? appName : item.parent.name,\\n        } as IExportItem;\\n    }\\n\\n    const addToExportItem = (key: string, obj: IExportItem) => {\\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\\n        let items = exportItemMap.get(key);\\n        if(items && items.length > 0){\\n            items.push(obj);\\n            exportItemMap.set(key, items);\\n        } else\\n            exportItemMap.set(key, [obj]);\\n    }\\n\\n    items.value.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\\n        if (asset.type == 'module') {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                const obj = createExportObject(child);\\n                if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n\\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n            });\\n        } else {\\n            const obj = createExportObject(asset);\\n            if (asset.type == 'qjson'){\\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \\\"model\\\" && i.modelType == \\\"qjson\\\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\\n                obj.isRootPage = isRootPage ? true : undefined;\\n            }\\n            addToExportItem(appName, obj);\\n        }\\n    })\\n\\n    let jobs = Array<ICreateExportJobParam>();\\n    exportItemMap.forEach((v, k) => {\\n        jobs.push({\\n            appID: viewModel.studio.appId,\\n            exportType: \\\"qui\\\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \\\"model\\\":  \\\"qui\\\"\\n            selectionData: v,\\n            cause: props.screenType == 'Export' ? 'download': \\\"publish\\\",\\n            layer: 0,\\n            groupID: groupID,\\n            platformSelection: props.platformSelection\\n        })\\n    })\\n    \\n    await packJobsUseCase.createPackJobs(jobs);\\n}\\n\\nasync function createExportJob(groupID: string) {\\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\\n        appID: viewModel.studio.appId,\\n        exportType: \\\"qui\\\",\\n        selectionData: [],\\n        layer: 1,\\n        groupID: groupID\\n    });\\n}\\n\\nasync function createDeployJob(groupID: string) {\\n    //1-(n) L1- deployJob(build)\\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\\n        .then(jobs => jobs.jobs.map(e => {\\n            const jobData = e.jobData as IExportJobData;\\n            return {\\n                ownerName: jobData.items[0].ownerName,\\n                jobID: e.jobID,\\n                type: jobData.items[0].ownerType,\\n                mainDir: getDeployableArchiveRoot(jobData)\\n            }\\n        }));\\n\\n    if (!packages || packages.length <= 0)\\n        return;\\n\\n    let buildJobs = Array<ICreateDeployJobParam>();\\n    packages.forEach(pack => {\\n        buildJobs.push({\\n            appID: viewModel.studio.appId,\\n            type: \\\"build\\\",\\n            package: {\\n                type: pack.type as DeployType,\\n                name: pack.ownerName!,\\n                mainDir: pack.mainDir,\\n                zip: `${pack.jobID}.zip`,\\n            },\\n            layer: 1,\\n            groupID: groupID\\n        })\\n    })\\n\\n    await deployJobsUseCase.createBuildJobs(buildJobs);\\n\\n    //2-(1) L2- deployJob(deployment)\\n    let jobParam: ICreateDeployJobParam = {\\n        appID: viewModel.studio.appId,\\n        type: \\\"deployment\\\",\\n        deployConfig: {\\n            process: {\\n                configModelIDs: getProcessConfigList(),\\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \\\"bpmn\\\"))\\n            }\\n        },\\n        layer: 2,\\n        groupID: groupID,\\n        platformSelection: props.platformSelection\\n    }\\n\\n    await deployJobsUseCase.startDeploymentJob(jobParam);\\n}\\n\\nfunction getProcessConfigList() {\\n    let processConfigList = Array<IProcessConfigModelItem>();\\n    items.value.forEach((asset) => {\\n        if (asset.type == \\\"module\\\" && asset.anyChildChecked && asset.children) {\\n            const usingService = asset.children.find(c => c.type == \\\"entityDesigner\\\");\\n            if (!usingService)\\n                return;\\n\\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\\n            asset.children.forEach(child => {\\n                if (child.checked && child.type == \\\"process\\\") {\\n                    processConfigList.push({\\n                        moduleName: serviceName,\\n                        model: {\\n                            id: child.id,\\n                            name: child.name,\\n                            version: child.version!\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n    })\\n    return processConfigList;\\n}\\n\\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\\n    if (jobData.items[0].ownerType == \\\"module\\\") {\\n        let edModel = jobData.items.find(e => e.type == \\\"entityDesigner\\\");\\n        if (!edModel)\\n            throw new Error(\\\"!!! this module cannot deploy. Because its have not a service\\\");\\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\\n    }\\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\\n}\\n\\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \\\"Public Cloud\\\", plateauGCP: \\\"Plateau Platform Playground\\\" };\\n    if (pureVal) {\\n        return Object.keys(map).find(e => {\\n            if (map[e as keyof IOrganizationCloud] === name) {\\n                return true;\\n            }\\n        })\\n    } else {\\n        let key = Object.keys(map).includes(name);\\n        if (!key)\\n            return;\\n        return map[name as keyof IOrganizationCloud];\\n    }\\n}\\n\\nfunction onTargetSelect(value: string) {\\n    selectedTarget.value = value\\n}\\n\\nconst isModuleImported = (item: IModule) => {\\n    const hasAVersion = item.relatedApplications.find(e => e.applicationID == viewModel.studio.appId)?.importedVersion;\\n    if(item.mainOwner != viewModel.studio.appId && item.relatedApplications.at(0)?.applicationID != viewModel.studio.appId && hasAVersion)\\n        return true;\\n    return false;\\n}\\n\\n</script>\\n\\n\\n<style scoped>\\n.container {\\n    padding: 32px 20px 20px;\\n}\\n\\n.settings-container {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n\\n.custom-text {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n\\n.radio-button {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n\\n.radio-text {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n\\n.existing-app-url {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n\\n.url-error {\\n    border: 1px solid red;\\n}\\n\\n.url-disable {\\n    opacity: 0.5;\\n}\\n\\n.existing-app-url::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n\\n.modules-selected-checkbox {\\n    cursor: pointer;\\n}\\n\\n.modules-selected-text {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n    ;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n\\n.text-number {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.modules-datatable {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n\\n.modules-datatable::-webkit-scrollbar {\\n    width: 4px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n\\n.row-container {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n\\n.chevron {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n\\n.chevron.disabled {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n\\n.module-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n\\n.module-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.module-name.imported {\\n    top: 10px;\\n    left: 87px;\\n}\\n.module-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n\\n.model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n\\n.app-tier-model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n\\n.app-tier-model-name {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.version-text {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.version-text.disabled {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.version-icon {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n\\n.version-icon.disabled {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.footer {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n\\n.footer.deploy {\\n    position: relative;\\n    width: 100%;\\n}\\n\\n.footer.export {\\n    margin-top: 102px;\\n}\\n\\n.cancel-button {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n\\n\\n.save-button {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n.mobile-publish-text,\\n.web-publish-text {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.mobile-publish-text i,\\n.web-publish-text i {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n\\n.save-button.deploy {\\n    padding: 10px 16px;\\n}\\n\\n.button-disable .save-button {\\n    color: #757575;\\n    cursor: default;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n\\n.button-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n\\n.publish-info {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n\\n.qjson-color {\\n    color: #449dd1;\\n}\\n\\n.yaml-color {\\n    color: #449dd1;\\n}\\n.namedcomp-color {\\n    color: #212121;\\n}\\n.app-settings-color {\\n    color: #151233;\\n}\\n\\n.js-color {\\n    color: #449dd1;\\n}\\n\\n.css-color {\\n    color: #151233;\\n}\\n\\n.process-color {\\n    color: #007c77;\\n}\\n\\n.bpmn-color {\\n    color: #007c77;\\n}\\n\\n.entity-designer-color {\\n    color: #e9724c;\\n}\\n\\n.select-environment {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n</style>\\n\\n<style>\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue\"],\"names\":[],\"mappings\":\";AAk2CA;IACI,6BAA6B;IAC7B,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,yBAAyB;IACzB,gBAAgB;AACpB;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,yBAAyB;IACzB,0CAA0C;IAC1C,2BAA2B;AAC/B\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container\\\">\\n        <div>\\n            <CheckboxComp :class=\\\"['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']\\\"\\n                :minus=\\\"mainCheckboxState == false\\\" :check=\\\"mainCheckboxState == true\\\"\\n                @click=\\\"handleModuleCountCheckboxEvent(mainCheckboxState == undefined)\\\" />\\n            <div :class=\\\"['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n                <span class=\\\"text-number\\\">{{  allChildCheckedModulesCount + anyChildCheckedModulesCount + checkedRootLevelModelsCount }}</span>\\n                of <span class=\\\"text-number\\\">{{ totalRootLevelCount }}</span> items selected\\n            </div>\\n        </div>\\n\\n        <div :class=\\\"['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n            <div v-for=\\\"item in items\\\">\\n                <div v-if=\\\"item?.type == 'module'\\\">\\n                    <div class=\\\"row-container\\\">\\n                        <i v-if=\\\"!item.imported\\\" :class=\\\"'mdi mdi-menu' + (item.collapsed ? '-right' : '-down') + ' chevron' + (!item.children || item.children.length == 0 ? ' disabled': '')\\\"\\n                            @click=\\\"handleCollapse(item)\\\" />\\n                        <CheckboxComp class=\\\"module-checkbox\\\" :check=\\\"item.allChildChecked\\\"\\n                            :minus=\\\"!item.allChildChecked && item.anyChildChecked\\\" :disabled=\\\"item.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(item)\\\" />\\n                        <i v-if=\\\"item.imported\\\" class=\\\"app-tier-model-icon mdi mdi-puzzle\\\" />\\n                        <span :class=\\\"['module-name', item.imported ? ` imported` : (item.disabled ? ' disabled': '')]\\\">{{ item.name }}</span>\\n                        <div v-if=\\\"item.imported\\\" class='version-text' @click=\\\"moduleVersionDialog(item)\\\">\\n                            {{ item.version ? item.version : 'No version' }}\\n                            <i :class=\\\"['mdi mdi-pencil-outline version-icon']\\\"></i>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row-container\\\" v-show=\\\"!item.imported && !item.collapsed\\\" v-for=\\\"child in item?.children\\\">\\n                        <CheckboxComp class=\\\"model-checkbox\\\" :check=\\\"child.checked\\\" :disabled=\\\"child.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(child)\\\" />\\n                        <i v-if=\\\"child.type != 'module'\\\" :class=\\\"'model-icon ' + ModelContants.getModelVisualInfo(child.type, undefined).icon\\\" \\n                            :style=\\\"{ color: ModelContants.getModelVisualInfo(child.type, undefined).color }\\\" />\\n                        \\n                        <span :class=\\\"['model-name', child.disabled ? ' disabled' : '']\\\">{{ child.name }}</span>\\n                        <div v-if=\\\"!child.usageType || child.usageType == 'appSettings'\\\" :class=\\\"['version-text', child.disabled ? 'disabled' : '']\\\" @click=\\\"versionDialog(child)\\\">\\n                            {{ child.version ? child.version : 'No version' }} <i v-if=\\\"!child.usageType || child.usageType == 'appSettings'\\\" :class=\\\"['mdi mdi-pencil-outline version-icon', child.disabled ? 'disabled' : '']\\\"></i>\\n                        </div>\\n                        <span v-if=\\\"child.disabled && !child.version\\\" class=\\\"button-tooltip\\\" \\n                            style=\\\"z-index: 1; width: 300px;\\\">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n                        </span>\\n                    </div>\\n                </div>\\n                <div v-else>\\n                    <div class=\\\"row-container\\\">\\n                        <CheckboxComp class=\\\"module-checkbox\\\" :check=\\\"item?.checked\\\" :disabled=\\\"item.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(item)\\\" />\\n                        <i v-if=\\\"item?.type == 'qjson'\\\" class=\\\"mdi mdi-palette qjson-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'yaml'\\\" class=\\\"mdi mdi-cog-outline yaml-color app-tier-model-icon\\\" />\\n                        <i v-if=\\\"item?.type == 'js'\\\"\\n                            class=\\\"mdi mdi-cog-outline js-color app-tier-model-icon\\\" />\\n                        <i v-if=\\\"item?.type == 'css'\\\"\\n                            class=\\\"mdi mdi-music-accidental-sharp css-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'process'\\\" class=\\\"mdi mdi-auto-fix process-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'bpmn'\\\" class=\\\"mdi mdi-vector-polyline bpmn-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'entityDesigner'\\\"\\n                            class=\\\"mdi mdi-database entity-designer-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'flow'\\\" class=\\\"mdi mdi-step-forward bpmn-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item.type == 'namedComponent'\\\" class=\\\"mdi mdi-cube-outline namedcomp-color app-tier-model-icon\\\"></i>\\n                        <i v-else-if=\\\"item.type == 'appSettings'\\\" class=\\\"mdi mdi-cog app-settings-color app-tier-model-icon\\\"></i>\\n                        <span class=\\\"app-tier-model-name\\\">{{ item?.name }}\\n                            <span class=\\\"start-screen\\\" v-if=\\\"startScreen?.ID == item.id\\\">\\n                                <i class=\\\"mdi mdi-home-outline\\\"></i>\\n                                <span class=\\\"button-tooltip\\\" style=\\\"top: -30px; left: 2px; z-index: 1; width: 80px;\\\">Start\\n                                    Screen</span>\\n                            </span>\\n                        </span>\\n\\n                        <span v-if=\\\"!item.usageType\\\" :class=\\\"['version-text', item.disabled ? 'disabled' : '']\\\" @click=\\\"versionDialog(item)\\\">\\n                            {{ item.version ? item.version : 'No version' }} <i v-if=\\\"!item.usageType\\\" :class=\\\"['mdi mdi-pencil-outline version-icon', item.disabled ? 'disabled' : '']\\\"></i>\\n                        </span>\\n                        <span v-if=\\\"item.disabled && !item.version\\\" class=\\\"button-tooltip\\\"\\n                            style=\\\"z-index: 1; width: 300px;\\\">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n                        </span>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div v-if=\\\"props.screenType == 'Deploy'\\\" style=\\\"margin-bottom: 102px\\\">\\n            <div style=\\\"display: flex; align-items: center;\\\">\\n                <span class=\\\"custom-text environment\\\"> Publish To </span>\\n                <span class=\\\"publish-info\\\">\\n                    <i class=\\\"mdi mdi-information\\\"></i>\\n                    <span class=\\\"button-tooltip\\\" style=\\\"top: 460px; left: 96px; z-index: 1; width: 231px;\\\">Publish To\\n                        options may change depending on the module type you choose.</span>\\n                </span>\\n            </div>\\n\\n            <CustomSelect :options=\\\"publishTargets\\\" @input=\\\"onTargetSelect\\\" :selectedOption=\\\"selectedTarget\\\"\\n                :default=\\\"selectedTarget\\\" :disabledOptions=\\\"disabledOptions\\\" selectedClass=\\\"selected-environment\\\"\\n                placeholder=\\\"Select the publish environment of your application\\\" class=\\\"select-environment\\\">\\n            </CustomSelect>\\n        </div>\\n<!--         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> -->\\n        <div :class=\\\"['footer', props.screenType == 'Deploy' ? 'deploy' : 'export']\\\">\\n            <div :class=\\\"['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']\\\" @click=\\\"close\\\">Cancel</div>\\n            <div v-if=\\\"props.screenType == 'Export'\\\" :class=\\\"(saveButtonDisable ? ' button-disable' : '')\\\" @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button \\\">DOWNLOAD</span>\\n                <span v-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -80px; left: 626px; z-index: 1; width: 145px;\\\">There are no items ready to publish. At least one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 640px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n            <div v-if=\\\"props.screenType == 'Deploy'\\\" :class=\\\"[(saveButtonDisable ? ' button-disable' : '')]\\\" @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button deploy\\\">PUBLISH</span>\\n                <span v-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 652px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!selectedTarget\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 644px; z-index: 1; width: 123px;\\\">You need to select a publish environment.</span>\\n                <span v-else-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">There are no items ready to publish. At least one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n\\n        </div>\\n    </div>\\n</template>\\n\\n\\n<script setup lang=\\\"ts\\\">\\nimport { CryptoHelper } from \\\"@stechquick/algae/lib/helpers/cryptoHelper\\\";\\nimport { PlateauHelper } from \\\"@stechquick/algae/lib/helpers/plateau/plateauHelper\\\";\\nimport { computed, defineAsyncComponent, onMounted, ref } from \\\"vue\\\";\\nimport { IOrganizationCloud } from \\\"../../../../../../../common/clean/domain/useCases/ICloudProvider\\\";\\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem } from \\\"../../../../../../../common/qCloudTemp/exporter\\\";\\nimport { ModelContants } from \\\"../../../../../../../common/qCloudTemp/modelContants\\\";\\nimport { IFolder, IQJsonAdditionals, UsageType } from \\\"../../../../../../../common/qCloudTemp/quickCloud\\\";\\nimport { container } from \\\"../../../../../domain/core/diContainer\\\";\\nimport { IQCloudApi } from \\\"../../../../../domain/infrastructure/IQCloudApi\\\";\\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \\\"../../../../../domain/model/models\\\";\\nimport { IDialog } from \\\"../../../../../domain/presentation/IDialog\\\";\\nimport { ICreateExportJob } from \\\"../../../../../domain/useCase/ICreateExportJob\\\";\\nimport { IDeployJobs } from \\\"../../../../../domain/useCase/IDeployJobs\\\";\\nimport { IJobUtils } from \\\"../../../../../domain/useCase/IJobUtils\\\";\\nimport { IListMultiModelVersions } from \\\"../../../../../domain/useCase/IListMultiModelVersions\\\";\\nimport { IModelUseCase } from \\\"../../../../../domain/useCase/IModelUseCase\\\";\\nimport { IPackJobs } from \\\"../../../../../domain/useCase/IPackJobs\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IViewModel } from \\\"../../../../../domain/viewModel/IViewModel\\\";\\nimport { IViewModelManager } from \\\"../../../../../domain/viewModel/IViewModelManager\\\";\\nimport CustomSelect from \\\"../../../components/customSelect.vue\\\";\\nimport CheckboxComp from \\\"../../checkboxComp.vue\\\";\\nimport { IListMultiModuleVersions } from \\\"../../../../../domain/useCase/IListMultiModuleVersions\\\";\\n\\ninterface ITableData {\\n    id: string;\\n    parentId?: string;\\n    collapsed?: boolean;\\n    anyChildChecked?: boolean;\\n    allChildChecked?: boolean;\\n    checked?: boolean;\\n    name: string;\\n    type: IModel[\\\"modelType\\\"] | IModule[\\\"objectType\\\"];\\n    version?: string;\\n    disabled?: boolean | true;\\n    children?: Array<ITableData>;\\n    usageType?: UsageType;\\n    imported?: boolean;\\n}\\n\\ninterface IDeployScreenAdditionalProps {\\n    screenType: \\\"Export\\\" | \\\"Deploy\\\";\\n    platformSelection: IPlatformSelection;\\n}\\n\\ninterface IDisabledOptions {\\n    index: number\\n    cause: string;\\n}\\n\\nconst props = defineProps<IDeployScreenAdditionalProps>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\\nconst emit = defineEmits([\\\"close\\\"]);\\nconst items = ref<Array<ITableData>>([]);\\nconst validations = ref<boolean>(true);\\nconst selectedTarget = ref<string>(\\\"\\\");\\nconst disabledOptions = ref<Array<IDisabledOptions>>();\\nconst publishTargets = ref<Array<string>>();\\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\\nconst startScreen = ref<IModel>();\\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>>();\\nconst dependencyErrorStr = ref<string>('');\\n\\nonMounted(async () => {\\n    await Promise.all([\\n        executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, { }).then(res => modelHistories.value = res),\\n        executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, { }).then(res => importedModuleVersions.value = res)\\n    ])\\n    initDependencies();\\n    handleItems();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n    validations.value = validate();\\n})\\n\\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && e.allChildChecked).length);\\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && !e.allChildChecked && e.anyChildChecked).length);\\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \\\"module\\\" && e.checked).length);\\nconst totalRootLevelCount = computed(() => items.value.length);\\nconst saveButtonDisable = computed(() => (props.screenType == \\\"Deploy\\\" && props.platformSelection.web && selectedTarget.value == \\\"\\\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \\\"Export\\\" && !validateStartScreen()) || !validateDependencies());\\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true \\n        : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0  ? false : undefined));\\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\\nconst isAllDependenciesOK = computed(validateDependencies)\\nconst isStartScreenOK = computed(validateStartScreen)\\n\\nfunction validate() {\\n    let result = true;\\n    const modules = items.value.filter(e => e.type == \\\"module\\\" && e.anyChildChecked);\\n    const appLayerItems = items.value.filter(e => e.type == \\\"qjson\\\" && e.checked);\\n\\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => item.isRootPage);\\n    if(!startScreen.value)\\n        return false;\\n\\n    if (props.screenType == \\\"Deploy\\\") {\\n        if (modules.length > 0)\\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \\\"entityDesigner\\\" && f.checked)).length <= 0\\n\\n        let isApplicationWillDeploy = appLayerItems.length > 0;\\n        if (isApplicationWillDeploy) {\\n            result = appLayerItems\\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nfunction validateDependencies() {\\n    const checkMap = new Map<string, boolean>();\\n    items.value.forEach(item => {\\n        if(item.type == 'module' && item.children && item.children.length > 0)\\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\\n        else\\n            checkMap.set(item.id, item.checked == true)\\n    })\\n\\n    const mustBeCheckedMap = new Map<string, Array<string>>();\\n    dependencyMap.value?.forEach((deps, id) => {\\n        if(!checkMap.get(id)) \\n            return;\\n\\n        deps.dependedTo.forEach(dependedId => {\\n            if(checkMap.get(dependedId))\\n                return;\\n\\n            if(mustBeCheckedMap.has(id)){\\n                const vals = mustBeCheckedMap.get(id)!\\n                vals.push(dependedId)\\n                mustBeCheckedMap.set(id, vals)\\n            }else {\\n                mustBeCheckedMap.set(id, [dependedId])\\n            }\\n            \\n        });\\n    })\\n\\n    //set deps error text\\n    const [firstItemID] = mustBeCheckedMap.keys();\\n    if(firstItemID) {\\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\\n        dependencyErrorStr.value =`Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\\n    }\\n\\n    return mustBeCheckedMap.size == 0\\n}\\n\\nfunction validateStartScreen() {\\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\\n}\\n\\nfunction findItem (ID: string) {\\n    for(const item of items.value){\\n        if(item.type != 'module' && item.id == ID)\\n            return item;\\n        if(item.type == 'module' && item.children && item.children.length> 0 ){\\n            const f = item.children.find(e => e.id == ID)\\n            if(f) return f\\n        }\\n    }\\n}\\n\\nfunction initDependencies() {\\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>();\\n    const depMap = new Map<string, Array<string>>();\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path) => {\\n            if (item.objectType != \\\"model\\\") { return; }\\n\\n            const isImportedModule = item.parent.objectType == \\\"module\\\" && isModuleImported(item.parent);\\n            \\n            let version: string | undefined;\\n            if(!isImportedModule){\\n                const maxVersion = getItemMaxVersion(item)\\n                if(!maxVersion)\\n                    return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\\n                version = maxVersion;\\n            }\\n            else {\\n                const moduleVersions = importedModuleVersions.value?.get(item.parent.ID)\\n                const moduleVersion = (item.parent as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n\\n                const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\\n                version = importedModuleModel?.version\\n            }\\n\\n            const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\\n\\n            depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\\n    });\\n\\n    \\n    depMap.forEach((dependedTo, modelId) => {\\n        const dependedBy = Array<string>();\\n        depMap.forEach((dependencies, depModelId) => {\\n            if (dependencies.some(depId => depId == modelId))\\n                dependedBy.push(depModelId)\\n        })\\n        map.set(modelId, {dependedBy, dependedTo});\\n    })\\n    dependencyMap.value = map;\\n}\\n\\nfunction isModelDepended(item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\\n    if(!deps) return false;\\n\\n    return deps.some(dep => items.value.some(item => {\\n        if(item.type == 'module' && item.anyChildChecked){\\n            return item.children?.some(child => child.checked && child.id == dep)\\n        }\\n        return item.id == dep && item.checked\\n    }));\\n}\\n\\nasync function handleItems() {\\n    items.value = viewModel.studio.items\\n        .filter((item) => item.objectType == \\\"module\\\" && item.children.length > 0)\\n        .map((item) => {\\n            const isImportedModule = isModuleImported(item as IModule);\\n            const moduleVersion = (item as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n            const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\\n            const tableData: ITableData = {\\n                id: item.ID,\\n                collapsed: true,\\n                name: item.name,\\n                type: \\\"module\\\",\\n                imported: isImportedModule,\\n                version: moduleVersion,\\n                children: (item as IModule).children\\n                    .filter((child) => child.objectType == \\\"model\\\")\\n                    .map(child => child as IModel)\\n                    .map(child => {\\n                        const childModel: ITableData = {id: child.ID,parentId: item.ID,name: child.name,type: (child as IModel).modelType}\\n                        if(!isImportedModule || child.isUnmodifiable){\\n                            const maxVersion = getItemMaxVersion(child)                         \\n                            return {\\n                                ...childModel,\\n                                checked: maxVersion ? true : child.isUnmodifiable,\\n                                disabled: maxVersion ? false : !child.isUnmodifiable,\\n                                version: child.isUnmodifiable ? 'latest' : maxVersion,\\n                            } as ITableData\\n                        }\\n                        \\n                        const importedModulesModel = relatedModelHistories?.find(e => e.modelID == child.ID)\\n                        return {...childModel, checked: true,disabled: false, version: importedModulesModel?.version } as ITableData\\n                    })\\n            }\\n            handleParentCheckedStatus(tableData);\\n            return tableData;\\n        });\\n\\n    viewModel.studio.items\\n        .filter((item) => item.objectType == \\\"model\\\" && item.usageType != \\\"appSettings\\\" && item.usageType != \\\"appAssetList\\\")\\n        .map(item => item as IModel)\\n        .forEach((item) => {\\n            const maxVersion = getItemMaxVersion(item as IModel)\\n            items.value.push({\\n                    id: item.ID,\\n                    name: item.name,\\n                    checked: maxVersion || item.modelType==\\\"appSettings\\\" ? true : item.isUnmodifiable,\\n                    disabled: maxVersion || item.modelType==\\\"appSettings\\\" ? false : !item.isUnmodifiable,\\n                    type: (item as IModel).modelType,\\n                    version: item.isUnmodifiable || item.modelType==\\\"appSettings\\\" ? 'latest' : maxVersion,\\n                });\\n        });\\n    const uiSettingsID = CryptoHelper.CreateGuid();\\n    const appSettings = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appSettings\\\") as Array<IModel>;\\n    const uiSettings: ITableData = {\\n        id: uiSettingsID,\\n        collapsed: true,\\n        name: \\\"UI Settings\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        children: appSettings.map(settings => {\\n            const maxVersion = getItemMaxVersion(settings)\\n            return {\\n                id: settings.ID,\\n                parentId: uiSettingsID,\\n                name: settings.name,\\n                type: settings.modelType,\\n                checked: maxVersion != undefined,\\n                usageType: settings?.usageType,\\n                disabled: !maxVersion,\\n                version: maxVersion,\\n            }\\n        }) as Array<ITableData>,\\n    };\\n    handleParentCheckedStatus(uiSettings);\\n\\n    const uiAssetID = CryptoHelper.CreateGuid();\\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appAssetList\\\") as Array<IModel>;\\n    const uiAssetList: ITableData = {\\n        id: uiAssetID,\\n        collapsed: true,\\n        name: \\\"Styled Components\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        anyChildChecked: true,\\n        allChildChecked: true,\\n        children: appAssetList.map((asset) => ({\\n            id: asset.ID,\\n            parentId: uiSettingsID,\\n            name: asset.name,\\n            type: asset.modelType,\\n            checked: true,\\n            usageType: asset?.usageType,\\n        })) as Array<ITableData>,\\n    };\\n    handleParentCheckedStatus(uiAssetList);\\n\\n    items.value.unshift(uiAssetList);\\n    items.value.unshift(uiSettings);\\n    console.log(\\\"items => \\\", items.value);\\n}\\n\\nfunction getItemMaxVersion(item: IModel): string | undefined {\\n    if (!modelHistories.value?.has(item.ID))\\n        return undefined;\\n\\n    const versions = modelHistories.value.get(item.ID);\\n    if (!versions)\\n        return undefined;\\n\\n    const findMaxVersion = (versions: Array<string>) => {\\n        const versionNumbers = versions.map(v => {\\n            const parts: Array<string> = v.split(\\\".\\\");\\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\\n        })\\n\\n        versionNumbers.sort((a, b) => b - a);\\n\\n        const maxVersion = versionNumbers[0];\\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\\n    }\\n\\n    return findMaxVersion(versions.map(e => e.version!));\\n\\n}\\nfunction checkMaxVersionOfAllItems() {\\n    let isThereVersion: boolean = false;\\n    items.value.forEach(item => {\\n        if(item.type == \\\"module\\\") {\\n            item.children?.forEach(child => {\\n                if(child.version) {\\n                    isThereVersion = true;\\n                }\\n                \\n            })\\n        }\\n        else {\\n            if(item.version) {\\n                isThereVersion = true;\\n            }\\n        }\\n    })\\n    return isThereVersion;\\n}\\nfunction handleModuleCountCheckboxEvent(value: boolean) {\\n    items.value.filter(e => !e.disabled).forEach((item) => {\\n        item.checked = value;\\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\\n        if (allItemsCheckable) item.allChildChecked = value;\\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\\n    });\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleCollapse(item: ITableData) {\\n    item.collapsed = !item.collapsed;\\n}\\n\\nfunction checkAllDependents(item: ITableData) {\\n    if(item.disabled || item.checked) return;\\n\\n    item.checked = true\\n    item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!);\\n\\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\\n    if(!deps) return;\\n\\n    deps.forEach(dep => {\\n        items.value.forEach(item => {\\n            if(item.type == 'module' && !item.allChildChecked){\\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\\n                willCheckItem && checkAllDependents(willCheckItem)\\n                handleParentCheckedStatus(item)\\n                return;\\n            }\\n\\n            if(!item.checked && item.id == dep) {\\n                checkAllDependents(item)\\n                item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\\n            }\\n        })\\n    });\\n}\\n\\nfunction handleItemCheckEvent(item: ITableData) {\\n    if(item.disabled || isModelDepended(item))\\n        return;\\n\\n    if(item.type != \\\"module\\\") {\\n        if(item.checked){\\n            item.checked = false;\\n            item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\\n        } else {\\n            checkAllDependents(item)\\n        }\\n    } else {\\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\\n            if (item.anyChildChecked) {\\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\\n                item.checked = false;\\n                handleParentCheckedStatus(item);\\n            } else {\\n                item.children.forEach(checkAllDependents);\\n                item.checked = true;\\n            }\\n        }\\n        else {\\n            item.checked = !item.checked;\\n            item.allChildChecked = false;\\n        }\\n    }\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleParentCheckedStatus(item: ITableData) {\\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\\n}\\n\\nfunction syncPublishTargets() {\\n    publishTargets.value = []; disabledOptions.value = [];\\n\\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\\n    if (!targets)\\n        return;\\n\\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\\n    if (!isSelectAnyItem) {\\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\\n        const disabledOptionList = Array<IDisabledOptions>();\\n        for (let i = 0; i < publishTargets.value.length; i++) {\\n            disabledOptionList.push({ index: i, cause: \\\"You need to include items to publish.\\\" })\\n        }\\n        disabledOptions.value = disabledOptionList;\\n        return;\\n    }\\n\\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\\n\\n    const disabledOptionList = Array<IDisabledOptions>();\\n    for (let i = 0; i < sortedTargets.length; i++) {\\n        const cause = sortedTargets[i].cause;\\n        if (cause) disabledOptionList.push({ index: i, cause })\\n    }\\n    disabledOptions.value = disabledOptionList;\\n    publishTargets.value = sortedTargets.map(e => e.optionName);\\n\\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \\\"\\\";\\n}\\n\\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\\n    const list = Array<{ optionName: string, cause?: string }>();\\n\\n    Object.keys(targets).forEach(e => {\\n        const key = e as keyof IOrganizationCloud;\\n        const value = targets[key];\\n        const optionName = cloudTargetMap(key)!;\\n        if (!value)\\n            return list.push({ optionName, cause: \\\"You are not authorized to publish to this target.\\\" });\\n\\n\\n        switch (key) {\\n            case \\\"azure\\\":\\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\\n                    if (!items || items.length == 0) { return status; }\\n                    for (const item of items) {\\n                        if (item.checked || item.anyChildChecked) {\\n                            if (item.type == \\\"module\\\") {\\n                                status = traverseSelectedItems(status, item.children);\\n                            }\\n                            if (item.type == \\\"entityDesigner\\\" || item.type == \\\"bpmn\\\" || item.type == \\\"process\\\") {\\n                                status = false;\\n                                break;\\n                            }\\n                        }\\n\\n                    }\\n                    return status;\\n                }\\n\\n                const status = traverseSelectedItems(true, items.value);\\n                if (!status)\\n                    return list.push({ optionName, cause: \\\"Entity and process models cannot be published to this target.\\\" });\\n                break;\\n            case \\\"plateauGCP\\\":\\n                const modulesHasNotAnEDModel =  items.value.filter(e => e.name != \\\"UI Settings\\\").find(e => e.type == \\\"module\\\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \\\"bpmn\\\" || c.type == \\\"process\\\")) && !e.children?.some(c => c.type == \\\"entityDesigner\\\" && c.checked))\\n                if (modulesHasNotAnEDModel)\\n                    return list.push({optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.`})\\n                break;\\n        }\\n\\n        list.push({ optionName });\\n    })\\n\\n    return list;\\n}\\n\\nfunction updateDependencyMap(newVersion: string, item: ITableData) { \\n    const deps = dependencyMap.value?.get(item.id);\\n    dependencyMap.value?.set(item.id, {\\n        dependedBy: deps?.dependedBy || Array<string>(), \\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\\n    })\\n}\\n\\nfunction versionDialog(item: ITableData) {\\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\\n    const hasAnyVersion = modelHistories.value?.has(item.id);\\n    const options = { clickedNode, cb: (version: string) => { \\n        item.version = version;\\n        updateDependencyMap(version, item);\\n    } } as any;\\n\\n    if (hasAnyVersion) {\\n        options.versions = modelHistories.value?.get(item.id)\\n    }\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/modelVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" }, options\\n    );\\n}\\n\\n\\nfunction moduleVersionDialog(item: ITableData) {\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/moduleVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" },\\n        { module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => { \\n            item.version = moduleVersion.version;\\n            item.children?.forEach(child => {\\n                const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\\n                child.version = modulesModel?.version\\n                updateDependencyMap(modulesModel?.version!, child);\\n            })\\n        }}\\n    );\\n}\\n\\nfunction close() {\\n    emit(\\\"close\\\");\\n}\\n\\nasync function save() {\\n    executor.execute(\\n        async () => {\\n            const initAsGroup = async () => {\\n                const groupID = CryptoHelper.CreateGuid();\\n                await initHistory(groupID);\\n                await packJob(groupID);\\n                return groupID;\\n            }\\n\\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\\n\\n            switch (props.screenType) {\\n                case \\\"Export\\\":\\n                    if(isFlowBackend) {\\n                        const deployItems = await createAzureDeployItems();\\n                        await packJobsUseCase.createPackJobs([{\\n                            appID: viewModel.studio.appId,\\n                            exportType: \\\"qui\\\",\\n                            selectionData: deployItems\\n                        }]);\\n                        break;\\n                    }\\n\\n                    const groupID = await initAsGroup();\\n                    await createExportJob(groupID);\\n                    break;\\n                case \\\"Deploy\\\":\\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\\n                        case \\\"plateauGCP\\\":\\n                            const groupID = await initAsGroup();\\n                            await createDeployJob(groupID);\\n                            break;\\n                        case \\\"azure\\\":\\n                            const deployItems = await createAzureDeployItems();\\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\\n                            break;\\n                    }\\n            }\\n            emit(\\\"close\\\");\\n        },\\n        { loading: true });\\n}\\n\\nasync function createAzureDeployItems() {\\n    const deployItems: Array<IExportItem> = [];\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\\n        if (!items || items.length == 0) { return; }\\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\\n            if (item.type == \\\"module\\\") {\\n                traverseSelectedItems(item.children);\\n                return;\\n            }\\n\\n            const itemMap = itemIdObj[item.id];\\n\\n            const deployItem: IExportItem = {\\n                id: item.id,\\n                name: jobUtils.getFileFullname(itemMap.item),\\n                path: itemMap.path,\\n                type: jobUtils.getItemType(itemMap.item),\\n                ver: item.version || \\\"latest\\\",\\n                isRootPage: itemMap.item.isRootPage,\\n                prefix: itemMap.prefix,\\n                ownerType: 'application',\\n                ownerName: viewModel.studio.appName,\\n                size: itemMap.item.size,\\n                createDate: itemMap.item.createDate,\\n            };\\n            deployItems.push(deployItem)\\n        });\\n    };\\n\\n    traverseSelectedItems(items.value);\\n\\n    return deployItems;\\n}\\n\\nasync function initHistory(groupID: string) {\\n    return qcloudApi.initPublishHistory({\\n        appID: viewModel.studio.appId,\\n        ID: groupID,\\n        isMultiStep: true,\\n        type: props.screenType == \\\"Deploy\\\" ? \\\"publish\\\" : \\\"download\\\",\\n        cloudProvider: props.screenType == \\\"Deploy\\\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\\n        platform: props.platformSelection\\n    });\\n}\\n\\nasync function packJob(groupID: string) {\\n    let exportItemMap = new Map<string, Array<IExportItem>>();\\n    const appName = viewModel.studio.appName;\\n\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const createExportObject = (tableItem: ITableData) => {\\n        const item = itemIdObj[tableItem.id].item;\\n        const isAppItem = item.modelType == 'qjson' ;\\n        return {\\n            id: tableItem.id,\\n            ver: tableItem.version,\\n            type: jobUtils.getItemType(item),\\n            path: itemIdObj[tableItem.id].path,\\n            prefix: itemIdObj[tableItem.id].prefix,\\n            name: jobUtils.getFileFullname(item),\\n            ownerType: isAppItem ? 'application' : item.parent.objectType,\\n            ownerName: isAppItem ? appName : item.parent.name,\\n        } as IExportItem;\\n    }\\n\\n    const addToExportItem = (key: string, obj: IExportItem) => {\\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\\n        let items = exportItemMap.get(key);\\n        if(items && items.length > 0){\\n            items.push(obj);\\n            exportItemMap.set(key, items);\\n        } else\\n            exportItemMap.set(key, [obj]);\\n    }\\n\\n    items.value.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\\n        if (asset.type == 'module') {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                const obj = createExportObject(child);\\n                if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n\\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n            });\\n        } else {\\n            const obj = createExportObject(asset);\\n            if (asset.type == 'qjson'){\\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \\\"model\\\" && i.modelType == \\\"qjson\\\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\\n                obj.isRootPage = isRootPage ? true : undefined;\\n            }\\n            addToExportItem(appName, obj);\\n        }\\n    })\\n\\n    let jobs = Array<ICreateExportJobParam>();\\n    exportItemMap.forEach((v, k) => {\\n        jobs.push({\\n            appID: viewModel.studio.appId,\\n            exportType: \\\"qui\\\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \\\"model\\\":  \\\"qui\\\"\\n            selectionData: v,\\n            cause: props.screenType == 'Export' ? 'download': \\\"publish\\\",\\n            layer: 0,\\n            groupID: groupID,\\n            platformSelection: props.platformSelection\\n        })\\n    })\\n    \\n    await packJobsUseCase.createPackJobs(jobs);\\n}\\n\\nasync function createExportJob(groupID: string) {\\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\\n        appID: viewModel.studio.appId,\\n        exportType: \\\"qui\\\",\\n        selectionData: [],\\n        layer: 1,\\n        groupID: groupID\\n    });\\n}\\n\\nasync function createDeployJob(groupID: string) {\\n    //1-(n) L1- deployJob(build)\\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\\n        .then(jobs => jobs.jobs.map(e => {\\n            const jobData = e.jobData as IExportJobData;\\n            return {\\n                ownerName: jobData.items[0].ownerName,\\n                jobID: e.jobID,\\n                type: jobData.items[0].ownerType,\\n                mainDir: getDeployableArchiveRoot(jobData)\\n            }\\n        }));\\n\\n    if (!packages || packages.length <= 0)\\n        return;\\n\\n    let buildJobs = Array<ICreateDeployJobParam>();\\n    packages.forEach(pack => {\\n        buildJobs.push({\\n            appID: viewModel.studio.appId,\\n            type: \\\"build\\\",\\n            package: {\\n                type: pack.type as DeployType,\\n                name: pack.ownerName!,\\n                mainDir: pack.mainDir,\\n                zip: `${pack.jobID}.zip`,\\n            },\\n            layer: 1,\\n            groupID: groupID\\n        })\\n    })\\n\\n    await deployJobsUseCase.createBuildJobs(buildJobs);\\n\\n    //2-(1) L2- deployJob(deployment)\\n    let jobParam: ICreateDeployJobParam = {\\n        appID: viewModel.studio.appId,\\n        type: \\\"deployment\\\",\\n        deployConfig: {\\n            process: {\\n                configModelIDs: getProcessConfigList(),\\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \\\"bpmn\\\"))\\n            }\\n        },\\n        layer: 2,\\n        groupID: groupID,\\n        platformSelection: props.platformSelection\\n    }\\n\\n    await deployJobsUseCase.startDeploymentJob(jobParam);\\n}\\n\\nfunction getProcessConfigList() {\\n    let processConfigList = Array<IProcessConfigModelItem>();\\n    items.value.forEach((asset) => {\\n        if (asset.type == \\\"module\\\" && asset.anyChildChecked && asset.children) {\\n            const usingService = asset.children.find(c => c.type == \\\"entityDesigner\\\");\\n            if (!usingService)\\n                return;\\n\\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\\n            asset.children.forEach(child => {\\n                if (child.checked && child.type == \\\"process\\\") {\\n                    processConfigList.push({\\n                        moduleName: serviceName,\\n                        model: {\\n                            id: child.id,\\n                            name: child.name,\\n                            version: child.version!\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n    })\\n    return processConfigList;\\n}\\n\\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\\n    if (jobData.items[0].ownerType == \\\"module\\\") {\\n        let edModel = jobData.items.find(e => e.type == \\\"entityDesigner\\\");\\n        if (!edModel)\\n            throw new Error(\\\"!!! this module cannot deploy. Because its have not a service\\\");\\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\\n    }\\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\\n}\\n\\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \\\"Public Cloud\\\", plateauGCP: \\\"Plateau Platform Playground\\\" };\\n    if (pureVal) {\\n        return Object.keys(map).find(e => {\\n            if (map[e as keyof IOrganizationCloud] === name) {\\n                return true;\\n            }\\n        })\\n    } else {\\n        let key = Object.keys(map).includes(name);\\n        if (!key)\\n            return;\\n        return map[name as keyof IOrganizationCloud];\\n    }\\n}\\n\\nfunction onTargetSelect(value: string) {\\n    selectedTarget.value = value\\n}\\n\\nconst isModuleImported = (item: IModule) => {\\n    const hasAVersion = item.relatedApplications.find(e => e.applicationID == viewModel.studio.appId)?.importedVersion;\\n    if(item.mainOwner != viewModel.studio.appId && item.relatedApplications.at(0)?.applicationID != viewModel.studio.appId && hasAVersion)\\n        return true;\\n    return false;\\n}\\n\\n</script>\\n\\n\\n<style scoped>\\n.container {\\n    padding: 32px 20px 20px;\\n}\\n\\n.settings-container {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n\\n.custom-text {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n\\n.radio-button {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n\\n.radio-text {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n\\n.existing-app-url {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n\\n.url-error {\\n    border: 1px solid red;\\n}\\n\\n.url-disable {\\n    opacity: 0.5;\\n}\\n\\n.existing-app-url::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n\\n.modules-selected-checkbox {\\n    cursor: pointer;\\n}\\n\\n.modules-selected-text {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n    ;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n\\n.text-number {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.modules-datatable {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n\\n.modules-datatable::-webkit-scrollbar {\\n    width: 4px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n\\n.row-container {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n\\n.chevron {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n\\n.chevron.disabled {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n\\n.module-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n\\n.module-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.module-name.imported {\\n    top: 10px;\\n    left: 87px;\\n}\\n.module-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n\\n.model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n\\n.app-tier-model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n\\n.app-tier-model-name {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.version-text {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.version-text.disabled {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.version-icon {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n\\n.version-icon.disabled {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.footer {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n\\n.footer.deploy {\\n    position: relative;\\n    width: 100%;\\n}\\n\\n.footer.export {\\n    margin-top: 102px;\\n}\\n\\n.cancel-button {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n\\n\\n.save-button {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n.mobile-publish-text,\\n.web-publish-text {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.mobile-publish-text i,\\n.web-publish-text i {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n\\n.save-button.deploy {\\n    padding: 10px 16px;\\n}\\n\\n.button-disable .save-button {\\n    color: #757575;\\n    cursor: default;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n\\n.button-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n\\n.publish-info {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n\\n.qjson-color {\\n    color: #449dd1;\\n}\\n\\n.yaml-color {\\n    color: #449dd1;\\n}\\n.namedcomp-color {\\n    color: #212121;\\n}\\n.app-settings-color {\\n    color: #151233;\\n}\\n\\n.js-color {\\n    color: #449dd1;\\n}\\n\\n.css-color {\\n    color: #151233;\\n}\\n\\n.process-color {\\n    color: #007c77;\\n}\\n\\n.bpmn-color {\\n    color: #007c77;\\n}\\n\\n.entity-designer-color {\\n    color: #e9724c;\\n}\\n\\n.select-environment {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n</style>\\n\\n<style>\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export class CryptoHelper {\n    private static guidCounter = 0;\n\n    /**\n     * \n     * @param base number layout (number of distinct digits) (10'luk sayı düzeni, 16'lık sayı düzeni)\n     * @param length length of word. Max value: 16\n     */\n    public static GetRandomWord(base: number, length: number) {\n        return Math.random().toString(base).substring(2, length + 2);\n    }\n\n    /**\n     * Ex: be945482-jf10-40d1-a50d-rzxa2c41fdcu\n     */\n    public static CreateGuid() {\n        return [8, 4, 4, 4, 6].map(length => this.GetRandomWord(36, length)).join(\"-\") + ((++CryptoHelper.guidCounter) % 2150000000).toString(36);\n    }\n}","\nexport class PlateauHelper {\n    public static purify = (str: string) => str.replace(/[^a-zA-Z0-9]/g, \"\").toLowerCase();\n\n    public static getPlateauEnvironmentName = (envPrefix: string, appName: string) => {\n        if(!envPrefix || !appName)\n            throw new Error(\"Environment name prefix or application name not found!!!\" );\n\n        envPrefix = (envPrefix.endsWith(\"-\") ? envPrefix : (envPrefix + \"-\")).toLowerCase();\n        appName = PlateauHelper.purify(appName);\n        return `${envPrefix}${appName}`;\n    }\n\n    public static getQuiPackageNameFromAppName = (appName: string) => `${PlateauHelper.purify(appName)}-qui`;\n\n    public static getApplicationUINameFromQuiPkg = (quiPackageName: string) => PlateauHelper.purify(quiPackageName.replace(\"-qui\", \"ui\"));\n    \n    public static getApplicationHostNamePrefix = (appName: string) => `${PlateauHelper.purify(appName)}ui`;\n\n    public static getServiceNameFromModel = (modelName: string) => PlateauHelper.purify(modelName.replace(\".dm\", \"\"));\n}\n","import { IQJsonAdditionals, ModelAdditionals, ModelType } from \"./quickCloud\";\n\ntype ValueOf<Type> = Type extends any ? Type[keyof Type] : never;\ntype FieldValueOf<Type extends typeof typeSafety, Field extends keyof Type[keyof Type]> = Type[keyof Type][Field]\nexport type EditorModelTypes = ValueOf<FieldValueOf<typeof EditorConsts, \"modelKeys\">>;\nlet typeSafety: Record<string, { modelKeys: Record<string, string> }>;\nexport const EditorConsts = typeSafety = {\n    quick: {\n        modelKeys: {\n            self: \"qjson\" as \"qjson\",\n        }\n    },\n    flow: {\n        modelKeys: {\n            design: \"flow-design\" as \"flow-design\",\n            runtime: \"flow-runtime\" as \"flow-runtime\",\n        }\n    },\n    flowEntity: {\n        modelKeys: {\n            single: \"flow-entity\" as \"flow-entity\",\n        }\n    },\n};\n\ninterface ModelVisualInfo {\n    icon: string;\n    color: string;\n}\nconst cssJsTsYaml: ModelVisualInfo = { color: \"#449DD1\", icon: \"mdi mdi-cog-outline\" };\nconst jpegJpgPngSvgGif: ModelVisualInfo = { color: \"#212121\", icon: \"mdi mdi-image-outline \" }\nconst modelVisuals: Record<ModelType, ModelVisualInfo | Error | ((additional: ModelAdditionals | undefined) => ModelVisualInfo)> = {\n    qjson: (additionals) => {\n        if (additionals && (additionals as IQJsonAdditionals).qjsonType == \"quickComponent\") {\n            return { color: \"#449DD1\", icon: \"mdi mdi-shape-outline\" };\n        }\n        return { color: \"#449DD1\", icon: \"mdi mdi-palette\" };\n    },\n    css: { color: \"#151233\", icon: \"mdi mdi-music-accidental-sharp\" },\n    js: cssJsTsYaml,\n    ts: cssJsTsYaml,\n    yaml: cssJsTsYaml,\n    entityDesigner: { color: \"#E9724C\", icon: \"mdi mdi-database\" },\n    bpmn: { color: \"#007C77\", icon: \"mdi mdi-vector-polyline\" },\n    process: { color: \"#007C77\", icon: \"mdi mdi-auto-fix\" },\n    flow: { color: \"#007C77\", icon: \"mdi mdi-step-forward\" },\n    flowEntity: { color: \"blue\", icon: \"mdi mdi-step-forward\" },\n    namedComponent: { color: \"#212121\", icon: \"mdi mdi-cube-outline\" },\n    step: new Error(\"unimplemented for namedComponent\"),\n    jpeg: jpegJpgPngSvgGif,\n    jpg: jpegJpgPngSvgGif,\n    png: jpegJpgPngSvgGif,\n    svg: jpegJpgPngSvgGif,\n    gif: jpegJpgPngSvgGif,\n    lottie: jpegJpgPngSvgGif,\n    appSettings: new Error(\"unimplemented for appSettings\"),\n    json: new Error(\"unimplemented for json\"),\n}\n\nexport class ModelContants {\n    public static getModelVisualInfo(modelType: ModelType, modelAdditionals: ModelAdditionals | undefined): ModelVisualInfo {\n        const retVal = modelVisuals[modelType];\n        if (retVal instanceof Error) { throw retVal; }\n        return typeof retVal == \"function\" ? retVal(modelAdditionals) : retVal;\n    }\n}","import { ICreateExportJobParam } from \"../../../../common/qCloudTemp/exporter\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface ICreateExportJob extends IUseCase<void, ICreateExportJobParam> {}\n\nexport const ICreateExportJob = Symbol.for(\"ICreateExportJob\");","import { ICreateDeployJobParam, IDeployJobItem, IExportItem, IPlatformSelection } from \"../../../../common/qCloudTemp/exporter\";\nimport { IProviderGetLastBuildStatusResponse } from \"../infrastructure/IProviderApi\";\n\nexport interface IDeployJobs {\n    createAppDeployJob(deployItems: Array<IExportItem>, platformSelection?: IPlatformSelection ): Promise<void>;\n    startDeploymentJob(deployJobs: ICreateDeployJobParam): Promise<void>;\n    createBuildJobs(deployJobs: Array<ICreateDeployJobParam>): Promise<void>;\n    checkRepoHasService(repoIds: Array<number>): Promise<Array<{ repoId: number; exist: boolean }>>;\n    getRepoNameById(repoId: number): Promise<string>;\n    getProductConfigInfo(productRepoId: number, quiRepoId?: number): Promise<{ domain: string; quiName?: string }>;\n    getLastBuildStatus(jobName: string): Promise<IProviderGetLastBuildStatusResponse>;\n}\n\nexport const IDeployJobs = Symbol.for(\"IDeployJobs\");","import { IExportItem } from \"../../../../common/qCloudTemp/exporter\";\nimport { IExportViewItem, IModel } from \"../model/models\";\n\nexport interface IJobUtils {\n    //settingTypeMapper(fileName: string): IExportItem[\"type\"];\n    getItemType(item: IExportViewItem | IModel): IExportItem[\"type\"];\n    getFileFullname(item: IExportViewItem | IModel): string;\n}\n\nexport const IJobUtils = Symbol.for(\"IJobUtils\");","import { IModelHistoryInfo } from \"../model/models\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModelVersionsParam { }\nexport interface IListMultiModelVersions extends IUseCase<Map<string, Array<IModelHistoryInfo>>, IListMultiModelVersionsParam> {\n\n}\nexport const IListMultiModelVersions = Symbol.for(\"IListMultiModelVersions\");","import { IModuleVersion } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModuleVersionsParam { }\nexport interface IListMultiModuleVersions extends IUseCase<Map<string, Array<IModuleVersion>>, IListMultiModuleVersionsParam> {\n\n}\nexport const IListMultiModuleVersions = Symbol.for(\"IListMultiModuleVersions\");","import { ICreateExportJobParam, IExportJobDbItem } from \"../../../../common/qCloudTemp/exporter\";\nexport interface IPackJobs {\n    createPackJobs(jobs: Array<ICreateExportJobParam>): Promise<Array<IExportJobDbItem>>;\n}\n\nexport const IPackJobs = Symbol.for(\"IPackJobs\");","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, normalizeClass as _normalizeClass, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, vShow as _vShow, withDirectives as _withDirectives, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-4da75764\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"container\" }\nconst _hoisted_2 = { class: \"text-number\" }\nconst _hoisted_3 = { class: \"text-number\" }\nconst _hoisted_4 = { key: 0 }\nconst _hoisted_5 = { class: \"row-container\" }\nconst _hoisted_6 = [\"onClick\"]\nconst _hoisted_7 = {\n  key: 1,\n  class: \"app-tier-model-icon mdi mdi-puzzle\"\n}\nconst _hoisted_8 = [\"onClick\"]\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: /*#__PURE__*/_normalizeClass(['mdi mdi-pencil-outline version-icon'])\n}, null, -1 /* HOISTED */))\nconst _hoisted_10 = { class: \"row-container\" }\nconst _hoisted_11 = [\"onClick\"]\nconst _hoisted_12 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"z-index\":\"1\",\"width\":\"300px\"}\n}\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Stop Working\", -1 /* HOISTED */))\nconst _hoisted_14 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Ready to Publish\", -1 /* HOISTED */))\nconst _hoisted_15 = { key: 1 }\nconst _hoisted_16 = { class: \"row-container\" }\nconst _hoisted_17 = {\n  key: 0,\n  class: \"mdi mdi-palette qjson-color app-tier-model-icon\"\n}\nconst _hoisted_18 = {\n  key: 1,\n  class: \"mdi mdi-cog-outline yaml-color app-tier-model-icon\"\n}\nconst _hoisted_19 = {\n  key: 2,\n  class: \"mdi mdi-cog-outline js-color app-tier-model-icon\"\n}\nconst _hoisted_20 = {\n  key: 3,\n  class: \"mdi mdi-music-accidental-sharp css-color app-tier-model-icon\"\n}\nconst _hoisted_21 = {\n  key: 4,\n  class: \"mdi mdi-auto-fix process-color app-tier-model-icon\"\n}\nconst _hoisted_22 = {\n  key: 5,\n  class: \"mdi mdi-vector-polyline bpmn-color app-tier-model-icon\"\n}\nconst _hoisted_23 = {\n  key: 6,\n  class: \"mdi mdi-database entity-designer-color app-tier-model-icon\"\n}\nconst _hoisted_24 = {\n  key: 7,\n  class: \"mdi mdi-step-forward bpmn-color app-tier-model-icon\"\n}\nconst _hoisted_25 = {\n  key: 8,\n  class: \"mdi mdi-cube-outline namedcomp-color app-tier-model-icon\"\n}\nconst _hoisted_26 = {\n  key: 9,\n  class: \"mdi mdi-cog app-settings-color app-tier-model-icon\"\n}\nconst _hoisted_27 = { class: \"app-tier-model-name\" }\nconst _hoisted_28 = {\n  key: 0,\n  class: \"start-screen\"\n}\nconst _hoisted_29 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-home-outline\" }, null, -1 /* HOISTED */))\nconst _hoisted_30 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"button-tooltip\",\n  style: {\"top\":\"-30px\",\"left\":\"2px\",\"z-index\":\"1\",\"width\":\"80px\"}\n}, \"Start Screen\", -1 /* HOISTED */))\nconst _hoisted_31 = [\n  _hoisted_29,\n  _hoisted_30\n]\nconst _hoisted_32 = [\"onClick\"]\nconst _hoisted_33 = {\n  key: 11,\n  class: \"button-tooltip\",\n  style: {\"z-index\":\"1\",\"width\":\"300px\"}\n}\nconst _hoisted_34 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Stop Working\", -1 /* HOISTED */))\nconst _hoisted_35 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Ready to Publish\", -1 /* HOISTED */))\nconst _hoisted_36 = {\n  key: 0,\n  style: {\"margin-bottom\":\"102px\"}\n}\nconst _hoisted_37 = /*#__PURE__*/_createStaticVNode(\"<div style=\\\"display:flex;align-items:center;\\\" data-v-4da75764><span class=\\\"custom-text environment\\\" data-v-4da75764> Publish To </span><span class=\\\"publish-info\\\" data-v-4da75764><i class=\\\"mdi mdi-information\\\" data-v-4da75764></i><span class=\\\"button-tooltip\\\" style=\\\"top:460px;left:96px;z-index:1;width:231px;\\\" data-v-4da75764>Publish To options may change depending on the module type you choose.</span></span></div>\", 1)\nconst _hoisted_38 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"save-button\" }, \"DOWNLOAD\", -1 /* HOISTED */))\nconst _hoisted_39 = {\n  key: 0,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-80px\",\"left\":\"626px\",\"z-index\":\"1\",\"width\":\"145px\"}\n}\nconst _hoisted_40 = {\n  key: 1,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"640px\",\"z-index\":\"1\",\"width\":\"120px\"}\n}\nconst _hoisted_41 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\nconst _hoisted_42 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"save-button deploy\" }, \"PUBLISH\", -1 /* HOISTED */))\nconst _hoisted_43 = {\n  key: 0,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"652px\",\"z-index\":\"1\",\"width\":\"120px\"}\n}\nconst _hoisted_44 = {\n  key: 1,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"123px\"}\n}\nconst _hoisted_45 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\nconst _hoisted_46 = {\n  key: 3,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\n\nimport { CryptoHelper } from \"@stechquick/algae/lib/helpers/cryptoHelper\";\nimport { PlateauHelper } from \"@stechquick/algae/lib/helpers/plateau/plateauHelper\";\nimport { computed, defineAsyncComponent, onMounted, ref } from \"vue\";\nimport { IOrganizationCloud } from \"../../../../../../../common/clean/domain/useCases/ICloudProvider\";\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem } from \"../../../../../../../common/qCloudTemp/exporter\";\nimport { ModelContants } from \"../../../../../../../common/qCloudTemp/modelContants\";\nimport { IFolder, IQJsonAdditionals, UsageType } from \"../../../../../../../common/qCloudTemp/quickCloud\";\nimport { container } from \"../../../../../domain/core/diContainer\";\nimport { IQCloudApi } from \"../../../../../domain/infrastructure/IQCloudApi\";\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \"../../../../../domain/model/models\";\nimport { IDialog } from \"../../../../../domain/presentation/IDialog\";\nimport { ICreateExportJob } from \"../../../../../domain/useCase/ICreateExportJob\";\nimport { IDeployJobs } from \"../../../../../domain/useCase/IDeployJobs\";\nimport { IJobUtils } from \"../../../../../domain/useCase/IJobUtils\";\nimport { IListMultiModelVersions } from \"../../../../../domain/useCase/IListMultiModelVersions\";\nimport { IModelUseCase } from \"../../../../../domain/useCase/IModelUseCase\";\nimport { IPackJobs } from \"../../../../../domain/useCase/IPackJobs\";\nimport { IUseCaseExecutor } from \"../../../../../domain/useCase/IUseCaseExecutor\";\nimport { IViewModel } from \"../../../../../domain/viewModel/IViewModel\";\nimport { IViewModelManager } from \"../../../../../domain/viewModel/IViewModelManager\";\nimport CustomSelect from \"../../../components/customSelect.vue\";\nimport CheckboxComp from \"../../checkboxComp.vue\";\nimport { IListMultiModuleVersions } from \"../../../../../domain/useCase/IListMultiModuleVersions\";\n\ninterface ITableData {\n    id: string;\n    parentId?: string;\n    collapsed?: boolean;\n    anyChildChecked?: boolean;\n    allChildChecked?: boolean;\n    checked?: boolean;\n    name: string;\n    type: IModel[\"modelType\"] | IModule[\"objectType\"];\n    version?: string;\n    disabled?: boolean | true;\n    children?: Array<ITableData>;\n    usageType?: UsageType;\n    imported?: boolean;\n}\n\ninterface IDeployScreenAdditionalProps {\n    screenType: \"Export\" | \"Deploy\";\n    platformSelection: IPlatformSelection;\n}\n\ninterface IDisabledOptions {\n    index: number\n    cause: string;\n}\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'publishDialog',\n  props: {\n    screenType: null,\n    platformSelection: null\n  },\n  emits: [\"close\"],\n  setup(__props: any, { emit }) {\n\nconst props = __props as {\n    screenType: \"Export\" | \"Deploy\";\n    platformSelection: IPlatformSelection;\n};\n\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\n\nconst items = ref<Array<ITableData>>([]);\nconst validations = ref<boolean>(true);\nconst selectedTarget = ref<string>(\"\");\nconst disabledOptions = ref<Array<IDisabledOptions>>();\nconst publishTargets = ref<Array<string>>();\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\nconst startScreen = ref<IModel>();\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>>();\nconst dependencyErrorStr = ref<string>('');\n\nonMounted(async () => {\n    await Promise.all([\n        executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, { }).then(res => modelHistories.value = res),\n        executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, { }).then(res => importedModuleVersions.value = res)\n    ])\n    initDependencies();\n    handleItems();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n    validations.value = validate();\n})\n\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \"module\" && e.allChildChecked).length);\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \"module\" && !e.allChildChecked && e.anyChildChecked).length);\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \"module\" && e.checked).length);\nconst totalRootLevelCount = computed(() => items.value.length);\nconst saveButtonDisable = computed(() => (props.screenType == \"Deploy\" && props.platformSelection.web && selectedTarget.value == \"\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \"Export\" && !validateStartScreen()) || !validateDependencies());\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true \n        : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0  ? false : undefined));\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\nconst isAllDependenciesOK = computed(validateDependencies)\nconst isStartScreenOK = computed(validateStartScreen)\n\nfunction validate() {\n    let result = true;\n    const modules = items.value.filter(e => e.type == \"module\" && e.anyChildChecked);\n    const appLayerItems = items.value.filter(e => e.type == \"qjson\" && e.checked);\n\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => item.isRootPage);\n    if(!startScreen.value)\n        return false;\n\n    if (props.screenType == \"Deploy\") {\n        if (modules.length > 0)\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \"entityDesigner\" && f.checked)).length <= 0\n\n        let isApplicationWillDeploy = appLayerItems.length > 0;\n        if (isApplicationWillDeploy) {\n            result = appLayerItems\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\n        }\n    }\n\n    return result;\n}\n\nfunction validateDependencies() {\n    const checkMap = new Map<string, boolean>();\n    items.value.forEach(item => {\n        if(item.type == 'module' && item.children && item.children.length > 0)\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\n        else\n            checkMap.set(item.id, item.checked == true)\n    })\n\n    const mustBeCheckedMap = new Map<string, Array<string>>();\n    dependencyMap.value?.forEach((deps, id) => {\n        if(!checkMap.get(id)) \n            return;\n\n        deps.dependedTo.forEach(dependedId => {\n            if(checkMap.get(dependedId))\n                return;\n\n            if(mustBeCheckedMap.has(id)){\n                const vals = mustBeCheckedMap.get(id)!\n                vals.push(dependedId)\n                mustBeCheckedMap.set(id, vals)\n            }else {\n                mustBeCheckedMap.set(id, [dependedId])\n            }\n            \n        });\n    })\n\n    //set deps error text\n    const [firstItemID] = mustBeCheckedMap.keys();\n    if(firstItemID) {\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\n        dependencyErrorStr.value =`Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\n    }\n\n    return mustBeCheckedMap.size == 0\n}\n\nfunction validateStartScreen() {\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\n}\n\nfunction findItem (ID: string) {\n    for(const item of items.value){\n        if(item.type != 'module' && item.id == ID)\n            return item;\n        if(item.type == 'module' && item.children && item.children.length> 0 ){\n            const f = item.children.find(e => e.id == ID)\n            if(f) return f\n        }\n    }\n}\n\nfunction initDependencies() {\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>();\n    const depMap = new Map<string, Array<string>>();\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path) => {\n            if (item.objectType != \"model\") { return; }\n\n            const isImportedModule = item.parent.objectType == \"module\" && isModuleImported(item.parent);\n            \n            let version: string | undefined;\n            if(!isImportedModule){\n                const maxVersion = getItemMaxVersion(item)\n                if(!maxVersion)\n                    return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\n                version = maxVersion;\n            }\n            else {\n                const moduleVersions = importedModuleVersions.value?.get(item.parent.ID)\n                const moduleVersion = (item.parent as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n\n                const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\n                version = importedModuleModel?.version\n            }\n\n            const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\n\n            depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\n    });\n\n    \n    depMap.forEach((dependedTo, modelId) => {\n        const dependedBy = Array<string>();\n        depMap.forEach((dependencies, depModelId) => {\n            if (dependencies.some(depId => depId == modelId))\n                dependedBy.push(depModelId)\n        })\n        map.set(modelId, {dependedBy, dependedTo});\n    })\n    dependencyMap.value = map;\n}\n\nfunction isModelDepended(item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\n    if(!deps) return false;\n\n    return deps.some(dep => items.value.some(item => {\n        if(item.type == 'module' && item.anyChildChecked){\n            return item.children?.some(child => child.checked && child.id == dep)\n        }\n        return item.id == dep && item.checked\n    }));\n}\n\nasync function handleItems() {\n    items.value = viewModel.studio.items\n        .filter((item) => item.objectType == \"module\" && item.children.length > 0)\n        .map((item) => {\n            const isImportedModule = isModuleImported(item as IModule);\n            const moduleVersion = (item as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n            const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\n            const tableData: ITableData = {\n                id: item.ID,\n                collapsed: true,\n                name: item.name,\n                type: \"module\",\n                imported: isImportedModule,\n                version: moduleVersion,\n                children: (item as IModule).children\n                    .filter((child) => child.objectType == \"model\")\n                    .map(child => child as IModel)\n                    .map(child => {\n                        const childModel: ITableData = {id: child.ID,parentId: item.ID,name: child.name,type: (child as IModel).modelType}\n                        if(!isImportedModule || child.isUnmodifiable){\n                            const maxVersion = getItemMaxVersion(child)                         \n                            return {\n                                ...childModel,\n                                checked: maxVersion ? true : child.isUnmodifiable,\n                                disabled: maxVersion ? false : !child.isUnmodifiable,\n                                version: child.isUnmodifiable ? 'latest' : maxVersion,\n                            } as ITableData\n                        }\n                        \n                        const importedModulesModel = relatedModelHistories?.find(e => e.modelID == child.ID)\n                        return {...childModel, checked: true,disabled: false, version: importedModulesModel?.version } as ITableData\n                    })\n            }\n            handleParentCheckedStatus(tableData);\n            return tableData;\n        });\n\n    viewModel.studio.items\n        .filter((item) => item.objectType == \"model\" && item.usageType != \"appSettings\" && item.usageType != \"appAssetList\")\n        .map(item => item as IModel)\n        .forEach((item) => {\n            const maxVersion = getItemMaxVersion(item as IModel)\n            items.value.push({\n                    id: item.ID,\n                    name: item.name,\n                    checked: maxVersion || item.modelType==\"appSettings\" ? true : item.isUnmodifiable,\n                    disabled: maxVersion || item.modelType==\"appSettings\" ? false : !item.isUnmodifiable,\n                    type: (item as IModel).modelType,\n                    version: item.isUnmodifiable || item.modelType==\"appSettings\" ? 'latest' : maxVersion,\n                });\n        });\n    const uiSettingsID = CryptoHelper.CreateGuid();\n    const appSettings = viewModel.studio.items.filter((item) => item.objectType == \"model\" && item.usageType == \"appSettings\") as Array<IModel>;\n    const uiSettings: ITableData = {\n        id: uiSettingsID,\n        collapsed: true,\n        name: \"UI Settings\",\n        type: \"module\",\n        imported: false,\n        children: appSettings.map(settings => {\n            const maxVersion = getItemMaxVersion(settings)\n            return {\n                id: settings.ID,\n                parentId: uiSettingsID,\n                name: settings.name,\n                type: settings.modelType,\n                checked: maxVersion != undefined,\n                usageType: settings?.usageType,\n                disabled: !maxVersion,\n                version: maxVersion,\n            }\n        }) as Array<ITableData>,\n    };\n    handleParentCheckedStatus(uiSettings);\n\n    const uiAssetID = CryptoHelper.CreateGuid();\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \"model\" && item.usageType == \"appAssetList\") as Array<IModel>;\n    const uiAssetList: ITableData = {\n        id: uiAssetID,\n        collapsed: true,\n        name: \"Styled Components\",\n        type: \"module\",\n        imported: false,\n        anyChildChecked: true,\n        allChildChecked: true,\n        children: appAssetList.map((asset) => ({\n            id: asset.ID,\n            parentId: uiSettingsID,\n            name: asset.name,\n            type: asset.modelType,\n            checked: true,\n            usageType: asset?.usageType,\n        })) as Array<ITableData>,\n    };\n    handleParentCheckedStatus(uiAssetList);\n\n    items.value.unshift(uiAssetList);\n    items.value.unshift(uiSettings);\n    console.log(\"items => \", items.value);\n}\n\nfunction getItemMaxVersion(item: IModel): string | undefined {\n    if (!modelHistories.value?.has(item.ID))\n        return undefined;\n\n    const versions = modelHistories.value.get(item.ID);\n    if (!versions)\n        return undefined;\n\n    const findMaxVersion = (versions: Array<string>) => {\n        const versionNumbers = versions.map(v => {\n            const parts: Array<string> = v.split(\".\");\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\n        })\n\n        versionNumbers.sort((a, b) => b - a);\n\n        const maxVersion = versionNumbers[0];\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\n    }\n\n    return findMaxVersion(versions.map(e => e.version!));\n\n}\nfunction checkMaxVersionOfAllItems() {\n    let isThereVersion: boolean = false;\n    items.value.forEach(item => {\n        if(item.type == \"module\") {\n            item.children?.forEach(child => {\n                if(child.version) {\n                    isThereVersion = true;\n                }\n                \n            })\n        }\n        else {\n            if(item.version) {\n                isThereVersion = true;\n            }\n        }\n    })\n    return isThereVersion;\n}\nfunction handleModuleCountCheckboxEvent(value: boolean) {\n    items.value.filter(e => !e.disabled).forEach((item) => {\n        item.checked = value;\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\n        if (allItemsCheckable) item.allChildChecked = value;\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\n    });\n\n    validations.value = validate();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n}\n\nfunction handleCollapse(item: ITableData) {\n    item.collapsed = !item.collapsed;\n}\n\nfunction checkAllDependents(item: ITableData) {\n    if(item.disabled || item.checked) return;\n\n    item.checked = true\n    item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!);\n\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\n    if(!deps) return;\n\n    deps.forEach(dep => {\n        items.value.forEach(item => {\n            if(item.type == 'module' && !item.allChildChecked){\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\n                willCheckItem && checkAllDependents(willCheckItem)\n                handleParentCheckedStatus(item)\n                return;\n            }\n\n            if(!item.checked && item.id == dep) {\n                checkAllDependents(item)\n                item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\n            }\n        })\n    });\n}\n\nfunction handleItemCheckEvent(item: ITableData) {\n    if(item.disabled || isModelDepended(item))\n        return;\n\n    if(item.type != \"module\") {\n        if(item.checked){\n            item.checked = false;\n            item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\n        } else {\n            checkAllDependents(item)\n        }\n    } else {\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\n            if (item.anyChildChecked) {\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\n                item.checked = false;\n                handleParentCheckedStatus(item);\n            } else {\n                item.children.forEach(checkAllDependents);\n                item.checked = true;\n            }\n        }\n        else {\n            item.checked = !item.checked;\n            item.allChildChecked = false;\n        }\n    }\n\n    validations.value = validate();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n}\n\nfunction handleParentCheckedStatus(item: ITableData) {\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\n}\n\nfunction syncPublishTargets() {\n    publishTargets.value = []; disabledOptions.value = [];\n\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\n    if (!targets)\n        return;\n\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\n    if (!isSelectAnyItem) {\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\n        const disabledOptionList = Array<IDisabledOptions>();\n        for (let i = 0; i < publishTargets.value.length; i++) {\n            disabledOptionList.push({ index: i, cause: \"You need to include items to publish.\" })\n        }\n        disabledOptions.value = disabledOptionList;\n        return;\n    }\n\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\n\n    const disabledOptionList = Array<IDisabledOptions>();\n    for (let i = 0; i < sortedTargets.length; i++) {\n        const cause = sortedTargets[i].cause;\n        if (cause) disabledOptionList.push({ index: i, cause })\n    }\n    disabledOptions.value = disabledOptionList;\n    publishTargets.value = sortedTargets.map(e => e.optionName);\n\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \"\";\n}\n\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\n    const list = Array<{ optionName: string, cause?: string }>();\n\n    Object.keys(targets).forEach(e => {\n        const key = e as keyof IOrganizationCloud;\n        const value = targets[key];\n        const optionName = cloudTargetMap(key)!;\n        if (!value)\n            return list.push({ optionName, cause: \"You are not authorized to publish to this target.\" });\n\n\n        switch (key) {\n            case \"azure\":\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\n                    if (!items || items.length == 0) { return status; }\n                    for (const item of items) {\n                        if (item.checked || item.anyChildChecked) {\n                            if (item.type == \"module\") {\n                                status = traverseSelectedItems(status, item.children);\n                            }\n                            if (item.type == \"entityDesigner\" || item.type == \"bpmn\" || item.type == \"process\") {\n                                status = false;\n                                break;\n                            }\n                        }\n\n                    }\n                    return status;\n                }\n\n                const status = traverseSelectedItems(true, items.value);\n                if (!status)\n                    return list.push({ optionName, cause: \"Entity and process models cannot be published to this target.\" });\n                break;\n            case \"plateauGCP\":\n                const modulesHasNotAnEDModel =  items.value.filter(e => e.name != \"UI Settings\").find(e => e.type == \"module\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \"bpmn\" || c.type == \"process\")) && !e.children?.some(c => c.type == \"entityDesigner\" && c.checked))\n                if (modulesHasNotAnEDModel)\n                    return list.push({optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.`})\n                break;\n        }\n\n        list.push({ optionName });\n    })\n\n    return list;\n}\n\nfunction updateDependencyMap(newVersion: string, item: ITableData) { \n    const deps = dependencyMap.value?.get(item.id);\n    dependencyMap.value?.set(item.id, {\n        dependedBy: deps?.dependedBy || Array<string>(), \n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\n    })\n}\n\nfunction versionDialog(item: ITableData) {\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\n    const hasAnyVersion = modelHistories.value?.has(item.id);\n    const options = { clickedNode, cb: (version: string) => { \n        item.version = version;\n        updateDependencyMap(version, item);\n    } } as any;\n\n    if (hasAnyVersion) {\n        options.versions = modelHistories.value?.get(item.id)\n    }\n    dialog.showDialog(\n        defineAsyncComponent(() => import(\"../../application/modelVersionDialog.vue\")),\n        { closable: true, title: \"Change Version\", width: \"1080px\", maxHeight: \"500px\", overflow: \"auto\" }, options\n    );\n}\n\n\nfunction moduleVersionDialog(item: ITableData) {\n    dialog.showDialog(\n        defineAsyncComponent(() => import(\"../../application/moduleVersionDialog.vue\")),\n        { closable: true, title: \"Change Version\", width: \"1080px\", maxHeight: \"500px\", overflow: \"auto\" },\n        { module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => { \n            item.version = moduleVersion.version;\n            item.children?.forEach(child => {\n                const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\n                child.version = modulesModel?.version\n                updateDependencyMap(modulesModel?.version!, child);\n            })\n        }}\n    );\n}\n\nfunction close() {\n    emit(\"close\");\n}\n\nasync function save() {\n    executor.execute(\n        async () => {\n            const initAsGroup = async () => {\n                const groupID = CryptoHelper.CreateGuid();\n                await initHistory(groupID);\n                await packJob(groupID);\n                return groupID;\n            }\n\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\n\n            switch (props.screenType) {\n                case \"Export\":\n                    if(isFlowBackend) {\n                        const deployItems = await createAzureDeployItems();\n                        await packJobsUseCase.createPackJobs([{\n                            appID: viewModel.studio.appId,\n                            exportType: \"qui\",\n                            selectionData: deployItems\n                        }]);\n                        break;\n                    }\n\n                    const groupID = await initAsGroup();\n                    await createExportJob(groupID);\n                    break;\n                case \"Deploy\":\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\n                        case \"plateauGCP\":\n                            const groupID = await initAsGroup();\n                            await createDeployJob(groupID);\n                            break;\n                        case \"azure\":\n                            const deployItems = await createAzureDeployItems();\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\n                            break;\n                    }\n            }\n            emit(\"close\");\n        },\n        { loading: true });\n}\n\nasync function createAzureDeployItems() {\n    const deployItems: Array<IExportItem> = [];\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\n        if (item.objectType != \"model\") { return; }\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\n        if (!items || items.length == 0) { return; }\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\n            if (item.type == \"module\") {\n                traverseSelectedItems(item.children);\n                return;\n            }\n\n            const itemMap = itemIdObj[item.id];\n\n            const deployItem: IExportItem = {\n                id: item.id,\n                name: jobUtils.getFileFullname(itemMap.item),\n                path: itemMap.path,\n                type: jobUtils.getItemType(itemMap.item),\n                ver: item.version || \"latest\",\n                isRootPage: itemMap.item.isRootPage,\n                prefix: itemMap.prefix,\n                ownerType: 'application',\n                ownerName: viewModel.studio.appName,\n                size: itemMap.item.size,\n                createDate: itemMap.item.createDate,\n            };\n            deployItems.push(deployItem)\n        });\n    };\n\n    traverseSelectedItems(items.value);\n\n    return deployItems;\n}\n\nasync function initHistory(groupID: string) {\n    return qcloudApi.initPublishHistory({\n        appID: viewModel.studio.appId,\n        ID: groupID,\n        isMultiStep: true,\n        type: props.screenType == \"Deploy\" ? \"publish\" : \"download\",\n        cloudProvider: props.screenType == \"Deploy\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\n        platform: props.platformSelection\n    });\n}\n\nasync function packJob(groupID: string) {\n    let exportItemMap = new Map<string, Array<IExportItem>>();\n    const appName = viewModel.studio.appName;\n\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\n        if (item.objectType != \"model\") { return; }\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const createExportObject = (tableItem: ITableData) => {\n        const item = itemIdObj[tableItem.id].item;\n        const isAppItem = item.modelType == 'qjson' ;\n        return {\n            id: tableItem.id,\n            ver: tableItem.version,\n            type: jobUtils.getItemType(item),\n            path: itemIdObj[tableItem.id].path,\n            prefix: itemIdObj[tableItem.id].prefix,\n            name: jobUtils.getFileFullname(item),\n            ownerType: isAppItem ? 'application' : item.parent.objectType,\n            ownerName: isAppItem ? appName : item.parent.name,\n        } as IExportItem;\n    }\n\n    const addToExportItem = (key: string, obj: IExportItem) => {\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\n        let items = exportItemMap.get(key);\n        if(items && items.length > 0){\n            items.push(obj);\n            exportItemMap.set(key, items);\n        } else\n            exportItemMap.set(key, [obj]);\n    }\n\n    items.value.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\n        if (asset.type == 'module') {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                const obj = createExportObject(child);\n                if (obj.type == \"entityDesigner\")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\n            });\n        } else {\n            const obj = createExportObject(asset);\n            if (asset.type == 'qjson'){\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \"model\" && i.modelType == \"qjson\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\n                obj.isRootPage = isRootPage ? true : undefined;\n            }\n            addToExportItem(appName, obj);\n        }\n    })\n\n    let jobs = Array<ICreateExportJobParam>();\n    exportItemMap.forEach((v, k) => {\n        jobs.push({\n            appID: viewModel.studio.appId,\n            exportType: \"qui\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \"model\":  \"qui\"\n            selectionData: v,\n            cause: props.screenType == 'Export' ? 'download': \"publish\",\n            layer: 0,\n            groupID: groupID,\n            platformSelection: props.platformSelection\n        })\n    })\n    \n    await packJobsUseCase.createPackJobs(jobs);\n}\n\nasync function createExportJob(groupID: string) {\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\n        appID: viewModel.studio.appId,\n        exportType: \"qui\",\n        selectionData: [],\n        layer: 1,\n        groupID: groupID\n    });\n}\n\nasync function createDeployJob(groupID: string) {\n    //1-(n) L1- deployJob(build)\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\n        .then(jobs => jobs.jobs.map(e => {\n            const jobData = e.jobData as IExportJobData;\n            return {\n                ownerName: jobData.items[0].ownerName,\n                jobID: e.jobID,\n                type: jobData.items[0].ownerType,\n                mainDir: getDeployableArchiveRoot(jobData)\n            }\n        }));\n\n    if (!packages || packages.length <= 0)\n        return;\n\n    let buildJobs = Array<ICreateDeployJobParam>();\n    packages.forEach(pack => {\n        buildJobs.push({\n            appID: viewModel.studio.appId,\n            type: \"build\",\n            package: {\n                type: pack.type as DeployType,\n                name: pack.ownerName!,\n                mainDir: pack.mainDir,\n                zip: `${pack.jobID}.zip`,\n            },\n            layer: 1,\n            groupID: groupID\n        })\n    })\n\n    await deployJobsUseCase.createBuildJobs(buildJobs);\n\n    //2-(1) L2- deployJob(deployment)\n    let jobParam: ICreateDeployJobParam = {\n        appID: viewModel.studio.appId,\n        type: \"deployment\",\n        deployConfig: {\n            process: {\n                configModelIDs: getProcessConfigList(),\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \"bpmn\"))\n            }\n        },\n        layer: 2,\n        groupID: groupID,\n        platformSelection: props.platformSelection\n    }\n\n    await deployJobsUseCase.startDeploymentJob(jobParam);\n}\n\nfunction getProcessConfigList() {\n    let processConfigList = Array<IProcessConfigModelItem>();\n    items.value.forEach((asset) => {\n        if (asset.type == \"module\" && asset.anyChildChecked && asset.children) {\n            const usingService = asset.children.find(c => c.type == \"entityDesigner\");\n            if (!usingService)\n                return;\n\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\n            asset.children.forEach(child => {\n                if (child.checked && child.type == \"process\") {\n                    processConfigList.push({\n                        moduleName: serviceName,\n                        model: {\n                            id: child.id,\n                            name: child.name,\n                            version: child.version!\n                        }\n                    })\n                }\n            })\n        }\n    })\n    return processConfigList;\n}\n\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\n    if (jobData.items[0].ownerType == \"module\") {\n        let edModel = jobData.items.find(e => e.type == \"entityDesigner\");\n        if (!edModel)\n            throw new Error(\"!!! this module cannot deploy. Because its have not a service\");\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\n    }\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\n}\n\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \"Public Cloud\", plateauGCP: \"Plateau Platform Playground\" };\n    if (pureVal) {\n        return Object.keys(map).find(e => {\n            if (map[e as keyof IOrganizationCloud] === name) {\n                return true;\n            }\n        })\n    } else {\n        let key = Object.keys(map).includes(name);\n        if (!key)\n            return;\n        return map[name as keyof IOrganizationCloud];\n    }\n}\n\nfunction onTargetSelect(value: string) {\n    selectedTarget.value = value\n}\n\nconst isModuleImported = (item: IModule) => {\n    const hasAVersion = item.relatedApplications.find(e => e.applicationID == viewModel.studio.appId)?.importedVersion;\n    if(item.mainOwner != viewModel.studio.appId && item.relatedApplications.at(0)?.applicationID != viewModel.studio.appId && hasAVersion)\n        return true;\n    return false;\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", null, [\n      _createVNode(CheckboxComp, {\n        class: _normalizeClass(['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']),\n        minus: _unref(mainCheckboxState) == false,\n        check: _unref(mainCheckboxState) == true,\n        onClick: _cache[0] || (_cache[0] = ($event: any) => (handleModuleCountCheckboxEvent(_unref(mainCheckboxState) == undefined)))\n      }, null, 8 /* PROPS */, [\"class\", \"minus\", \"check\"]),\n      _createElementVNode(\"div\", {\n        class: _normalizeClass(['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : ''])\n      }, [\n        _createElementVNode(\"span\", _hoisted_2, _toDisplayString(_unref(allChildCheckedModulesCount) + _unref(anyChildCheckedModulesCount) + _unref(checkedRootLevelModelsCount)), 1 /* TEXT */),\n        _createTextVNode(\" of \"),\n        _createElementVNode(\"span\", _hoisted_3, _toDisplayString(_unref(totalRootLevelCount)), 1 /* TEXT */),\n        _createTextVNode(\" items selected \")\n      ], 2 /* CLASS */)\n    ]),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass(['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : ''])\n    }, [\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(items.value, (item) => {\n        return (_openBlock(), _createElementBlock(\"div\", null, [\n          (item?.type == 'module')\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n                _createElementVNode(\"div\", _hoisted_5, [\n                  (!item.imported)\n                    ? (_openBlock(), _createElementBlock(\"i\", {\n                        key: 0,\n                        class: _normalizeClass('mdi mdi-menu' + (item.collapsed ? '-right' : '-down') + ' chevron' + (!item.children || item.children.length == 0 ? ' disabled': '')),\n                        onClick: ($event: any) => (handleCollapse(item))\n                      }, null, 10 /* CLASS, PROPS */, _hoisted_6))\n                    : _createCommentVNode(\"v-if\", true),\n                  _createVNode(CheckboxComp, {\n                    class: \"module-checkbox\",\n                    check: item.allChildChecked,\n                    minus: !item.allChildChecked && item.anyChildChecked,\n                    disabled: item.disabled,\n                    onClick: ($event: any) => (handleItemCheckEvent(item))\n                  }, null, 8 /* PROPS */, [\"check\", \"minus\", \"disabled\", \"onClick\"]),\n                  (item.imported)\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_7))\n                    : _createCommentVNode(\"v-if\", true),\n                  _createElementVNode(\"span\", {\n                    class: _normalizeClass(['module-name', item.imported ? ` imported` : (item.disabled ? ' disabled': '')])\n                  }, _toDisplayString(item.name), 3 /* TEXT, CLASS */),\n                  (item.imported)\n                    ? (_openBlock(), _createElementBlock(\"div\", {\n                        key: 2,\n                        class: \"version-text\",\n                        onClick: ($event: any) => (moduleVersionDialog(item))\n                      }, [\n                        _createTextVNode(_toDisplayString(item.version ? item.version : 'No version') + \" \", 1 /* TEXT */),\n                        _hoisted_9\n                      ], 8 /* PROPS */, _hoisted_8))\n                    : _createCommentVNode(\"v-if\", true)\n                ]),\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item?.children, (child) => {\n                  return _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_10, [\n                    _createVNode(CheckboxComp, {\n                      class: \"model-checkbox\",\n                      check: child.checked,\n                      disabled: child.disabled,\n                      onClick: ($event: any) => (handleItemCheckEvent(child))\n                    }, null, 8 /* PROPS */, [\"check\", \"disabled\", \"onClick\"]),\n                    (child.type != 'module')\n                      ? (_openBlock(), _createElementBlock(\"i\", {\n                          key: 0,\n                          class: _normalizeClass('model-icon ' + _unref(ModelContants).getModelVisualInfo(child.type, undefined).icon),\n                          style: _normalizeStyle({ color: _unref(ModelContants).getModelVisualInfo(child.type, undefined).color })\n                        }, null, 6 /* CLASS, STYLE */))\n                      : _createCommentVNode(\"v-if\", true),\n                    _createElementVNode(\"span\", {\n                      class: _normalizeClass(['model-name', child.disabled ? ' disabled' : ''])\n                    }, _toDisplayString(child.name), 3 /* TEXT, CLASS */),\n                    (!child.usageType || child.usageType == 'appSettings')\n                      ? (_openBlock(), _createElementBlock(\"div\", {\n                          key: 1,\n                          class: _normalizeClass(['version-text', child.disabled ? 'disabled' : '']),\n                          onClick: ($event: any) => (versionDialog(child))\n                        }, [\n                          _createTextVNode(_toDisplayString(child.version ? child.version : 'No version') + \" \", 1 /* TEXT */),\n                          (!child.usageType || child.usageType == 'appSettings')\n                            ? (_openBlock(), _createElementBlock(\"i\", {\n                                key: 0,\n                                class: _normalizeClass(['mdi mdi-pencil-outline version-icon', child.disabled ? 'disabled' : ''])\n                              }, null, 2 /* CLASS */))\n                            : _createCommentVNode(\"v-if\", true)\n                        ], 10 /* CLASS, PROPS */, _hoisted_11))\n                      : _createCommentVNode(\"v-if\", true),\n                    (child.disabled && !child.version)\n                      ? (_openBlock(), _createElementBlock(\"span\", _hoisted_12, [\n                          _createTextVNode(\"No version available for publishing. \"),\n                          _hoisted_13,\n                          _createTextVNode(\" on this item and choose the \"),\n                          _hoisted_14,\n                          _createTextVNode(\" option. \")\n                        ]))\n                      : _createCommentVNode(\"v-if\", true)\n                  ], 512 /* NEED_PATCH */)), [\n                    [_vShow, !item.imported && !item.collapsed]\n                  ])\n                }), 256 /* UNKEYED_FRAGMENT */))\n              ]))\n            : (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [\n                _createElementVNode(\"div\", _hoisted_16, [\n                  _createVNode(CheckboxComp, {\n                    class: \"module-checkbox\",\n                    check: item?.checked,\n                    disabled: item.disabled,\n                    onClick: ($event: any) => (handleItemCheckEvent(item))\n                  }, null, 8 /* PROPS */, [\"check\", \"disabled\", \"onClick\"]),\n                  (item?.type == 'qjson')\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_17))\n                    : (item?.type == 'yaml')\n                      ? (_openBlock(), _createElementBlock(\"i\", _hoisted_18))\n                      : _createCommentVNode(\"v-if\", true),\n                  (item?.type == 'js')\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_19))\n                    : _createCommentVNode(\"v-if\", true),\n                  (item?.type == 'css')\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_20))\n                    : (item?.type == 'process')\n                      ? (_openBlock(), _createElementBlock(\"i\", _hoisted_21))\n                      : (item?.type == 'bpmn')\n                        ? (_openBlock(), _createElementBlock(\"i\", _hoisted_22))\n                        : (item?.type == 'entityDesigner')\n                          ? (_openBlock(), _createElementBlock(\"i\", _hoisted_23))\n                          : (item?.type == 'flow')\n                            ? (_openBlock(), _createElementBlock(\"i\", _hoisted_24))\n                            : (item.type == 'namedComponent')\n                              ? (_openBlock(), _createElementBlock(\"i\", _hoisted_25))\n                              : (item.type == 'appSettings')\n                                ? (_openBlock(), _createElementBlock(\"i\", _hoisted_26))\n                                : _createCommentVNode(\"v-if\", true),\n                  _createElementVNode(\"span\", _hoisted_27, [\n                    _createTextVNode(_toDisplayString(item?.name) + \" \", 1 /* TEXT */),\n                    (startScreen.value?.ID == item.id)\n                      ? (_openBlock(), _createElementBlock(\"span\", _hoisted_28, _hoisted_31))\n                      : _createCommentVNode(\"v-if\", true)\n                  ]),\n                  (!item.usageType)\n                    ? (_openBlock(), _createElementBlock(\"span\", {\n                        key: 10,\n                        class: _normalizeClass(['version-text', item.disabled ? 'disabled' : '']),\n                        onClick: ($event: any) => (versionDialog(item))\n                      }, [\n                        _createTextVNode(_toDisplayString(item.version ? item.version : 'No version') + \" \", 1 /* TEXT */),\n                        (!item.usageType)\n                          ? (_openBlock(), _createElementBlock(\"i\", {\n                              key: 0,\n                              class: _normalizeClass(['mdi mdi-pencil-outline version-icon', item.disabled ? 'disabled' : ''])\n                            }, null, 2 /* CLASS */))\n                          : _createCommentVNode(\"v-if\", true)\n                      ], 10 /* CLASS, PROPS */, _hoisted_32))\n                    : _createCommentVNode(\"v-if\", true),\n                  (item.disabled && !item.version)\n                    ? (_openBlock(), _createElementBlock(\"span\", _hoisted_33, [\n                        _createTextVNode(\"No version available for publishing. \"),\n                        _hoisted_34,\n                        _createTextVNode(\" on this item and choose the \"),\n                        _hoisted_35,\n                        _createTextVNode(\" option. \")\n                      ]))\n                    : _createCommentVNode(\"v-if\", true)\n                ])\n              ]))\n        ]))\n      }), 256 /* UNKEYED_FRAGMENT */))\n    ], 2 /* CLASS */),\n    (props.screenType == 'Deploy')\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_36, [\n          _hoisted_37,\n          _createVNode(CustomSelect, {\n            options: publishTargets.value,\n            onInput: onTargetSelect,\n            selectedOption: selectedTarget.value,\n            default: selectedTarget.value,\n            disabledOptions: disabledOptions.value,\n            selectedClass: \"selected-environment\",\n            placeholder: \"Select the publish environment of your application\",\n            class: \"select-environment\"\n          }, null, 8 /* PROPS */, [\"options\", \"selectedOption\", \"default\", \"disabledOptions\"])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    _createCommentVNode(\"         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> \"),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass(['footer', props.screenType == 'Deploy' ? 'deploy' : 'export'])\n    }, [\n      _createElementVNode(\"div\", {\n        class: _normalizeClass(['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']),\n        onClick: close\n      }, \"Cancel\", 2 /* CLASS */),\n      (props.screenType == 'Export')\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 0,\n            class: _normalizeClass((_unref(saveButtonDisable) ? ' button-disable' : '')),\n            onClick: _cache[1] || (_cache[1] = ($event: any) => (!_unref(saveButtonDisable) && save()))\n          }, [\n            _hoisted_38,\n            (!_unref(isThereVersion))\n              ? (_openBlock(), _createElementBlock(\"span\", _hoisted_39, \"There are no items ready to publish. At least one of your items must be ready to publish.\"))\n              : (!_unref(isStartScreenOK))\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_40, \"You need to include your start screen.\"))\n                : (!_unref(isAllDependenciesOK))\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_41, _toDisplayString(dependencyErrorStr.value), 1 /* TEXT */))\n                  : _createCommentVNode(\"v-if\", true)\n          ], 2 /* CLASS */))\n        : _createCommentVNode(\"v-if\", true),\n      (props.screenType == 'Deploy')\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 1,\n            class: _normalizeClass([(_unref(saveButtonDisable) ? ' button-disable' : '')]),\n            onClick: _cache[2] || (_cache[2] = ($event: any) => (!_unref(saveButtonDisable) && save()))\n          }, [\n            _hoisted_42,\n            (!_unref(isStartScreenOK))\n              ? (_openBlock(), _createElementBlock(\"span\", _hoisted_43, \"You need to include your start screen.\"))\n              : (!selectedTarget.value)\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_44, \"You need to select a publish environment.\"))\n                : (!_unref(isThereVersion))\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_45, \"There are no items ready to publish. At least one of your items must be ready to publish.\"))\n                  : (!_unref(isAllDependenciesOK))\n                    ? (_openBlock(), _createElementBlock(\"span\", _hoisted_46, _toDisplayString(dependencyErrorStr.value), 1 /* TEXT */))\n                    : _createCommentVNode(\"v-if\", true)\n          ], 2 /* CLASS */))\n        : _createCommentVNode(\"v-if\", true)\n    ], 2 /* CLASS */)\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=0&id=4da75764&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=0&id=4da75764&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=1&id=4da75764&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=1&id=4da75764&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./publishDialog.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./publishDialog.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./publishDialog.vue?vue&type=style&index=0&id=4da75764&scoped=true&lang=css\"\nimport \"./publishDialog.vue?vue&type=style&index=1&id=4da75764&lang=css\"\n\nimport exportComponent from \"/home/runner/work/studio/studio/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4da75764\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","GetRandomWord","base","length","Math","random","toString","substring","CreateGuid","map","join","CryptoHelper","guidCounter","purify","str","replace","toLowerCase","getPlateauEnvironmentName","envPrefix","appName","Error","endsWith","PlateauHelper","getQuiPackageNameFromAppName","getApplicationUINameFromQuiPkg","quiPackageName","getApplicationHostNamePrefix","getServiceNameFromModel","modelName","typeSafety","EditorConsts","quick","modelKeys","self","flow","design","runtime","flowEntity","single","cssJsTsYaml","color","icon","jpegJpgPngSvgGif","modelVisuals","qjson","additionals","qjsonType","css","js","ts","yaml","entityDesigner","bpmn","process","namedComponent","step","jpeg","jpg","png","svg","gif","lottie","appSettings","json","ModelContants","static","modelType","modelAdditionals","retVal","ICreateExportJob","Symbol","for","IDeployJobs","IJobUtils","IListMultiModelVersions","IListMultiModuleVersions","IPackJobs","_withScopeId","n","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","key","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_","_hoisted_10","_hoisted_11","_hoisted_12","style","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","__name","props","screenType","platformSelection","emits","setup","__props","emit","viewModel","IViewModel","viewModelManager","IViewModelManager","dialog","IDialog","executor","IUseCaseExecutor","deployJobsUseCase","qcloudApi","IQCloudApi","packJobsUseCase","jobUtils","items","validations","selectedTarget","disabledOptions","publishTargets","modelHistories","importedModuleVersions","startScreen","dependencyMap","dependencyErrorStr","async","Promise","all","executeUseCase","then","res","value","Map","depMap","flatMapItems","studio","item","path","objectType","version","parent","isModuleImported","moduleVersions","get","ID","moduleVersion","relatedApplications","find","app","applicationID","appId","importedVersion","importedModuleModel","filter","e","flatMap","relatedModelHistories","modelID","maxVersion","getItemMaxVersion","set","dependentModels","modelId","Array","historyItem","forEach","dependedTo","dependedBy","dependencies","depModelId","some","depId","initDependencies","children","isImportedModule","undefined","tableData","collapsed","name","type","imported","child","childModel","parentId","isUnmodifiable","checked","disabled","importedModulesModel","handleParentCheckedStatus","usageType","uiSettingsID","uiSettings","settings","uiAssetList","anyChildChecked","allChildChecked","asset","unshift","console","log","handleItems","syncPublishTargets","validate","allChildCheckedModulesCount","anyChildCheckedModulesCount","checkedRootLevelModelsCount","totalRootLevelCount","saveButtonDisable","web","validateStartScreen","validateDependencies","mainCheckboxState","isThereVersion","checkMaxVersionOfAllItems","isAllDependenciesOK","isStartScreenOK","result","modules","appLayerItems","isRootPage","f","findIndex","checkMap","mustBeCheckedMap","deps","dependedId","has","vals","firstItemID","keys","firstItemDeps","firstItemDepStr","findItem","size","versions","versionNumbers","v","parts","split","parseInt","sort","a","b","floor","findMaxVersion","checkAllDependents","i","dep","willCheckItem","handleItemCheckEvent","isModelDepended","c","targets","user","selectedOrganization","actions","publish","Object","entries","cloudTargetMap","disabledOptionList","index","cause","checkedPublishTargets","list","optionName","traverseSelectedItems","status","modulesHasNotAnEDModel","checkAndSetDisabledCauses","sortedTargets","updateDependencyMap","newVersion","versionDialog","options","clickedNode","state","text","cb","showDialog","closable","title","width","maxHeight","overflow","close","save","execute","initAsGroup","groupID","initPublishHistory","appID","isMultiStep","cloudProvider","platform","initHistory","exportItemMap","itemIdObj","prefix","createExportObject","tableItem","isAppItem","ver","getItemType","getFileFullname","ownerType","ownerName","addToExportItem","obj","entityGenerationDomain","useSeperateModule","jobs","k","exportType","selectionData","layer","createPackJobs","packJob","isFlowBackend","applications","deployItems","createAzureDeployItems","createExportJob","packages","getExportJobsByGroupId","jobData","jobID","mainDir","getDeployableArchiveRoot","buildJobs","pack","package","zip","createBuildJobs","jobParam","deployConfig","configModelIDs","getProcessConfigList","enabled","startDeploymentJob","createDeployJob","createAppDeployJob","loading","itemMap","deployItem","createDate","processConfigList","usingService","serviceName","moduleName","model","edModel","pureVal","azure","plateauGCP","includes","onTargetSelect","hasAVersion","mainOwner","at","_ctx","_cache","minus","check","onClick","$event","modulesModel","getModelVisualInfo","onInput","selectedOption","default","selectedClass","placeholder","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement"],"sourceRoot":""}
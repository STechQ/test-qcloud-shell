{"version":3,"file":"4438.js?ver=0.0.291_1703839158223","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/components/exportDialogItem.vue?1a74","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?d368","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?9115","webpack://qcloud_shell/../node_modules/@stechquick/algae/src/helpers/plateau/plateauHelper.ts","webpack://qcloud_shell/../common/helpers/pathHelper.ts","webpack://qcloud_shell/../common/qCloudTemp/modelContants.ts","webpack://qcloud_shell/../common/qCloudTemp/quickCloud.ts","webpack://qcloud_shell/./src/domain/useCase/IApplicationUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IBackofficeUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/ICreateExportJob.ts","webpack://qcloud_shell/./src/domain/useCase/IDeployJobs.ts","webpack://qcloud_shell/./src/domain/useCase/IFileDisplayerUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IJobUtils.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModelVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModuleVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IPackJobs.ts","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/components/exportDialogItem.vue?8d56","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/components/exportDialogItem.vue?1ad2","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/components/exportDialogItem.vue","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?3bef","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?cc95","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?71d0","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.row-container[data-v-ada1dc7a] {\\n\\twidth: 100%;\\n\\theight: 36px;\\n\\tposition: relative;\\n\\tbackground: #ffffff 0% 0% no-repeat padding-box;\\n\\tborder: 1px solid #e0e0e0;\\n}\\n.app-tier-model-icon[data-v-ada1dc7a] {\\n\\tposition: absolute;\\n\\twidth: 16px;\\n\\theight: 16px;\\n\\ttop: 6px;\\n}\\n.app-tier-model-name[data-v-ada1dc7a] {\\n\\tposition: absolute;\\n\\ttop: 9px;\\n\\tfont: normal normal normal 14px/19px Roboto;\\n\\tcolor: #212121;\\n}\\n.app-tier-model-name.disabled[data-v-ada1dc7a] {\\n\\tcolor: #D5D5D5;\\n}\\n.version-text[data-v-ada1dc7a] {\\n\\tmargin: 10px 7px 10px auto;\\n\\tdisplay: table;\\n\\tfont: normal normal normal 12px/16px Roboto;\\n\\tcolor: #757575;\\n\\tcursor: pointer;\\n\\tuser-select: none;\\n}\\n.version-text.disabled[data-v-ada1dc7a] {\\n\\tpointer-events: none;\\n\\tcursor: pointer;\\n}\\n.chevron[data-v-ada1dc7a] {\\n\\tposition: absolute;\\n\\tcolor: #757575;\\n\\tfont-size: 24px;\\n}\\n.button-tooltip[data-v-ada1dc7a] {\\n\\tvisibility: hidden;\\n\\tposition: absolute;\\n\\tbackground: #757575;\\n\\tcolor: #FFFFFF;\\n\\tfont-size: 11px;\\n\\tfont-family: 'Roboto';\\n\\ttext-align: center;\\n\\tborder-radius: 4px;\\n\\tletter-spacing: 0.2px;\\n\\tpadding: 6px 8px 6px 8px;\\n\\ttop: 56px;\\n\\tleft: 63px;\\n\\topacity: 0;\\n}\\n.button-disable .save-button:hover+.button-tooltip[data-v-ada1dc7a],\\n.start-screen:hover .button-tooltip[data-v-ada1dc7a],\\n.row-container:hover .button-tooltip[data-v-ada1dc7a],\\n.publish-info:hover .button-tooltip[data-v-ada1dc7a] {\\n\\tvisibility: visible;\\n\\ttransition: opacity 0.3s ease-out 1s;\\n\\topacity: 1;\\n}\\n.bpmn-color[data-v-ada1dc7a] {\\n\\tcolor: #007c77;\\n}\\n.process-color[data-v-ada1dc7a] {\\n\\tcolor: #007c77;\\n}\\n.entity-designer-color[data-v-ada1dc7a] {\\n\\tcolor: #e9724c;\\n}\\n.qjson-color[data-v-ada1dc7a] {\\n\\tcolor: #449dd1;\\n}\\n.yaml-color[data-v-ada1dc7a] {\\n\\tcolor: #449dd1;\\n}\\n.namedcomp-color[data-v-ada1dc7a] {\\n\\tcolor: #212121;\\n}\\n.app-settings-color[data-v-ada1dc7a] {\\n\\tcolor: #151233;\\n}\\n.js-color[data-v-ada1dc7a] {\\n\\tcolor: #449dd1;\\n}\\n.css-color[data-v-ada1dc7a] {\\n\\tcolor: #151233;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/components/exportDialogItem.vue\"],\"names\":[],\"mappings\":\";AA6FA;CACC,WAAW;CACX,YAAY;CACZ,kBAAkB;CAClB,+CAA+C;CAC/C,yBAAyB;AAC1B;AAEA;CACC,kBAAkB;CAClB,WAAW;CACX,YAAY;CACZ,QAAQ;AACT;AAEA;CACC,kBAAkB;CAClB,QAAQ;CACR,2CAA2C;CAC3C,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,0BAA0B;CAC1B,cAAc;CACd,2CAA2C;CAC3C,cAAc;CACd,eAAe;CACf,iBAAiB;AAClB;AAEA;CACC,oBAAoB;CACpB,eAAe;AAChB;AAEA;CACC,kBAAkB;CAClB,cAAc;CACd,eAAe;AAChB;AAEA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,mBAAmB;CACnB,cAAc;CACd,eAAe;CACf,qBAAqB;CACrB,kBAAkB;CAClB,kBAAkB;CAClB,qBAAqB;CACrB,wBAAwB;CACxB,SAAS;CACT,UAAU;CACV,UAAU;AACX;AAEA;;;;CAIC,mBAAmB;CACnB,oCAAoC;CACpC,UAAU;AACX;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf;AAEA;CACC,cAAc;AACf\",\"sourcesContent\":[\"<template>\\n\\t<div class=\\\"row-container\\\" :id=\\\"item.id\\\" v-if=\\\"!item.imported\\\">\\n\\t\\t<i v-if=\\\"item.children && item.children?.length > 0\\\" :class=\\\"chevronClass\\\" @click=\\\"calculateClass\\\"\\n\\t\\t\\t:style=\\\"{ cursor: 'pointer', left: (!item.level ? 4 : iconLeft - 20) + 'px' }\\\" />\\n\\t\\t<i v-if=\\\"item.type == 'folder'\\\"\\n\\t\\t\\t:style=\\\"{ top: '4px', fontSize: 'larger', cursor: 'pointer', left: iconLeft + (!item.level ? 43 : 20) + 'px', position: 'absolute' }\\\"\\n\\t\\t\\t@click=\\\"calculateClass\\\" class=\\\"mdi mdi-folder app-settings-color app-tier-model-icon\\\"></i>\\n\\t\\t<CheckboxComp v-else\\n\\t\\t\\t:style=\\\"{ top: '8px', cursor: 'pointer', left: iconLeft + (!item.level ? 43 : 20) + 'px', position: 'absolute' }\\\"\\n\\t\\t\\t:check=\\\"checked\\\" :minus=\\\"!item.allChildChecked && item.anyChildChecked\\\" :disabled=\\\"item.disabled\\\"\\n\\t\\t\\t@click=\\\"handleCheck\\\" />\\n\\n\\t\\t<i v-if=\\\"item.type != 'folder'\\\"\\n\\t\\t\\t:class=\\\"'app-tier-model-icon ' + ModelContants.getModelVisualInfo(item.type, undefined).icon\\\"\\n\\t\\t\\t:style=\\\"{ color: ModelContants.getModelVisualInfo(item.type, undefined).color, left: iconLeft + (!item.level ? 69 : 45) + 'px' }\\\" />\\n\\n\\t\\t<span :style=\\\"{ left: iconLeft + (!item.level ? 91 : 71) + (item.type == 'folder' ? -20 : 0) + 'px' }\\\"\\n\\t\\t\\t:class=\\\"['app-tier-model-name', item.disabled ? 'disabled' : '']\\\">{{ item?.name }}\\n\\t\\t\\t<span class=\\\"start-screen\\\" v-if=\\\"startScreen?.ID == item.id\\\">\\n\\t\\t\\t\\t<i class=\\\"mdi mdi-home-outline\\\"></i>\\n\\t\\t\\t\\t<span class=\\\"button-tooltip\\\" style=\\\"top: -30px; left: 2px; z-index: 1; width: 80px;\\\">Start\\n\\t\\t\\t\\t\\tScreen</span>\\n\\t\\t\\t</span>\\n\\t\\t</span>\\n\\n\\t\\t<template v-if=\\\"item.type != 'folder'\\\">\\n\\t\\t\\t<span v-if=\\\"!item.usageType && item.type != 'module'\\\" :class=\\\"['version-text', item.disabled ? 'disabled' : '']\\\"\\n\\t\\t\\t\\t@click=\\\"handleVersionDialog\\\">\\n\\t\\t\\t\\t{{ item.version ? item.version : 'No version' }} <i v-if=\\\"!item.usageType\\\"\\n\\t\\t\\t\\t\\t:class=\\\"['mdi mdi-pencil-outline version-icon', item.disabled ? 'disabled' : '']\\\"></i>\\n\\t\\t\\t</span>\\n\\t\\t\\t<div v-else-if=\\\"item.imported && item.type == 'module'\\\" class='version-text' @click=\\\"moduleVersionDialog(item)\\\">\\n\\t\\t\\t\\t{{ item.version ? item.version : 'No version' }}\\n\\t\\t\\t\\t<i :class=\\\"['mdi mdi-pencil-outline version-icon']\\\"></i>\\n\\t\\t\\t</div>\\n\\t\\t\\t<span v-if=\\\"item.disabled && !item.version\\\" class=\\\"button-tooltip\\\" style=\\\"z-index: 1; width: 300px;\\\">No version\\n\\t\\t\\t\\tavailable for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n\\t\\t\\t</span>\\n\\t\\t</template>\\n\\t</div>\\n</template>\\n\\n<script setup lang=\\\"ts\\\">\\nimport CheckboxComp from \\\"../../../checkboxComp.vue\\\";\\nimport { ITableData } from '../../../../../../../../common/qCloudTemp/exporter';\\nimport { IModel } from '../../../../../../domain/model/models';\\nimport { computed, ref } from \\\"vue\\\";\\nimport { ModelContants } from \\\"../../../../../../../../common/qCloudTemp/modelContants\\\";\\n\\nconst props = defineProps<{\\n\\thandleItemCheckEvent: (item: ITableData) => void;\\n\\tstartScreen: IModel | undefined;\\n\\tversionDialog: (item: ITableData) => void;\\n\\thandleCollapse: (item: ITableData, childIterate?: boolean) => void;\\n\\titem: ITableData;\\n\\tmoduleVersionDialog: (item: ITableData) => void;\\n}>()\\n\\nconst chevronClass = ref(\\\"mdi mdi-menu-down chevron\\\");\\nconst checked = ref(props.item.checked);\\n\\nfunction calculateClass() {\\n\\tprops.handleCollapse(props.item, true);\\n\\tchevronClass.value = `mdi mdi-menu${props.item.collapsed ? '-right' : '-down'} chevron`\\n};\\n\\nfunction handleCheck() {\\n\\tprops.handleItemCheckEvent(props.item);\\n\\tchecked.value = props.item.checked;\\n\\treturn checked.value\\n}\\n\\nfunction handleVersionDialog() {\\n\\tif (props.item.imported) {\\n\\t\\tprops.moduleVersionDialog(props.item);\\n\\t} else {\\n\\t\\tprops.versionDialog(props.item);\\n\\t}\\n}\\n\\nconst iconLeft = computed(() => {\\n\\tconst level = props.item.level || 0;\\n\\treturn level * 25;\\n});\\n\\nconst modelNameLeft = computed(() => {\\n\\tconst level = props.item.level || 0;\\n\\treturn level * 25;\\n});\\n\\n</script>\\n\\n<style scoped>\\n.row-container {\\n\\twidth: 100%;\\n\\theight: 36px;\\n\\tposition: relative;\\n\\tbackground: #ffffff 0% 0% no-repeat padding-box;\\n\\tborder: 1px solid #e0e0e0;\\n}\\n\\n.app-tier-model-icon {\\n\\tposition: absolute;\\n\\twidth: 16px;\\n\\theight: 16px;\\n\\ttop: 6px;\\n}\\n\\n.app-tier-model-name {\\n\\tposition: absolute;\\n\\ttop: 9px;\\n\\tfont: normal normal normal 14px/19px Roboto;\\n\\tcolor: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n\\tcolor: #D5D5D5;\\n}\\n\\n.version-text {\\n\\tmargin: 10px 7px 10px auto;\\n\\tdisplay: table;\\n\\tfont: normal normal normal 12px/16px Roboto;\\n\\tcolor: #757575;\\n\\tcursor: pointer;\\n\\tuser-select: none;\\n}\\n\\n.version-text.disabled {\\n\\tpointer-events: none;\\n\\tcursor: pointer;\\n}\\n\\n.chevron {\\n\\tposition: absolute;\\n\\tcolor: #757575;\\n\\tfont-size: 24px;\\n}\\n\\n.button-tooltip {\\n\\tvisibility: hidden;\\n\\tposition: absolute;\\n\\tbackground: #757575;\\n\\tcolor: #FFFFFF;\\n\\tfont-size: 11px;\\n\\tfont-family: 'Roboto';\\n\\ttext-align: center;\\n\\tborder-radius: 4px;\\n\\tletter-spacing: 0.2px;\\n\\tpadding: 6px 8px 6px 8px;\\n\\ttop: 56px;\\n\\tleft: 63px;\\n\\topacity: 0;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n\\tvisibility: visible;\\n\\ttransition: opacity 0.3s ease-out 1s;\\n\\topacity: 1;\\n}\\n\\n.bpmn-color {\\n\\tcolor: #007c77;\\n}\\n\\n.process-color {\\n\\tcolor: #007c77;\\n}\\n\\n.entity-designer-color {\\n\\tcolor: #e9724c;\\n}\\n\\n.qjson-color {\\n\\tcolor: #449dd1;\\n}\\n\\n.yaml-color {\\n\\tcolor: #449dd1;\\n}\\n\\n.namedcomp-color {\\n\\tcolor: #212121;\\n}\\n\\n.app-settings-color {\\n\\tcolor: #151233;\\n}\\n\\n.js-color {\\n\\tcolor: #449dd1;\\n}\\n\\n.css-color {\\n\\tcolor: #151233;\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.container[data-v-5bfad562] {\\n    padding: 32px 20px 20px;\\n}\\n.settings-container[data-v-5bfad562] {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n.custom-text[data-v-5bfad562] {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n.radio-button[data-v-5bfad562] {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n.radio-text[data-v-5bfad562] {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n.existing-app-url[data-v-5bfad562] {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n.url-error[data-v-5bfad562] {\\n    border: 1px solid red;\\n}\\n.url-disable[data-v-5bfad562] {\\n    opacity: 0.5;\\n}\\n.existing-app-url[data-v-5bfad562]::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n.modules-selected-checkbox[data-v-5bfad562] {\\n    cursor: pointer;\\n}\\n.modules-selected-text[data-v-5bfad562] {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n.text-number[data-v-5bfad562] {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n.modules-datatable[data-v-5bfad562] {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n.modules-datatable[data-v-5bfad562]::-webkit-scrollbar {\\n    width: 4px;\\n}\\n.modules-datatable[data-v-5bfad562]::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n.modules-datatable[data-v-5bfad562]::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n.row-container[data-v-5bfad562] {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n.chevron[data-v-5bfad562] {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n.chevron.disabled[data-v-5bfad562] {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n.module-checkbox[data-v-5bfad562] {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n.module-name[data-v-5bfad562] {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.module-name.imported[data-v-5bfad562] {\\n    top: 10px;\\n    left: 87px;\\n}\\n.module-name.disabled[data-v-5bfad562] {\\n    color: #D5D5D5;\\n}\\n.model-checkbox[data-v-5bfad562] {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n.model-icon[data-v-5bfad562] {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n.app-tier-model-icon[data-v-5bfad562] {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n.app-tier-model-name[data-v-5bfad562] {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.app-tier-model-name.disabled[data-v-5bfad562] {\\n    color: #D5D5D5;\\n}\\n.model-name[data-v-5bfad562] {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.model-name.disabled[data-v-5bfad562] {\\n    color: #D5D5D5;\\n}\\n.version-text[data-v-5bfad562] {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n.version-text.disabled[data-v-5bfad562] {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n.version-icon[data-v-5bfad562] {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n.version-icon.disabled[data-v-5bfad562] {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n.footer[data-v-5bfad562] {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n.footer.deploy[data-v-5bfad562] {\\n    position: relative;\\n    width: 100%;\\n}\\n.footer.export[data-v-5bfad562] {\\n    margin-top: 102px;\\n}\\n.cancel-button[data-v-5bfad562] {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n.save-button[data-v-5bfad562] {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n.mobile-publish-text[data-v-5bfad562],\\n.web-publish-text[data-v-5bfad562] {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n.mobile-publish-text i[data-v-5bfad562],\\n.web-publish-text i[data-v-5bfad562] {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n.save-button.deploy[data-v-5bfad562] {\\n    padding: 10px 16px;\\n}\\n.button-disable .save-button[data-v-5bfad562] {\\n    color: #757575;\\n    cursor: default;\\n}\\n.button-disable .save-button:hover+.button-tooltip[data-v-5bfad562],\\n.start-screen:hover .button-tooltip[data-v-5bfad562],\\n.row-container:hover .button-tooltip[data-v-5bfad562],\\n.publish-info:hover .button-tooltip[data-v-5bfad562] {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n.button-tooltip[data-v-5bfad562] {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n.publish-info[data-v-5bfad562] {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n.select-environment[data-v-5bfad562] {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue\"],\"names\":[],\"mappings\":\";AAqiCA;IACI,uBAAuB;AAC3B;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;AACb;AAEA;IACI,wBAAwB;IACxB,qBAAqB;IACrB,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;AAClB;;AAEA;;;;;;GAMG;AAEH;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,2CAA2C;IAC3C,cAAc;IACd,iBAAiB;IACjB,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,UAAU;IACV,+CAA+C;IAC/C,yBAAyB;IACzB,kBAAkB;IAClB,2CAA2C;IAC3C,mBAAmB;IACnB,2BAA2B;AAC/B;AAEA;IACI,qBAAqB;AACzB;AAEA;IACI,YAAY;AAChB;AAEA;IACI,cAAc;IACd,iBAAiB;AACrB;AAEA;IACI,eAAe;AACnB;AAEA;IACI,2CAA2C;IAC3C,cAAc;IACd,qBAAqB;AAEzB;;AAEA;;GAEG;AAEH;IACI,yCAAyC;IACzC,cAAc;AAClB;AAEA;IACI,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;;GAEG;AAEH;IACI,UAAU;AACd;AAEA;IACI,+CAA+C;IAC/C,mBAAmB;AACvB;AAEA;IACI,gBAAgB;AACpB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,+CAA+C;IAC/C,yBAAyB;AAC7B;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,eAAe;AACnB;AAEA;IACI,oBAAoB;IACpB,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,UAAU;IACV,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,SAAS;IACT,UAAU;AACd;AAEA;IACI,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,UAAU;AACd;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR;AACJ;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,0BAA0B;IAC1B,cAAc;IACd,2CAA2C;IAC3C,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB;AAEA;IACI,oBAAoB;IACpB,eAAe;AACnB;AAEA;IACI,0DAA0D;IAC1D,cAAc;AAClB;AAEA;IACI,0DAA0D;IAC1D,cAAc;IACd,oBAAoB;IACpB,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,oBAAoB;AACxB;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;AAEA;IACI,iBAAiB;AACrB;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;IAChB,qBAAqB;IACrB,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,eAAe;AACnB;AAIA;IACI,+CAA+C;IAC/C,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,eAAe;AACnB;AAEA;;IAEI,iBAAiB;IACjB,mBAAmB;IACnB,WAAW;IACX,cAAc;IACd,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;AACvB;AAEA;;IAEI,eAAe;IACf,cAAc;IACd,iBAAiB;AACrB;AAEA;IACI,kBAAkB;AACtB;AAEA;IACI,cAAc;IACd,eAAe;AACnB;AAEA;;;;IAII,mBAAmB;IACnB,oCAAoC;IACpC,UAAU;AACd;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,cAAc;IACd,eAAe;IACf,qBAAqB;IACrB,kBAAkB;IAClB,kBAAkB;IAClB,qBAAqB;IACrB,wBAAwB;IACxB,SAAS;IACT,UAAU;IACV,UAAU;AACd;AAEA;IACI,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB;AAEA;IACI,WAAW;IACX,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB;AACJ\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container\\\">\\n        <div>\\n            <CheckboxComp :class=\\\"['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']\\\"\\n                :minus=\\\"mainCheckboxState == false\\\" :check=\\\"mainCheckboxState == true\\\"\\n                @click=\\\"handleModuleCountCheckboxEvent(mainCheckboxState == undefined)\\\" />\\n            <div :class=\\\"['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n                <span class=\\\"text-number\\\">{{ allChildCheckedModulesCount + anyChildCheckedModulesCount +\\n                    checkedRootLevelModelsCount }}</span>\\n                of <span class=\\\"text-number\\\">{{ totalRootLevelCount }}</span> items selected\\n            </div>\\n        </div>\\n        <div :class=\\\"['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']\\\" id=\\\"module-container-div\\\"> </div>\\n        <div v-if=\\\"props.screenType == 'Deploy'\\\" style=\\\"margin-bottom: 102px\\\">\\n            <div style=\\\"display: flex; align-items: center;\\\">\\n                <span class=\\\"custom-text environment\\\"> Publish To </span>\\n                <span class=\\\"publish-info\\\">\\n                    <i class=\\\"mdi mdi-information\\\"></i>\\n                    <span class=\\\"button-tooltip\\\" style=\\\"top: 460px; left: 96px; z-index: 1; width: 231px;\\\">Publish To\\n                        options may change depending on the module type you choose.</span>\\n                </span>\\n            </div>\\n\\n            <CustomSelect :options=\\\"publishTargets\\\" @input=\\\"onTargetSelect\\\" :selectedOption=\\\"selectedTarget\\\"\\n                :default=\\\"selectedTarget\\\" :disabledOptions=\\\"disabledOptions\\\" selectedClass=\\\"selected-environment\\\"\\n                placeholder=\\\"Select the publish environment of your application\\\" class=\\\"select-environment\\\">\\n            </CustomSelect>\\n        </div>\\n        <!--         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> -->\\n        <div :class=\\\"['footer', props.screenType == 'Deploy' ? 'deploy' : 'export']\\\">\\n            <div :class=\\\"['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']\\\" @click=\\\"close\\\">Cancel</div>\\n            <div v-if=\\\"props.screenType == 'Export'\\\" :class=\\\"(saveButtonDisable ? ' button-disable' : '')\\\"\\n                @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button \\\">DOWNLOAD</span>\\n                <span v-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -80px; left: 626px; z-index: 1; width: 145px;\\\">There are no items ready to publish. At least\\n                    one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 640px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n            <div v-if=\\\"props.screenType == 'Deploy'\\\" :class=\\\"[(saveButtonDisable ? ' button-disable' : '')]\\\"\\n                @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button deploy\\\">PUBLISH</span>\\n                <span v-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 652px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!selectedTarget\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 644px; z-index: 1; width: 123px;\\\">You need to select a publish\\n                    environment.</span>\\n                <span v-else-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">There are no items ready to publish. At least\\n                    one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n\\n        </div>\\n    </div>\\n</template>\\n\\n\\n<script setup lang=\\\"ts\\\">\\nimport { CryptoHelper } from \\\"@stechquick/algae/lib/helpers/cryptoHelper\\\";\\nimport { PlateauHelper } from \\\"@stechquick/algae/lib/helpers/plateau/plateauHelper\\\";\\nimport { computed, createApp, defineAsyncComponent, onMounted, ref } from \\\"vue\\\";\\nimport { IOrganizationCloud } from \\\"../../../../../../../common/clean/domain/useCases/ICloudProvider\\\";\\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem, ITableData } from \\\"../../../../../../../common/qCloudTemp/exporter\\\";\\nimport { APP_ITEM_CONTENT_TYPES, IModuleRelatedModelItem, IQJsonAdditionals } from \\\"../../../../../../../common/qCloudTemp/quickCloud\\\";\\nimport { container } from \\\"../../../../../domain/core/diContainer\\\";\\nimport { IQCloudApi } from \\\"../../../../../domain/infrastructure/IQCloudApi\\\";\\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \\\"../../../../../domain/model/models\\\";\\nimport { IDialog } from \\\"../../../../../domain/presentation/IDialog\\\";\\nimport { ICreateExportJob } from \\\"../../../../../domain/useCase/ICreateExportJob\\\";\\nimport { IDeployJobs } from \\\"../../../../../domain/useCase/IDeployJobs\\\";\\nimport { IJobUtils } from \\\"../../../../../domain/useCase/IJobUtils\\\";\\nimport { IListMultiModelVersions } from \\\"../../../../../domain/useCase/IListMultiModelVersions\\\";\\nimport { IListMultiModuleVersions } from \\\"../../../../../domain/useCase/IListMultiModuleVersions\\\";\\nimport { IPackJobs } from \\\"../../../../../domain/useCase/IPackJobs\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IViewModel } from \\\"../../../../../domain/viewModel/IViewModel\\\";\\nimport { IViewModelManager } from \\\"../../../../../domain/viewModel/IViewModelManager\\\";\\nimport { IBackofficeUseCase } from \\\"../../../../../domain/useCase/IBackofficeUseCase\\\";\\nimport { IApplicationUseCase } from \\\"../../../../../domain/useCase/IApplicationUseCase\\\";\\nimport ExportDialogItem from \\\"./components/exportDialogItem.vue\\\";\\nimport CustomSelect from \\\"../../../components/customSelect.vue\\\";\\nimport CheckboxComp from \\\"../../checkboxComp.vue\\\";\\nimport { FileDisplayerExternalData, IFileDisplayerUseCase } from \\\"../../../../../domain/useCase/IFileDisplayerUseCase\\\";\\nimport { ITreeItem } from \\\"../../../../../domain/presentation/ITreeView\\\";\\nimport { PathHelper } from \\\"../../../../../../../common/helpers/pathHelper\\\";\\nimport { FileExplorerConstants } from \\\"../../../../../domain/useCase/IFileExplorer\\\";\\nimport { IObjectUseCase } from \\\"../../../../../domain/useCase/IObjectUseCase\\\";\\n\\ninterface IDeployScreenAdditionalProps {\\n    screenType: \\\"Export\\\" | \\\"Deploy\\\";\\n    platformSelection: IPlatformSelection;\\n}\\n\\ninterface IDisabledOptions {\\n    index: number\\n    cause: string;\\n}\\n\\nconst props = defineProps<IDeployScreenAdditionalProps>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\\nconst fileDisplayerUseCase = container.resolve<IFileDisplayerUseCase>(IFileDisplayerUseCase);\\nconst objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\\n\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\nconst items = ref<Array<ITableData>>([]);\\nconst validations = ref<boolean>(true);\\nconst selectedTarget = ref<string>(\\\"\\\");\\nconst disabledOptions = ref<Array<IDisabledOptions>>();\\nconst publishTargets = ref<Array<string>>();\\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\\nconst startScreen = ref<IModel>();\\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>>();\\nconst dependencyErrorStr = ref<string>('');\\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\n\\n\\nonMounted(async () => {\\n    await executor.execute(async () => {\\n        await Promise.all([\\n            executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, {}).then(res => modelHistories.value = res),\\n            executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, {}).then(res => importedModuleVersions.value = res)\\n        ])\\n        initDependencies();\\n        handleItems();\\n        props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n        validations.value = validate();\\n    }, { loading: true });\\n})\\n\\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && e.allChildChecked).length);\\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && !e.allChildChecked && e.anyChildChecked).length);\\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \\\"module\\\" && e.checked).length);\\nconst totalRootLevelCount = computed(() => items.value.length);\\nconst saveButtonDisable = computed(() => (props.screenType == \\\"Deploy\\\" && props.platformSelection.web && selectedTarget.value == \\\"\\\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \\\"Export\\\" && !validateStartScreen()) || !validateDependencies());\\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true\\n    : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0 ? false : undefined));\\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\\nconst isAllDependenciesOK = computed(validateDependencies)\\nconst isStartScreenOK = computed(validateStartScreen)\\n\\nfunction validate() {\\n    let result = true;\\n    const modules = items.value.filter(e => e.type == \\\"module\\\" && e.anyChildChecked);\\n    const appLayerItems = items.value.filter(e => e.type == \\\"qjson\\\" && e.checked);\\n\\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => (item.additionals as IQJsonAdditionals | undefined)?.isRootPage);\\n    if (!startScreen.value)\\n        return false;\\n\\n    if (props.screenType == \\\"Deploy\\\") {\\n        if (modules.length > 0)\\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \\\"entityDesigner\\\" && f.checked)).length <= 0\\n\\n        let isApplicationWillDeploy = appLayerItems.length > 0;\\n        if (isApplicationWillDeploy) {\\n            result = appLayerItems\\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nfunction validateDependencies() {\\n    const checkMap = new Map<string, boolean>();\\n    items.value.forEach(item => {\\n        if (item.type == 'module' && item.children && item.children.length > 0)\\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\\n        else\\n            checkMap.set(item.id, item.checked == true)\\n    })\\n\\n    const mustBeCheckedMap = new Map<string, Array<string>>();\\n    dependencyMap.value?.forEach((deps, id) => {\\n        if (!checkMap.get(id))\\n            return;\\n\\n        deps.dependedTo.forEach(dependedId => {\\n            if (checkMap.get(dependedId))\\n                return;\\n\\n            if (mustBeCheckedMap.has(id)) {\\n                const vals = mustBeCheckedMap.get(id)!\\n                vals.push(dependedId)\\n                mustBeCheckedMap.set(id, vals)\\n            } else {\\n                mustBeCheckedMap.set(id, [dependedId])\\n            }\\n\\n        });\\n    })\\n\\n    //set deps error text\\n    const [firstItemID] = mustBeCheckedMap.keys();\\n    if (firstItemID) {\\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\\n        dependencyErrorStr.value = `Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\\n    }\\n\\n    return mustBeCheckedMap.size == 0\\n}\\n\\nfunction validateStartScreen() {\\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\\n}\\n\\nfunction findItem(ID: string) {\\n    for (const item of items.value) {\\n        if (item.type != 'module' && item.id == ID)\\n            return item;\\n        if (item.type == 'module' && item.children && item.children.length > 0) {\\n            const f = item.children.find(e => e.id == ID)\\n            if (f) return f\\n        }\\n    }\\n}\\n\\nfunction initDependencies() {\\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>();\\n    const depMap = new Map<string, Array<string>>();\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n\\n        const isImportedModule = item.owner.objectType == \\\"module\\\" && isModuleImported(item.owner as IModule);\\n\\n        let version: string | undefined;\\n        if (!isImportedModule) {\\n            const maxVersion = getItemMaxVersion(item)\\n            if (!maxVersion)\\n                return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\\n            version = maxVersion;\\n        }\\n        else {\\n            const moduleVersions = importedModuleVersions.value?.get(item.owner.ID)\\n            const moduleVersion = (item.owner as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n\\n            const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\\n            version = importedModuleModel?.version\\n        }\\n\\n        const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\\n\\n        depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\\n    });\\n\\n\\n    depMap.forEach((dependedTo, modelId) => {\\n        const dependedBy = Array<string>();\\n        depMap.forEach((dependencies, depModelId) => {\\n            if (dependencies.some(depId => depId == modelId))\\n                dependedBy.push(depModelId)\\n        })\\n        map.set(modelId, { dependedBy, dependedTo });\\n    })\\n    dependencyMap.value = map;\\n}\\n\\nfunction isModelDepended(item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\\n    if (!deps) return false;\\n\\n    return deps.some(dep => items.value.some(item => {\\n        if (item.type == 'module' && item.anyChildChecked) {\\n            return item.children?.some(child => child.checked && child.id == dep)\\n        }\\n        return item.id == dep && item.checked\\n    }));\\n}\\nfunction createDialogComp(item: ITableData) {\\n    const newChild = createApp(ExportDialogItem, {\\n        handleItemCheckEvent,\\n        startScreen,\\n        versionDialog,\\n        handleCollapse,\\n        item: item,\\n        moduleVersionDialog\\n    });\\n    const mountEl = document.createElement('div');\\n    newChild.mount(mountEl);\\n    const parentEl = document.getElementById('module-container-div');\\n    parentEl?.appendChild(mountEl);\\n}\\nfunction createAndAppendItem({ newItem }: { newItem: ITableData }) {\\n    createDialogComp(newItem);\\n    if ((newItem).type != \\\"module\\\") {\\n        items.value.push(newItem);\\n    }\\n}\\n\\nfunction handleItems() {\\n    // - App Settings\\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings');\\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\\n    const settingsData = appSettings && {\\n        id: appSettings.ID,\\n        name: appSettings.name,\\n        checked: true,\\n        disabled: false,\\n        type: (appSettings as IModel).modelType,\\n        version: !maxVersion ? 'latest' : maxVersion\\n    };\\n    appSettings && settingsData && createAndAppendItem({ newItem: settingsData });\\n\\n\\n    // - UI Settings\\n    const uiSettingsID = CryptoHelper.CreateGuid();\\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appSettings\\\") as Array<IModel>;\\n    const uiSettings: ITableData = {\\n        id: uiSettingsID,\\n        collapsed: true,\\n        name: \\\"UI Settings\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        checked: true,\\n        children: [{} as ITableData]\\n    };\\n    uiSettings && createAndAppendItem({ newItem: uiSettings });\\n    uiSettings.children = uiSettingsModels.map(settings => {\\n        const maxVersion = getItemMaxVersion(settings)\\n        const childData = {\\n            id: settings.ID,\\n            parentId: uiSettingsID,\\n            name: settings.name,\\n            type: settings.modelType,\\n            checked: maxVersion != undefined,\\n            usageType: settings?.usageType,\\n            disabled: !maxVersion,\\n            version: maxVersion,\\n            level: 2\\n        }\\n        createAndAppendItem({ newItem: childData });\\n        return childData;\\n    })\\n    handleParentCheckedStatus(uiSettings, false);\\n\\n\\n    // - Styled Components\\n    const uiAssetID = CryptoHelper.CreateGuid();\\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appAssetList\\\") as Array<IModel>;\\n    const uiAssetList: ITableData = {\\n        id: uiAssetID,\\n        collapsed: true,\\n        name: \\\"Styled Components\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        anyChildChecked: true,\\n        allChildChecked: true,\\n        children: [{} as ITableData]\\n    };\\n    uiAssetList && createAndAppendItem({ newItem: uiAssetList });\\n    uiAssetList.children = appAssetList.map((asset) => {\\n        const childAsset = {\\n            id: asset.ID,\\n            parentId: uiAssetID,\\n            name: asset.name,\\n            type: asset.modelType,\\n            checked: true,\\n            usageType: asset?.usageType,\\n            level: 2\\n        }\\n        createAndAppendItem({ newItem: childAsset });\\n        return childAsset;\\n    }) as Array<ITableData>;\\n    handleParentCheckedStatus(uiAssetList, false);\\n\\n    \\n    const treeItems = fileDisplayerUseCase.cloneFileExplorerTreeView({\\n        displayFilterer: (item, hasChildren) => {\\n            switch (item.ID) { case FileExplorerConstants.uiAssetListID: case FileExplorerConstants.uiSettingsID: return false; default: break; }\\n            switch (item.objectType) {\\n                case \\\"application\\\": return false;\\n                case \\\"module\\\": return true;\\n                case \\\"folder\\\": return hasChildren;\\n                case \\\"model\\\": return true;\\n            }\\n        },\\n    });\\n\\n    const converter = (treeItem: ITreeItem<FileDisplayerExternalData>, options: {ownerModule?: {isImportedModule: boolean;moduleVersion: string | undefined;relatedModelHistories: IModuleRelatedModelItem[] | undefined}}): ITableData => {\\n        const item = treeItem.externalData;\\n        if (item.objectType == \\\"application\\\") { throw new Error(\\\"unexpected item type\\\"); }\\n\\n        const fullPath = objectUseCase.getFullPath(item, \\\"self\\\");\\n        let level = fullPath.split(\\\"/\\\").length - 1;\\n\\n        let tableData: ITableData;\\n        switch(item.objectType) {\\n            case \\\"folder\\\":\\n                tableData = {\\n                    id: item.ID, name: item.name, type: \\\"folder\\\", collapsed: true, level,\\n                    children: treeItem.children?.map((item) => converter(item, { ownerModule: options.ownerModule })),\\n                };\\n                tableData.children?.forEach(child => child.parent = tableData);\\n                handleParentCheckedStatus(tableData, false);\\n                break;\\n            case \\\"model\\\":\\n                if (options.ownerModule) {\\n                    tableData = { id: item.ID, name: item.name, type: item.modelType, level };\\n                    if (!options.ownerModule.isImportedModule || item.isUnmodifiable) {\\n                        const maxVersion = getItemMaxVersion(item);\\n                        tableData = {\\n                            ...tableData,\\n                            checked: maxVersion ? true : item.isUnmodifiable,\\n                            disabled: maxVersion ? false : !item.isUnmodifiable,\\n                            version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                        };\\n                    } else {\\n                        const importedModulesModel = options.ownerModule.relatedModelHistories?.find(e => e.modelID == item.ID)\\n                        tableData = { ...tableData, checked: true, disabled: false, version: importedModulesModel?.version };\\n                    }\\n                } else {\\n                    const maxVersion = getItemMaxVersion(item);\\n                    tableData = {\\n                        id: item.ID,\\n                        name: item.name,\\n                        checked: maxVersion ? true : item.isUnmodifiable,\\n                        disabled: maxVersion ? false : !item.isUnmodifiable,\\n                        type: item.modelType,\\n                        version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                        level,\\n                    };\\n                }\\n                break;\\n            case \\\"module\\\":\\n                const isImportedModule = isModuleImported(item);\\n                const moduleVersion = item.relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion;\\n                const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\\n                \\n                tableData = {\\n                    id: item.ID,\\n                    collapsed: true,\\n                    name: item.name,\\n                    type: \\\"module\\\",\\n                    imported: isImportedModule,\\n                    version: moduleVersion,\\n                    children: treeItem.children?.map((item) => converter(item, {ownerModule: {isImportedModule, moduleVersion, relatedModelHistories}})),\\n                }\\n                tableData.children?.forEach(child => child.parent = tableData);\\n                handleParentCheckedStatus(tableData, false);\\n                break;\\n        }\\n        return tableData;\\n    };\\n    const tableDatas = treeItems.map(item => converter(item, {}));\\n\\n    const traverser = (tableData: ITableData) => {\\n        createAndAppendItem({ newItem: tableData });\\n        tableData.children?.forEach(traverser);\\n    };\\n    \\n    tableDatas.forEach(traverser);\\n}\\n\\nfunction getItemMaxVersion(item: IModel): string | undefined {\\n    if (!modelHistories.value?.has(item.ID))\\n        return undefined;\\n\\n    const versions = modelHistories.value.get(item.ID);\\n    if (!versions)\\n        return undefined;\\n\\n    const findMaxVersion = (versions: Array<string>) => {\\n        const versionNumbers = versions.map(v => {\\n            const parts: Array<string> = v.split(\\\".\\\");\\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\\n        })\\n\\n        versionNumbers.sort((a, b) => b - a);\\n\\n        const maxVersion = versionNumbers[0];\\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\\n    }\\n\\n    return findMaxVersion(versions.map(e => e.version!));\\n\\n}\\nfunction checkMaxVersionOfAllItems() {\\n    let isThereVersion: boolean = false;\\n    items.value.forEach(item => {\\n        if (item.type == \\\"module\\\") {\\n            item.children?.forEach(child => {\\n                if (child.version) {\\n                    isThereVersion = true;\\n                }\\n\\n            })\\n        }\\n        else {\\n            if (item.version) {\\n                isThereVersion = true;\\n            }\\n        }\\n    })\\n    return isThereVersion;\\n}\\nfunction handleModuleCountCheckboxEvent(value: boolean) {\\n    items.value.filter(e => !e.disabled).forEach((item) => {\\n        item.checked = value;\\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\\n        if (allItemsCheckable) item.allChildChecked = value;\\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\\n    });\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleCollapse(item: ITableData, childIterate?: boolean, collapsed?: boolean) {\\n    item.collapsed = collapsed !== undefined ? collapsed : !item.collapsed;\\n    if (childIterate) {\\n        item.children?.forEach(child => {\\n            const childEl = document.getElementById(child.id);\\n            childEl!.style.display = item.collapsed ? \\\"none\\\" : \\\"block\\\";\\n            handleCollapse(child, childIterate, item.collapsed);\\n        })\\n    }\\n}\\n\\nfunction checkAllDependents(item: ITableData, recurseParent: boolean) {\\n    if (item.disabled || item.checked) return;\\n\\n    item.checked = true\\n    item.parent && handleParentCheckedStatus(item.parent, recurseParent);\\n\\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\\n    if (!deps) return;\\n\\n    deps.forEach(dep => {\\n        items.value.forEach(item => {\\n            if (item.type == 'module' && !item.allChildChecked) {\\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\\n                willCheckItem && checkAllDependents(willCheckItem, recurseParent);\\n                handleParentCheckedStatus(item, recurseParent);\\n                return;\\n            }\\n\\n            if (!item.checked && item.id == dep) {\\n                checkAllDependents(item, recurseParent);\\n                item.parent && handleParentCheckedStatus(item.parent, recurseParent);\\n            }\\n        })\\n    });\\n}\\n\\nfunction handleItemCheckEvent(item: ITableData) {\\n    if (item.disabled || isModelDepended(item) || item.name == 'App Settings')\\n        return;\\n\\n    if (item.type != \\\"module\\\" && item.type != \\\"folder\\\") {\\n        if (item.checked) {\\n            item.checked = false;\\n            item.parent && handleParentCheckedStatus(item.parent, true);\\n        } else {\\n            checkAllDependents(item, true);\\n        }\\n    } else {\\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\\n            if (item.anyChildChecked) {\\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\\n                item.checked = false;\\n                handleParentCheckedStatus(item, true);\\n            } else {\\n                item.children.forEach(child => checkAllDependents(child, true));\\n                item.checked = true;\\n            }\\n        }\\n        else {\\n            item.checked = !item.checked;\\n            item.allChildChecked = false;\\n        }\\n    }\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleParentCheckedStatus(item: ITableData, recurseParent: boolean) {\\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\\n    if (recurseParent && item.parent) {\\n        handleParentCheckedStatus(item.parent, true);\\n    }\\n}\\n\\nfunction syncPublishTargets() {\\n    publishTargets.value = []; disabledOptions.value = [];\\n\\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\\n    if (!targets)\\n        return;\\n\\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\\n    if (!isSelectAnyItem) {\\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\\n        const disabledOptionList = Array<IDisabledOptions>();\\n        for (let i = 0; i < publishTargets.value.length; i++) {\\n            disabledOptionList.push({ index: i, cause: \\\"You need to include items to publish.\\\" })\\n        }\\n        disabledOptions.value = disabledOptionList;\\n        return;\\n    }\\n\\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\\n\\n    const disabledOptionList = Array<IDisabledOptions>();\\n    for (let i = 0; i < sortedTargets.length; i++) {\\n        const cause = sortedTargets[i].cause;\\n        if (cause) disabledOptionList.push({ index: i, cause })\\n    }\\n    disabledOptions.value = disabledOptionList;\\n    publishTargets.value = sortedTargets.map(e => e.optionName);\\n\\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \\\"\\\";\\n}\\n\\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\\n    const list = Array<{ optionName: string, cause?: string }>();\\n\\n    Object.keys(targets).forEach(e => {\\n        const key = e as keyof IOrganizationCloud;\\n        const value = targets[key];\\n        const optionName = cloudTargetMap(key)!;\\n        if (!value)\\n            return list.push({ optionName, cause: \\\"You are not authorized to publish to this target.\\\" });\\n\\n\\n        switch (key) {\\n            case \\\"azure\\\":\\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\\n                    if (!items || items.length == 0) { return status; }\\n                    for (const item of items) {\\n                        if (item.checked || item.anyChildChecked) {\\n                            if (item.type == \\\"module\\\") {\\n                                status = traverseSelectedItems(status, item.children);\\n                            }\\n                            if (item.type == \\\"entityDesigner\\\" || item.type == \\\"bpmn\\\" || item.type == \\\"process\\\") {\\n                                status = false;\\n                                break;\\n                            }\\n                        }\\n\\n                    }\\n                    return status;\\n                }\\n\\n                const status = traverseSelectedItems(true, items.value);\\n                if (!status)\\n                    return list.push({ optionName, cause: \\\"Entity and process models cannot be published to this target.\\\" });\\n                break;\\n            case \\\"plateauGCP\\\":\\n                const modulesHasNotAnEDModel = items.value.filter(e => e.name != \\\"UI Settings\\\").find(e => e.type == \\\"module\\\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \\\"bpmn\\\" || c.type == \\\"process\\\")) && !e.children?.some(c => c.type == \\\"entityDesigner\\\" && c.checked))\\n                if (modulesHasNotAnEDModel)\\n                    return list.push({ optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.` })\\n                break;\\n        }\\n\\n        list.push({ optionName });\\n    })\\n\\n    return list;\\n}\\n\\nfunction updateDependencyMap(newVersion: string, item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id);\\n    dependencyMap.value?.set(item.id, {\\n        dependedBy: deps?.dependedBy || Array<string>(),\\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\\n    })\\n}\\n\\nfunction versionDialog(item: ITableData) {\\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\\n    const hasAnyVersion = modelHistories.value?.has(item.id);\\n    const options = {\\n        clickedNode, cb: (version: string) => {\\n            item.version = version;\\n            updateDependencyMap(version, item);\\n        }\\n    } as any;\\n\\n    if (hasAnyVersion) {\\n        options.versions = modelHistories.value?.get(item.id)\\n    }\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/modelVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" }, options\\n    );\\n}\\n\\n\\nfunction moduleVersionDialog(item: ITableData) {\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/moduleVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" },\\n        {\\n            module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => {\\n                item.version = moduleVersion.version;\\n                item.children?.forEach(child => {\\n                    const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\\n                    child.version = modulesModel?.version\\n                    updateDependencyMap(modulesModel?.version!, child);\\n                })\\n            }\\n        }\\n    );\\n}\\n\\nfunction close() {\\n    emit(\\\"close\\\");\\n}\\n\\nasync function save() {\\n    executor.execute(\\n        async () => {\\n            const initAsGroup = async () => {\\n                const groupID = CryptoHelper.CreateGuid();\\n                await initHistory(groupID);\\n                await packJob(groupID);\\n                return groupID;\\n            }\\n\\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\\n\\n            switch (props.screenType) {\\n                case \\\"Export\\\":\\n                    if (isFlowBackend) {\\n                        const deployItems = await createAzureDeployItems();\\n                        await packJobsUseCase.createPackJobs([{\\n                            appID: viewModel.studio.appId,\\n                            exportType: \\\"qui\\\",\\n                            selectionData: deployItems\\n                        }]);\\n                        break;\\n                    }\\n\\n                    const groupID = await initAsGroup();\\n                    await createExportJob(groupID);\\n                    break;\\n                case \\\"Deploy\\\":\\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\\n                        case \\\"plateauGCP\\\":\\n                            const groupID = await initAsGroup();\\n                            await createDeployJob(groupID);\\n                            break;\\n                        case \\\"azure\\\":\\n                            const deployItems = await createAzureDeployItems();\\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\\n                            break;\\n                    }\\n            }\\n            const userMobileUsage = viewModel.user?.mobileUsage;\\n            const appMobileUsage = currentApp.value?.mobileUsage;\\n            if(props.platformSelection && props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \\\"backofficeUpdate\\\"})\\n                \\n            }\\n            emit(\\\"close\\\");\\n        },\\n        { loading: true });\\n}\\n\\nasync function createAzureDeployItems() {\\n    const deployItems: Array<IExportItem> = [];\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        const path = item.owner.objectType == \\\"module\\\" ? PathHelper.join(item.owner.name, item.path) : item.path;\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\\n        if (!items || items.length == 0) { return; }\\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\\n            if (item.type == \\\"module\\\" || item.type == \\\"folder\\\") {\\n                traverseSelectedItems(item.children);\\n                return;\\n            }\\n\\n            const itemMap = itemIdObj[item.id];\\n\\n            const deployItem: IExportItem = {\\n                id: item.id,\\n                name: jobUtils.getFileFullname(itemMap.item),\\n                path: itemMap.path,\\n                type: jobUtils.getItemType(itemMap.item),\\n                ver: item.version || \\\"latest\\\",\\n                isRootPage: (itemMap.item.additionals as IQJsonAdditionals | undefined)?.isRootPage,\\n                modulePrefix: itemMap.prefix,\\n                ownerType: 'application',\\n                ownerName: viewModel.studio.appName,\\n                size: itemMap.item.size,\\n                createDate: itemMap.item.createDate,\\n            };\\n            deployItems.push(deployItem)\\n        });\\n    };\\n\\n    traverseSelectedItems(items.value);\\n\\n    return deployItems;\\n}\\n\\nasync function initHistory(groupID: string) {\\n    return qcloudApi.initPublishHistory({\\n        appID: viewModel.studio.appId,\\n        ID: groupID,\\n        isMultiStep: true,\\n        type: props.screenType == \\\"Deploy\\\" ? \\\"publish\\\" : \\\"download\\\",\\n        cloudProvider: props.screenType == \\\"Deploy\\\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\\n        platform: props.platformSelection\\n    });\\n}\\n\\nasync function packJob(groupID: string) {\\n    let exportItemMap = new Map<string, Array<IExportItem>>();\\n    const appName = viewModel.studio.appName;\\n\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        const path = item.owner.objectType == \\\"module\\\" ? PathHelper.join(item.owner.name, item.path) : item.path;\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const createExportObject = (tableItem: ITableData) => {\\n        const itemMap = itemIdObj[tableItem.id];\\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == itemMap.item.modelType);\\n\\n        const retVal: IExportItem = {\\n            id: tableItem.id,\\n            ver: tableItem.version!,\\n            type: jobUtils.getItemType(itemMap.item),\\n            path: itemMap.path,\\n            modulePrefix: itemMap.prefix,\\n            name: jobUtils.getFileFullname(itemMap.item),\\n            ownerType: isAppItem ? 'application' : (itemMap.item.owner.objectType as \\\"module\\\" | \\\"application\\\"),\\n            ownerName: isAppItem ? appName : itemMap.item.owner.name,\\n        };\\n        return retVal;\\n    }\\n\\n    const addToExportItem = (key: string, obj: IExportItem) => {\\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\\n        let items = exportItemMap.get(key);\\n        if (items && items.length > 0) {\\n            items.push(obj);\\n            exportItemMap.set(key, items);\\n        } else\\n            exportItemMap.set(key, [obj]);\\n    }\\n    const mapTableItemToExportItem = (tableItems: Array<ITableData>) => {\\n        tableItems.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\\n        if (asset.type == 'module') {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                const obj = createExportObject(child);\\n                if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n\\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n            });\\n        } \\n        else if(asset.type == \\\"folder\\\") {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                if(child.type == \\\"folder\\\") {\\n                    mapTableItemToExportItem([child])\\n                }\\n                else {\\n                    const obj = createExportObject(child);\\n                    if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n                \\n                    const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                    addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n                }\\n            });\\n        }\\n        else {\\n            const obj = createExportObject(asset);\\n            if (asset.type == 'qjson') {\\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \\\"model\\\" && i.modelType == \\\"qjson\\\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\\n                obj.isRootPage = isRootPage ? true : undefined;\\n            }\\n            addToExportItem(appName, obj);\\n        }\\n    })\\n    }\\n    mapTableItemToExportItem(items.value);\\n   \\n\\n    let jobs = Array<ICreateExportJobParam>();\\n    exportItemMap.forEach((v, k) => {\\n        jobs.push({\\n            appID: viewModel.studio.appId,\\n            exportType: \\\"qui\\\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \\\"model\\\":  \\\"qui\\\"\\n            selectionData: v,\\n            cause: props.screenType == 'Export' ? 'download' : \\\"publish\\\",\\n            layer: 0,\\n            groupID: groupID,\\n            platformSelection: props.platformSelection\\n        })\\n    })\\n\\n    await packJobsUseCase.createPackJobs(jobs);\\n}\\nasync function createExportJob(groupID: string) {\\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\\n        appID: viewModel.studio.appId,\\n        exportType: \\\"qui\\\",\\n        selectionData: [],\\n        layer: 1,\\n        groupID: groupID\\n    });\\n}\\n\\nasync function createDeployJob(groupID: string) {\\n    //1-(n) L1- deployJob(build)\\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\\n        .then(jobs => jobs.jobs.map(e => {\\n            const jobData = e.jobData as IExportJobData;\\n            return {\\n                ownerName: jobData.items[0].ownerName,\\n                jobID: e.jobID,\\n                type: jobData.items[0].ownerType,\\n                mainDir: getDeployableArchiveRoot(jobData)\\n            }\\n        }));\\n\\n    if (!packages || packages.length <= 0)\\n        return;\\n\\n    let buildJobs = Array<ICreateDeployJobParam>();\\n    packages.forEach(pack => {\\n        buildJobs.push({\\n            appID: viewModel.studio.appId,\\n            type: \\\"build\\\",\\n            package: {\\n                type: pack.type as DeployType,\\n                name: pack.ownerName!,\\n                mainDir: pack.mainDir,\\n                zip: `${pack.jobID}.zip`,\\n            },\\n            layer: 1,\\n            groupID: groupID\\n        })\\n    })\\n\\n    await deployJobsUseCase.createBuildJobs(buildJobs);\\n\\n    //2-(1) L2- deployJob(deployment)\\n    let jobParam: ICreateDeployJobParam = {\\n        appID: viewModel.studio.appId,\\n        type: \\\"deployment\\\",\\n        deployConfig: {\\n            process: {\\n                configModelIDs: getProcessConfigList(),\\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \\\"bpmn\\\"))\\n            }\\n        },\\n        layer: 2,\\n        groupID: groupID,\\n        platformSelection: props.platformSelection\\n    }\\n\\n    await deployJobsUseCase.startDeploymentJob(jobParam);\\n}\\n\\nfunction getProcessConfigList() {\\n    let processConfigList = Array<IProcessConfigModelItem>();\\n    items.value.forEach((asset) => {\\n        if (asset.type == \\\"module\\\" && asset.anyChildChecked && asset.children) {\\n            const usingService = asset.children.find(c => c.type == \\\"entityDesigner\\\");\\n            if (!usingService)\\n                return;\\n\\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\\n            asset.children.forEach(child => {\\n                if (child.checked && child.type == \\\"process\\\") {\\n                    processConfigList.push({\\n                        moduleName: serviceName,\\n                        model: {\\n                            id: child.id,\\n                            name: child.name,\\n                            version: child.version!\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n    })\\n    return processConfigList;\\n}\\n\\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\\n    if (jobData.items[0].ownerType == \\\"module\\\") {\\n        let edModel = jobData.items.find(e => e.type == \\\"entityDesigner\\\");\\n        if (!edModel)\\n            throw new Error(\\\"!!! this module cannot deploy. Because its have not a service\\\");\\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\\n    }\\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\\n}\\n\\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \\\"Public Cloud\\\", plateauGCP: \\\"Plateau Platform Playground\\\" };\\n    if (pureVal) {\\n        return Object.keys(map).find(e => {\\n            if (map[e as keyof IOrganizationCloud] === name) {\\n                return true;\\n            }\\n        })\\n    } else {\\n        let key = Object.keys(map).includes(name);\\n        if (!key)\\n            return;\\n        return map[name as keyof IOrganizationCloud];\\n    }\\n}\\n\\nfunction onTargetSelect(value: string) {\\n    selectedTarget.value = value\\n}\\n\\nconst isModuleImported = (item: IModule) => {\\n    return objectUseCase.isModuleImported(item);\\n}\\n\\n</script>\\n\\n\\n<style scoped>\\n.container {\\n    padding: 32px 20px 20px;\\n}\\n\\n.settings-container {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n\\n.custom-text {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n\\n.radio-button {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n\\n.radio-text {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n\\n.existing-app-url {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n\\n.url-error {\\n    border: 1px solid red;\\n}\\n\\n.url-disable {\\n    opacity: 0.5;\\n}\\n\\n.existing-app-url::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n\\n.modules-selected-checkbox {\\n    cursor: pointer;\\n}\\n\\n.modules-selected-text {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n    ;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n\\n.text-number {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.modules-datatable {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n\\n.modules-datatable::-webkit-scrollbar {\\n    width: 4px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n\\n.row-container {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n\\n.chevron {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n\\n.chevron.disabled {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n\\n.module-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n\\n.module-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.module-name.imported {\\n    top: 10px;\\n    left: 87px;\\n}\\n\\n.module-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n\\n.model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n\\n.app-tier-model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n\\n.app-tier-model-name {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.version-text {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.version-text.disabled {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.version-icon {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n\\n.version-icon.disabled {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.footer {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n\\n.footer.deploy {\\n    position: relative;\\n    width: 100%;\\n}\\n\\n.footer.export {\\n    margin-top: 102px;\\n}\\n\\n.cancel-button {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n\\n\\n.save-button {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n.mobile-publish-text,\\n.web-publish-text {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.mobile-publish-text i,\\n.web-publish-text i {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n\\n.save-button.deploy {\\n    padding: 10px 16px;\\n}\\n\\n.button-disable .save-button {\\n    color: #757575;\\n    cursor: default;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n\\n.button-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n\\n.publish-info {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n\\n.select-environment {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n</style>\\n\\n<style>\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue\"],\"names\":[],\"mappings\":\";AAg4CA;IACI,6BAA6B;IAC7B,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,yBAAyB;IACzB,gBAAgB;AACpB;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,yBAAyB;IACzB,0CAA0C;IAC1C,2BAA2B;AAC/B\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container\\\">\\n        <div>\\n            <CheckboxComp :class=\\\"['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']\\\"\\n                :minus=\\\"mainCheckboxState == false\\\" :check=\\\"mainCheckboxState == true\\\"\\n                @click=\\\"handleModuleCountCheckboxEvent(mainCheckboxState == undefined)\\\" />\\n            <div :class=\\\"['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n                <span class=\\\"text-number\\\">{{ allChildCheckedModulesCount + anyChildCheckedModulesCount +\\n                    checkedRootLevelModelsCount }}</span>\\n                of <span class=\\\"text-number\\\">{{ totalRootLevelCount }}</span> items selected\\n            </div>\\n        </div>\\n        <div :class=\\\"['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']\\\" id=\\\"module-container-div\\\"> </div>\\n        <div v-if=\\\"props.screenType == 'Deploy'\\\" style=\\\"margin-bottom: 102px\\\">\\n            <div style=\\\"display: flex; align-items: center;\\\">\\n                <span class=\\\"custom-text environment\\\"> Publish To </span>\\n                <span class=\\\"publish-info\\\">\\n                    <i class=\\\"mdi mdi-information\\\"></i>\\n                    <span class=\\\"button-tooltip\\\" style=\\\"top: 460px; left: 96px; z-index: 1; width: 231px;\\\">Publish To\\n                        options may change depending on the module type you choose.</span>\\n                </span>\\n            </div>\\n\\n            <CustomSelect :options=\\\"publishTargets\\\" @input=\\\"onTargetSelect\\\" :selectedOption=\\\"selectedTarget\\\"\\n                :default=\\\"selectedTarget\\\" :disabledOptions=\\\"disabledOptions\\\" selectedClass=\\\"selected-environment\\\"\\n                placeholder=\\\"Select the publish environment of your application\\\" class=\\\"select-environment\\\">\\n            </CustomSelect>\\n        </div>\\n        <!--         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> -->\\n        <div :class=\\\"['footer', props.screenType == 'Deploy' ? 'deploy' : 'export']\\\">\\n            <div :class=\\\"['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']\\\" @click=\\\"close\\\">Cancel</div>\\n            <div v-if=\\\"props.screenType == 'Export'\\\" :class=\\\"(saveButtonDisable ? ' button-disable' : '')\\\"\\n                @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button \\\">DOWNLOAD</span>\\n                <span v-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -80px; left: 626px; z-index: 1; width: 145px;\\\">There are no items ready to publish. At least\\n                    one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 640px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n            <div v-if=\\\"props.screenType == 'Deploy'\\\" :class=\\\"[(saveButtonDisable ? ' button-disable' : '')]\\\"\\n                @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button deploy\\\">PUBLISH</span>\\n                <span v-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 652px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!selectedTarget\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 644px; z-index: 1; width: 123px;\\\">You need to select a publish\\n                    environment.</span>\\n                <span v-else-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">There are no items ready to publish. At least\\n                    one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n\\n        </div>\\n    </div>\\n</template>\\n\\n\\n<script setup lang=\\\"ts\\\">\\nimport { CryptoHelper } from \\\"@stechquick/algae/lib/helpers/cryptoHelper\\\";\\nimport { PlateauHelper } from \\\"@stechquick/algae/lib/helpers/plateau/plateauHelper\\\";\\nimport { computed, createApp, defineAsyncComponent, onMounted, ref } from \\\"vue\\\";\\nimport { IOrganizationCloud } from \\\"../../../../../../../common/clean/domain/useCases/ICloudProvider\\\";\\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem, ITableData } from \\\"../../../../../../../common/qCloudTemp/exporter\\\";\\nimport { APP_ITEM_CONTENT_TYPES, IModuleRelatedModelItem, IQJsonAdditionals } from \\\"../../../../../../../common/qCloudTemp/quickCloud\\\";\\nimport { container } from \\\"../../../../../domain/core/diContainer\\\";\\nimport { IQCloudApi } from \\\"../../../../../domain/infrastructure/IQCloudApi\\\";\\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \\\"../../../../../domain/model/models\\\";\\nimport { IDialog } from \\\"../../../../../domain/presentation/IDialog\\\";\\nimport { ICreateExportJob } from \\\"../../../../../domain/useCase/ICreateExportJob\\\";\\nimport { IDeployJobs } from \\\"../../../../../domain/useCase/IDeployJobs\\\";\\nimport { IJobUtils } from \\\"../../../../../domain/useCase/IJobUtils\\\";\\nimport { IListMultiModelVersions } from \\\"../../../../../domain/useCase/IListMultiModelVersions\\\";\\nimport { IListMultiModuleVersions } from \\\"../../../../../domain/useCase/IListMultiModuleVersions\\\";\\nimport { IPackJobs } from \\\"../../../../../domain/useCase/IPackJobs\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IViewModel } from \\\"../../../../../domain/viewModel/IViewModel\\\";\\nimport { IViewModelManager } from \\\"../../../../../domain/viewModel/IViewModelManager\\\";\\nimport { IBackofficeUseCase } from \\\"../../../../../domain/useCase/IBackofficeUseCase\\\";\\nimport { IApplicationUseCase } from \\\"../../../../../domain/useCase/IApplicationUseCase\\\";\\nimport ExportDialogItem from \\\"./components/exportDialogItem.vue\\\";\\nimport CustomSelect from \\\"../../../components/customSelect.vue\\\";\\nimport CheckboxComp from \\\"../../checkboxComp.vue\\\";\\nimport { FileDisplayerExternalData, IFileDisplayerUseCase } from \\\"../../../../../domain/useCase/IFileDisplayerUseCase\\\";\\nimport { ITreeItem } from \\\"../../../../../domain/presentation/ITreeView\\\";\\nimport { PathHelper } from \\\"../../../../../../../common/helpers/pathHelper\\\";\\nimport { FileExplorerConstants } from \\\"../../../../../domain/useCase/IFileExplorer\\\";\\nimport { IObjectUseCase } from \\\"../../../../../domain/useCase/IObjectUseCase\\\";\\n\\ninterface IDeployScreenAdditionalProps {\\n    screenType: \\\"Export\\\" | \\\"Deploy\\\";\\n    platformSelection: IPlatformSelection;\\n}\\n\\ninterface IDisabledOptions {\\n    index: number\\n    cause: string;\\n}\\n\\nconst props = defineProps<IDeployScreenAdditionalProps>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\\nconst fileDisplayerUseCase = container.resolve<IFileDisplayerUseCase>(IFileDisplayerUseCase);\\nconst objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\\n\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\nconst items = ref<Array<ITableData>>([]);\\nconst validations = ref<boolean>(true);\\nconst selectedTarget = ref<string>(\\\"\\\");\\nconst disabledOptions = ref<Array<IDisabledOptions>>();\\nconst publishTargets = ref<Array<string>>();\\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\\nconst startScreen = ref<IModel>();\\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>>();\\nconst dependencyErrorStr = ref<string>('');\\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\n\\n\\nonMounted(async () => {\\n    await executor.execute(async () => {\\n        await Promise.all([\\n            executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, {}).then(res => modelHistories.value = res),\\n            executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, {}).then(res => importedModuleVersions.value = res)\\n        ])\\n        initDependencies();\\n        handleItems();\\n        props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n        validations.value = validate();\\n    }, { loading: true });\\n})\\n\\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && e.allChildChecked).length);\\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && !e.allChildChecked && e.anyChildChecked).length);\\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \\\"module\\\" && e.checked).length);\\nconst totalRootLevelCount = computed(() => items.value.length);\\nconst saveButtonDisable = computed(() => (props.screenType == \\\"Deploy\\\" && props.platformSelection.web && selectedTarget.value == \\\"\\\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \\\"Export\\\" && !validateStartScreen()) || !validateDependencies());\\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true\\n    : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0 ? false : undefined));\\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\\nconst isAllDependenciesOK = computed(validateDependencies)\\nconst isStartScreenOK = computed(validateStartScreen)\\n\\nfunction validate() {\\n    let result = true;\\n    const modules = items.value.filter(e => e.type == \\\"module\\\" && e.anyChildChecked);\\n    const appLayerItems = items.value.filter(e => e.type == \\\"qjson\\\" && e.checked);\\n\\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => (item.additionals as IQJsonAdditionals | undefined)?.isRootPage);\\n    if (!startScreen.value)\\n        return false;\\n\\n    if (props.screenType == \\\"Deploy\\\") {\\n        if (modules.length > 0)\\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \\\"entityDesigner\\\" && f.checked)).length <= 0\\n\\n        let isApplicationWillDeploy = appLayerItems.length > 0;\\n        if (isApplicationWillDeploy) {\\n            result = appLayerItems\\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nfunction validateDependencies() {\\n    const checkMap = new Map<string, boolean>();\\n    items.value.forEach(item => {\\n        if (item.type == 'module' && item.children && item.children.length > 0)\\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\\n        else\\n            checkMap.set(item.id, item.checked == true)\\n    })\\n\\n    const mustBeCheckedMap = new Map<string, Array<string>>();\\n    dependencyMap.value?.forEach((deps, id) => {\\n        if (!checkMap.get(id))\\n            return;\\n\\n        deps.dependedTo.forEach(dependedId => {\\n            if (checkMap.get(dependedId))\\n                return;\\n\\n            if (mustBeCheckedMap.has(id)) {\\n                const vals = mustBeCheckedMap.get(id)!\\n                vals.push(dependedId)\\n                mustBeCheckedMap.set(id, vals)\\n            } else {\\n                mustBeCheckedMap.set(id, [dependedId])\\n            }\\n\\n        });\\n    })\\n\\n    //set deps error text\\n    const [firstItemID] = mustBeCheckedMap.keys();\\n    if (firstItemID) {\\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\\n        dependencyErrorStr.value = `Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\\n    }\\n\\n    return mustBeCheckedMap.size == 0\\n}\\n\\nfunction validateStartScreen() {\\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\\n}\\n\\nfunction findItem(ID: string) {\\n    for (const item of items.value) {\\n        if (item.type != 'module' && item.id == ID)\\n            return item;\\n        if (item.type == 'module' && item.children && item.children.length > 0) {\\n            const f = item.children.find(e => e.id == ID)\\n            if (f) return f\\n        }\\n    }\\n}\\n\\nfunction initDependencies() {\\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>();\\n    const depMap = new Map<string, Array<string>>();\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n\\n        const isImportedModule = item.owner.objectType == \\\"module\\\" && isModuleImported(item.owner as IModule);\\n\\n        let version: string | undefined;\\n        if (!isImportedModule) {\\n            const maxVersion = getItemMaxVersion(item)\\n            if (!maxVersion)\\n                return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\\n            version = maxVersion;\\n        }\\n        else {\\n            const moduleVersions = importedModuleVersions.value?.get(item.owner.ID)\\n            const moduleVersion = (item.owner as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n\\n            const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\\n            version = importedModuleModel?.version\\n        }\\n\\n        const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\\n\\n        depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\\n    });\\n\\n\\n    depMap.forEach((dependedTo, modelId) => {\\n        const dependedBy = Array<string>();\\n        depMap.forEach((dependencies, depModelId) => {\\n            if (dependencies.some(depId => depId == modelId))\\n                dependedBy.push(depModelId)\\n        })\\n        map.set(modelId, { dependedBy, dependedTo });\\n    })\\n    dependencyMap.value = map;\\n}\\n\\nfunction isModelDepended(item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\\n    if (!deps) return false;\\n\\n    return deps.some(dep => items.value.some(item => {\\n        if (item.type == 'module' && item.anyChildChecked) {\\n            return item.children?.some(child => child.checked && child.id == dep)\\n        }\\n        return item.id == dep && item.checked\\n    }));\\n}\\nfunction createDialogComp(item: ITableData) {\\n    const newChild = createApp(ExportDialogItem, {\\n        handleItemCheckEvent,\\n        startScreen,\\n        versionDialog,\\n        handleCollapse,\\n        item: item,\\n        moduleVersionDialog\\n    });\\n    const mountEl = document.createElement('div');\\n    newChild.mount(mountEl);\\n    const parentEl = document.getElementById('module-container-div');\\n    parentEl?.appendChild(mountEl);\\n}\\nfunction createAndAppendItem({ newItem }: { newItem: ITableData }) {\\n    createDialogComp(newItem);\\n    if ((newItem).type != \\\"module\\\") {\\n        items.value.push(newItem);\\n    }\\n}\\n\\nfunction handleItems() {\\n    // - App Settings\\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings');\\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\\n    const settingsData = appSettings && {\\n        id: appSettings.ID,\\n        name: appSettings.name,\\n        checked: true,\\n        disabled: false,\\n        type: (appSettings as IModel).modelType,\\n        version: !maxVersion ? 'latest' : maxVersion\\n    };\\n    appSettings && settingsData && createAndAppendItem({ newItem: settingsData });\\n\\n\\n    // - UI Settings\\n    const uiSettingsID = CryptoHelper.CreateGuid();\\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appSettings\\\") as Array<IModel>;\\n    const uiSettings: ITableData = {\\n        id: uiSettingsID,\\n        collapsed: true,\\n        name: \\\"UI Settings\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        checked: true,\\n        children: [{} as ITableData]\\n    };\\n    uiSettings && createAndAppendItem({ newItem: uiSettings });\\n    uiSettings.children = uiSettingsModels.map(settings => {\\n        const maxVersion = getItemMaxVersion(settings)\\n        const childData = {\\n            id: settings.ID,\\n            parentId: uiSettingsID,\\n            name: settings.name,\\n            type: settings.modelType,\\n            checked: maxVersion != undefined,\\n            usageType: settings?.usageType,\\n            disabled: !maxVersion,\\n            version: maxVersion,\\n            level: 2\\n        }\\n        createAndAppendItem({ newItem: childData });\\n        return childData;\\n    })\\n    handleParentCheckedStatus(uiSettings, false);\\n\\n\\n    // - Styled Components\\n    const uiAssetID = CryptoHelper.CreateGuid();\\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appAssetList\\\") as Array<IModel>;\\n    const uiAssetList: ITableData = {\\n        id: uiAssetID,\\n        collapsed: true,\\n        name: \\\"Styled Components\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        anyChildChecked: true,\\n        allChildChecked: true,\\n        children: [{} as ITableData]\\n    };\\n    uiAssetList && createAndAppendItem({ newItem: uiAssetList });\\n    uiAssetList.children = appAssetList.map((asset) => {\\n        const childAsset = {\\n            id: asset.ID,\\n            parentId: uiAssetID,\\n            name: asset.name,\\n            type: asset.modelType,\\n            checked: true,\\n            usageType: asset?.usageType,\\n            level: 2\\n        }\\n        createAndAppendItem({ newItem: childAsset });\\n        return childAsset;\\n    }) as Array<ITableData>;\\n    handleParentCheckedStatus(uiAssetList, false);\\n\\n    \\n    const treeItems = fileDisplayerUseCase.cloneFileExplorerTreeView({\\n        displayFilterer: (item, hasChildren) => {\\n            switch (item.ID) { case FileExplorerConstants.uiAssetListID: case FileExplorerConstants.uiSettingsID: return false; default: break; }\\n            switch (item.objectType) {\\n                case \\\"application\\\": return false;\\n                case \\\"module\\\": return true;\\n                case \\\"folder\\\": return hasChildren;\\n                case \\\"model\\\": return true;\\n            }\\n        },\\n    });\\n\\n    const converter = (treeItem: ITreeItem<FileDisplayerExternalData>, options: {ownerModule?: {isImportedModule: boolean;moduleVersion: string | undefined;relatedModelHistories: IModuleRelatedModelItem[] | undefined}}): ITableData => {\\n        const item = treeItem.externalData;\\n        if (item.objectType == \\\"application\\\") { throw new Error(\\\"unexpected item type\\\"); }\\n\\n        const fullPath = objectUseCase.getFullPath(item, \\\"self\\\");\\n        let level = fullPath.split(\\\"/\\\").length - 1;\\n\\n        let tableData: ITableData;\\n        switch(item.objectType) {\\n            case \\\"folder\\\":\\n                tableData = {\\n                    id: item.ID, name: item.name, type: \\\"folder\\\", collapsed: true, level,\\n                    children: treeItem.children?.map((item) => converter(item, { ownerModule: options.ownerModule })),\\n                };\\n                tableData.children?.forEach(child => child.parent = tableData);\\n                handleParentCheckedStatus(tableData, false);\\n                break;\\n            case \\\"model\\\":\\n                if (options.ownerModule) {\\n                    tableData = { id: item.ID, name: item.name, type: item.modelType, level };\\n                    if (!options.ownerModule.isImportedModule || item.isUnmodifiable) {\\n                        const maxVersion = getItemMaxVersion(item);\\n                        tableData = {\\n                            ...tableData,\\n                            checked: maxVersion ? true : item.isUnmodifiable,\\n                            disabled: maxVersion ? false : !item.isUnmodifiable,\\n                            version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                        };\\n                    } else {\\n                        const importedModulesModel = options.ownerModule.relatedModelHistories?.find(e => e.modelID == item.ID)\\n                        tableData = { ...tableData, checked: true, disabled: false, version: importedModulesModel?.version };\\n                    }\\n                } else {\\n                    const maxVersion = getItemMaxVersion(item);\\n                    tableData = {\\n                        id: item.ID,\\n                        name: item.name,\\n                        checked: maxVersion ? true : item.isUnmodifiable,\\n                        disabled: maxVersion ? false : !item.isUnmodifiable,\\n                        type: item.modelType,\\n                        version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                        level,\\n                    };\\n                }\\n                break;\\n            case \\\"module\\\":\\n                const isImportedModule = isModuleImported(item);\\n                const moduleVersion = item.relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion;\\n                const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\\n                \\n                tableData = {\\n                    id: item.ID,\\n                    collapsed: true,\\n                    name: item.name,\\n                    type: \\\"module\\\",\\n                    imported: isImportedModule,\\n                    version: moduleVersion,\\n                    children: treeItem.children?.map((item) => converter(item, {ownerModule: {isImportedModule, moduleVersion, relatedModelHistories}})),\\n                }\\n                tableData.children?.forEach(child => child.parent = tableData);\\n                handleParentCheckedStatus(tableData, false);\\n                break;\\n        }\\n        return tableData;\\n    };\\n    const tableDatas = treeItems.map(item => converter(item, {}));\\n\\n    const traverser = (tableData: ITableData) => {\\n        createAndAppendItem({ newItem: tableData });\\n        tableData.children?.forEach(traverser);\\n    };\\n    \\n    tableDatas.forEach(traverser);\\n}\\n\\nfunction getItemMaxVersion(item: IModel): string | undefined {\\n    if (!modelHistories.value?.has(item.ID))\\n        return undefined;\\n\\n    const versions = modelHistories.value.get(item.ID);\\n    if (!versions)\\n        return undefined;\\n\\n    const findMaxVersion = (versions: Array<string>) => {\\n        const versionNumbers = versions.map(v => {\\n            const parts: Array<string> = v.split(\\\".\\\");\\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\\n        })\\n\\n        versionNumbers.sort((a, b) => b - a);\\n\\n        const maxVersion = versionNumbers[0];\\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\\n    }\\n\\n    return findMaxVersion(versions.map(e => e.version!));\\n\\n}\\nfunction checkMaxVersionOfAllItems() {\\n    let isThereVersion: boolean = false;\\n    items.value.forEach(item => {\\n        if (item.type == \\\"module\\\") {\\n            item.children?.forEach(child => {\\n                if (child.version) {\\n                    isThereVersion = true;\\n                }\\n\\n            })\\n        }\\n        else {\\n            if (item.version) {\\n                isThereVersion = true;\\n            }\\n        }\\n    })\\n    return isThereVersion;\\n}\\nfunction handleModuleCountCheckboxEvent(value: boolean) {\\n    items.value.filter(e => !e.disabled).forEach((item) => {\\n        item.checked = value;\\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\\n        if (allItemsCheckable) item.allChildChecked = value;\\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\\n    });\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleCollapse(item: ITableData, childIterate?: boolean, collapsed?: boolean) {\\n    item.collapsed = collapsed !== undefined ? collapsed : !item.collapsed;\\n    if (childIterate) {\\n        item.children?.forEach(child => {\\n            const childEl = document.getElementById(child.id);\\n            childEl!.style.display = item.collapsed ? \\\"none\\\" : \\\"block\\\";\\n            handleCollapse(child, childIterate, item.collapsed);\\n        })\\n    }\\n}\\n\\nfunction checkAllDependents(item: ITableData, recurseParent: boolean) {\\n    if (item.disabled || item.checked) return;\\n\\n    item.checked = true\\n    item.parent && handleParentCheckedStatus(item.parent, recurseParent);\\n\\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\\n    if (!deps) return;\\n\\n    deps.forEach(dep => {\\n        items.value.forEach(item => {\\n            if (item.type == 'module' && !item.allChildChecked) {\\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\\n                willCheckItem && checkAllDependents(willCheckItem, recurseParent);\\n                handleParentCheckedStatus(item, recurseParent);\\n                return;\\n            }\\n\\n            if (!item.checked && item.id == dep) {\\n                checkAllDependents(item, recurseParent);\\n                item.parent && handleParentCheckedStatus(item.parent, recurseParent);\\n            }\\n        })\\n    });\\n}\\n\\nfunction handleItemCheckEvent(item: ITableData) {\\n    if (item.disabled || isModelDepended(item) || item.name == 'App Settings')\\n        return;\\n\\n    if (item.type != \\\"module\\\" && item.type != \\\"folder\\\") {\\n        if (item.checked) {\\n            item.checked = false;\\n            item.parent && handleParentCheckedStatus(item.parent, true);\\n        } else {\\n            checkAllDependents(item, true);\\n        }\\n    } else {\\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\\n            if (item.anyChildChecked) {\\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\\n                item.checked = false;\\n                handleParentCheckedStatus(item, true);\\n            } else {\\n                item.children.forEach(child => checkAllDependents(child, true));\\n                item.checked = true;\\n            }\\n        }\\n        else {\\n            item.checked = !item.checked;\\n            item.allChildChecked = false;\\n        }\\n    }\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleParentCheckedStatus(item: ITableData, recurseParent: boolean) {\\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\\n    if (recurseParent && item.parent) {\\n        handleParentCheckedStatus(item.parent, true);\\n    }\\n}\\n\\nfunction syncPublishTargets() {\\n    publishTargets.value = []; disabledOptions.value = [];\\n\\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\\n    if (!targets)\\n        return;\\n\\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\\n    if (!isSelectAnyItem) {\\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\\n        const disabledOptionList = Array<IDisabledOptions>();\\n        for (let i = 0; i < publishTargets.value.length; i++) {\\n            disabledOptionList.push({ index: i, cause: \\\"You need to include items to publish.\\\" })\\n        }\\n        disabledOptions.value = disabledOptionList;\\n        return;\\n    }\\n\\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\\n\\n    const disabledOptionList = Array<IDisabledOptions>();\\n    for (let i = 0; i < sortedTargets.length; i++) {\\n        const cause = sortedTargets[i].cause;\\n        if (cause) disabledOptionList.push({ index: i, cause })\\n    }\\n    disabledOptions.value = disabledOptionList;\\n    publishTargets.value = sortedTargets.map(e => e.optionName);\\n\\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \\\"\\\";\\n}\\n\\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\\n    const list = Array<{ optionName: string, cause?: string }>();\\n\\n    Object.keys(targets).forEach(e => {\\n        const key = e as keyof IOrganizationCloud;\\n        const value = targets[key];\\n        const optionName = cloudTargetMap(key)!;\\n        if (!value)\\n            return list.push({ optionName, cause: \\\"You are not authorized to publish to this target.\\\" });\\n\\n\\n        switch (key) {\\n            case \\\"azure\\\":\\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\\n                    if (!items || items.length == 0) { return status; }\\n                    for (const item of items) {\\n                        if (item.checked || item.anyChildChecked) {\\n                            if (item.type == \\\"module\\\") {\\n                                status = traverseSelectedItems(status, item.children);\\n                            }\\n                            if (item.type == \\\"entityDesigner\\\" || item.type == \\\"bpmn\\\" || item.type == \\\"process\\\") {\\n                                status = false;\\n                                break;\\n                            }\\n                        }\\n\\n                    }\\n                    return status;\\n                }\\n\\n                const status = traverseSelectedItems(true, items.value);\\n                if (!status)\\n                    return list.push({ optionName, cause: \\\"Entity and process models cannot be published to this target.\\\" });\\n                break;\\n            case \\\"plateauGCP\\\":\\n                const modulesHasNotAnEDModel = items.value.filter(e => e.name != \\\"UI Settings\\\").find(e => e.type == \\\"module\\\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \\\"bpmn\\\" || c.type == \\\"process\\\")) && !e.children?.some(c => c.type == \\\"entityDesigner\\\" && c.checked))\\n                if (modulesHasNotAnEDModel)\\n                    return list.push({ optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.` })\\n                break;\\n        }\\n\\n        list.push({ optionName });\\n    })\\n\\n    return list;\\n}\\n\\nfunction updateDependencyMap(newVersion: string, item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id);\\n    dependencyMap.value?.set(item.id, {\\n        dependedBy: deps?.dependedBy || Array<string>(),\\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\\n    })\\n}\\n\\nfunction versionDialog(item: ITableData) {\\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\\n    const hasAnyVersion = modelHistories.value?.has(item.id);\\n    const options = {\\n        clickedNode, cb: (version: string) => {\\n            item.version = version;\\n            updateDependencyMap(version, item);\\n        }\\n    } as any;\\n\\n    if (hasAnyVersion) {\\n        options.versions = modelHistories.value?.get(item.id)\\n    }\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/modelVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" }, options\\n    );\\n}\\n\\n\\nfunction moduleVersionDialog(item: ITableData) {\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/moduleVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" },\\n        {\\n            module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => {\\n                item.version = moduleVersion.version;\\n                item.children?.forEach(child => {\\n                    const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\\n                    child.version = modulesModel?.version\\n                    updateDependencyMap(modulesModel?.version!, child);\\n                })\\n            }\\n        }\\n    );\\n}\\n\\nfunction close() {\\n    emit(\\\"close\\\");\\n}\\n\\nasync function save() {\\n    executor.execute(\\n        async () => {\\n            const initAsGroup = async () => {\\n                const groupID = CryptoHelper.CreateGuid();\\n                await initHistory(groupID);\\n                await packJob(groupID);\\n                return groupID;\\n            }\\n\\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\\n\\n            switch (props.screenType) {\\n                case \\\"Export\\\":\\n                    if (isFlowBackend) {\\n                        const deployItems = await createAzureDeployItems();\\n                        await packJobsUseCase.createPackJobs([{\\n                            appID: viewModel.studio.appId,\\n                            exportType: \\\"qui\\\",\\n                            selectionData: deployItems\\n                        }]);\\n                        break;\\n                    }\\n\\n                    const groupID = await initAsGroup();\\n                    await createExportJob(groupID);\\n                    break;\\n                case \\\"Deploy\\\":\\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\\n                        case \\\"plateauGCP\\\":\\n                            const groupID = await initAsGroup();\\n                            await createDeployJob(groupID);\\n                            break;\\n                        case \\\"azure\\\":\\n                            const deployItems = await createAzureDeployItems();\\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\\n                            break;\\n                    }\\n            }\\n            const userMobileUsage = viewModel.user?.mobileUsage;\\n            const appMobileUsage = currentApp.value?.mobileUsage;\\n            if(props.platformSelection && props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \\\"backofficeUpdate\\\"})\\n                \\n            }\\n            emit(\\\"close\\\");\\n        },\\n        { loading: true });\\n}\\n\\nasync function createAzureDeployItems() {\\n    const deployItems: Array<IExportItem> = [];\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        const path = item.owner.objectType == \\\"module\\\" ? PathHelper.join(item.owner.name, item.path) : item.path;\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\\n        if (!items || items.length == 0) { return; }\\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\\n            if (item.type == \\\"module\\\" || item.type == \\\"folder\\\") {\\n                traverseSelectedItems(item.children);\\n                return;\\n            }\\n\\n            const itemMap = itemIdObj[item.id];\\n\\n            const deployItem: IExportItem = {\\n                id: item.id,\\n                name: jobUtils.getFileFullname(itemMap.item),\\n                path: itemMap.path,\\n                type: jobUtils.getItemType(itemMap.item),\\n                ver: item.version || \\\"latest\\\",\\n                isRootPage: (itemMap.item.additionals as IQJsonAdditionals | undefined)?.isRootPage,\\n                modulePrefix: itemMap.prefix,\\n                ownerType: 'application',\\n                ownerName: viewModel.studio.appName,\\n                size: itemMap.item.size,\\n                createDate: itemMap.item.createDate,\\n            };\\n            deployItems.push(deployItem)\\n        });\\n    };\\n\\n    traverseSelectedItems(items.value);\\n\\n    return deployItems;\\n}\\n\\nasync function initHistory(groupID: string) {\\n    return qcloudApi.initPublishHistory({\\n        appID: viewModel.studio.appId,\\n        ID: groupID,\\n        isMultiStep: true,\\n        type: props.screenType == \\\"Deploy\\\" ? \\\"publish\\\" : \\\"download\\\",\\n        cloudProvider: props.screenType == \\\"Deploy\\\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\\n        platform: props.platformSelection\\n    });\\n}\\n\\nasync function packJob(groupID: string) {\\n    let exportItemMap = new Map<string, Array<IExportItem>>();\\n    const appName = viewModel.studio.appName;\\n\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        const path = item.owner.objectType == \\\"module\\\" ? PathHelper.join(item.owner.name, item.path) : item.path;\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const createExportObject = (tableItem: ITableData) => {\\n        const itemMap = itemIdObj[tableItem.id];\\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == itemMap.item.modelType);\\n\\n        const retVal: IExportItem = {\\n            id: tableItem.id,\\n            ver: tableItem.version!,\\n            type: jobUtils.getItemType(itemMap.item),\\n            path: itemMap.path,\\n            modulePrefix: itemMap.prefix,\\n            name: jobUtils.getFileFullname(itemMap.item),\\n            ownerType: isAppItem ? 'application' : (itemMap.item.owner.objectType as \\\"module\\\" | \\\"application\\\"),\\n            ownerName: isAppItem ? appName : itemMap.item.owner.name,\\n        };\\n        return retVal;\\n    }\\n\\n    const addToExportItem = (key: string, obj: IExportItem) => {\\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\\n        let items = exportItemMap.get(key);\\n        if (items && items.length > 0) {\\n            items.push(obj);\\n            exportItemMap.set(key, items);\\n        } else\\n            exportItemMap.set(key, [obj]);\\n    }\\n    const mapTableItemToExportItem = (tableItems: Array<ITableData>) => {\\n        tableItems.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\\n        if (asset.type == 'module') {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                const obj = createExportObject(child);\\n                if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n\\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n            });\\n        } \\n        else if(asset.type == \\\"folder\\\") {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                if(child.type == \\\"folder\\\") {\\n                    mapTableItemToExportItem([child])\\n                }\\n                else {\\n                    const obj = createExportObject(child);\\n                    if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n                \\n                    const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                    addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n                }\\n            });\\n        }\\n        else {\\n            const obj = createExportObject(asset);\\n            if (asset.type == 'qjson') {\\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \\\"model\\\" && i.modelType == \\\"qjson\\\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\\n                obj.isRootPage = isRootPage ? true : undefined;\\n            }\\n            addToExportItem(appName, obj);\\n        }\\n    })\\n    }\\n    mapTableItemToExportItem(items.value);\\n   \\n\\n    let jobs = Array<ICreateExportJobParam>();\\n    exportItemMap.forEach((v, k) => {\\n        jobs.push({\\n            appID: viewModel.studio.appId,\\n            exportType: \\\"qui\\\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \\\"model\\\":  \\\"qui\\\"\\n            selectionData: v,\\n            cause: props.screenType == 'Export' ? 'download' : \\\"publish\\\",\\n            layer: 0,\\n            groupID: groupID,\\n            platformSelection: props.platformSelection\\n        })\\n    })\\n\\n    await packJobsUseCase.createPackJobs(jobs);\\n}\\nasync function createExportJob(groupID: string) {\\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\\n        appID: viewModel.studio.appId,\\n        exportType: \\\"qui\\\",\\n        selectionData: [],\\n        layer: 1,\\n        groupID: groupID\\n    });\\n}\\n\\nasync function createDeployJob(groupID: string) {\\n    //1-(n) L1- deployJob(build)\\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\\n        .then(jobs => jobs.jobs.map(e => {\\n            const jobData = e.jobData as IExportJobData;\\n            return {\\n                ownerName: jobData.items[0].ownerName,\\n                jobID: e.jobID,\\n                type: jobData.items[0].ownerType,\\n                mainDir: getDeployableArchiveRoot(jobData)\\n            }\\n        }));\\n\\n    if (!packages || packages.length <= 0)\\n        return;\\n\\n    let buildJobs = Array<ICreateDeployJobParam>();\\n    packages.forEach(pack => {\\n        buildJobs.push({\\n            appID: viewModel.studio.appId,\\n            type: \\\"build\\\",\\n            package: {\\n                type: pack.type as DeployType,\\n                name: pack.ownerName!,\\n                mainDir: pack.mainDir,\\n                zip: `${pack.jobID}.zip`,\\n            },\\n            layer: 1,\\n            groupID: groupID\\n        })\\n    })\\n\\n    await deployJobsUseCase.createBuildJobs(buildJobs);\\n\\n    //2-(1) L2- deployJob(deployment)\\n    let jobParam: ICreateDeployJobParam = {\\n        appID: viewModel.studio.appId,\\n        type: \\\"deployment\\\",\\n        deployConfig: {\\n            process: {\\n                configModelIDs: getProcessConfigList(),\\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \\\"bpmn\\\"))\\n            }\\n        },\\n        layer: 2,\\n        groupID: groupID,\\n        platformSelection: props.platformSelection\\n    }\\n\\n    await deployJobsUseCase.startDeploymentJob(jobParam);\\n}\\n\\nfunction getProcessConfigList() {\\n    let processConfigList = Array<IProcessConfigModelItem>();\\n    items.value.forEach((asset) => {\\n        if (asset.type == \\\"module\\\" && asset.anyChildChecked && asset.children) {\\n            const usingService = asset.children.find(c => c.type == \\\"entityDesigner\\\");\\n            if (!usingService)\\n                return;\\n\\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\\n            asset.children.forEach(child => {\\n                if (child.checked && child.type == \\\"process\\\") {\\n                    processConfigList.push({\\n                        moduleName: serviceName,\\n                        model: {\\n                            id: child.id,\\n                            name: child.name,\\n                            version: child.version!\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n    })\\n    return processConfigList;\\n}\\n\\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\\n    if (jobData.items[0].ownerType == \\\"module\\\") {\\n        let edModel = jobData.items.find(e => e.type == \\\"entityDesigner\\\");\\n        if (!edModel)\\n            throw new Error(\\\"!!! this module cannot deploy. Because its have not a service\\\");\\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\\n    }\\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\\n}\\n\\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \\\"Public Cloud\\\", plateauGCP: \\\"Plateau Platform Playground\\\" };\\n    if (pureVal) {\\n        return Object.keys(map).find(e => {\\n            if (map[e as keyof IOrganizationCloud] === name) {\\n                return true;\\n            }\\n        })\\n    } else {\\n        let key = Object.keys(map).includes(name);\\n        if (!key)\\n            return;\\n        return map[name as keyof IOrganizationCloud];\\n    }\\n}\\n\\nfunction onTargetSelect(value: string) {\\n    selectedTarget.value = value\\n}\\n\\nconst isModuleImported = (item: IModule) => {\\n    return objectUseCase.isModuleImported(item);\\n}\\n\\n</script>\\n\\n\\n<style scoped>\\n.container {\\n    padding: 32px 20px 20px;\\n}\\n\\n.settings-container {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n\\n.custom-text {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n\\n.radio-button {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n\\n.radio-text {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n\\n.existing-app-url {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n\\n.url-error {\\n    border: 1px solid red;\\n}\\n\\n.url-disable {\\n    opacity: 0.5;\\n}\\n\\n.existing-app-url::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n\\n.modules-selected-checkbox {\\n    cursor: pointer;\\n}\\n\\n.modules-selected-text {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n    ;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n\\n.text-number {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.modules-datatable {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n\\n.modules-datatable::-webkit-scrollbar {\\n    width: 4px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n\\n.row-container {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n\\n.chevron {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n\\n.chevron.disabled {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n\\n.module-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n\\n.module-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.module-name.imported {\\n    top: 10px;\\n    left: 87px;\\n}\\n\\n.module-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n\\n.model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n\\n.app-tier-model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n\\n.app-tier-model-name {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.version-text {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.version-text.disabled {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.version-icon {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n\\n.version-icon.disabled {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.footer {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n\\n.footer.deploy {\\n    position: relative;\\n    width: 100%;\\n}\\n\\n.footer.export {\\n    margin-top: 102px;\\n}\\n\\n.cancel-button {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n\\n\\n.save-button {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n.mobile-publish-text,\\n.web-publish-text {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.mobile-publish-text i,\\n.web-publish-text i {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n\\n.save-button.deploy {\\n    padding: 10px 16px;\\n}\\n\\n.button-disable .save-button {\\n    color: #757575;\\n    cursor: default;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n\\n.button-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n\\n.publish-info {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n\\n.select-environment {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n</style>\\n\\n<style>\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\nexport class PlateauHelper {\n    public static purify = (str: string) => str.replace(/[^a-zA-Z0-9]/g, \"\").toLowerCase();\n\n    public static getPlateauEnvironmentName = (envPrefix: string, appName: string) => {\n        if(!envPrefix || !appName)\n            throw new Error(\"Environment name prefix or application name not found!!!\" );\n\n        envPrefix = (envPrefix.endsWith(\"-\") ? envPrefix : (envPrefix + \"-\")).toLowerCase();\n        appName = PlateauHelper.purify(appName);\n        return `${envPrefix}${appName}`;\n    }\n\n    public static getQuiPackageNameFromAppName = (appName: string) => `${PlateauHelper.purify(appName)}-qui`;\n\n    public static getApplicationUINameFromQuiPkg = (quiPackageName: string) => PlateauHelper.purify(quiPackageName.replace(\"-qui\", \"ui\"));\n    \n    public static getApplicationHostNamePrefix = (appName: string) => `${PlateauHelper.purify(appName)}ui`;\n\n    public static getServiceNameFromModel = (modelName: string) => PlateauHelper.purify(modelName.replace(\".dm\", \"\"));\n}\n","export class PathHelper {\n    public static join(path1: string, path2: string) {\n        const pathPart1 = path1.endsWith(\"/\") ? path1.substring(0, path1.length - 1) : path1;\n        const pathPart2 = path2.startsWith(\"/\") ? path2.substring(1) : path2;\n        let fullPath = pathPart1 + \"/\" + pathPart2;\n        fullPath = fullPath.endsWith(\"/\") ? fullPath.substring(0, fullPath.length - 1) : fullPath;\n        return fullPath;\n    }\n}","import { IQJsonAdditionals, ModelAdditionals, ModelType, ModuleObjectType } from \"./quickCloud\";\n\ntype ValueOf<Type> = Type extends any ? Type[keyof Type] : never;\ntype FieldValueOf<Type extends typeof typeSafety, Field extends keyof Type[keyof Type]> = Type[keyof Type][Field]\nexport type EditorModelTypes = ValueOf<FieldValueOf<typeof EditorConsts, \"modelKeys\">>;\nlet typeSafety: Record<string, { modelKeys: Record<string, string> }>;\nexport const EditorConsts = typeSafety = {\n    quick: {\n        modelKeys: {\n            self: \"qjson\" as \"qjson\",\n        }\n    },\n    flow: {\n        modelKeys: {\n            design: \"flow-design\" as \"flow-design\",\n            runtime: \"flow-runtime\" as \"flow-runtime\",\n        }\n    },\n    flowEntity: {\n        modelKeys: {\n            single: \"flow-entity\" as \"flow-entity\",\n        }\n    },\n};\n\ninterface ModelVisualInfo {\n    icon: string;\n    color: string;\n}\nconst cssJsTsYaml: ModelVisualInfo = { color: \"#449DD1\", icon: \"mdi mdi-cog-outline\" };\nconst jpegJpgPngSvgGif: ModelVisualInfo = { color: \"#212121\", icon: \"mdi mdi-image-outline \" }\nconst formatIcon: ModelVisualInfo = { color: \"#212121\", icon: \"mdi mdi-format-font \" }\nconst moduleVisual = { color: \"#007C77\", icon: \"mdi mdi-puzzle\" }\nconst modelVisuals: Record<ModelType, ModelVisualInfo | Error | ((additional: ModelAdditionals | undefined) => ModelVisualInfo)> = {\n    qjson: (additionals) => {\n        if (additionals && (additionals as IQJsonAdditionals).qjsonType == \"quickComponent\") {\n            return { color: \"#449DD1\", icon: \"mdi mdi-shape-outline\" };\n        }\n        return { color: \"#449DD1\", icon: \"mdi mdi-palette\" };\n    },\n    css: { color: \"#151233\", icon: \"mdi mdi-music-accidental-sharp\" },\n    js: cssJsTsYaml,\n    ts: cssJsTsYaml,\n    yaml: cssJsTsYaml,\n    entityDesigner: { color: \"#E9724C\", icon: \"mdi mdi-database\" },\n    bpmn: { color: \"#007C77\", icon: \"mdi mdi-vector-polyline\" },\n    process: { color: \"#007C77\", icon: \"mdi mdi-auto-fix\" },\n    flow: { color: \"#007C77\", icon: \"mdi mdi-step-forward\" },\n    flowEntity: { color: \"blue\", icon: \"mdi mdi-step-forward\" },\n    namedComponent: { color: \"#212121\", icon: \"mdi mdi-cube-outline\" },\n    step: new Error(\"unimplemented for namedComponent\"),\n    jpeg: jpegJpgPngSvgGif,\n    jpg: jpegJpgPngSvgGif,\n    png: jpegJpgPngSvgGif,\n    svg: jpegJpgPngSvgGif,\n    gif: jpegJpgPngSvgGif,\n    woff: formatIcon,\n    woff2: formatIcon,\n    ttf: formatIcon,\n    otf: formatIcon,\n    lottie: jpegJpgPngSvgGif,\n    appSettings: { color: \"#151233\", icon: \"mdi mdi-cog\" },\n    json: new Error(\"unimplemented for json\"),\n}\n\nexport class ModelContants {\n    public static getModelVisualInfo(modelType: ModelType | ModuleObjectType, modelAdditionals: ModelAdditionals | undefined): ModelVisualInfo {\n        const retVal = modelType == \"module\" ? moduleVisual : modelVisuals[modelType];\n        if (retVal instanceof Error) { throw retVal; }\n        return typeof retVal == \"function\" ? retVal(modelAdditionals) : retVal;\n    }\n}","import { IAppCloud, IOrganizationCloud } from \"../clean/domain/useCases/ICloudProvider\";\n\n\nexport const DEPENDED_MODEL_KEYS = [\"qjson\", \"named\", \"img\",  \"woff\", \"woff2\", \"ttf\", \"otf\"];\nexport const DEPENDED_IMAGE_KEYS = [ \"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\"];\nexport const APP_ITEM_CONTENT_TYPES = [\"qjson\", \"css\" , \"png\" , \"jpg\" , \"jpeg\" , \"svg\" , \"gif\" , \"lottie\" , \"json\", \"woff\", \"woff2\", \"ttf\", \"otf\"];\n\nexport type ObjectID = string; // GUID\n//export type AuthenticationTypes = [\"QCLOUDAUTH\", \"ADFS\"];\nexport type AuthenticationType = \"QCLOUDAUTH\" | \"ADFS\";\nexport type ModelHistoryType = \"update\" | \"delete\" | \"checkin\" | \"publish\" | \"ownerItemDelete\";\nexport type DomainObjectType = \"domain\";\nexport type ApplicationObjectType = \"application\";\nexport type ModuleObjectType = \"module\";\nexport type FolderObjectType = \"folder\";\nexport type ModelObjectType = \"model\";\nexport type AppSettingsObjectType = \"appSettings\";\nexport type AppAssetObjectType = \"appAssetList\";\nexport type QJsonType = \"qjson\" | \"template\" | \"pageTemplate\" | \"quickComponent\";\nexport type ModelResponseType = \"info\" | \"body\" | \"full\";\nexport type ContentType = \"qjson\" | \"js\" | \"ts\" | \"yaml\" | \"css\" | \"png\" | \"jpg\" | \"jpeg\" | \"svg\" | \"gif\" | \"lottie\" | \"woff\" | \"woff2\" | \"ttf\" | \"otf\" | \"json\";\nexport type ModelType = ContentType | \"bpmn\" | \"process\" | \"entityDesigner\" | \"namedComponent\" | \"flow\" | \"step\" | \"flowEntity\" | \"appSettings\";\nexport type UsageType = AppSettingsObjectType | AppAssetObjectType;\nexport type ModuleType = \"basic\";\nexport type AllCreateObjectTypes = ModelType | FolderObjectType | ModuleObjectType;\nexport type AppSettingsModelKeys = \"settings\" | \"componentList\" | \"containerServices\" | \"pipeline\" | \"alert\" | \"loading\" | \"globalLocalization\" | \"localProxy\" | \"style\" | \"rootqjson\" | \"asset\" | \"appSettings\";\nexport type ExtensionType = \"png\" | \"jpg\" | \"jpeg\" | \"svg\" | \"gif\" | \"json\" | \"woff\" | \"woff2\" | \"ttf\" | \"otf\";\nexport type ModuleShareType = 'reference' | 'version';\n\nexport const UISettingsType = {\n    alert: \"Alert Component\",\n    pipeline: \"Pipeline\",\n    loading: \"Loading Component\",\n    settings: \"Settings File\",\n    localProxy: \"Local Proxy File\",\n    contSvc: \"Container Services File\",\n    css: \"Style File\",\n    compList: \"Component List\",\n    globalLocalization: \"Global Localization\",\n    assetList: \"Asset List\"\n} as const;\nexport type UISettingsType = typeof UISettingsType[keyof typeof UISettingsType];\n\nexport interface ICloudObject {\n    ID: ObjectID;\n    name: string;\n    ownerUser: ObjectID;\n    createDate: Date;\n    createdBy: ObjectID;\n    updateDate?: Date;\n    updatedBy?: ObjectID;\n    isPermanent?: boolean;\n    priority?: number;\n}\n\nexport interface IMicroserviceDefinition {\n    name: string;\n    version: string;\n}\n\nexport interface IApplicationDetails {\n    moduleCount: number;\n    pageCount: number;\n    pageTemplateCount: number;\n    templateCount: number;\n    processCount: number;\n    entityCount: number;\n    uiSettingsCount: number;\n}\n\nexport interface IApplicationExportSettings {\n    selectedType: \"download\" | \"fileSystem\";\n}\n\nexport interface IApplicationLogoInfo {\n    hostUrl: string;\n    path: string;\n    updateDate: Date;\n}\n\nexport interface IApplication extends ICloudObject {\n    /**\n     * This is the RESERVED ID which should be used for publishments.\n     */\n    publishmentId?: ObjectID;\n    objectType: ApplicationObjectType;\n    //logo?: string;\n    logoInfo?: IApplicationLogoInfo;\n    color?: string;\n    description?: string;\n    store?: {\n        productID: ObjectID;\n        productVerID: ObjectID;\n    };\n    cloud?: IAppCloud;\n    exportSettings?: IApplicationExportSettings;\n    modifyDate?: Date;\n    firstPublishDate?: Date;\n    lastPublishDate?: Date;\n    mobileUsage?: IUpdateMobileUsage;\n}\n\nexport interface IModuleRelatedApplicationItem {\n    applicationID: ObjectID;\n    importedVersion?: string;\n}\n\nexport interface IModuleRelatedModelItem {\n    modelID: ObjectID;\n    version: string;\n}\n\nexport interface IModuleBackend extends ICloudObject {\n    description?: string;\n    modifyDate?: Date;\n    prefix?: string;\n    objectType: ModuleObjectType;\n    relatedApplications: Array<IModuleRelatedApplicationItem>;\n    moduleType?: ModuleType;\n    store?: {\n        productID: ObjectID;\n        productVerID: ObjectID;\n    };\n    mainOwner: ObjectID;\n    shareType?: ModuleShareType;  //migrate: related app i birden fazla olanlar icin 'reference'\n    currentVersion?: string;\n    lastReleasedVersion?: string;\n    applicationID?: string;\n}\n\nexport interface IModuleVersion extends ICloudObject {\n    moduleID: ObjectID;\n    version: string;\n    relatedApplications?: Array<IModuleRelatedApplicationItem>;\n    relatedModelHistories: Array<IModuleRelatedModelItem>;\n    description?: string;\n}\n\nexport interface IModelCopyInfo {\n    sourceModelID: ObjectID;\n    date: Date;\n    user: string;\n}\n\nexport type AllModelAdditionalTypes = IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals | IFlowModelAdditionals | IStepModelAdditionals | IAppSettingsModelAddtionals\n\nexport interface IModelInfo extends ICloudObject {\n    objectType: ModelObjectType;\n    ownerItem: ObjectID;\n    ownerType: ApplicationObjectType | ModuleObjectType;\n    modelType: ModelType;\n    extension?: ExtensionType;\n    modelAdditionals: AllModelAdditionalTypes;\n    key?: AppSettingsModelKeys;\n    checkouts?: Array<IModelCheckout>;\n    usageType?: UsageType;\n    copyFromInfo?: IModelCopyInfo;\n    size?: number;\n    store?: {\n        productVerID?: ObjectID;\n        productVerContentID?: ObjectID;\n    };\n    latestPublishedVer?: string;\n    dependentModels?: Array<IDependentModel>;\n    path?: string;\n    modelID?: string;\n    version?: string;\n    isUnmodifiable?: boolean;\n}\n\nexport interface IDependentModel {\n    modelId: string;\n}\n\nexport interface IModelBodyObject {\n    key: string;\n    model: any;\n}\n\nexport interface IModelBody extends IModelBodyObject {\n    modelID: ObjectID;// this variable cannot change by version.\n    informationId: ObjectID; //if model is versioned model; informationId = histID\n    createDate: Date;\n    size?: number;\n}\n\nexport interface IModelCheckout {\n    user: string;\n    date: Date;\n}\n\nexport interface IQJsonAdditionals {\n    qjsonType: QJsonType;\n    image?: string;\n    isRootPage?: boolean;\n}\n\nexport interface IProcessWizardAdditionals { }\n\nexport interface IBpmnAdditionals {\n    isAutoGenerated?: boolean; //undefined & false => auto generated | true => manuel added\n    isModifiedByUser?: boolean;\n}\n\nexport interface IEntityDesignerAddtionals { }\n\nexport interface IFlowModelAdditionals { }\nexport interface IStepModelAdditionals {\n    compatibilities: { ui: boolean; service: boolean; };\n}\n\nexport interface IAppSettingsModelAddtionals { }\n\nexport type ModelAdditionals = IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals | IAppSettingsModelAddtionals;\n\nexport interface IModelHistoryInfo extends ICloudObject, IModelInfo {\n    modelID: ObjectID;\n    historyType: ModelHistoryType;\n    version?: string;\n    shortComment?: string;\n    comment?: string;\n    dependentModels?: Array<IDependentModel>;\n}\n\nexport interface ISystemUser extends ICloudObject {\n    mailAddress: string;\n    loginType: AuthenticationType;\n    password?: string;\n}\n\nexport interface IQCloudLogItem {\n    ID?: string;\n    detail: any;\n    stack?: string;\n    state?: { app: { ID: string; name: string }; openItemIDs?: Array<string>; currentItemID?: string };\n    level: \"debug\" | \"info\" | \"log\" | \"trace\" | \"warning\" | \"error\";\n    type: \"business\" | \"technical\";\n}\n\nexport interface IQCloudLogDBItem extends IQCloudLogItem {\n    date: Date;\n    user?: { ID: ObjectID; name?: string; email: string };\n}\n\n\nexport interface ITenantDefinitions extends ICloudObject {\n    value: any;\n    isActive: boolean;\n    objectType?: AppSettingsObjectType | \"deploySettings\" | \"appTemplate\";\n    targetObjectType?: ApplicationObjectType | DomainObjectType;\n    contentType?: ContentType;\n    description?: string;\n    key?: AppSettingsModelKeys;\n}\n\nexport type ItemLimitActionType = \"deleteOldest\" | \"stopAdding\";\n\nexport interface IItemLimitationDetail {\n    value: number;\n    action?: ItemLimitActionType;\n}\n\nexport interface IItemLimitations {\n    history: {\n        maxCountPerModel: IItemLimitationDetail;\n        maxCountPerModule: IItemLimitationDetail;\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    model: {\n        maxCountPerModule: IItemLimitationDetail;\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    module: {\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    application: {\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n}\n\n// let itemLimittations: IItemLimitations = {\n//     history: {\n//         maxCountPerModel: { value: -1 },\n//         maxCountPerModule: { value: -1 },\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     model: {\n//         maxCountPerModule: { value: -1 },\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     module: {\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     application: {\n//         maxCountPerTenant: { value: -1 },\n//     },\n// }\n\n// const items = [\n//     {targetobject: \"history\", limitkey: \"maxCountPerModel\", value: 10, limitaction: \"deleteOldest\"},\n//     {targetobject: \"model\", limitkey: \"maxCountPerApplication\", value: 20, limitaction: \"deleteOldest\"}\n// ];\n\n// items.forEach(item => {\n//     const itemLimit = itemLimittations as any;\n//     itemLimit[item.targetobject][item.limitkey] = {value: item.value, action: item.limitaction};\n//     itemLimittations = itemLimit as IItemLimitations;\n// });\n\n// const dic:Record<string, Array<{text: string, value: string}>> = {\n//     \"history\": [\n//         {text: \"maxCountountPerModel\", value: \"maxCountountPerModel\"},\n//         {text: \"maxCountountPerModule\", value: \"maxCountountPerModule\"},\n//         {text: \"maxCountountPerApplication\", value: \"maxCountountPerApplication\"},\n//         {text: \"maxCountountPerTenant\", value: \"maxCountountPerTenant\"},\n//     ],\n//     \"model\": [\n//         {text: \"maxCountountPerModule\", value: \"maxCountountPerModule\"},\n//         {text: \"maxCountountPerApplication\", value: \"maxCountountPerApplication\"},\n//         {text: \"maxCountountPerTenant\", value: \"maxCountountPerTenant\"}\n//     ],\n//     \"module\": [],\n//     \"application\": []\n// }\n\n\nexport interface IOrganizationActions {\n    publish?: {\n        targets?: Record<keyof IOrganizationCloud, boolean>;\n    };\n    entityGenerationDomain?: \"softtech\" | \"isbank\";\n}\n\nexport type ITreeviewItemType = ModelType | \"module\";\n\nexport interface ITreeviewItem {\n    id: string;\n    // parentId?: string;\n    name: string;\n    priority: number;\n    type: ITreeviewItemType;\n    createDate: Date;\n    path: string;\n    shortName?: string;\n    modelAdditionals?: IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals;\n    children?: Array<ITreeviewItem>;\n    moduleType?: ModuleType;\n    usageType?: UsageType;\n    checkouts?: Array<IModelCheckout>;\n    relatedApplications?: IModuleBackend[\"relatedApplications\"];\n    size?: number;\n    prefix?: string;\n    dependentModels?: Array<IDependentModel>;\n    moduleMainOwner?: ObjectID;\n    moduleShareType?: ModuleShareType;\n    currentModuleVersion?: string;\n    currentModelVersion?: string;\n    // relatedModelHistories?: IModule[\"relatedModelHistories\"];\n    lastReleasedModuleVersion?: string;\n}\n\nexport interface IScreenItem {\n    id: string;\n    fileName: string;\n    ownerItem: string;\n}\n\nexport interface IApplicationCard extends IApplication {\n    moduleCount: number;\n    pageCount: number;\n    templateCount: number;\n}\n\nexport interface IPimQJsonOptions {\n    qJsonType?: QJsonType;\n}\n\nexport type GeneratePageType = \"create\" | \"list\" | \"update\";\n\nexport interface IIntegration extends ICloudObject {\n    theme: string;\n    settings: {\n        engine: {\n            version: string;\n            babel: boolean;\n            embedded: boolean;\n            multitab: boolean;\n            plugins: Array<{\n                Native: [\n                    {\n                        name: string;\n                        text: string;\n                        dependencies: Array<string>;\n                        enabled: boolean;\n                    }\n                ];\n                Quick: [\n                    {\n                        name: string;\n                        text: string;\n                        dependencies: Array<string>;\n                        enabled: boolean;\n                    }\n                ];\n            }>;\n            region: string;\n            backend: string;\n        };\n        backends: Array<string>;\n        configuration: any; //IWebSDKSettings\n    };\n    componentList: Record<\n        string,\n        Record<\n            string,\n            {\n                type: string;\n                required: boolean;\n                editorDefaultValue: string;\n                runTimeOverrideValue: string;\n                runTimeDefaultValue: string;\n                options: Array<string>;\n            }\n        >\n    >;\n}\n\nexport interface IAppToken {\n    secret: string;\n    app: string;\n    email: string;\n}\n\nexport interface ITags extends ICloudObject {\n    description?: string;\n}\n\nexport interface IOrganizationGroup extends ICloudObject {\n    description?: string;\n    createdBy: string;\n    createDate: Date;\n}\n\nexport interface ISDActivities {\n    ID: ObjectID;\n    username: string;\n    lastAccessDate: Date;\n    logs: Array<{time : Date}>;\n}\nexport interface IUpdateMobileUsage {\n    isMobileTemplateUsed?: boolean;\n    isMobilePublished?: boolean;\n}","import { IApplicationExportSettings } from '../../../../common/qCloudTemp/quickCloud';\nimport { IUpdateApplicationRequest } from '../../../../common/qCloudTemp/symDtoObjects';\nimport { IApplication, ILoggedInUser } from \"../model/models\";\n\nexport interface IUpdateApplicationParam {\n    ID: string;\n    name?: string;\n    description?: string;\n    logo?: string;\n    color?: string;\n    ownerUser?: ILoggedInUser;\n    exportSettings?: IApplicationExportSettings;\n}\nexport interface ICreateApplicationParam {\n    name: string;\n    description?: string;\n    logo?: string;\n    color?: string;\n    templateName?: string;\n}\nexport interface IApplicationUseCase {\n    updateApplication(param: IUpdateApplicationRequest): Promise<void>;\n    createApplication(param: ICreateApplicationParam): Promise<IApplication>;\n}\nexport const IApplicationUseCase = Symbol.for(\"IApplicationUseCase\");","import { IUser_SUSI } from \"../../../../common/qCloudTemp/authentication\";\nimport { IOrganization } from \"../../../../common/qCloudTemp/membership\";\nimport { IApplication, IOrganizationGroup, ISDActivities, ITags } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IAddOrganizationGroupRequest, IAddTagRequest, IBoListOrganizationUsersRequest, IBoRemoveTagFromOrganizationRequest, IBoRemoveUserFromOrganizationRequest, IBoUpdateOrganizationRequest, IBoUpdateOrganizationResponse, IUpdateTagRequest, IGetOrganizaionGroupDetailsRequest, IGetOrganizaionGroupDetailsResponse, IUpdateOrganizaionGroupRequest, IUpdateMobileUsage, } from \"../../../../common/qCloudTemp/symDtoObjects\";\nimport { IUserRequest } from \"../../../../common/qCloudTemp/userRequest\";\nimport { IUpdateOrganization, IUpdateUserInfo } from \"../infrastructure/IQCloudApi\";\n\nexport const IgnoredOrgGroupIds = ['7vipy7ub-v6v1-jnvx-mcdw-2avf532', 'kc5tkrxi-knql-fbnx-zokw-6yymka7b'];\nexport interface IAzureResourceGroupUrls {\n    overviewUrl: string;\n    costUrl: string;\n}\n\nexport interface IOrganizationUIExtended extends IOrganization {\n    organizationGroupName?: string;\n    createdBy?: string;\n    tagNames?: Array<string>;\n    licensed?: 'LICENSED' | 'Demo Org' | 'Free';\n\n}\n\nexport interface IUser_SUSIExtended extends IUser_SUSI {\n    organizationNames?: Array<string>;\n    organizationGroupNames?: Array<string>;\n    licensed?: 'LICENSED' | 'Demo User' | 'Free';\n}\nexport interface IApplicationExtended extends IApplication {\n    organizationName?: string;\n    licensed?: boolean;\n}\nexport interface IUserRequestExtended extends IUserRequest {\n    userName?: string;\n    userLastname?: string;\n    userRole?: string;\n    organizationName?: string;\n    organizationAccountType?: string;\n}\nexport interface IApplicationExtended extends IApplication {\n    uiPageCount: number;\n    uiPageSize: number;\n}\n\nexport interface IBackofficeUseCase {\n    setBreadcrumb(values: Array<string>): void;\n    clearBreadcrumb(): void;\n    getAzureResourceGroupUrls(resourceGroupId: string): Promise<IAzureResourceGroupUrls>;\n    getDashboardInfo(): Promise<void>;\n    getUserInfo(userId: string): Promise<IUser_SUSI>;\n    getOrganizationInfo(organizationId: string): Promise<IOrganization>;\n    listUsers(): Promise<void>;\n    listOrganizations(): Promise<Array<IOrganizationUIExtended>>;\n    getOrgGroupNameByOrgID(orgID: string): Promise<string | undefined>\n    updateUserInfo(userId: string, properties: IUpdateUserInfo): Promise<IUser_SUSI>;\n    removeUserFromOrganization(properties: IBoRemoveUserFromOrganizationRequest): Promise<void>;\n    listOrganizationUsers(organizationId: string): Promise<Array<IUser_SUSI>>;\n    listOrganizationApps(organizationId: string): Promise<Array<IApplication>>;\n    deleteOrganization(organizationId: string, organizationName: string): Promise<void>;\n    updateOrganization(organizationId: string, properties: IUpdateOrganization): Promise<IOrganization>;\n    deleteUser(userId: string, userEmail: string): Promise<void>;\n    getOrganizationsByUserId(userID: string): Promise<IOrganization[]>;\n    addTag(properties: IAddTagRequest): Promise<void>;\n    getTag(tagID: string): Promise<ITags>;\n    listTags(): Promise<void>;\n    updateTag(properties: IUpdateTagRequest): Promise<void>;\n    deleteTag(tagID: string): Promise<void>;\n    getOrganizationsByTagId(tagID: string): Promise<IOrganization[]>;\n    removeTagFromOrganization(properties: IBoRemoveTagFromOrganizationRequest): Promise<void>;\n    listUserRequests(): Promise<Array<IUserRequest>>;\n    addOrganizationGroup(properties: IAddOrganizationGroupRequest): Promise<void>;\n    listOrganizationGroups(): Promise<IOrganizationGroup[]>\n    updateOrganizationGroup(request: IUpdateOrganizaionGroupRequest): Promise<void>;\n    getOrganizationGroupDetails(request: IGetOrganizaionGroupDetailsRequest): Promise<IGetOrganizaionGroupDetailsResponse>;\n    getOrganizationAppsByOrganizationIdForOrgGroup(orgID: string, orgGroup: IGetOrganizaionGroupDetailsResponse): IApplication[] | undefined;\n    getAllAppsForOrgGroup(orgGroup: IGetOrganizaionGroupDetailsResponse): IApplicationExtended[];\n    getUsersPerOrganizationForOrgGroup(orgID: string, orgGroup: IGetOrganizaionGroupDetailsResponse): IUser_SUSI[];\n    deleteOrganizationFromGorup(organizationId: string): Promise<void>;\n    deleteOrganizationGroup(organizationGroupId: string): Promise<void>;\n    listServiceDesignerActivities(): Promise<Array<ISDActivities>>;\n    downloadActivityXlsxFile(activities: Array<ISDActivities>): Promise<void>;\n    updateUserMobileUsage(mobileUsage: IUpdateMobileUsage): Promise<void>;\n    downloadUserListXlsxFile(users: Array<IUser_SUSIExtended>): Promise<void>;\n    downloadOrganizationListXlsxFile(organizations: Array<IOrganizationUIExtended>): Promise<void>;\n    deleteUserStandAloneInfo(userId: string): Promise<void>;\n}\n\nexport const IBackofficeUseCase = Symbol.for(\"IBackofficeUseCase\");","import { ICreateExportJobParam } from \"../../../../common/qCloudTemp/exporter\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface ICreateExportJob extends IUseCase<void, ICreateExportJobParam> {}\n\nexport const ICreateExportJob = Symbol.for(\"ICreateExportJob\");","import { ICreateDeployJobParam, IDeployJobItem, IExportItem, IPlatformSelection } from \"../../../../common/qCloudTemp/exporter\";\nimport { IProviderGetLastBuildStatusResponse } from \"../infrastructure/IProviderApi\";\n\nexport interface IDeployJobs {\n    createAppDeployJob(deployItems: Array<IExportItem>, platformSelection?: IPlatformSelection ): Promise<void>;\n    startDeploymentJob(deployJobs: ICreateDeployJobParam): Promise<void>;\n    createBuildJobs(deployJobs: Array<ICreateDeployJobParam>): Promise<void>;\n    checkRepoHasService(repoIds: Array<number>): Promise<Array<{ repoId: number; exist: boolean }>>;\n    getRepoNameById(repoId: number): Promise<string>;\n    getProductConfigInfo(productRepoId: number, quiRepoId?: number): Promise<{ domain: string; quiName?: string }>;\n    getLastBuildStatus(jobName: string): Promise<IProviderGetLastBuildStatusResponse>;\n}\n\nexport const IDeployJobs = Symbol.for(\"IDeployJobs\");","import { IApplication, IFolder, IModel, IModule } from \"../model/models\";\nimport { ITreeItem, ITreeView } from \"../presentation/ITreeView\";\nimport { IFEExternalData } from \"./IFileExplorer\";\n\nexport interface IDisplayItemsAdditional {\n    id: string;\n    name: string;\n    externalData: FileDisplayerExternalData;\n}\nexport type DisplayModelsCb = (item: FileDisplayerExternalData, hasChildren: boolean) => boolean;\nexport interface ICloneFileExplorerOptions {\n    displayFilterer?: DisplayModelsCb;\n    cb?: { select?: (item: ITreeItem<FileDisplayerExternalData>) => void };\n}\nexport interface IDisplayItemsOptions extends ICloneFileExplorerOptions {\n    additionalItems?: Array<IDisplayItemsAdditional>;\n    additionalRoot?: IDisplayItemsAdditional;\n}\n\nexport type FileDisplayerExternalData = IApplication | IFEExternalData;\n\nexport interface IFileDisplayerUseCase {\n    cloneFileExplorerTreeView(options: ICloneFileExplorerOptions): Array<ITreeItem<FileDisplayerExternalData>>;\n    createFileExplorerClone(domElement: HTMLElement, options: IDisplayItemsOptions): ITreeView<FileDisplayerExternalData>;\n}\nexport const IFileDisplayerUseCase = Symbol.for(\"IFileDisplayerUseCase\");","import { IExportItem } from \"../../../../common/qCloudTemp/exporter\";\nimport { IExportViewItem, IModel } from \"../model/models\";\n\nexport interface IJobUtils {\n    //settingTypeMapper(fileName: string): IExportItem[\"type\"];\n    getItemType(item: IExportViewItem | IModel): IExportItem[\"type\"];\n    getFileFullname(item: IExportViewItem | IModel): string;\n}\n\nexport const IJobUtils = Symbol.for(\"IJobUtils\");","import { IModelHistoryInfo } from \"../model/models\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModelVersionsParam { }\nexport interface IListMultiModelVersions extends IUseCase<Map<string, Array<IModelHistoryInfo>>, IListMultiModelVersionsParam> {\n\n}\nexport const IListMultiModelVersions = Symbol.for(\"IListMultiModelVersions\");","import { IModuleVersion } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModuleVersionsParam { }\nexport interface IListMultiModuleVersions extends IUseCase<Map<string, Array<IModuleVersion>>, IListMultiModuleVersionsParam> {\n\n}\nexport const IListMultiModuleVersions = Symbol.for(\"IListMultiModuleVersions\");","import { ICreateExportJobParam, IExportJobDbItem } from \"../../../../common/qCloudTemp/exporter\";\nexport interface IPackJobs {\n    createPackJobs(jobs: Array<ICreateExportJobParam>): Promise<Array<IExportJobDbItem>>;\n}\n\nexport const IPackJobs = Symbol.for(\"IPackJobs\");","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createBlock as _createBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-ada1dc7a\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = [\"id\"]\nconst _hoisted_2 = {\n  key: 0,\n  class: \"start-screen\"\n}\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-home-outline\" }, null, -1 /* HOISTED */))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"button-tooltip\",\n  style: {\"top\":\"-30px\",\"left\":\"2px\",\"z-index\":\"1\",\"width\":\"80px\"}\n}, \"Start Screen\", -1 /* HOISTED */))\nconst _hoisted_5 = [\n  _hoisted_3,\n  _hoisted_4\n]\nconst _hoisted_6 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: /*#__PURE__*/_normalizeClass(['mdi mdi-pencil-outline version-icon'])\n}, null, -1 /* HOISTED */))\nconst _hoisted_7 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"z-index\":\"1\",\"width\":\"300px\"}\n}\nconst _hoisted_8 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Stop Working\", -1 /* HOISTED */))\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Ready to Publish\", -1 /* HOISTED */))\n\nimport CheckboxComp from \"../../../checkboxComp.vue\";\nimport { ITableData } from '../../../../../../../../common/qCloudTemp/exporter';\nimport { IModel } from '../../../../../../domain/model/models';\nimport { computed, ref } from \"vue\";\nimport { ModelContants } from \"../../../../../../../../common/qCloudTemp/modelContants\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'exportDialogItem',\n  props: {\n    handleItemCheckEvent: { type: Function },\n    startScreen: null,\n    versionDialog: { type: Function },\n    handleCollapse: { type: Function },\n    item: null,\n    moduleVersionDialog: { type: Function }\n  },\n  setup(__props: any) {\n\nconst props = __props as {\n\thandleItemCheckEvent: (item: ITableData) => void;\n\tstartScreen: IModel | undefined;\n\tversionDialog: (item: ITableData) => void;\n\thandleCollapse: (item: ITableData, childIterate?: boolean) => void;\n\titem: ITableData;\n\tmoduleVersionDialog: (item: ITableData) => void;\n};\n\n\n\nconst chevronClass = ref(\"mdi mdi-menu-down chevron\");\nconst checked = ref(props.item.checked);\n\nfunction calculateClass() {\n\tprops.handleCollapse(props.item, true);\n\tchevronClass.value = `mdi mdi-menu${props.item.collapsed ? '-right' : '-down'} chevron`\n};\n\nfunction handleCheck() {\n\tprops.handleItemCheckEvent(props.item);\n\tchecked.value = props.item.checked;\n\treturn checked.value\n}\n\nfunction handleVersionDialog() {\n\tif (props.item.imported) {\n\t\tprops.moduleVersionDialog(props.item);\n\t} else {\n\t\tprops.versionDialog(props.item);\n\t}\n}\n\nconst iconLeft = computed(() => {\n\tconst level = props.item.level || 0;\n\treturn level * 25;\n});\n\nconst modelNameLeft = computed(() => {\n\tconst level = props.item.level || 0;\n\treturn level * 25;\n});\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (!__props.item.imported)\n    ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        class: \"row-container\",\n        id: __props.item.id\n      }, [\n        (__props.item.children && __props.item.children?.length > 0)\n          ? (_openBlock(), _createElementBlock(\"i\", {\n              key: 0,\n              class: _normalizeClass(chevronClass.value),\n              onClick: calculateClass,\n              style: _normalizeStyle({ cursor: 'pointer', left: (!__props.item.level ? 4 : _unref(iconLeft) - 20) + 'px' })\n            }, null, 6 /* CLASS, STYLE */))\n          : _createCommentVNode(\"v-if\", true),\n        (__props.item.type == 'folder')\n          ? (_openBlock(), _createElementBlock(\"i\", {\n              key: 1,\n              style: _normalizeStyle({ top: '4px', fontSize: 'larger', cursor: 'pointer', left: _unref(iconLeft) + (!__props.item.level ? 43 : 20) + 'px', position: 'absolute' }),\n              onClick: calculateClass,\n              class: \"mdi mdi-folder app-settings-color app-tier-model-icon\"\n            }, null, 4 /* STYLE */))\n          : (_openBlock(), _createBlock(CheckboxComp, {\n              key: 2,\n              style: _normalizeStyle({ top: '8px', cursor: 'pointer', left: _unref(iconLeft) + (!__props.item.level ? 43 : 20) + 'px', position: 'absolute' }),\n              check: checked.value,\n              minus: !__props.item.allChildChecked && __props.item.anyChildChecked,\n              disabled: __props.item.disabled,\n              onClick: handleCheck\n            }, null, 8 /* PROPS */, [\"style\", \"check\", \"minus\", \"disabled\"])),\n        (__props.item.type != 'folder')\n          ? (_openBlock(), _createElementBlock(\"i\", {\n              key: 3,\n              class: _normalizeClass('app-tier-model-icon ' + _unref(ModelContants).getModelVisualInfo(__props.item.type, undefined).icon),\n              style: _normalizeStyle({ color: _unref(ModelContants).getModelVisualInfo(__props.item.type, undefined).color, left: _unref(iconLeft) + (!__props.item.level ? 69 : 45) + 'px' })\n            }, null, 6 /* CLASS, STYLE */))\n          : _createCommentVNode(\"v-if\", true),\n        _createElementVNode(\"span\", {\n          style: _normalizeStyle({ left: _unref(iconLeft) + (!__props.item.level ? 91 : 71) + (__props.item.type == 'folder' ? -20 : 0) + 'px' }),\n          class: _normalizeClass(['app-tier-model-name', __props.item.disabled ? 'disabled' : ''])\n        }, [\n          _createTextVNode(_toDisplayString(__props.item?.name) + \" \", 1 /* TEXT */),\n          (__props.startScreen?.ID == __props.item.id)\n            ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _hoisted_5))\n            : _createCommentVNode(\"v-if\", true)\n        ], 6 /* CLASS, STYLE */),\n        (__props.item.type != 'folder')\n          ? (_openBlock(), _createElementBlock(_Fragment, { key: 4 }, [\n              (!__props.item.usageType && __props.item.type != 'module')\n                ? (_openBlock(), _createElementBlock(\"span\", {\n                    key: 0,\n                    class: _normalizeClass(['version-text', __props.item.disabled ? 'disabled' : '']),\n                    onClick: handleVersionDialog\n                  }, [\n                    _createTextVNode(_toDisplayString(__props.item.version ? __props.item.version : 'No version') + \" \", 1 /* TEXT */),\n                    (!__props.item.usageType)\n                      ? (_openBlock(), _createElementBlock(\"i\", {\n                          key: 0,\n                          class: _normalizeClass(['mdi mdi-pencil-outline version-icon', __props.item.disabled ? 'disabled' : ''])\n                        }, null, 2 /* CLASS */))\n                      : _createCommentVNode(\"v-if\", true)\n                  ], 2 /* CLASS */))\n                : (__props.item.imported && __props.item.type == 'module')\n                  ? (_openBlock(), _createElementBlock(\"div\", {\n                      key: 1,\n                      class: \"version-text\",\n                      onClick: _cache[0] || (_cache[0] = ($event: any) => (__props.moduleVersionDialog(__props.item)))\n                    }, [\n                      _createTextVNode(_toDisplayString(__props.item.version ? __props.item.version : 'No version') + \" \", 1 /* TEXT */),\n                      _hoisted_6\n                    ]))\n                  : _createCommentVNode(\"v-if\", true),\n              (__props.item.disabled && !__props.item.version)\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, [\n                    _createTextVNode(\"No version available for publishing. \"),\n                    _hoisted_8,\n                    _createTextVNode(\" on this item and choose the \"),\n                    _hoisted_9,\n                    _createTextVNode(\" option. \")\n                  ]))\n                : _createCommentVNode(\"v-if\", true)\n            ], 64 /* STABLE_FRAGMENT */))\n          : _createCommentVNode(\"v-if\", true)\n      ], 8 /* PROPS */, _hoisted_1))\n    : _createCommentVNode(\"v-if\", true)\n}\n}\n\n})","\n      import API from \"!../../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./exportDialogItem.vue?vue&type=style&index=0&id=ada1dc7a&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./exportDialogItem.vue?vue&type=style&index=0&id=ada1dc7a&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./exportDialogItem.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./exportDialogItem.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./exportDialogItem.vue?vue&type=style&index=0&id=ada1dc7a&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/studio/studio/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-ada1dc7a\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, normalizeClass as _normalizeClass, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-5bfad562\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"container\" }\nconst _hoisted_2 = { class: \"text-number\" }\nconst _hoisted_3 = { class: \"text-number\" }\nconst _hoisted_4 = {\n  key: 0,\n  style: {\"margin-bottom\":\"102px\"}\n}\nconst _hoisted_5 = /*#__PURE__*/_createStaticVNode(\"<div style=\\\"display:flex;align-items:center;\\\" data-v-5bfad562><span class=\\\"custom-text environment\\\" data-v-5bfad562> Publish To </span><span class=\\\"publish-info\\\" data-v-5bfad562><i class=\\\"mdi mdi-information\\\" data-v-5bfad562></i><span class=\\\"button-tooltip\\\" style=\\\"top:460px;left:96px;z-index:1;width:231px;\\\" data-v-5bfad562>Publish To options may change depending on the module type you choose.</span></span></div>\", 1)\nconst _hoisted_6 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"save-button\" }, \"DOWNLOAD\", -1 /* HOISTED */))\nconst _hoisted_7 = {\n  key: 0,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-80px\",\"left\":\"626px\",\"z-index\":\"1\",\"width\":\"145px\"}\n}\nconst _hoisted_8 = {\n  key: 1,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"640px\",\"z-index\":\"1\",\"width\":\"120px\"}\n}\nconst _hoisted_9 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"save-button deploy\" }, \"PUBLISH\", -1 /* HOISTED */))\nconst _hoisted_11 = {\n  key: 0,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"652px\",\"z-index\":\"1\",\"width\":\"120px\"}\n}\nconst _hoisted_12 = {\n  key: 1,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"123px\"}\n}\nconst _hoisted_13 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\nconst _hoisted_14 = {\n  key: 3,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\n\nimport { CryptoHelper } from \"@stechquick/algae/lib/helpers/cryptoHelper\";\nimport { PlateauHelper } from \"@stechquick/algae/lib/helpers/plateau/plateauHelper\";\nimport { computed, createApp, defineAsyncComponent, onMounted, ref } from \"vue\";\nimport { IOrganizationCloud } from \"../../../../../../../common/clean/domain/useCases/ICloudProvider\";\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem, ITableData } from \"../../../../../../../common/qCloudTemp/exporter\";\nimport { APP_ITEM_CONTENT_TYPES, IModuleRelatedModelItem, IQJsonAdditionals } from \"../../../../../../../common/qCloudTemp/quickCloud\";\nimport { container } from \"../../../../../domain/core/diContainer\";\nimport { IQCloudApi } from \"../../../../../domain/infrastructure/IQCloudApi\";\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \"../../../../../domain/model/models\";\nimport { IDialog } from \"../../../../../domain/presentation/IDialog\";\nimport { ICreateExportJob } from \"../../../../../domain/useCase/ICreateExportJob\";\nimport { IDeployJobs } from \"../../../../../domain/useCase/IDeployJobs\";\nimport { IJobUtils } from \"../../../../../domain/useCase/IJobUtils\";\nimport { IListMultiModelVersions } from \"../../../../../domain/useCase/IListMultiModelVersions\";\nimport { IListMultiModuleVersions } from \"../../../../../domain/useCase/IListMultiModuleVersions\";\nimport { IPackJobs } from \"../../../../../domain/useCase/IPackJobs\";\nimport { IUseCaseExecutor } from \"../../../../../domain/useCase/IUseCaseExecutor\";\nimport { IViewModel } from \"../../../../../domain/viewModel/IViewModel\";\nimport { IViewModelManager } from \"../../../../../domain/viewModel/IViewModelManager\";\nimport { IBackofficeUseCase } from \"../../../../../domain/useCase/IBackofficeUseCase\";\nimport { IApplicationUseCase } from \"../../../../../domain/useCase/IApplicationUseCase\";\nimport ExportDialogItem from \"./components/exportDialogItem.vue\";\nimport CustomSelect from \"../../../components/customSelect.vue\";\nimport CheckboxComp from \"../../checkboxComp.vue\";\nimport { FileDisplayerExternalData, IFileDisplayerUseCase } from \"../../../../../domain/useCase/IFileDisplayerUseCase\";\nimport { ITreeItem } from \"../../../../../domain/presentation/ITreeView\";\nimport { PathHelper } from \"../../../../../../../common/helpers/pathHelper\";\nimport { FileExplorerConstants } from \"../../../../../domain/useCase/IFileExplorer\";\nimport { IObjectUseCase } from \"../../../../../domain/useCase/IObjectUseCase\";\n\ninterface IDeployScreenAdditionalProps {\n    screenType: \"Export\" | \"Deploy\";\n    platformSelection: IPlatformSelection;\n}\n\ninterface IDisabledOptions {\n    index: number\n    cause: string;\n}\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'publishDialog',\n  props: {\n    screenType: null,\n    platformSelection: null\n  },\n  emits: [\"close\"],\n  setup(__props: any, { emit }) {\n\nconst props = __props as {\n    screenType: \"Export\" | \"Deploy\";\n    platformSelection: IPlatformSelection;\n};\n\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\nconst fileDisplayerUseCase = container.resolve<IFileDisplayerUseCase>(IFileDisplayerUseCase);\nconst objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\n\n\n\nconst items = ref<Array<ITableData>>([]);\nconst validations = ref<boolean>(true);\nconst selectedTarget = ref<string>(\"\");\nconst disabledOptions = ref<Array<IDisabledOptions>>();\nconst publishTargets = ref<Array<string>>();\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\nconst startScreen = ref<IModel>();\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>>();\nconst dependencyErrorStr = ref<string>('');\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\n\n\nonMounted(async () => {\n    await executor.execute(async () => {\n        await Promise.all([\n            executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, {}).then(res => modelHistories.value = res),\n            executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, {}).then(res => importedModuleVersions.value = res)\n        ])\n        initDependencies();\n        handleItems();\n        props.screenType == \"Deploy\" && syncPublishTargets();\n        validations.value = validate();\n    }, { loading: true });\n})\n\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \"module\" && e.allChildChecked).length);\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \"module\" && !e.allChildChecked && e.anyChildChecked).length);\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \"module\" && e.checked).length);\nconst totalRootLevelCount = computed(() => items.value.length);\nconst saveButtonDisable = computed(() => (props.screenType == \"Deploy\" && props.platformSelection.web && selectedTarget.value == \"\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \"Export\" && !validateStartScreen()) || !validateDependencies());\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true\n    : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0 ? false : undefined));\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\nconst isAllDependenciesOK = computed(validateDependencies)\nconst isStartScreenOK = computed(validateStartScreen)\n\nfunction validate() {\n    let result = true;\n    const modules = items.value.filter(e => e.type == \"module\" && e.anyChildChecked);\n    const appLayerItems = items.value.filter(e => e.type == \"qjson\" && e.checked);\n\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => (item.additionals as IQJsonAdditionals | undefined)?.isRootPage);\n    if (!startScreen.value)\n        return false;\n\n    if (props.screenType == \"Deploy\") {\n        if (modules.length > 0)\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \"entityDesigner\" && f.checked)).length <= 0\n\n        let isApplicationWillDeploy = appLayerItems.length > 0;\n        if (isApplicationWillDeploy) {\n            result = appLayerItems\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\n        }\n    }\n\n    return result;\n}\n\nfunction validateDependencies() {\n    const checkMap = new Map<string, boolean>();\n    items.value.forEach(item => {\n        if (item.type == 'module' && item.children && item.children.length > 0)\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\n        else\n            checkMap.set(item.id, item.checked == true)\n    })\n\n    const mustBeCheckedMap = new Map<string, Array<string>>();\n    dependencyMap.value?.forEach((deps, id) => {\n        if (!checkMap.get(id))\n            return;\n\n        deps.dependedTo.forEach(dependedId => {\n            if (checkMap.get(dependedId))\n                return;\n\n            if (mustBeCheckedMap.has(id)) {\n                const vals = mustBeCheckedMap.get(id)!\n                vals.push(dependedId)\n                mustBeCheckedMap.set(id, vals)\n            } else {\n                mustBeCheckedMap.set(id, [dependedId])\n            }\n\n        });\n    })\n\n    //set deps error text\n    const [firstItemID] = mustBeCheckedMap.keys();\n    if (firstItemID) {\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\n        dependencyErrorStr.value = `Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\n    }\n\n    return mustBeCheckedMap.size == 0\n}\n\nfunction validateStartScreen() {\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\n}\n\nfunction findItem(ID: string) {\n    for (const item of items.value) {\n        if (item.type != 'module' && item.id == ID)\n            return item;\n        if (item.type == 'module' && item.children && item.children.length > 0) {\n            const f = item.children.find(e => e.id == ID)\n            if (f) return f\n        }\n    }\n}\n\nfunction initDependencies() {\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>();\n    const depMap = new Map<string, Array<string>>();\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item) => {\n        if (item.objectType != \"model\") { return; }\n\n        const isImportedModule = item.owner.objectType == \"module\" && isModuleImported(item.owner as IModule);\n\n        let version: string | undefined;\n        if (!isImportedModule) {\n            const maxVersion = getItemMaxVersion(item)\n            if (!maxVersion)\n                return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\n            version = maxVersion;\n        }\n        else {\n            const moduleVersions = importedModuleVersions.value?.get(item.owner.ID)\n            const moduleVersion = (item.owner as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n\n            const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\n            version = importedModuleModel?.version\n        }\n\n        const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\n\n        depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\n    });\n\n\n    depMap.forEach((dependedTo, modelId) => {\n        const dependedBy = Array<string>();\n        depMap.forEach((dependencies, depModelId) => {\n            if (dependencies.some(depId => depId == modelId))\n                dependedBy.push(depModelId)\n        })\n        map.set(modelId, { dependedBy, dependedTo });\n    })\n    dependencyMap.value = map;\n}\n\nfunction isModelDepended(item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\n    if (!deps) return false;\n\n    return deps.some(dep => items.value.some(item => {\n        if (item.type == 'module' && item.anyChildChecked) {\n            return item.children?.some(child => child.checked && child.id == dep)\n        }\n        return item.id == dep && item.checked\n    }));\n}\nfunction createDialogComp(item: ITableData) {\n    const newChild = createApp(ExportDialogItem, {\n        handleItemCheckEvent,\n        startScreen,\n        versionDialog,\n        handleCollapse,\n        item: item,\n        moduleVersionDialog\n    });\n    const mountEl = document.createElement('div');\n    newChild.mount(mountEl);\n    const parentEl = document.getElementById('module-container-div');\n    parentEl?.appendChild(mountEl);\n}\nfunction createAndAppendItem({ newItem }: { newItem: ITableData }) {\n    createDialogComp(newItem);\n    if ((newItem).type != \"module\") {\n        items.value.push(newItem);\n    }\n}\n\nfunction handleItems() {\n    // - App Settings\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings');\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\n    const settingsData = appSettings && {\n        id: appSettings.ID,\n        name: appSettings.name,\n        checked: true,\n        disabled: false,\n        type: (appSettings as IModel).modelType,\n        version: !maxVersion ? 'latest' : maxVersion\n    };\n    appSettings && settingsData && createAndAppendItem({ newItem: settingsData });\n\n\n    // - UI Settings\n    const uiSettingsID = CryptoHelper.CreateGuid();\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \"model\" && item.usageType == \"appSettings\") as Array<IModel>;\n    const uiSettings: ITableData = {\n        id: uiSettingsID,\n        collapsed: true,\n        name: \"UI Settings\",\n        type: \"module\",\n        imported: false,\n        checked: true,\n        children: [{} as ITableData]\n    };\n    uiSettings && createAndAppendItem({ newItem: uiSettings });\n    uiSettings.children = uiSettingsModels.map(settings => {\n        const maxVersion = getItemMaxVersion(settings)\n        const childData = {\n            id: settings.ID,\n            parentId: uiSettingsID,\n            name: settings.name,\n            type: settings.modelType,\n            checked: maxVersion != undefined,\n            usageType: settings?.usageType,\n            disabled: !maxVersion,\n            version: maxVersion,\n            level: 2\n        }\n        createAndAppendItem({ newItem: childData });\n        return childData;\n    })\n    handleParentCheckedStatus(uiSettings, false);\n\n\n    // - Styled Components\n    const uiAssetID = CryptoHelper.CreateGuid();\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \"model\" && item.usageType == \"appAssetList\") as Array<IModel>;\n    const uiAssetList: ITableData = {\n        id: uiAssetID,\n        collapsed: true,\n        name: \"Styled Components\",\n        type: \"module\",\n        imported: false,\n        anyChildChecked: true,\n        allChildChecked: true,\n        children: [{} as ITableData]\n    };\n    uiAssetList && createAndAppendItem({ newItem: uiAssetList });\n    uiAssetList.children = appAssetList.map((asset) => {\n        const childAsset = {\n            id: asset.ID,\n            parentId: uiAssetID,\n            name: asset.name,\n            type: asset.modelType,\n            checked: true,\n            usageType: asset?.usageType,\n            level: 2\n        }\n        createAndAppendItem({ newItem: childAsset });\n        return childAsset;\n    }) as Array<ITableData>;\n    handleParentCheckedStatus(uiAssetList, false);\n\n    \n    const treeItems = fileDisplayerUseCase.cloneFileExplorerTreeView({\n        displayFilterer: (item, hasChildren) => {\n            switch (item.ID) { case FileExplorerConstants.uiAssetListID: case FileExplorerConstants.uiSettingsID: return false; default: break; }\n            switch (item.objectType) {\n                case \"application\": return false;\n                case \"module\": return true;\n                case \"folder\": return hasChildren;\n                case \"model\": return true;\n            }\n        },\n    });\n\n    const converter = (treeItem: ITreeItem<FileDisplayerExternalData>, options: {ownerModule?: {isImportedModule: boolean;moduleVersion: string | undefined;relatedModelHistories: IModuleRelatedModelItem[] | undefined}}): ITableData => {\n        const item = treeItem.externalData;\n        if (item.objectType == \"application\") { throw new Error(\"unexpected item type\"); }\n\n        const fullPath = objectUseCase.getFullPath(item, \"self\");\n        let level = fullPath.split(\"/\").length - 1;\n\n        let tableData: ITableData;\n        switch(item.objectType) {\n            case \"folder\":\n                tableData = {\n                    id: item.ID, name: item.name, type: \"folder\", collapsed: true, level,\n                    children: treeItem.children?.map((item) => converter(item, { ownerModule: options.ownerModule })),\n                };\n                tableData.children?.forEach(child => child.parent = tableData);\n                handleParentCheckedStatus(tableData, false);\n                break;\n            case \"model\":\n                if (options.ownerModule) {\n                    tableData = { id: item.ID, name: item.name, type: item.modelType, level };\n                    if (!options.ownerModule.isImportedModule || item.isUnmodifiable) {\n                        const maxVersion = getItemMaxVersion(item);\n                        tableData = {\n                            ...tableData,\n                            checked: maxVersion ? true : item.isUnmodifiable,\n                            disabled: maxVersion ? false : !item.isUnmodifiable,\n                            version: item.isUnmodifiable ? 'latest' : maxVersion,\n                        };\n                    } else {\n                        const importedModulesModel = options.ownerModule.relatedModelHistories?.find(e => e.modelID == item.ID)\n                        tableData = { ...tableData, checked: true, disabled: false, version: importedModulesModel?.version };\n                    }\n                } else {\n                    const maxVersion = getItemMaxVersion(item);\n                    tableData = {\n                        id: item.ID,\n                        name: item.name,\n                        checked: maxVersion ? true : item.isUnmodifiable,\n                        disabled: maxVersion ? false : !item.isUnmodifiable,\n                        type: item.modelType,\n                        version: item.isUnmodifiable ? 'latest' : maxVersion,\n                        level,\n                    };\n                }\n                break;\n            case \"module\":\n                const isImportedModule = isModuleImported(item);\n                const moduleVersion = item.relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion;\n                const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\n                \n                tableData = {\n                    id: item.ID,\n                    collapsed: true,\n                    name: item.name,\n                    type: \"module\",\n                    imported: isImportedModule,\n                    version: moduleVersion,\n                    children: treeItem.children?.map((item) => converter(item, {ownerModule: {isImportedModule, moduleVersion, relatedModelHistories}})),\n                }\n                tableData.children?.forEach(child => child.parent = tableData);\n                handleParentCheckedStatus(tableData, false);\n                break;\n        }\n        return tableData;\n    };\n    const tableDatas = treeItems.map(item => converter(item, {}));\n\n    const traverser = (tableData: ITableData) => {\n        createAndAppendItem({ newItem: tableData });\n        tableData.children?.forEach(traverser);\n    };\n    \n    tableDatas.forEach(traverser);\n}\n\nfunction getItemMaxVersion(item: IModel): string | undefined {\n    if (!modelHistories.value?.has(item.ID))\n        return undefined;\n\n    const versions = modelHistories.value.get(item.ID);\n    if (!versions)\n        return undefined;\n\n    const findMaxVersion = (versions: Array<string>) => {\n        const versionNumbers = versions.map(v => {\n            const parts: Array<string> = v.split(\".\");\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\n        })\n\n        versionNumbers.sort((a, b) => b - a);\n\n        const maxVersion = versionNumbers[0];\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\n    }\n\n    return findMaxVersion(versions.map(e => e.version!));\n\n}\nfunction checkMaxVersionOfAllItems() {\n    let isThereVersion: boolean = false;\n    items.value.forEach(item => {\n        if (item.type == \"module\") {\n            item.children?.forEach(child => {\n                if (child.version) {\n                    isThereVersion = true;\n                }\n\n            })\n        }\n        else {\n            if (item.version) {\n                isThereVersion = true;\n            }\n        }\n    })\n    return isThereVersion;\n}\nfunction handleModuleCountCheckboxEvent(value: boolean) {\n    items.value.filter(e => !e.disabled).forEach((item) => {\n        item.checked = value;\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\n        if (allItemsCheckable) item.allChildChecked = value;\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\n    });\n\n    validations.value = validate();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n}\n\nfunction handleCollapse(item: ITableData, childIterate?: boolean, collapsed?: boolean) {\n    item.collapsed = collapsed !== undefined ? collapsed : !item.collapsed;\n    if (childIterate) {\n        item.children?.forEach(child => {\n            const childEl = document.getElementById(child.id);\n            childEl!.style.display = item.collapsed ? \"none\" : \"block\";\n            handleCollapse(child, childIterate, item.collapsed);\n        })\n    }\n}\n\nfunction checkAllDependents(item: ITableData, recurseParent: boolean) {\n    if (item.disabled || item.checked) return;\n\n    item.checked = true\n    item.parent && handleParentCheckedStatus(item.parent, recurseParent);\n\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\n    if (!deps) return;\n\n    deps.forEach(dep => {\n        items.value.forEach(item => {\n            if (item.type == 'module' && !item.allChildChecked) {\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\n                willCheckItem && checkAllDependents(willCheckItem, recurseParent);\n                handleParentCheckedStatus(item, recurseParent);\n                return;\n            }\n\n            if (!item.checked && item.id == dep) {\n                checkAllDependents(item, recurseParent);\n                item.parent && handleParentCheckedStatus(item.parent, recurseParent);\n            }\n        })\n    });\n}\n\nfunction handleItemCheckEvent(item: ITableData) {\n    if (item.disabled || isModelDepended(item) || item.name == 'App Settings')\n        return;\n\n    if (item.type != \"module\" && item.type != \"folder\") {\n        if (item.checked) {\n            item.checked = false;\n            item.parent && handleParentCheckedStatus(item.parent, true);\n        } else {\n            checkAllDependents(item, true);\n        }\n    } else {\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\n            if (item.anyChildChecked) {\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\n                item.checked = false;\n                handleParentCheckedStatus(item, true);\n            } else {\n                item.children.forEach(child => checkAllDependents(child, true));\n                item.checked = true;\n            }\n        }\n        else {\n            item.checked = !item.checked;\n            item.allChildChecked = false;\n        }\n    }\n\n    validations.value = validate();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n}\n\nfunction handleParentCheckedStatus(item: ITableData, recurseParent: boolean) {\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\n    if (recurseParent && item.parent) {\n        handleParentCheckedStatus(item.parent, true);\n    }\n}\n\nfunction syncPublishTargets() {\n    publishTargets.value = []; disabledOptions.value = [];\n\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\n    if (!targets)\n        return;\n\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\n    if (!isSelectAnyItem) {\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\n        const disabledOptionList = Array<IDisabledOptions>();\n        for (let i = 0; i < publishTargets.value.length; i++) {\n            disabledOptionList.push({ index: i, cause: \"You need to include items to publish.\" })\n        }\n        disabledOptions.value = disabledOptionList;\n        return;\n    }\n\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\n\n    const disabledOptionList = Array<IDisabledOptions>();\n    for (let i = 0; i < sortedTargets.length; i++) {\n        const cause = sortedTargets[i].cause;\n        if (cause) disabledOptionList.push({ index: i, cause })\n    }\n    disabledOptions.value = disabledOptionList;\n    publishTargets.value = sortedTargets.map(e => e.optionName);\n\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \"\";\n}\n\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\n    const list = Array<{ optionName: string, cause?: string }>();\n\n    Object.keys(targets).forEach(e => {\n        const key = e as keyof IOrganizationCloud;\n        const value = targets[key];\n        const optionName = cloudTargetMap(key)!;\n        if (!value)\n            return list.push({ optionName, cause: \"You are not authorized to publish to this target.\" });\n\n\n        switch (key) {\n            case \"azure\":\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\n                    if (!items || items.length == 0) { return status; }\n                    for (const item of items) {\n                        if (item.checked || item.anyChildChecked) {\n                            if (item.type == \"module\") {\n                                status = traverseSelectedItems(status, item.children);\n                            }\n                            if (item.type == \"entityDesigner\" || item.type == \"bpmn\" || item.type == \"process\") {\n                                status = false;\n                                break;\n                            }\n                        }\n\n                    }\n                    return status;\n                }\n\n                const status = traverseSelectedItems(true, items.value);\n                if (!status)\n                    return list.push({ optionName, cause: \"Entity and process models cannot be published to this target.\" });\n                break;\n            case \"plateauGCP\":\n                const modulesHasNotAnEDModel = items.value.filter(e => e.name != \"UI Settings\").find(e => e.type == \"module\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \"bpmn\" || c.type == \"process\")) && !e.children?.some(c => c.type == \"entityDesigner\" && c.checked))\n                if (modulesHasNotAnEDModel)\n                    return list.push({ optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.` })\n                break;\n        }\n\n        list.push({ optionName });\n    })\n\n    return list;\n}\n\nfunction updateDependencyMap(newVersion: string, item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id);\n    dependencyMap.value?.set(item.id, {\n        dependedBy: deps?.dependedBy || Array<string>(),\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\n    })\n}\n\nfunction versionDialog(item: ITableData) {\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\n    const hasAnyVersion = modelHistories.value?.has(item.id);\n    const options = {\n        clickedNode, cb: (version: string) => {\n            item.version = version;\n            updateDependencyMap(version, item);\n        }\n    } as any;\n\n    if (hasAnyVersion) {\n        options.versions = modelHistories.value?.get(item.id)\n    }\n    dialog.showDialog(\n        defineAsyncComponent(() => import(\"../../application/modelVersionDialog.vue\")),\n        { closable: true, title: \"Change Version\", width: \"1080px\", maxHeight: \"500px\", overflow: \"auto\" }, options\n    );\n}\n\n\nfunction moduleVersionDialog(item: ITableData) {\n    dialog.showDialog(\n        defineAsyncComponent(() => import(\"../../application/moduleVersionDialog.vue\")),\n        { closable: true, title: \"Change Version\", width: \"1080px\", maxHeight: \"500px\", overflow: \"auto\" },\n        {\n            module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => {\n                item.version = moduleVersion.version;\n                item.children?.forEach(child => {\n                    const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\n                    child.version = modulesModel?.version\n                    updateDependencyMap(modulesModel?.version!, child);\n                })\n            }\n        }\n    );\n}\n\nfunction close() {\n    emit(\"close\");\n}\n\nasync function save() {\n    executor.execute(\n        async () => {\n            const initAsGroup = async () => {\n                const groupID = CryptoHelper.CreateGuid();\n                await initHistory(groupID);\n                await packJob(groupID);\n                return groupID;\n            }\n\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\n\n            switch (props.screenType) {\n                case \"Export\":\n                    if (isFlowBackend) {\n                        const deployItems = await createAzureDeployItems();\n                        await packJobsUseCase.createPackJobs([{\n                            appID: viewModel.studio.appId,\n                            exportType: \"qui\",\n                            selectionData: deployItems\n                        }]);\n                        break;\n                    }\n\n                    const groupID = await initAsGroup();\n                    await createExportJob(groupID);\n                    break;\n                case \"Deploy\":\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\n                        case \"plateauGCP\":\n                            const groupID = await initAsGroup();\n                            await createDeployJob(groupID);\n                            break;\n                        case \"azure\":\n                            const deployItems = await createAzureDeployItems();\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\n                            break;\n                    }\n            }\n            const userMobileUsage = viewModel.user?.mobileUsage;\n            const appMobileUsage = currentApp.value?.mobileUsage;\n            if(props.platformSelection && props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \"backofficeUpdate\"})\n                \n            }\n            emit(\"close\");\n        },\n        { loading: true });\n}\n\nasync function createAzureDeployItems() {\n    const deployItems: Array<IExportItem> = [];\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\n        if (item.objectType != \"model\") { return; }\n        const path = item.owner.objectType == \"module\" ? PathHelper.join(item.owner.name, item.path) : item.path;\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\n        if (!items || items.length == 0) { return; }\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\n            if (item.type == \"module\" || item.type == \"folder\") {\n                traverseSelectedItems(item.children);\n                return;\n            }\n\n            const itemMap = itemIdObj[item.id];\n\n            const deployItem: IExportItem = {\n                id: item.id,\n                name: jobUtils.getFileFullname(itemMap.item),\n                path: itemMap.path,\n                type: jobUtils.getItemType(itemMap.item),\n                ver: item.version || \"latest\",\n                isRootPage: (itemMap.item.additionals as IQJsonAdditionals | undefined)?.isRootPage,\n                modulePrefix: itemMap.prefix,\n                ownerType: 'application',\n                ownerName: viewModel.studio.appName,\n                size: itemMap.item.size,\n                createDate: itemMap.item.createDate,\n            };\n            deployItems.push(deployItem)\n        });\n    };\n\n    traverseSelectedItems(items.value);\n\n    return deployItems;\n}\n\nasync function initHistory(groupID: string) {\n    return qcloudApi.initPublishHistory({\n        appID: viewModel.studio.appId,\n        ID: groupID,\n        isMultiStep: true,\n        type: props.screenType == \"Deploy\" ? \"publish\" : \"download\",\n        cloudProvider: props.screenType == \"Deploy\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\n        platform: props.platformSelection\n    });\n}\n\nasync function packJob(groupID: string) {\n    let exportItemMap = new Map<string, Array<IExportItem>>();\n    const appName = viewModel.studio.appName;\n\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\n        if (item.objectType != \"model\") { return; }\n        const path = item.owner.objectType == \"module\" ? PathHelper.join(item.owner.name, item.path) : item.path;\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const createExportObject = (tableItem: ITableData) => {\n        const itemMap = itemIdObj[tableItem.id];\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == itemMap.item.modelType);\n\n        const retVal: IExportItem = {\n            id: tableItem.id,\n            ver: tableItem.version!,\n            type: jobUtils.getItemType(itemMap.item),\n            path: itemMap.path,\n            modulePrefix: itemMap.prefix,\n            name: jobUtils.getFileFullname(itemMap.item),\n            ownerType: isAppItem ? 'application' : (itemMap.item.owner.objectType as \"module\" | \"application\"),\n            ownerName: isAppItem ? appName : itemMap.item.owner.name,\n        };\n        return retVal;\n    }\n\n    const addToExportItem = (key: string, obj: IExportItem) => {\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\n        let items = exportItemMap.get(key);\n        if (items && items.length > 0) {\n            items.push(obj);\n            exportItemMap.set(key, items);\n        } else\n            exportItemMap.set(key, [obj]);\n    }\n    const mapTableItemToExportItem = (tableItems: Array<ITableData>) => {\n        tableItems.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\n        if (asset.type == 'module') {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                const obj = createExportObject(child);\n                if (obj.type == \"entityDesigner\")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\n            });\n        } \n        else if(asset.type == \"folder\") {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                if(child.type == \"folder\") {\n                    mapTableItemToExportItem([child])\n                }\n                else {\n                    const obj = createExportObject(child);\n                    if (obj.type == \"entityDesigner\")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n                \n                    const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\n                    addToExportItem(useSeperateModule ? asset.name : appName, obj);\n                }\n            });\n        }\n        else {\n            const obj = createExportObject(asset);\n            if (asset.type == 'qjson') {\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \"model\" && i.modelType == \"qjson\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\n                obj.isRootPage = isRootPage ? true : undefined;\n            }\n            addToExportItem(appName, obj);\n        }\n    })\n    }\n    mapTableItemToExportItem(items.value);\n   \n\n    let jobs = Array<ICreateExportJobParam>();\n    exportItemMap.forEach((v, k) => {\n        jobs.push({\n            appID: viewModel.studio.appId,\n            exportType: \"qui\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \"model\":  \"qui\"\n            selectionData: v,\n            cause: props.screenType == 'Export' ? 'download' : \"publish\",\n            layer: 0,\n            groupID: groupID,\n            platformSelection: props.platformSelection\n        })\n    })\n\n    await packJobsUseCase.createPackJobs(jobs);\n}\nasync function createExportJob(groupID: string) {\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\n        appID: viewModel.studio.appId,\n        exportType: \"qui\",\n        selectionData: [],\n        layer: 1,\n        groupID: groupID\n    });\n}\n\nasync function createDeployJob(groupID: string) {\n    //1-(n) L1- deployJob(build)\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\n        .then(jobs => jobs.jobs.map(e => {\n            const jobData = e.jobData as IExportJobData;\n            return {\n                ownerName: jobData.items[0].ownerName,\n                jobID: e.jobID,\n                type: jobData.items[0].ownerType,\n                mainDir: getDeployableArchiveRoot(jobData)\n            }\n        }));\n\n    if (!packages || packages.length <= 0)\n        return;\n\n    let buildJobs = Array<ICreateDeployJobParam>();\n    packages.forEach(pack => {\n        buildJobs.push({\n            appID: viewModel.studio.appId,\n            type: \"build\",\n            package: {\n                type: pack.type as DeployType,\n                name: pack.ownerName!,\n                mainDir: pack.mainDir,\n                zip: `${pack.jobID}.zip`,\n            },\n            layer: 1,\n            groupID: groupID\n        })\n    })\n\n    await deployJobsUseCase.createBuildJobs(buildJobs);\n\n    //2-(1) L2- deployJob(deployment)\n    let jobParam: ICreateDeployJobParam = {\n        appID: viewModel.studio.appId,\n        type: \"deployment\",\n        deployConfig: {\n            process: {\n                configModelIDs: getProcessConfigList(),\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \"bpmn\"))\n            }\n        },\n        layer: 2,\n        groupID: groupID,\n        platformSelection: props.platformSelection\n    }\n\n    await deployJobsUseCase.startDeploymentJob(jobParam);\n}\n\nfunction getProcessConfigList() {\n    let processConfigList = Array<IProcessConfigModelItem>();\n    items.value.forEach((asset) => {\n        if (asset.type == \"module\" && asset.anyChildChecked && asset.children) {\n            const usingService = asset.children.find(c => c.type == \"entityDesigner\");\n            if (!usingService)\n                return;\n\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\n            asset.children.forEach(child => {\n                if (child.checked && child.type == \"process\") {\n                    processConfigList.push({\n                        moduleName: serviceName,\n                        model: {\n                            id: child.id,\n                            name: child.name,\n                            version: child.version!\n                        }\n                    })\n                }\n            })\n        }\n    })\n    return processConfigList;\n}\n\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\n    if (jobData.items[0].ownerType == \"module\") {\n        let edModel = jobData.items.find(e => e.type == \"entityDesigner\");\n        if (!edModel)\n            throw new Error(\"!!! this module cannot deploy. Because its have not a service\");\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\n    }\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\n}\n\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \"Public Cloud\", plateauGCP: \"Plateau Platform Playground\" };\n    if (pureVal) {\n        return Object.keys(map).find(e => {\n            if (map[e as keyof IOrganizationCloud] === name) {\n                return true;\n            }\n        })\n    } else {\n        let key = Object.keys(map).includes(name);\n        if (!key)\n            return;\n        return map[name as keyof IOrganizationCloud];\n    }\n}\n\nfunction onTargetSelect(value: string) {\n    selectedTarget.value = value\n}\n\nconst isModuleImported = (item: IModule) => {\n    return objectUseCase.isModuleImported(item);\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", null, [\n      _createVNode(CheckboxComp, {\n        class: _normalizeClass(['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']),\n        minus: _unref(mainCheckboxState) == false,\n        check: _unref(mainCheckboxState) == true,\n        onClick: _cache[0] || (_cache[0] = ($event: any) => (handleModuleCountCheckboxEvent(_unref(mainCheckboxState) == undefined)))\n      }, null, 8 /* PROPS */, [\"class\", \"minus\", \"check\"]),\n      _createElementVNode(\"div\", {\n        class: _normalizeClass(['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : ''])\n      }, [\n        _createElementVNode(\"span\", _hoisted_2, _toDisplayString(_unref(allChildCheckedModulesCount) + _unref(anyChildCheckedModulesCount) +\n                    _unref(checkedRootLevelModelsCount)), 1 /* TEXT */),\n        _createTextVNode(\" of \"),\n        _createElementVNode(\"span\", _hoisted_3, _toDisplayString(_unref(totalRootLevelCount)), 1 /* TEXT */),\n        _createTextVNode(\" items selected \")\n      ], 2 /* CLASS */)\n    ]),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass(['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']),\n      id: \"module-container-div\"\n    }, null, 2 /* CLASS */),\n    (props.screenType == 'Deploy')\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n          _hoisted_5,\n          _createVNode(CustomSelect, {\n            options: publishTargets.value,\n            onInput: onTargetSelect,\n            selectedOption: selectedTarget.value,\n            default: selectedTarget.value,\n            disabledOptions: disabledOptions.value,\n            selectedClass: \"selected-environment\",\n            placeholder: \"Select the publish environment of your application\",\n            class: \"select-environment\"\n          }, null, 8 /* PROPS */, [\"options\", \"selectedOption\", \"default\", \"disabledOptions\"])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    _createCommentVNode(\"         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> \"),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass(['footer', props.screenType == 'Deploy' ? 'deploy' : 'export'])\n    }, [\n      _createElementVNode(\"div\", {\n        class: _normalizeClass(['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']),\n        onClick: close\n      }, \"Cancel\", 2 /* CLASS */),\n      (props.screenType == 'Export')\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 0,\n            class: _normalizeClass((_unref(saveButtonDisable) ? ' button-disable' : '')),\n            onClick: _cache[1] || (_cache[1] = ($event: any) => (!_unref(saveButtonDisable) && save()))\n          }, [\n            _hoisted_6,\n            (!_unref(isThereVersion))\n              ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \"There are no items ready to publish. At least one of your items must be ready to publish.\"))\n              : (!_unref(isStartScreenOK))\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_8, \"You need to include your start screen.\"))\n                : (!_unref(isAllDependenciesOK))\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_9, _toDisplayString(dependencyErrorStr.value), 1 /* TEXT */))\n                  : _createCommentVNode(\"v-if\", true)\n          ], 2 /* CLASS */))\n        : _createCommentVNode(\"v-if\", true),\n      (props.screenType == 'Deploy')\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 1,\n            class: _normalizeClass([(_unref(saveButtonDisable) ? ' button-disable' : '')]),\n            onClick: _cache[2] || (_cache[2] = ($event: any) => (!_unref(saveButtonDisable) && save()))\n          }, [\n            _hoisted_10,\n            (!_unref(isStartScreenOK))\n              ? (_openBlock(), _createElementBlock(\"span\", _hoisted_11, \"You need to include your start screen.\"))\n              : (!selectedTarget.value)\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_12, \"You need to select a publish environment.\"))\n                : (!_unref(isThereVersion))\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_13, \"There are no items ready to publish. At least one of your items must be ready to publish.\"))\n                  : (!_unref(isAllDependenciesOK))\n                    ? (_openBlock(), _createElementBlock(\"span\", _hoisted_14, _toDisplayString(dependencyErrorStr.value), 1 /* TEXT */))\n                    : _createCommentVNode(\"v-if\", true)\n          ], 2 /* CLASS */))\n        : _createCommentVNode(\"v-if\", true)\n    ], 2 /* CLASS */)\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=0&id=5bfad562&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=0&id=5bfad562&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=1&id=5bfad562&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=1&id=5bfad562&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./publishDialog.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./publishDialog.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./publishDialog.vue?vue&type=style&index=0&id=5bfad562&scoped=true&lang=css\"\nimport \"./publishDialog.vue?vue&type=style&index=1&id=5bfad562&lang=css\"\n\nimport exportComponent from \"/home/runner/work/studio/studio/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5bfad562\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","purify","str","replace","toLowerCase","getPlateauEnvironmentName","envPrefix","appName","Error","endsWith","PlateauHelper","getQuiPackageNameFromAppName","getApplicationUINameFromQuiPkg","quiPackageName","getApplicationHostNamePrefix","getServiceNameFromModel","modelName","PathHelper","static","path1","path2","fullPath","substring","length","startsWith","typeSafety","EditorConsts","quick","modelKeys","self","flow","design","runtime","flowEntity","single","cssJsTsYaml","color","icon","jpegJpgPngSvgGif","formatIcon","moduleVisual","modelVisuals","qjson","additionals","qjsonType","css","js","ts","yaml","entityDesigner","bpmn","process","namedComponent","step","jpeg","jpg","png","svg","gif","woff","woff2","ttf","otf","lottie","appSettings","json","ModelContants","modelType","modelAdditionals","retVal","DEPENDED_IMAGE_KEYS","APP_ITEM_CONTENT_TYPES","UISettingsType","alert","pipeline","loading","settings","localProxy","contSvc","compList","globalLocalization","assetList","IApplicationUseCase","Symbol","for","IgnoredOrgGroupIds","IBackofficeUseCase","ICreateExportJob","IDeployJobs","IFileDisplayerUseCase","IJobUtils","IListMultiModelVersions","IListMultiModuleVersions","IPackJobs","_withScopeId","n","_hoisted_1","_hoisted_2","key","class","_hoisted_5","_","style","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","__name","props","handleItemCheckEvent","type","Function","startScreen","versionDialog","handleCollapse","item","moduleVersionDialog","setup","__props","chevronClass","checked","calculateClass","value","collapsed","handleCheck","handleVersionDialog","imported","iconLeft","level","_ctx","_cache","children","onClick","cursor","left","top","fontSize","position","check","minus","allChildChecked","anyChildChecked","disabled","getModelVisualInfo","undefined","name","ID","usageType","$event","version","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","screenType","platformSelection","emits","emit","viewModel","IViewModel","viewModelManager","IViewModelManager","dialog","IDialog","executor","IUseCaseExecutor","deployJobsUseCase","qcloudApi","IQCloudApi","packJobsUseCase","jobUtils","backofficeUseCase","applicationUseCase","fileDisplayerUseCase","objectUseCase","IObjectUseCase","items","validations","selectedTarget","disabledOptions","publishTargets","modelHistories","importedModuleVersions","dependencyMap","dependencyErrorStr","currentApp","apps","find","app","studio","appId","async","execute","Promise","all","executeUseCase","then","res","map","Map","depMap","flatMapItems","objectType","owner","isModuleImported","moduleVersions","get","moduleVersion","relatedApplications","applicationID","importedVersion","importedModuleModel","filter","e","flatMap","relatedModelHistories","modelID","maxVersion","getItemMaxVersion","set","dependentModels","modelId","Array","historyItem","forEach","dependedTo","dependedBy","dependencies","depModelId","some","depId","initDependencies","settingsData","createAndAppendItem","newItem","uiSettingsID","CryptoHelper","uiSettingsModels","uiSettings","childData","parentId","handleParentCheckedStatus","uiAssetID","appAssetList","uiAssetList","asset","childAsset","treeItems","cloneFileExplorerTreeView","displayFilterer","hasChildren","converter","treeItem","externalData","tableData","getFullPath","split","ownerModule","child","parent","isImportedModule","isUnmodifiable","importedModulesModel","tableDatas","traverser","handleItems","syncPublishTargets","validate","allChildCheckedModulesCount","anyChildCheckedModulesCount","checkedRootLevelModelsCount","totalRootLevelCount","saveButtonDisable","web","validateStartScreen","validateDependencies","mainCheckboxState","isThereVersion","checkMaxVersionOfAllItems","isAllDependenciesOK","isStartScreenOK","result","modules","appLayerItems","isRootPage","f","findIndex","checkMap","mustBeCheckedMap","deps","dependedId","has","vals","firstItemID","keys","firstItemDeps","firstItemDepStr","findItem","join","size","newChild","createApp","mountEl","document","createElement","mount","parentEl","getElementById","appendChild","createDialogComp","versions","versionNumbers","v","parts","parseInt","sort","a","b","Math","floor","findMaxVersion","childIterate","display","checkAllDependents","recurseParent","dep","willCheckItem","isModelDepended","c","targets","user","selectedOrganization","actions","publish","Object","entries","cloudTargetMap","disabledOptionList","i","index","cause","checkedPublishTargets","list","optionName","traverseSelectedItems","status","modulesHasNotAnEDModel","checkAndSetDisabledCauses","sortedTargets","updateDependencyMap","newVersion","clickedNode","state","text","cb","showDialog","closable","title","width","maxHeight","overflow","modulesModel","close","save","initAsGroup","groupID","initPublishHistory","appID","isMultiStep","cloudProvider","platform","initHistory","exportItemMap","itemIdObj","prefix","path","createExportObject","tableItem","itemMap","isAppItem","ver","getItemType","modulePrefix","getFileFullname","ownerType","ownerName","addToExportItem","obj","mapTableItemToExportItem","tableItems","entityGenerationDomain","useSeperateModule","jobs","k","exportType","selectionData","layer","createPackJobs","packJob","isFlowBackend","applications","deployItems","createAzureDeployItems","createExportJob","packages","getExportJobsByGroupId","jobData","jobID","mainDir","getDeployableArchiveRoot","buildJobs","pack","package","zip","createBuildJobs","jobParam","deployConfig","configModelIDs","getProcessConfigList","enabled","startDeploymentJob","createDeployJob","createAppDeployJob","userMobileUsage","mobileUsage","appMobileUsage","mobile","isMobilePublished","updateUserMobileUsage","updateApplication","updateReason","deployItem","createDate","processConfigList","usingService","serviceName","moduleName","model","edModel","pureVal","azure","plateauGCP","includes","onTargetSelect","onInput","selectedOption","default","selectedClass","placeholder"],"sourceRoot":""}
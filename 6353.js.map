{"version":3,"file":"6353.js?ver=0.0.329_1721814560971","mappings":"8HAoBO,MAAMA,EAAiBC,OAAOC,IAAI,iB,mCCKlC,MAAMC,EAAwBF,OAAOC,IAAI,wB,mCChBzC,MAAME,EAA0BH,OAAOC,IAAI,0B,mCCF3C,MAAMG,EAA2BJ,OAAOC,IAAI,2B","sources":["webpack://qcloud_shell/./src/domain/infrastructure/IFormValidator.ts","webpack://qcloud_shell/./src/domain/useCase/IFileDisplayerUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModelVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModuleVersions.ts"],"sourcesContent":["export interface IFormValidatorOptions {\n    maxLength?: number;\n    minLength?: number;\n    minAndMaxLength?: { min: number; max: number; };\n    email?: boolean;\n    availableCharacters?: boolean;\n    nonSpaceCharacter?: boolean;\n    customRegex?: { regex: RegExp; message: string; };\n}\n\nexport interface IFormValidatorResponseItem {\n    key: keyof IFormValidatorOptions;\n    message: string;\n    isValid: boolean;\n}\n\nexport interface IFormValidator {\n    validate(value: string, options: IFormValidatorOptions): Array<IFormValidatorResponseItem>;\n}\n\nexport const IFormValidator = Symbol.for(\"IFormValidator\");","import { IApplication, IFolder, IModel, IModule } from \"../model/models\";\nimport { ITreeItem, ITreeView } from \"../presentation/ITreeView\";\nimport { IFEExternalData } from \"./IFileExplorer\";\n\nexport interface IDisplayItemsAdditional {\n    id: string;\n    name: string;\n    externalData: FileDisplayerExternalData;\n}\nexport type DisplayModelsCb = (item: FileDisplayerExternalData, hasChildren: boolean) => boolean;\nexport interface ICloneFileExplorerOptions {\n    displayFilterer?: DisplayModelsCb;\n    cb?: { select?: (item: ITreeItem<FileDisplayerExternalData>) => void };\n}\nexport interface IDisplayItemsOptions extends ICloneFileExplorerOptions {\n    additionalItems?: Array<IDisplayItemsAdditional>;\n    additionalRoot?: IDisplayItemsAdditional;\n}\n\nexport type FileDisplayerExternalData = IApplication | IFEExternalData;\n\nexport interface IFileDisplayerUseCase {\n    cloneFileExplorerTreeView(options: ICloneFileExplorerOptions): Array<ITreeItem<FileDisplayerExternalData>>;\n    createFileExplorerClone(domElement: HTMLElement, options: IDisplayItemsOptions): ITreeView<FileDisplayerExternalData>;\n}\nexport const IFileDisplayerUseCase = Symbol.for(\"IFileDisplayerUseCase\");","import { IModel, IModelHistoryInfo } from \"../model/models\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModelVersionsParam {\n    excludedTypes?: Array<IModel[\"modelType\"]>;\n }\nexport interface IListMultiModelVersions extends IUseCase<Map<string, Array<IModelHistoryInfo>>, IListMultiModelVersionsParam> {\n\n}\nexport const IListMultiModelVersions = Symbol.for(\"IListMultiModelVersions\");","import { IModuleVersion } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModuleVersionsParam { }\nexport interface IListMultiModuleVersions extends IUseCase<Map<string, Array<IModuleVersion>>, IListMultiModuleVersionsParam> {\n\n}\nexport const IListMultiModuleVersions = Symbol.for(\"IListMultiModuleVersions\");"],"names":["IFormValidator","Symbol","for","IFileDisplayerUseCase","IListMultiModelVersions","IListMultiModuleVersions"],"sourceRoot":""}
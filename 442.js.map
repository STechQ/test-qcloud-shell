{"version":3,"file":"442.js","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/newItem.vue?7715","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/newItem.vue?50a3","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/newItem.vue?2d34","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/newItem.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.createButtonDiv[data-v-65822c4f] {\\n    text-align: end;\\n    padding-top: 21px;\\n    height: 53px;\\n    border-top: 1px solid #E0E0E0;\\n    margin-top: 32px;\\n    margin-left: 20px;\\n    margin-right: 20px;\\n    margin-bottom: 16px;\\n}\\n.createButton[data-v-65822c4f] {\\n    background-color: #151233;\\n    color: white;\\n    border-radius: 4px;\\n    border: none;\\n    width: 74px;\\n    height: 32px;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 12px;\\n    font-family: 'ROBOTO';\\n    letter-spacing: 0.01px;\\n    opacity: 1;\\n}\\n.nameInput[data-v-65822c4f] {\\n    width: 100%;\\n    border: 1px solid #A1A1A1;\\n    border-radius: 4px;\\n    height: 40px;\\n    opacity: 1;\\n    outline: none;\\n}\\n[data-v-65822c4f]::placeholder {\\n    padding-left: 10px;\\n    padding-top: 5px;\\n    color: #A1A1A1;\\n    font-style: normal;\\n    font-family: \\\"ROBOTO\\\";\\n    letter-spacing: 0px;\\n    font-size: 14px;\\n    opacity: 1px;\\n}\\n.nameInputDiv[data-v-65822c4f] {\\n    padding-left: 20px;\\n    padding-right: 20px;\\n    padding-top: 18px;\\n}\\n.duplicateNoteDiv[data-v-65822c4f]{\\n    margin-left: 20px;\\n    margin-right: 20px;\\n    margin-top: 18px;\\n}\\n.labelValue[data-v-65822c4f] {\\n    color: #151233;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 14px;\\n    font-family: 'ROBOTO';\\n    letter-spacing: 0px;\\n    opacity: 1;\\n}\\n.duplicateText[data-v-65822c4f]{\\n    font-weight: bold;\\n       font-size: 14px;\\n    font-family: 'ROBOTO';\\n    letter-spacing: 0px;\\n    opacity: 1;\\n}\\n.choose-existing-process-flow-dropdown[data-v-65822c4f] {\\n    width: 511px;\\n    border: 1px solid #a1a1a1;\\n    border-radius: 4px;\\n    height: 40px;\\n    padding: 8px;\\n    font-size: 14px;\\n    font-family: \\\"Roboto\\\";\\n}\\n.choose-existing-process-flow-dropdown-label[data-v-65822c4f] {\\n    color: #151233;\\n    font-style: normal;\\n    font-weight: bold;\\n    font-size: 14px;\\n    letter-spacing: 0px;\\n    opacity: 1;\\n    font-family: \\\"Roboto\\\";\\n}\\n.requiredIcon[data-v-65822c4f] {\\n    color: #757575;\\n    font-size: 15px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/newItem.vue\"],\"names\":[],\"mappings\":\";AAkaA;IACI,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;IAC7B,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;AACvB;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,sBAAsB;IACtB,UAAU;AAEd;AAEA;IACI,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;IACZ,UAAU;IACV,aAAa;AAEjB;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,cAAc;IACd,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,eAAe;IACf,YAAY;AAChB;AAEA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;AACrB;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;AACpB;AAGA;IACI,cAAc;IACd,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,mBAAmB;IACnB,UAAU;AACd;AACA;IACI,iBAAiB;OACd,eAAe;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,UAAU;AACd;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,qBAAqB;AACzB;AACA;IACI,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf,mBAAmB;IACnB,UAAU;IACV,qBAAqB;AACzB;AAEA;IACI,cAAc;IACd,eAAe;AACnB\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\">\\nimport { computed, defineAsyncComponent, onMounted, ref } from 'vue'\\nimport { container } from '../../../../domain/core/diContainer';\\nimport { INewItemProps } from '../../../../domain/presentation/dialogs/INewItemProps';\\nimport { IDialog } from '../../../../domain/presentation/IDialog';\\nimport { ICreateModel, ICreateModelParam } from '../../../../domain/useCase/ICreateModel';\\nimport { ICreateModule } from '../../../../domain/useCase/ICreateModule';\\nimport { IUseCaseExecutor } from '../../../../domain/useCase/IUseCaseExecutor';\\nimport { IViewModel } from '../../../../domain/viewModel/IViewModel';\\n// import FileUpload from \\\"../FileUpload\\\";\\n// import UploadFile from \\\"../UploadFile.vue\\\"\\nimport { checkInputStartsWithLetter, checkInputLength } from '../../editors/processEditor/validation/validation';\\nimport { IStudio } from '../../../../domain/useCase/IStudio';\\nimport { IModel, IModelBodyObject, IModule } from '../../../../domain/model/models';\\nimport { IProcessEditorUtil } from '../../../../domain/useCase/IProcessEditorUtil';\\nimport { createError } from '../../../../domain/model/shellError';\\nimport IDEInput from \\\"../../components/application/IDEInput.vue\\\";\\nimport { IIDEInputDefinitions } from '../../../../domain/presentation/IIDEInputDefinitions';\\nimport { IObjectUseCase } from '../../../../domain/useCase/IObjectUseCase';\\ninterface INewItemPropsInline extends INewItemProps {\\n    parentId: string;\\n    parentName: string;\\n    parentType: \\\"folder\\\" | \\\"module\\\" | \\\"application\\\";\\n    createType: \\\"Screen\\\" | \\\"Process Diagram\\\" | \\\"Entity\\\" | \\\"Process Wizard\\\" | \\\"Module\\\";\\n    duplicateFrom?: IModel\\n}\\n\\ninterface IProcessFlow {\\n    type?: \\\"create-new-process-flow\\\" | \\\"choose-existing-process-flow\\\"\\n    newProcessFlowName?: string;\\n    selectedExistingBpmnFileID?: string;\\n    selectedExistingBpmnFileName: string;\\n    isNewProcessFlowNameValid: boolean;\\n};\\n\\nconst props = defineProps<INewItemPropsInline>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst studio = container.resolve<IStudio>(IStudio);\\nconst processEditorUtil = container.resolve<IProcessEditorUtil>(IProcessEditorUtil);\\nconst bpmnFiles = ref();\\nif (props.createType == \\\"Process Wizard\\\") {\\n    bpmnFiles.value = processEditorUtil.getModelsOfModule(viewModel.studio.items.find(item => item.ID == props.parentId) as IModule).bpmns\\n}\\nconst emit = defineEmits([\\\"close\\\"]);\\n\\n// module\\nconst isDescValid = ref<boolean>(true);\\n\\n// entity\\nconst isNameValid = ref<boolean>(false);\\n\\nconst validations = ref<Record<\\\"name\\\" | \\\"description\\\", IIDEInputDefinitions[\\\"validations\\\"]>>({\\n    name: { minAndMaxLength: { min: 3, max: 40 }, availableCharacters: true, nonSpaceCharacter: true },\\n    description: { minAndMaxLength: { min: 3, max: 100 }, availableCharacters: true, nonSpaceCharacter: false },\\n});\\n\\nconst isModule = ref(false);\\nconst isFolder = ref(false);\\nconst isModel = ref(false);\\nconst name = ref(\\\"\\\");\\nconst description = ref(\\\"\\\");\\n\\nconst isEntity = ref(false);\\nconst isScreen = ref(false);\\nconst isProcess = ref(false);\\nconst isProcessDiagram = ref(false);\\nconst isEmptyPage = ref(false);\\nconst isQuickComponent = ref(false);\\nconst isQuickTemplate = ref(false);\\nconst isImportFromFile = ref(false);\\nconst isGenerateFromEntity = ref(false);\\n\\nconst createButtonVisibility = ref(true);\\n\\nconst processFlow = ref({\\n    selectedExistingBpmnFileName: \\\"\\\",\\n    isNewProcessFlowNameValid: false,\\n} as IProcessFlow);\\n\\nlet entities = ['entity1', 'entity2'];\\nlet generateScreenTypes = ['List', 'Create'];\\nlet selectedEntity = '';\\nlet selectedGenerateScreenType = '';\\n\\nif (props.parentType === \\\"module\\\") {\\n    onTypeSelect('model');\\n}\\nonMounted(() => {\\n    switch (props.createType) {\\n        case \\\"Screen\\\": isModule.value = false; isEmptyPage.value = true; isModel.value = true; isScreen.value = true; isEntity.value = isProcessDiagram.value = isProcess.value = false; createButtonVisibility.value = true; isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; break;\\n        case \\\"Process Diagram\\\": isProcess.value = false, isProcessDiagram.value = true, isEntity.value = isScreen.value = false; createButtonVisibility.value = true; break;\\n        case \\\"Entity\\\": isEntity.value = true; isScreen.value = isProcessDiagram.value = isProcess.value = false; createButtonVisibility.value = true; break;\\n        case \\\"Process Wizard\\\": isProcess.value = true; isEntity.value = isProcessDiagram.value = isScreen.value = false; createButtonVisibility.value = true; break;\\n        case \\\"Module\\\": isModule.value = true; isFolder.value = isProcessDiagram.value = isModel.value = false; setAllSubRadiosFalse(); createButtonVisibility.value = true; break;\\n    }\\n\\n})\\n\\n\\nfunction create() {\\n    executor.execute(\\n        async () => {\\n            if (isModule.value) {\\n                await executor.executeUseCase<ICreateModule>(ICreateModule, {\\n                    name: name.value,\\n                    applicationID: props.parentId,\\n                    description: description.value\\n                });\\n                emit(\\\"close\\\");\\n            } else if (isFolder.value) {\\n                return;\\n            } else if (isModel.value) {\\n                let modelBody: Array<IModelBodyObject>;\\n                let createObject: ICreateModelParam;\\n                if (isEntity.value) {\\n                    modelBody = [{ key: \\\"entityDesigner\\\", model: \\\"\\\" }];\\n                    createObject = {\\n                        name: name.value,\\n                        parentObjectId: props.parentId,\\n                        modelBody,\\n                        modelType: \\\"entityDesigner\\\",\\n                        modelAdditionals: {},\\n                    }\\n                } else if (isEmptyPage.value) {\\n                    modelBody = [{ key: \\\"qjson\\\", model: \\\"\\\" }];\\n                    createObject = {\\n                        name: name.value,\\n                        parentObjectId: props.parentId,\\n                        modelBody,\\n                        modelType: \\\"qjson\\\",\\n                        modelAdditionals: { qjsonType: \\\"qjson\\\" },\\n                    }\\n                } else if (isQuickComponent.value) {\\n                    modelBody = [{ key: \\\"qjson\\\", model: \\\"\\\" }];\\n                    createObject = {\\n                        name: name.value,\\n                        parentObjectId: props.parentId,\\n                        modelBody,\\n                        modelType: \\\"qjson\\\",\\n                        modelAdditionals: { qjsonType: \\\"quickComponent\\\" },\\n                    };\\n                } else if (isQuickTemplate.value) {\\n                    modelBody = [{ key: \\\"qjson\\\", model: \\\"\\\" }];\\n                    createObject = {\\n                        name: name.value,\\n                        parentObjectId: props.parentId,\\n                        modelBody,\\n                        modelType: \\\"qjson\\\",\\n                        modelAdditionals: { qjsonType: \\\"template\\\" },\\n                    };\\n                } else if (isImportFromFile.value) {\\n                    console.log(\\\"isImportFromFile\\\");\\n                    return;\\n                } else if (isGenerateFromEntity.value) {\\n                    console.log(\\\"isGenerateFromEntity\\\");\\n                    return;\\n                } else if (isProcess.value) {\\n                    const model = processEditorUtil.getEmptyProcessWizardModel(props.parentName);\\n                    switch (processFlow.value.type) {\\n                        case \\\"create-new-process-flow\\\":\\n                            model.usingExistingBpmnFile = false;\\n                            model.selectedExistingBpmnFile.ID = \\\"\\\";\\n                            break;\\n                        case \\\"choose-existing-process-flow\\\":\\n                            model.usingExistingBpmnFile = true;\\n                            model.selectedExistingBpmnFile.ID = processFlow.value.selectedExistingBpmnFileID || \\\"\\\";\\n                            break;\\n                        default:\\n                            break;\\n                    }\\n                    createObject = {\\n                        name: name.value,\\n                        parentObjectId: props.parentId,\\n                        modelType: \\\"process\\\",\\n                        modelBody: [{ key: \\\"process\\\", model }],\\n                        modelAdditionals: {},\\n                    };\\n                }\\n                else if (isProcessDiagram.value) {\\n                    modelBody = [{ key: \\\"bpmn\\\", model: \\\"\\\" }];\\n                    createObject = {\\n                        name: name.value,\\n                        parentObjectId: props.parentId,\\n                        modelBody,\\n                        modelType: \\\"bpmn\\\",\\n                        modelAdditionals: {},\\n                    }\\n                }\\n                else { throw createError({ message: \\\"unexpected case\\\", type: \\\"technical\\\" }); }\\n                if (props.duplicateFrom) {\\n                    createObject.duplicateFrom = props.duplicateFrom;\\n                }\\n                const createdModel = await executor.executeUseCase<ICreateModel>(ICreateModel, createObject);\\n                await onAfterModelCreated(createdModel)\\n                emit(\\\"close\\\");\\n            }\\n        },\\n        { loading: true }\\n    );\\n}\\n\\nasync function onAfterModelCreated(createdModel: IModel) {\\n    await studio.checkout(createdModel)\\n    studio.openItem(createdModel);\\n}\\n// not: listHistories dialog componentı olacak. \\n// örnek modelİd = vgvrxgap-ahvp-igjc-h2ft-w33p9q41 asd.qjson\\n\\n// parentObjectId = objectId\\n// this.executor.executeUseCase<ICreateModel>(ICreateModel, { name: \\\"model1\\\", parentObjectId: createdParentObjectId!, modelType: \\\"qjson\\\", modelAdditionals: { qjsonType: \\\"qjson\\\" } });\\n\\nfunction setAllSubRadiosFalse() {\\n    isEntity.value = isScreen.value = false;\\n    isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = createButtonVisibility.value = false;\\n}\\n\\nfunction onTypeSelect(type: \\\"module\\\" | \\\"folder\\\" | \\\"model\\\" | \\\"entity\\\" | \\\"screen\\\" | \\\"process\\\" | \\\"emptyPage\\\" | \\\"quickComponent\\\" | \\\"quickTemplate\\\" | \\\"importFromFile\\\" | \\\"generateFromEntity\\\") {\\n    switch (type) {\\n        case \\\"module\\\": isModule.value = true; isFolder.value = isModel.value = false; setAllSubRadiosFalse(); createButtonVisibility.value = true; break;\\n        case \\\"folder\\\": isFolder.value = true; isModule.value = isModel.value = false; setAllSubRadiosFalse(); break;\\n        case \\\"model\\\": isModel.value = true; isModule.value = isFolder.value = false; setAllSubRadiosFalse(); break;\\n        case \\\"entity\\\": isEntity.value = true; isScreen.value = isProcess.value = false; createButtonVisibility.value = true; break;\\n        case \\\"screen\\\": isModule.value = false; isModel.value = true; isScreen.value = true; isEntity.value = isProcess.value = false; createButtonVisibility.value = false; break;\\n        case \\\"process\\\": isProcess.value = true; isEntity.value = isScreen.value = false; createButtonVisibility.value = true; break; // openProcessWizard(); emit(\\\"close\\\"); break;\\n        case \\\"emptyPage\\\": isEmptyPage.value = true; isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\\n        case \\\"quickComponent\\\": isQuickComponent.value = true; isEmptyPage.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\\n        case \\\"quickTemplate\\\": isQuickTemplate.value = true; isEmptyPage.value = isQuickComponent.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\\n        case \\\"importFromFile\\\": isImportFromFile.value = true; isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\\n        case \\\"generateFromEntity\\\": isGenerateFromEntity.value = true; isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = false; createButtonVisibility.value = true; break;\\n    }\\n}\\n\\nfunction upload(event: Event) {\\n    // file = event.target.files[0];\\n    // let formData = new FormData();\\n    // formData.append('file', file);\\n}\\n\\nfunction handleCreateNewProcessFlow() {\\n    switch (processFlow.value.type) {\\n        case \\\"create-new-process-flow\\\":\\n            break;\\n        case \\\"choose-existing-process-flow\\\":\\n            processFlow.value.isNewProcessFlowNameValid = false;\\n            processFlow.value.newProcessFlowName = \\\"\\\"\\n            break;\\n        default:\\n            break;\\n    }\\n}\\n\\nfunction setDescValue(desc: string) {\\n    description.value = desc\\n}\\n\\nfunction handleSelectedExistingBpmnFileID($event: any) {\\n    let selectedExistingBpmnFile = $event.target[$event.target.selectedIndex];\\n    processFlow.value.selectedExistingBpmnFileID = selectedExistingBpmnFile.id;\\n}\\n\\n\\n\\n// general validations methods \\nfunction setDescValidationStatus(isValid: boolean) {\\n    isDescValid.value = isValid\\n}\\nfunction setNameValue(value: string) {\\n    name.value = value\\n}\\n\\nfunction setNewProcessFlowNameValue(value: string) {\\n    processFlow.value.newProcessFlowName = value\\n}\\nfunction setNameValidationStatus(isValid: boolean) {\\n    isNameValid.value = isValid\\n}\\n\\nfunction setNewProcessFlowNameValidationStatus(isValid: boolean) {\\n    processFlow.value.isNewProcessFlowNameValid = isValid\\n}\\n</script> \\n \\n<template>\\n    <div>\\n\\n        <div>\\n\\n        </div>\\n\\n        <!-- New Module -->\\n\\n        <div class='nameInputDiv' v-if=\\\"isModule\\\">\\n            <div>\\n                <IDEInput :isRequired=\\\"true\\\" @getValue=\\\"setNameValue\\\" @validateStatus=\\\"setNameValidationStatus\\\"\\n                    :placeholder=\\\"`Give your ${props.createType} a name `\\\" :type=\\\"'text'\\\" info-text=\\\"Name\\\"\\n                    :validations=\\\"validations.name\\\" />\\n            </div>\\n            <div style='margin-top:15px'>\\n                <IDEInput :isRequired=\\\"false\\\" @getValue=\\\"setDescValue\\\" @validateStatus=\\\"setDescValidationStatus\\\"\\n                    :placeholder=\\\"'Description'\\\" :type=\\\"'textarea'\\\" info-text=\\\"Description\\\"\\n                    :validations=\\\"validations.description\\\" />\\n            </div>\\n        </div>\\n\\n        <div v-if=\\\"props.duplicateFrom\\\" class=\\\"duplicateNoteDiv\\\">\\n            <span class=\\\"labelValue\\\">* This new Item will be duplicated from <span class=\\\"duplicateText\\\">{{ props.duplicateFrom.name }} </span></span>\\n        </div>\\n        <!-- New Entity -->\\n        <div class='nameInputDiv' v-if=\\\"isEntity\\\">\\n            <div>\\n                <IDEInput :isRequired=\\\"true\\\" @getValue=\\\"setNameValue\\\" @validateStatus=\\\"setNameValidationStatus\\\"\\n                    :placeholder=\\\"`Give your ${props.createType} a name `\\\" :type=\\\"'text'\\\" info-text=\\\"Name\\\"\\n                    :validations=\\\"validations.name\\\" />\\n            </div>\\n        </div>\\n\\n        <!-- New Process -->\\n        <div class='nameInputDiv' v-if=\\\"isProcess\\\">\\n            <div>\\n                <IDEInput :isRequired=\\\"true\\\" @getValue=\\\"setNameValue\\\" @validateStatus=\\\"setNameValidationStatus\\\"\\n                    :placeholder=\\\"`Name`\\\" :type=\\\"'text'\\\" info-text=\\\"Process Name\\\"\\n                    :validations=\\\"validations.name\\\" />\\n            </div>\\n            <hr/>\\n            <div>\\n                <input\\n                    type=\\\"radio\\\"\\n                    id=\\\"create-new-process-flow\\\"\\n                    name=\\\"create-new-process-flow\\\"\\n                    value=\\\"create-new-process-flow\\\"\\n                    v-model=\\\"processFlow.type\\\"\\n                    @change=\\\"handleCreateNewProcessFlow\\\"\\n                />Create New Process Flow (BPMN)\\n\\n                <div v-if=\\\"processFlow.type == 'create-new-process-flow'\\\">\\n                    <IDEInput :isRequired=\\\"true\\\" @getValue=\\\"setNewProcessFlowNameValue\\\" @validateStatus=\\\"setNewProcessFlowNameValidationStatus\\\"\\n                        :placeholder=\\\"`Name`\\\" :type=\\\"'text'\\\" info-text=\\\"Process Flow Name\\\"\\n                        :validations=\\\"validations.name\\\" />\\n                </div>\\n\\n                <br />\\n\\n                <input\\n                    type=\\\"radio\\\"\\n                    id=\\\"create-new-process-flow\\\"\\n                    name=\\\"choose-existing-process-flow\\\"\\n                    value=\\\"choose-existing-process-flow\\\"\\n                    v-model=\\\"processFlow.type\\\"\\n                    @change=\\\"handleCreateNewProcessFlow\\\"\\n                />Choose Existing Process Flow (BPMN)\\n\\n                <div v-if=\\\"processFlow.type == 'choose-existing-process-flow'\\\">\\n                    <span class=\\\"choose-existing-process-flow-dropdown-label\\\">BPMN File</span><i v-if=\\\"processFlow.type == 'choose-existing-process-flow'\\\" class='requiredIcon'>*</i>\\n                        <select class=\\\"choose-existing-process-flow-dropdown\\\" name=\\\"choose-existing-process-flow\\\" id=\\\"choose-existing-process-flow\\\" v-model=\\\"processFlow.selectedExistingBpmnFileName\\\" @change=\\\"handleSelectedExistingBpmnFileID\\\" required>\\n                            <option value=\\\"\\\" disabled selected>Choose Existing Process Flow (BPMN)</option>\\n                            <option v-for=\\\"bpmnFile in bpmnFiles\\\" :id=\\\"bpmnFile.ID\\\">\\n                            {{ bpmnFile.name }}\\n                            </option>\\n                        </select>\\n                </div>\\n            </div>\\n            \\n        </div>\\n\\n        <div class='nameInputDiv' v-if=\\\"isProcessDiagram\\\">\\n            <div>\\n                <IDEInput :isRequired=\\\"true\\\" @getValue=\\\"setNameValue\\\" @validateStatus=\\\"setNameValidationStatus\\\"\\n                    :placeholder=\\\"`Give your ${props.createType} a name `\\\" :type=\\\"'text'\\\" info-text=\\\"Name\\\"\\n                    :validations=\\\"validations.name\\\" />\\n            </div>\\n        </div>\\n\\n        <div v-if=\\\"isScreen\\\">\\n            <div class='nameInputDiv' v-if=\\\"isEmptyPage || isQuickComponent || isQuickTemplate\\\">\\n                <IDEInput :isRequired=\\\"true\\\" @getValue=\\\"setNameValue\\\" @validateStatus=\\\"setNameValidationStatus\\\"\\n                    :placeholder=\\\"`Give your ${props.createType} a name `\\\" :type=\\\"'text'\\\" info-text=\\\"Name\\\"\\n                    :validations=\\\"validations.name\\\" />\\n            </div>\\n            <div class='nameInputDiv' v-if=\\\"isImportFromFile\\\">\\n                <span class=\\\"labelValue\\\">Name</span>\\n                <input class='nameInput' v-model=\\\"name\\\" :placeholder=\\\"`Give your ${props.createType} a name `\\\" />\\n                <div>\\n                    <input type=\\\"file\\\" @change=\\\"upload($event)\\\" accept=\\\".qjson\\\">\\n                </div>\\n            </div>\\n            <!--  isGenerateFromEntity \\n            <div v-if=\\\"isGenerateFromEntity\\\"> \\n                <input v-model=\\\"name\\\" placeholder=\\\"Screen Name\\\" />.qjson\\n                <select v-model=\\\"selectedEntity\\\">\\n                    <option v-for=\\\"entity in entities\\\" :value=\\\"entity\\\">\\n                        {{entity}}\\n                    </option>\\n                </select>\\n                <select v-model=\\\"selectedGenerateScreenType\\\">\\n                    <option v-for=\\\"generateScreenType in generateScreenTypes\\\" :value=\\\"generateScreenType\\\">\\n                        {{generateScreenType}}\\n                    </option>\\n                </select>\\n            </div> \\n            -->\\n        </div>\\n\\n        <!-- New Folder -->\\n        <div v-if=\\\"isFolder\\\"></div>\\n\\n\\n        <div class='createButtonDiv'>\\n            <button :style=\\\"{ opacity: (!(isNameValid && isDescValid)) ? '0.5' : '' }\\\" class='createButton'\\n                @click=\\\"create()\\\" :disabled=\\\"!(isNameValid && isDescValid)\\\">{{ props.duplicateFrom ?\\n                        'DUPLICATE' : 'CREATE'\\n                }}</button>\\n        </div>\\n    </div>\\n</template> \\n\\n<style scoped>\\n.createButtonDiv {\\n    text-align: end;\\n    padding-top: 21px;\\n    height: 53px;\\n    border-top: 1px solid #E0E0E0;\\n    margin-top: 32px;\\n    margin-left: 20px;\\n    margin-right: 20px;\\n    margin-bottom: 16px;\\n}\\n\\n.createButton {\\n    background-color: #151233;\\n    color: white;\\n    border-radius: 4px;\\n    border: none;\\n    width: 74px;\\n    height: 32px;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 12px;\\n    font-family: 'ROBOTO';\\n    letter-spacing: 0.01px;\\n    opacity: 1;\\n\\n}\\n\\n.nameInput {\\n    width: 100%;\\n    border: 1px solid #A1A1A1;\\n    border-radius: 4px;\\n    height: 40px;\\n    opacity: 1;\\n    outline: none;\\n\\n}\\n\\n::placeholder {\\n    padding-left: 10px;\\n    padding-top: 5px;\\n    color: #A1A1A1;\\n    font-style: normal;\\n    font-family: \\\"ROBOTO\\\";\\n    letter-spacing: 0px;\\n    font-size: 14px;\\n    opacity: 1px;\\n}\\n\\n.nameInputDiv {\\n    padding-left: 20px;\\n    padding-right: 20px;\\n    padding-top: 18px;\\n}\\n\\n.duplicateNoteDiv{\\n    margin-left: 20px;\\n    margin-right: 20px;\\n    margin-top: 18px;\\n}\\n\\n\\n.labelValue {\\n    color: #151233;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 14px;\\n    font-family: 'ROBOTO';\\n    letter-spacing: 0px;\\n    opacity: 1;\\n}\\n.duplicateText{\\n    font-weight: bold;\\n       font-size: 14px;\\n    font-family: 'ROBOTO';\\n    letter-spacing: 0px;\\n    opacity: 1;\\n}\\n\\n.choose-existing-process-flow-dropdown {\\n    width: 511px;\\n    border: 1px solid #a1a1a1;\\n    border-radius: 4px;\\n    height: 40px;\\n    padding: 8px;\\n    font-size: 14px;\\n    font-family: \\\"Roboto\\\";\\n}\\n.choose-existing-process-flow-dropdown-label {\\n    color: #151233;\\n    font-style: normal;\\n    font-weight: bold;\\n    font-size: 14px;\\n    letter-spacing: 0px;\\n    opacity: 1;\\n    font-family: \\\"Roboto\\\";\\n}\\n\\n.requiredIcon {\\n    color: #757575;\\n    font-size: 15px;\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, vModelRadio as _vModelRadio, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, vModelSelect as _vModelSelect, vModelText as _vModelText, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-65822c4f\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, null, -1 /* HOISTED */))\nconst _hoisted_2 = {\n  key: 0,\n  class: \"nameInputDiv\"\n}\nconst _hoisted_3 = { style: {\"margin-top\":\"15px\"} }\nconst _hoisted_4 = {\n  key: 1,\n  class: \"duplicateNoteDiv\"\n}\nconst _hoisted_5 = { class: \"labelValue\" }\nconst _hoisted_6 = /*#__PURE__*/_createTextVNode(\"* This new Item will be duplicated from \")\nconst _hoisted_7 = { class: \"duplicateText\" }\nconst _hoisted_8 = {\n  key: 2,\n  class: \"nameInputDiv\"\n}\nconst _hoisted_9 = {\n  key: 3,\n  class: \"nameInputDiv\"\n}\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */))\nconst _hoisted_11 = /*#__PURE__*/_createTextVNode(\"Create New Process Flow (BPMN) \")\nconst _hoisted_12 = { key: 0 }\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */))\nconst _hoisted_14 = /*#__PURE__*/_createTextVNode(\"Choose Existing Process Flow (BPMN) \")\nconst _hoisted_15 = { key: 1 }\nconst _hoisted_16 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"choose-existing-process-flow-dropdown-label\" }, \"BPMN File\", -1 /* HOISTED */))\nconst _hoisted_17 = {\n  key: 0,\n  class: \"requiredIcon\"\n}\nconst _hoisted_18 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n}, \"Choose Existing Process Flow (BPMN)\", -1 /* HOISTED */))\nconst _hoisted_19 = [\"id\"]\nconst _hoisted_20 = {\n  key: 4,\n  class: \"nameInputDiv\"\n}\nconst _hoisted_21 = { key: 5 }\nconst _hoisted_22 = {\n  key: 0,\n  class: \"nameInputDiv\"\n}\nconst _hoisted_23 = {\n  key: 1,\n  class: \"nameInputDiv\"\n}\nconst _hoisted_24 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"labelValue\" }, \"Name\", -1 /* HOISTED */))\nconst _hoisted_25 = [\"placeholder\"]\nconst _hoisted_26 = { key: 6 }\nconst _hoisted_27 = { class: \"createButtonDiv\" }\nconst _hoisted_28 = [\"disabled\"]\n\nimport { computed, defineAsyncComponent, onMounted, ref } from 'vue'\nimport { container } from '../../../../domain/core/diContainer';\nimport { INewItemProps } from '../../../../domain/presentation/dialogs/INewItemProps';\nimport { IDialog } from '../../../../domain/presentation/IDialog';\nimport { ICreateModel, ICreateModelParam } from '../../../../domain/useCase/ICreateModel';\nimport { ICreateModule } from '../../../../domain/useCase/ICreateModule';\nimport { IUseCaseExecutor } from '../../../../domain/useCase/IUseCaseExecutor';\nimport { IViewModel } from '../../../../domain/viewModel/IViewModel';\n// import FileUpload from \"../FileUpload\";\n// import UploadFile from \"../UploadFile.vue\"\nimport { checkInputStartsWithLetter, checkInputLength } from '../../editors/processEditor/validation/validation';\nimport { IStudio } from '../../../../domain/useCase/IStudio';\nimport { IModel, IModelBodyObject, IModule } from '../../../../domain/model/models';\nimport { IProcessEditorUtil } from '../../../../domain/useCase/IProcessEditorUtil';\nimport { createError } from '../../../../domain/model/shellError';\nimport IDEInput from \"../../components/application/IDEInput.vue\";\nimport { IIDEInputDefinitions } from '../../../../domain/presentation/IIDEInputDefinitions';\nimport { IObjectUseCase } from '../../../../domain/useCase/IObjectUseCase';\ninterface INewItemPropsInline extends INewItemProps {\n    parentId: string;\n    parentName: string;\n    parentType: \"folder\" | \"module\" | \"application\";\n    createType: \"Screen\" | \"Process Diagram\" | \"Entity\" | \"Process Wizard\" | \"Module\";\n    duplicateFrom?: IModel\n}\n\ninterface IProcessFlow {\n    type?: \"create-new-process-flow\" | \"choose-existing-process-flow\"\n    newProcessFlowName?: string;\n    selectedExistingBpmnFileID?: string;\n    selectedExistingBpmnFileName: string;\n    isNewProcessFlowNameValid: boolean;\n}\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'newItem',\n  props: {\n    parentId: null,\n    parentName: null,\n    parentType: null,\n    createType: null,\n    duplicateFrom: null\n  },\n  emits: [\"close\"],\n  setup(__props: any, { emit }) {\n\nconst props = __props as {\n    parentId: string;\n    parentName: string;\n    parentType: \"folder\" | \"module\" | \"application\";\n    createType: \"Screen\" | \"Process Diagram\" | \"Entity\" | \"Process Wizard\" | \"Module\";\n    duplicateFrom?: IModel\n}\n\n;\n\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst studio = container.resolve<IStudio>(IStudio);\nconst processEditorUtil = container.resolve<IProcessEditorUtil>(IProcessEditorUtil);\nconst bpmnFiles = ref();\nif (props.createType == \"Process Wizard\") {\n    bpmnFiles.value = processEditorUtil.getModelsOfModule(viewModel.studio.items.find(item => item.ID == props.parentId) as IModule).bpmns\n}\n\n\n// module\nconst isDescValid = ref<boolean>(true);\n\n// entity\nconst isNameValid = ref<boolean>(false);\n\nconst validations = ref<Record<\"name\" | \"description\", IIDEInputDefinitions[\"validations\"]>>({\n    name: { minAndMaxLength: { min: 3, max: 40 }, availableCharacters: true, nonSpaceCharacter: true },\n    description: { minAndMaxLength: { min: 3, max: 100 }, availableCharacters: true, nonSpaceCharacter: false },\n});\n\nconst isModule = ref(false);\nconst isFolder = ref(false);\nconst isModel = ref(false);\nconst name = ref(\"\");\nconst description = ref(\"\");\n\nconst isEntity = ref(false);\nconst isScreen = ref(false);\nconst isProcess = ref(false);\nconst isProcessDiagram = ref(false);\nconst isEmptyPage = ref(false);\nconst isQuickComponent = ref(false);\nconst isQuickTemplate = ref(false);\nconst isImportFromFile = ref(false);\nconst isGenerateFromEntity = ref(false);\n\nconst createButtonVisibility = ref(true);\n\nconst processFlow = ref({\n    selectedExistingBpmnFileName: \"\",\n    isNewProcessFlowNameValid: false,\n} as IProcessFlow);\n\nlet entities = ['entity1', 'entity2'];\nlet generateScreenTypes = ['List', 'Create'];\nlet selectedEntity = '';\nlet selectedGenerateScreenType = '';\n\nif (props.parentType === \"module\") {\n    onTypeSelect('model');\n}\nonMounted(() => {\n    switch (props.createType) {\n        case \"Screen\": isModule.value = false; isEmptyPage.value = true; isModel.value = true; isScreen.value = true; isEntity.value = isProcessDiagram.value = isProcess.value = false; createButtonVisibility.value = true; isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; break;\n        case \"Process Diagram\": isProcess.value = false, isProcessDiagram.value = true, isEntity.value = isScreen.value = false; createButtonVisibility.value = true; break;\n        case \"Entity\": isEntity.value = true; isScreen.value = isProcessDiagram.value = isProcess.value = false; createButtonVisibility.value = true; break;\n        case \"Process Wizard\": isProcess.value = true; isEntity.value = isProcessDiagram.value = isScreen.value = false; createButtonVisibility.value = true; break;\n        case \"Module\": isModule.value = true; isFolder.value = isProcessDiagram.value = isModel.value = false; setAllSubRadiosFalse(); createButtonVisibility.value = true; break;\n    }\n\n})\n\n\nfunction create() {\n    executor.execute(\n        async () => {\n            if (isModule.value) {\n                await executor.executeUseCase<ICreateModule>(ICreateModule, {\n                    name: name.value,\n                    applicationID: props.parentId,\n                    description: description.value\n                });\n                emit(\"close\");\n            } else if (isFolder.value) {\n                return;\n            } else if (isModel.value) {\n                let modelBody: Array<IModelBodyObject>;\n                let createObject: ICreateModelParam;\n                if (isEntity.value) {\n                    modelBody = [{ key: \"entityDesigner\", model: \"\" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: \"entityDesigner\",\n                        modelAdditionals: {},\n                    }\n                } else if (isEmptyPage.value) {\n                    modelBody = [{ key: \"qjson\", model: \"\" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: \"qjson\",\n                        modelAdditionals: { qjsonType: \"qjson\" },\n                    }\n                } else if (isQuickComponent.value) {\n                    modelBody = [{ key: \"qjson\", model: \"\" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: \"qjson\",\n                        modelAdditionals: { qjsonType: \"quickComponent\" },\n                    };\n                } else if (isQuickTemplate.value) {\n                    modelBody = [{ key: \"qjson\", model: \"\" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: \"qjson\",\n                        modelAdditionals: { qjsonType: \"template\" },\n                    };\n                } else if (isImportFromFile.value) {\n                    console.log(\"isImportFromFile\");\n                    return;\n                } else if (isGenerateFromEntity.value) {\n                    console.log(\"isGenerateFromEntity\");\n                    return;\n                } else if (isProcess.value) {\n                    const model = processEditorUtil.getEmptyProcessWizardModel(props.parentName);\n                    switch (processFlow.value.type) {\n                        case \"create-new-process-flow\":\n                            model.usingExistingBpmnFile = false;\n                            model.selectedExistingBpmnFile.ID = \"\";\n                            break;\n                        case \"choose-existing-process-flow\":\n                            model.usingExistingBpmnFile = true;\n                            model.selectedExistingBpmnFile.ID = processFlow.value.selectedExistingBpmnFileID || \"\";\n                            break;\n                        default:\n                            break;\n                    }\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelType: \"process\",\n                        modelBody: [{ key: \"process\", model }],\n                        modelAdditionals: {},\n                    };\n                }\n                else if (isProcessDiagram.value) {\n                    modelBody = [{ key: \"bpmn\", model: \"\" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: \"bpmn\",\n                        modelAdditionals: {},\n                    }\n                }\n                else { throw createError({ message: \"unexpected case\", type: \"technical\" }); }\n                if (props.duplicateFrom) {\n                    createObject.duplicateFrom = props.duplicateFrom;\n                }\n                const createdModel = await executor.executeUseCase<ICreateModel>(ICreateModel, createObject);\n                await onAfterModelCreated(createdModel)\n                emit(\"close\");\n            }\n        },\n        { loading: true }\n    );\n}\n\nasync function onAfterModelCreated(createdModel: IModel) {\n    await studio.checkout(createdModel)\n    studio.openItem(createdModel);\n}\n// not: listHistories dialog componentı olacak. \n// örnek modelİd = vgvrxgap-ahvp-igjc-h2ft-w33p9q41 asd.qjson\n\n// parentObjectId = objectId\n// this.executor.executeUseCase<ICreateModel>(ICreateModel, { name: \"model1\", parentObjectId: createdParentObjectId!, modelType: \"qjson\", modelAdditionals: { qjsonType: \"qjson\" } });\n\nfunction setAllSubRadiosFalse() {\n    isEntity.value = isScreen.value = false;\n    isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = createButtonVisibility.value = false;\n}\n\nfunction onTypeSelect(type: \"module\" | \"folder\" | \"model\" | \"entity\" | \"screen\" | \"process\" | \"emptyPage\" | \"quickComponent\" | \"quickTemplate\" | \"importFromFile\" | \"generateFromEntity\") {\n    switch (type) {\n        case \"module\": isModule.value = true; isFolder.value = isModel.value = false; setAllSubRadiosFalse(); createButtonVisibility.value = true; break;\n        case \"folder\": isFolder.value = true; isModule.value = isModel.value = false; setAllSubRadiosFalse(); break;\n        case \"model\": isModel.value = true; isModule.value = isFolder.value = false; setAllSubRadiosFalse(); break;\n        case \"entity\": isEntity.value = true; isScreen.value = isProcess.value = false; createButtonVisibility.value = true; break;\n        case \"screen\": isModule.value = false; isModel.value = true; isScreen.value = true; isEntity.value = isProcess.value = false; createButtonVisibility.value = false; break;\n        case \"process\": isProcess.value = true; isEntity.value = isScreen.value = false; createButtonVisibility.value = true; break; // openProcessWizard(); emit(\"close\"); break;\n        case \"emptyPage\": isEmptyPage.value = true; isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\n        case \"quickComponent\": isQuickComponent.value = true; isEmptyPage.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\n        case \"quickTemplate\": isQuickTemplate.value = true; isEmptyPage.value = isQuickComponent.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\n        case \"importFromFile\": isImportFromFile.value = true; isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\n        case \"generateFromEntity\": isGenerateFromEntity.value = true; isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = false; createButtonVisibility.value = true; break;\n    }\n}\n\nfunction upload(event: Event) {\n    // file = event.target.files[0];\n    // let formData = new FormData();\n    // formData.append('file', file);\n}\n\nfunction handleCreateNewProcessFlow() {\n    switch (processFlow.value.type) {\n        case \"create-new-process-flow\":\n            break;\n        case \"choose-existing-process-flow\":\n            processFlow.value.isNewProcessFlowNameValid = false;\n            processFlow.value.newProcessFlowName = \"\"\n            break;\n        default:\n            break;\n    }\n}\n\nfunction setDescValue(desc: string) {\n    description.value = desc\n}\n\nfunction handleSelectedExistingBpmnFileID($event: any) {\n    let selectedExistingBpmnFile = $event.target[$event.target.selectedIndex];\n    processFlow.value.selectedExistingBpmnFileID = selectedExistingBpmnFile.id;\n}\n\n\n\n// general validations methods \nfunction setDescValidationStatus(isValid: boolean) {\n    isDescValid.value = isValid\n}\nfunction setNameValue(value: string) {\n    name.value = value\n}\n\nfunction setNewProcessFlowNameValue(value: string) {\n    processFlow.value.newProcessFlowName = value\n}\nfunction setNameValidationStatus(isValid: boolean) {\n    isNameValid.value = isValid\n}\n\nfunction setNewProcessFlowNameValidationStatus(isValid: boolean) {\n    processFlow.value.isNewProcessFlowNameValid = isValid\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _hoisted_1,\n    _createCommentVNode(\" New Module \"),\n    (isModule.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n          _createElementVNode(\"div\", null, [\n            _createVNode(IDEInput, {\n              isRequired: true,\n              onGetValue: setNameValue,\n              onValidateStatus: setNameValidationStatus,\n              placeholder: `Give your ${props.createType} a name `,\n              type: 'text',\n              \"info-text\": \"Name\",\n              validations: validations.value.name\n            }, null, 8 /* PROPS */, [\"placeholder\", \"validations\"])\n          ]),\n          _createElementVNode(\"div\", _hoisted_3, [\n            _createVNode(IDEInput, {\n              isRequired: false,\n              onGetValue: setDescValue,\n              onValidateStatus: setDescValidationStatus,\n              placeholder: 'Description',\n              type: 'textarea',\n              \"info-text\": \"Description\",\n              validations: validations.value.description\n            }, null, 8 /* PROPS */, [\"validations\"])\n          ])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    (props.duplicateFrom)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n          _createElementVNode(\"span\", _hoisted_5, [\n            _hoisted_6,\n            _createElementVNode(\"span\", _hoisted_7, _toDisplayString(props.duplicateFrom.name), 1 /* TEXT */)\n          ])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    _createCommentVNode(\" New Entity \"),\n    (isEntity.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [\n          _createElementVNode(\"div\", null, [\n            _createVNode(IDEInput, {\n              isRequired: true,\n              onGetValue: setNameValue,\n              onValidateStatus: setNameValidationStatus,\n              placeholder: `Give your ${props.createType} a name `,\n              type: 'text',\n              \"info-text\": \"Name\",\n              validations: validations.value.name\n            }, null, 8 /* PROPS */, [\"placeholder\", \"validations\"])\n          ])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    _createCommentVNode(\" New Process \"),\n    (isProcess.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [\n          _createElementVNode(\"div\", null, [\n            _createVNode(IDEInput, {\n              isRequired: true,\n              onGetValue: setNameValue,\n              onValidateStatus: setNameValidationStatus,\n              placeholder: `Name`,\n              type: 'text',\n              \"info-text\": \"Process Name\",\n              validations: validations.value.name\n            }, null, 8 /* PROPS */, [\"validations\"])\n          ]),\n          _hoisted_10,\n          _createElementVNode(\"div\", null, [\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"radio\",\n              id: \"create-new-process-flow\",\n              name: \"create-new-process-flow\",\n              value: \"create-new-process-flow\",\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((processFlow.value.type) = $event)),\n              onChange: handleCreateNewProcessFlow\n            }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [\n              [_vModelRadio, processFlow.value.type]\n            ]),\n            _hoisted_11,\n            (processFlow.value.type == 'create-new-process-flow')\n              ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [\n                  _createVNode(IDEInput, {\n                    isRequired: true,\n                    onGetValue: setNewProcessFlowNameValue,\n                    onValidateStatus: setNewProcessFlowNameValidationStatus,\n                    placeholder: `Name`,\n                    type: 'text',\n                    \"info-text\": \"Process Flow Name\",\n                    validations: validations.value.name\n                  }, null, 8 /* PROPS */, [\"validations\"])\n                ]))\n              : _createCommentVNode(\"v-if\", true),\n            _hoisted_13,\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"radio\",\n              id: \"create-new-process-flow\",\n              name: \"choose-existing-process-flow\",\n              value: \"choose-existing-process-flow\",\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((processFlow.value.type) = $event)),\n              onChange: handleCreateNewProcessFlow\n            }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [\n              [_vModelRadio, processFlow.value.type]\n            ]),\n            _hoisted_14,\n            (processFlow.value.type == 'choose-existing-process-flow')\n              ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [\n                  _hoisted_16,\n                  (processFlow.value.type == 'choose-existing-process-flow')\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_17, \"*\"))\n                    : _createCommentVNode(\"v-if\", true),\n                  _withDirectives(_createElementVNode(\"select\", {\n                    class: \"choose-existing-process-flow-dropdown\",\n                    name: \"choose-existing-process-flow\",\n                    id: \"choose-existing-process-flow\",\n                    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((processFlow.value.selectedExistingBpmnFileName) = $event)),\n                    onChange: handleSelectedExistingBpmnFileID,\n                    required: \"\"\n                  }, [\n                    _hoisted_18,\n                    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(bpmnFiles.value, (bpmnFile) => {\n                      return (_openBlock(), _createElementBlock(\"option\", {\n                        id: bpmnFile.ID\n                      }, _toDisplayString(bpmnFile.name), 9 /* TEXT, PROPS */, _hoisted_19))\n                    }), 256 /* UNKEYED_FRAGMENT */))\n                  ], 544 /* HYDRATE_EVENTS, NEED_PATCH */), [\n                    [_vModelSelect, processFlow.value.selectedExistingBpmnFileName]\n                  ])\n                ]))\n              : _createCommentVNode(\"v-if\", true)\n          ])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    (isProcessDiagram.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [\n          _createElementVNode(\"div\", null, [\n            _createVNode(IDEInput, {\n              isRequired: true,\n              onGetValue: setNameValue,\n              onValidateStatus: setNameValidationStatus,\n              placeholder: `Give your ${props.createType} a name `,\n              type: 'text',\n              \"info-text\": \"Name\",\n              validations: validations.value.name\n            }, null, 8 /* PROPS */, [\"placeholder\", \"validations\"])\n          ])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    (isScreen.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [\n          (isEmptyPage.value || isQuickComponent.value || isQuickTemplate.value)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [\n                _createVNode(IDEInput, {\n                  isRequired: true,\n                  onGetValue: setNameValue,\n                  onValidateStatus: setNameValidationStatus,\n                  placeholder: `Give your ${props.createType} a name `,\n                  type: 'text',\n                  \"info-text\": \"Name\",\n                  validations: validations.value.name\n                }, null, 8 /* PROPS */, [\"placeholder\", \"validations\"])\n              ]))\n            : _createCommentVNode(\"v-if\", true),\n          (isImportFromFile.value)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [\n                _hoisted_24,\n                _withDirectives(_createElementVNode(\"input\", {\n                  class: \"nameInput\",\n                  \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((name).value = $event)),\n                  placeholder: `Give your ${props.createType} a name `\n                }, null, 8 /* PROPS */, _hoisted_25), [\n                  [_vModelText, name.value]\n                ]),\n                _createElementVNode(\"div\", null, [\n                  _createElementVNode(\"input\", {\n                    type: \"file\",\n                    onChange: _cache[4] || (_cache[4] = ($event: any) => (upload($event))),\n                    accept: \".qjson\"\n                  }, null, 32 /* HYDRATE_EVENTS */)\n                ])\n              ]))\n            : _createCommentVNode(\"v-if\", true),\n          _createCommentVNode(\"  isGenerateFromEntity \\n            <div v-if=\\\"isGenerateFromEntity\\\"> \\n                <input v-model=\\\"name\\\" placeholder=\\\"Screen Name\\\" />.qjson\\n                <select v-model=\\\"selectedEntity\\\">\\n                    <option v-for=\\\"entity in entities\\\" :value=\\\"entity\\\">\\n                        {{entity}}\\n                    </option>\\n                </select>\\n                <select v-model=\\\"selectedGenerateScreenType\\\">\\n                    <option v-for=\\\"generateScreenType in generateScreenTypes\\\" :value=\\\"generateScreenType\\\">\\n                        {{generateScreenType}}\\n                    </option>\\n                </select>\\n            </div> \\n            \")\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    _createCommentVNode(\" New Folder \"),\n    (isFolder.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26))\n      : _createCommentVNode(\"v-if\", true),\n    _createElementVNode(\"div\", _hoisted_27, [\n      _createElementVNode(\"button\", {\n        style: _normalizeStyle({ opacity: (!(isNameValid.value && isDescValid.value)) ? '0.5' : '' }),\n        class: \"createButton\",\n        onClick: _cache[5] || (_cache[5] = ($event: any) => (create())),\n        disabled: !(isNameValid.value && isDescValid.value)\n      }, _toDisplayString(props.duplicateFrom ?\n                        'DUPLICATE' : 'CREATE'), 13 /* TEXT, STYLE, PROPS */, _hoisted_28)\n    ])\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./newItem.vue?vue&type=style&index=0&id=65822c4f&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./newItem.vue?vue&type=style&index=0&id=65822c4f&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./newItem.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./newItem.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./newItem.vue?vue&type=style&index=0&id=65822c4f&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/QCloud-Shell/QCloud-Shell/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-65822c4f\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","_withScopeId","n","_hoisted_1","_","_hoisted_2","key","class","_hoisted_3","style","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","value","disabled","selected","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","__name","props","parentId","parentName","parentType","createType","duplicateFrom","emits","setup","__props","emit","viewModel","IViewModel","executor","IUseCaseExecutor","studio","IDialog","IStudio","processEditorUtil","IProcessEditorUtil","bpmnFiles","getModelsOfModule","items","find","item","ID","bpmns","isDescValid","isNameValid","validations","name","minAndMaxLength","min","max","availableCharacters","nonSpaceCharacter","description","isModule","isFolder","isModel","isEntity","isScreen","isProcess","isProcessDiagram","isEmptyPage","isQuickComponent","isQuickTemplate","isImportFromFile","isGenerateFromEntity","createButtonVisibility","processFlow","selectedExistingBpmnFileName","isNewProcessFlowNameValid","setAllSubRadiosFalse","handleCreateNewProcessFlow","type","newProcessFlowName","setDescValue","desc","handleSelectedExistingBpmnFileID","$event","selectedExistingBpmnFile","target","selectedIndex","selectedExistingBpmnFileID","setDescValidationStatus","isValid","setNameValue","setNewProcessFlowNameValue","setNameValidationStatus","setNewProcessFlowNameValidationStatus","_ctx","_cache","IDEInput","isRequired","onGetValue","onValidateStatus","placeholder","onChange","required","bpmnFile","accept","opacity","onClick","execute","async","executeUseCase","ICreateModule","applicationID","modelBody","createObject","model","parentObjectId","modelType","modelAdditionals","qjsonType","console","log","getEmptyProcessWizardModel","usingExistingBpmnFile","message","createdModel","ICreateModel","checkout","openItem","onAfterModelCreated","loading","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement"],"sourceRoot":""}
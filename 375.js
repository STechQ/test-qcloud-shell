"use strict";(self.webpackChunkqcloud_shell=self.webpackChunkqcloud_shell||[]).push([[375],{7767:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(1864),i=t.n(a),l=t(352),o=t.n(l)()(i());o.push([e.id,"\n.createButtonDiv[data-v-44b85742] {\n    text-align: end;\n    padding-top: 21px;\n    height: 53px;\n    border-top: 1px solid #E0E0E0;\n    margin-top: 32px;\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-bottom: 16px;\n}\n.createButton[data-v-44b85742] {\n    background-color: #151233;\n    color: white;\n    border-radius: 4px;\n    border: none;\n    width: 74px;\n    height: 32px;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    font-family: 'ROBOTO';\n    letter-spacing: 0.01px;\n    opacity: 1;\n}\n.nameInput[data-v-44b85742] {\n    width: 100%;\n    border: 1px solid #A1A1A1;\n    border-radius: 4px;\n    height: 40px;\n    opacity: 1;\n    outline: none;\n}\n[data-v-44b85742]::placeholder {\n    padding-left: 10px;\n    padding-top: 5px;\n    color: #A1A1A1;\n    font-style: normal;\n    font-family: \"ROBOTO\";\n    letter-spacing: 0px;\n    font-size: 14px;\n    opacity: 1px;\n}\n.nameInputDiv[data-v-44b85742] {\n    padding-left: 20px;\n    padding-right: 20px;\n    padding-top: 18px;\n}\n.duplicateNoteDiv[data-v-44b85742]{\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-top: 18px;\n}\n.labelValue[data-v-44b85742] {\n    color: #151233;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    font-family: 'ROBOTO';\n    letter-spacing: 0px;\n    opacity: 1;\n}\n.duplicateText[data-v-44b85742]{\n    font-weight: bold;\n       font-size: 14px;\n    font-family: 'ROBOTO';\n    letter-spacing: 0px;\n    opacity: 1;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/newItem.vue"],names:[],mappings:";AA0UA;IACI,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;IAC7B,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;AACvB;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,sBAAsB;IACtB,UAAU;AAEd;AAEA;IACI,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;IACZ,UAAU;IACV,aAAa;AAEjB;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,cAAc;IACd,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,eAAe;IACf,YAAY;AAChB;AAEA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;AACrB;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;AACpB;AAGA;IACI,cAAc;IACd,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,mBAAmB;IACnB,UAAU;AACd;AACA;IACI,iBAAiB;OACd,eAAe;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,UAAU;AACd",sourcesContent:['<script setup lang="ts">\nimport { computed, defineAsyncComponent, onMounted, ref } from \'vue\'\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { INewItemProps } from \'../../../../domain/presentation/dialogs/INewItemProps\';\nimport { IDialog } from \'../../../../domain/presentation/IDialog\';\nimport { ICreateModel, ICreateModelParam } from \'../../../../domain/useCase/ICreateModel\';\nimport { ICreateModule } from \'../../../../domain/useCase/ICreateModule\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\n// import FileUpload from "../FileUpload";\n// import UploadFile from "../UploadFile.vue"\nimport { checkInputStartsWithLetter, checkInputLength } from \'../../editors/processEditor/validation/validation\';\nimport { IStudio } from \'../../../../domain/useCase/IStudio\';\nimport { IModel, IModelBodyObject } from \'../../../../domain/model/models\';\nimport { IProcessEditorUtil } from \'../../../../domain/useCase/IProcessEditorUtil\';\nimport { createError } from \'../../../../domain/model/shellError\';\nimport IDEInput from "../../components/application/IDEInput.vue";\nimport { IIDEInputDefinitions } from \'../../../../domain/presentation/IIDEInputDefinitions\';\nimport { IObjectUseCase } from \'../../../../domain/useCase/IObjectUseCase\';\ninterface INewItemPropsInline extends INewItemProps {\n    parentId: string;\n    parentName: string;\n    parentType: "folder" | "module" | "application";\n    createType: "Screen" | "Process Diagram" | "Entity" | "Process Wizard" | "Module";\n    duplicateFrom?: IModel\n}\n\nconst props = defineProps<INewItemPropsInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst studio = container.resolve<IStudio>(IStudio);\nconst processEditorUtil = container.resolve<IProcessEditorUtil>(IProcessEditorUtil);\nconst emit = defineEmits(["close"]);\n\n// module\nconst isDescValid = ref<boolean>(true);\n\n// entity\nconst isNameValid = ref<boolean>(false);\n\nconst validations = ref<Record<"name" | "description", IIDEInputDefinitions["validations"]>>({\n    name: { minAndMaxLength: { min: 3, max: 40 }, availableCharacters: true, nonSpaceCharacter: true },\n    description: { minAndMaxLength: { min: 3, max: 100 }, availableCharacters: true, nonSpaceCharacter: false },\n});\n\nconst isModule = ref(false);\nconst isFolder = ref(false);\nconst isModel = ref(false);\nconst name = ref("");\nconst description = ref("");\n\nconst isEntity = ref(false);\nconst isScreen = ref(false);\nconst isProcess = ref(false);\nconst isProcessDiagram = ref(false);\nconst isEmptyPage = ref(false);\nconst isQuickComponent = ref(false);\nconst isQuickTemplate = ref(false);\nconst isImportFromFile = ref(false);\nconst isGenerateFromEntity = ref(false);\n\nconst createButtonVisibility = ref(true);\n\nconst processNameErrorLabel = ref("");\n\nlet entities = [\'entity1\', \'entity2\'];\nlet generateScreenTypes = [\'List\', \'Create\'];\nlet selectedEntity = \'\';\nlet selectedGenerateScreenType = \'\';\n\nif (props.parentType === "module") {\n    onTypeSelect(\'model\');\n}\nonMounted(() => {\n    switch (props.createType) {\n        case "Screen": isModule.value = false; isEmptyPage.value = true; isModel.value = true; isScreen.value = true; isEntity.value = isProcessDiagram.value = isProcess.value = false; createButtonVisibility.value = true; isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; break;\n        case "Process Diagram": isProcess.value = false, isProcessDiagram.value = true, isEntity.value = isScreen.value = false; createButtonVisibility.value = true; break;\n        case "Entity": isEntity.value = true; isScreen.value = isProcessDiagram.value = isProcess.value = false; createButtonVisibility.value = true; break;\n        case "Process Wizard": isProcess.value = true; isEntity.value = isProcessDiagram.value = isScreen.value = false; createButtonVisibility.value = true; break;\n        case "Module": isModule.value = true; isFolder.value = isProcessDiagram.value = isModel.value = false; setAllSubRadiosFalse(); createButtonVisibility.value = true; break;\n    }\n\n})\n\n\nfunction create() {\n    executor.execute(\n        async () => {\n            if (isModule.value) {\n                await executor.executeUseCase<ICreateModule>(ICreateModule, {\n                    name: name.value,\n                    applicationID: props.parentId,\n                    description: description.value\n                });\n                emit("close");\n            } else if (isFolder.value) {\n                return;\n            } else if (isModel.value) {\n                let modelBody: Array<IModelBodyObject>;\n                let createObject: ICreateModelParam;\n                if (isEntity.value) {\n                    name.value = props.parentName;\n                    modelBody = [{ key: "entityDesigner", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "entityDesigner",\n                        modelAdditionals: {},\n                    }\n                } else if (isEmptyPage.value) {\n                    modelBody = [{ key: "qjson", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "qjson",\n                        modelAdditionals: { qjsonType: "qjson" },\n                    }\n                } else if (isQuickComponent.value) {\n                    modelBody = [{ key: "qjson", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "qjson",\n                        modelAdditionals: { qjsonType: "quickComponent" },\n                    };\n                } else if (isQuickTemplate.value) {\n                    modelBody = [{ key: "qjson", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "qjson",\n                        modelAdditionals: { qjsonType: "template" },\n                    };\n                } else if (isImportFromFile.value) {\n                    console.log("isImportFromFile");\n                    return;\n                } else if (isGenerateFromEntity.value) {\n                    console.log("isGenerateFromEntity");\n                    return;\n                } else if (isProcess.value) {\n                    const model = processEditorUtil.getEmptyProcessWizardModel(props.parentName);\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelType: "process",\n                        modelBody: [{ key: "process", model }],\n                        modelAdditionals: {},\n                    };\n                }\n                else if (isProcessDiagram.value) {\n                    modelBody = [{ key: "bpmn", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "bpmn",\n                        modelAdditionals: {},\n                    }\n                }\n                else { throw createError({ message: "unexpected case", type: "technical" }); }\n                if (props.duplicateFrom) {\n                    createObject.duplicateFrom = props.duplicateFrom;\n                }\n                const createdModel = await executor.executeUseCase<ICreateModel>(ICreateModel, createObject);\n                await onAfterModelCreated(createdModel)\n                emit("close");\n            }\n        },\n        { loading: true }\n    );\n}\n\nasync function onAfterModelCreated(createdModel: IModel) {\n    await studio.checkout(createdModel)\n    studio.openItem(createdModel);\n}\n// not: listHistories dialog componentı olacak. \n// örnek modelİd = vgvrxgap-ahvp-igjc-h2ft-w33p9q41 asd.qjson\n\n// parentObjectId = objectId\n// this.executor.executeUseCase<ICreateModel>(ICreateModel, { name: "model1", parentObjectId: createdParentObjectId!, modelType: "qjson", modelAdditionals: { qjsonType: "qjson" } });\n\nfunction setAllSubRadiosFalse() {\n    isEntity.value = isScreen.value = false;\n    isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = createButtonVisibility.value = false;\n}\n\nfunction onTypeSelect(type: "module" | "folder" | "model" | "entity" | "screen" | "process" | "emptyPage" | "quickComponent" | "quickTemplate" | "importFromFile" | "generateFromEntity") {\n    switch (type) {\n        case "module": isModule.value = true; isFolder.value = isModel.value = false; setAllSubRadiosFalse(); createButtonVisibility.value = true; break;\n        case "folder": isFolder.value = true; isModule.value = isModel.value = false; setAllSubRadiosFalse(); break;\n        case "model": isModel.value = true; isModule.value = isFolder.value = false; setAllSubRadiosFalse(); break;\n        case "entity": isEntity.value = true; isScreen.value = isProcess.value = false; createButtonVisibility.value = true; break;\n        case "screen": isModule.value = false; isModel.value = true; isScreen.value = true; isEntity.value = isProcess.value = false; createButtonVisibility.value = false; break;\n        case "process": isProcess.value = true; isEntity.value = isScreen.value = false; createButtonVisibility.value = true; break; // openProcessWizard(); emit("close"); break;\n        case "emptyPage": isEmptyPage.value = true; isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\n        case "quickComponent": isQuickComponent.value = true; isEmptyPage.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\n        case "quickTemplate": isQuickTemplate.value = true; isEmptyPage.value = isQuickComponent.value = isImportFromFile.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\n        case "importFromFile": isImportFromFile.value = true; isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isGenerateFromEntity.value = false; createButtonVisibility.value = true; break;\n        case "generateFromEntity": isGenerateFromEntity.value = true; isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = false; createButtonVisibility.value = true; break;\n    }\n}\n\nfunction upload(event: Event) {\n    // file = event.target.files[0];\n    // let formData = new FormData();\n    // formData.append(\'file\', file);\n}\n\nfunction handleProcessName() {\n    processNameErrorLabel.value = checkInputLength(name.value, 3);\n    if (processNameErrorLabel.value == "") {\n        processNameErrorLabel.value = checkInputStartsWithLetter(name.value);\n    }\n}\n\nfunction setDescValue(desc: string) {\n    description.value = desc\n}\n\n\n\n// general validations methods \nfunction setDescValidationStatus(isValid: boolean) {\n    isDescValid.value = isValid\n}\nfunction setNameValue(value: string) {\n    name.value = value\n}\nfunction setNameValidationStatus(isValid: boolean) {\n    isNameValid.value = isValid\n}\n<\/script> \n \n<template>\n    <div>\n\n        <div>\n\n        </div>\n\n        \x3c!-- New Module --\x3e\n\n        <div class=\'nameInputDiv\' v-if="isModule">\n            <div>\n                <IDEInput :isRequired="true" @getValue="setNameValue" @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `" :type="\'text\'" info-text="Name"\n                    :validations="validations.name" />\n            </div>\n            <div style=\'margin-top:15px\'>\n                <IDEInput :isRequired="false" @getValue="setDescValue" @validateStatus="setDescValidationStatus"\n                    :placeholder="\'Description\'" :type="\'textarea\'" info-text="Description"\n                    :validations="validations.description" />\n            </div>\n        </div>\n\n        <div v-if="props.duplicateFrom" class="duplicateNoteDiv">\n            <span class="labelValue">* This new Item will be duplicated from <span class="duplicateText">{{ props.duplicateFrom.name }} </span></span>\n        </div>\n        \x3c!-- New Entity --\x3e\n        <div class=\'nameInputDiv\' v-if="isEntity">\n            <span>Entity <b>{{parentName}}</b> will be created.</span>\n        </div>\n\n        \x3c!-- New Process --\x3e\n        <div class=\'nameInputDiv\' v-if="isProcess">\n            <div>\n                <IDEInput :isRequired="true" @getValue="setNameValue" @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `" :type="\'text\'" info-text="Name"\n                    :validations="validations.name" />\n            </div>\n        </div>\n\n        <div class=\'nameInputDiv\' v-if="isProcessDiagram">\n            <div>\n                <IDEInput :isRequired="true" @getValue="setNameValue" @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `" :type="\'text\'" info-text="Name"\n                    :validations="validations.name" />\n            </div>\n        </div>\n\n        <div v-if="isScreen">\n            <div class=\'nameInputDiv\' v-if="isEmptyPage || isQuickComponent || isQuickTemplate">\n                <IDEInput :isRequired="true" @getValue="setNameValue" @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `" :type="\'text\'" info-text="Name"\n                    :validations="validations.name" />\n            </div>\n            <div class=\'nameInputDiv\' v-if="isImportFromFile">\n                <span class="labelValue">Name</span>\n                <input class=\'nameInput\' v-model="name" :placeholder="`Give your ${props.createType} a name `" />\n                <div>\n                    <input type="file" @change="upload($event)" accept=".qjson">\n                </div>\n            </div>\n            \x3c!--  isGenerateFromEntity \n            <div v-if="isGenerateFromEntity"> \n                <input v-model="name" placeholder="Screen Name" />.qjson\n                <select v-model="selectedEntity">\n                    <option v-for="entity in entities" :value="entity">\n                        {{entity}}\n                    </option>\n                </select>\n                <select v-model="selectedGenerateScreenType">\n                    <option v-for="generateScreenType in generateScreenTypes" :value="generateScreenType">\n                        {{generateScreenType}}\n                    </option>\n                </select>\n            </div> \n            --\x3e\n        </div>\n\n        \x3c!-- New Folder --\x3e\n        <div v-if="isFolder"></div>\n\n\n        <div class=\'createButtonDiv\'>\n            <button :style="{ opacity: (isModule && !(isNameValid && isDescValid)) ? \'0.5\' : \'\' }" class=\'createButton\'\n                @click="create()" :disabled="isModule && !(isNameValid && isDescValid)">{{ props.duplicateFrom ?\n                        \'DUPLICATE\' : \'CREATE\'\n                }}</button>\n        </div>\n    </div>\n</template> \n\n<style scoped>\n.createButtonDiv {\n    text-align: end;\n    padding-top: 21px;\n    height: 53px;\n    border-top: 1px solid #E0E0E0;\n    margin-top: 32px;\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-bottom: 16px;\n}\n\n.createButton {\n    background-color: #151233;\n    color: white;\n    border-radius: 4px;\n    border: none;\n    width: 74px;\n    height: 32px;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    font-family: \'ROBOTO\';\n    letter-spacing: 0.01px;\n    opacity: 1;\n\n}\n\n.nameInput {\n    width: 100%;\n    border: 1px solid #A1A1A1;\n    border-radius: 4px;\n    height: 40px;\n    opacity: 1;\n    outline: none;\n\n}\n\n::placeholder {\n    padding-left: 10px;\n    padding-top: 5px;\n    color: #A1A1A1;\n    font-style: normal;\n    font-family: "ROBOTO";\n    letter-spacing: 0px;\n    font-size: 14px;\n    opacity: 1px;\n}\n\n.nameInputDiv {\n    padding-left: 20px;\n    padding-right: 20px;\n    padding-top: 18px;\n}\n\n.duplicateNoteDiv{\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-top: 18px;\n}\n\n\n.labelValue {\n    color: #151233;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    font-family: \'ROBOTO\';\n    letter-spacing: 0px;\n    opacity: 1;\n}\n.duplicateText{\n    font-weight: bold;\n       font-size: 14px;\n    font-family: \'ROBOTO\';\n    letter-spacing: 0px;\n    opacity: 1;\n}\n</style>'],sourceRoot:""}]);const s=o},7293:(e,n,t)=>{function a(e,n){return e.length<n?`Input length must be bigger than ${n}.`:""}function i(e){return/^[a-zA-Z][a-zA-Z0-9_]*$/.test(e)?"":"Input must start with letter and following characters must be letter, number or _"}function l(e){return/(^X$)|(^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256})/.test(e)?"":"URL must be valid and start with https:// "}t.d(n,{Wc:()=>a,at:()=>i,fe:()=>l})},1375:(e,n,t)=>{t.r(n),t.d(n,{default:()=>K});var a=t(2068),i=t(9045),l=t(1705),o=t(1407),s=t(3734),r=t(2455),u=t(9388),d=t(2996),p=t(664),c=t(7422),m=(t(7293),t(3900)),v=t(7409),y=t(7716),A=t(2097);const f=e=>((0,a.dD)("data-v-44b85742"),e=e(),(0,a.Cn)(),e),I=f((()=>(0,a._)("div",null,null,-1))),g={key:0,class:"nameInputDiv"},B={style:{"margin-top":"15px"}},b={key:1,class:"duplicateNoteDiv"},C={class:"labelValue"},x=(0,a.Uk)("* This new Item will be duplicated from "),k={class:"duplicateText"},h={key:2,class:"nameInputDiv"},E=(0,a.Uk)("Entity "),D=(0,a.Uk)(" will be created."),T={key:3,class:"nameInputDiv"},F={key:4,class:"nameInputDiv"},w={key:5},q={key:0,class:"nameInputDiv"},V={key:1,class:"nameInputDiv"},S=f((()=>(0,a._)("span",{class:"labelValue"},"Name",-1))),M=["placeholder"],j={key:6},P={class:"createButtonDiv"},N=["disabled"],O=(0,a.aZ)({__name:"newItem",props:{parentId:null,parentName:null,parentType:null,createType:null,duplicateFrom:null},emits:["close"],setup(e,{emit:n}){const t=e,f=(s.nC.resolve(c.J),s.nC.resolve(p.y)),O=(s.nC.resolve(r.u),s.nC.resolve(m.c)),U=s.nC.resolve(v.s),G=(0,o.iH)(!0),R=(0,o.iH)(!1),_=(0,o.iH)({name:{minAndMaxLength:{min:3,max:40},availableCharacters:!0,nonSpaceCharacter:!0},description:{minAndMaxLength:{min:3,max:100},availableCharacters:!0,nonSpaceCharacter:!1}}),z=(0,o.iH)(!1),H=(0,o.iH)(!1),Q=(0,o.iH)(!1),Z=(0,o.iH)(""),W=(0,o.iH)(""),L=(0,o.iH)(!1),$=(0,o.iH)(!1),Y=(0,o.iH)(!1),X=(0,o.iH)(!1),J=(0,o.iH)(!1),K=(0,o.iH)(!1),ee=(0,o.iH)(!1),ne=(0,o.iH)(!1),te=(0,o.iH)(!1),ae=(0,o.iH)(!0);function ie(){L.value=$.value=!1,J.value=K.value=ee.value=ne.value=te.value=ae.value=!1}function le(e){W.value=e}function oe(e){G.value=e}function se(e){Z.value=e}function re(e){R.value=e}return(0,o.iH)(""),"module"===t.parentType&&(Q.value=!0,z.value=H.value=!1,ie()),(0,a.bv)((()=>{switch(t.createType){case"Screen":z.value=!1,J.value=!0,Q.value=!0,$.value=!0,L.value=X.value=Y.value=!1,ae.value=!0,K.value=ee.value=ne.value=te.value=!1;break;case"Process Diagram":Y.value=!1,X.value=!0,L.value=$.value=!1,ae.value=!0;break;case"Entity":L.value=!0,$.value=X.value=Y.value=!1,ae.value=!0;break;case"Process Wizard":Y.value=!0,L.value=X.value=$.value=!1,ae.value=!0;break;case"Module":z.value=!0,H.value=X.value=Q.value=!1,ie(),ae.value=!0}})),(o,s)=>((0,a.wg)(),(0,a.iD)("div",null,[I,(0,a.kq)(" New Module "),z.value?((0,a.wg)(),(0,a.iD)("div",g,[(0,a._)("div",null,[(0,a.Wm)(A.Z,{isRequired:!0,onGetValue:se,onValidateStatus:re,placeholder:`Give your ${t.createType} a name `,type:"text","info-text":"Name",validations:_.value.name},null,8,["placeholder","validations"])]),(0,a._)("div",B,[(0,a.Wm)(A.Z,{isRequired:!1,onGetValue:le,onValidateStatus:oe,placeholder:"Description",type:"textarea","info-text":"Description",validations:_.value.description},null,8,["validations"])])])):(0,a.kq)("v-if",!0),t.duplicateFrom?((0,a.wg)(),(0,a.iD)("div",b,[(0,a._)("span",C,[x,(0,a._)("span",k,(0,i.toDisplayString)(t.duplicateFrom.name),1)])])):(0,a.kq)("v-if",!0),(0,a.kq)(" New Entity "),L.value?((0,a.wg)(),(0,a.iD)("div",h,[(0,a._)("span",null,[E,(0,a._)("b",null,(0,i.toDisplayString)(e.parentName),1),D])])):(0,a.kq)("v-if",!0),(0,a.kq)(" New Process "),Y.value?((0,a.wg)(),(0,a.iD)("div",T,[(0,a._)("div",null,[(0,a.Wm)(A.Z,{isRequired:!0,onGetValue:se,onValidateStatus:re,placeholder:`Give your ${t.createType} a name `,type:"text","info-text":"Name",validations:_.value.name},null,8,["placeholder","validations"])])])):(0,a.kq)("v-if",!0),X.value?((0,a.wg)(),(0,a.iD)("div",F,[(0,a._)("div",null,[(0,a.Wm)(A.Z,{isRequired:!0,onGetValue:se,onValidateStatus:re,placeholder:`Give your ${t.createType} a name `,type:"text","info-text":"Name",validations:_.value.name},null,8,["placeholder","validations"])])])):(0,a.kq)("v-if",!0),$.value?((0,a.wg)(),(0,a.iD)("div",w,[J.value||K.value||ee.value?((0,a.wg)(),(0,a.iD)("div",q,[(0,a.Wm)(A.Z,{isRequired:!0,onGetValue:se,onValidateStatus:re,placeholder:`Give your ${t.createType} a name `,type:"text","info-text":"Name",validations:_.value.name},null,8,["placeholder","validations"])])):(0,a.kq)("v-if",!0),ne.value?((0,a.wg)(),(0,a.iD)("div",V,[S,(0,a.wy)((0,a._)("input",{class:"nameInput","onUpdate:modelValue":s[0]||(s[0]=e=>Z.value=e),placeholder:`Give your ${t.createType} a name `},null,8,M),[[l.vModelText,Z.value]]),(0,a._)("div",null,[(0,a._)("input",{type:"file",onChange:s[1]||(s[1]=e=>{}),accept:".qjson"},null,32)])])):(0,a.kq)("v-if",!0),(0,a.kq)('  isGenerateFromEntity \n            <div v-if="isGenerateFromEntity"> \n                <input v-model="name" placeholder="Screen Name" />.qjson\n                <select v-model="selectedEntity">\n                    <option v-for="entity in entities" :value="entity">\n                        {{entity}}\n                    </option>\n                </select>\n                <select v-model="selectedGenerateScreenType">\n                    <option v-for="generateScreenType in generateScreenTypes" :value="generateScreenType">\n                        {{generateScreenType}}\n                    </option>\n                </select>\n            </div> \n            ')])):(0,a.kq)("v-if",!0),(0,a.kq)(" New Folder "),H.value?((0,a.wg)(),(0,a.iD)("div",j)):(0,a.kq)("v-if",!0),(0,a._)("div",P,[(0,a._)("button",{style:(0,i.normalizeStyle)({opacity:!z.value||R.value&&G.value?"":"0.5"}),class:"createButton",onClick:s[2]||(s[2]=e=>{f.execute((async()=>{if(z.value)await f.executeUseCase(d.z,{name:Z.value,applicationID:t.parentId,description:W.value}),n("close");else{if(H.value)return;if(Q.value){let e,a;if(L.value)Z.value=t.parentName,e=[{key:"entityDesigner",model:""}],a={name:Z.value,parentObjectId:t.parentId,modelBody:e,modelType:"entityDesigner",modelAdditionals:{}};else if(J.value)e=[{key:"qjson",model:""}],a={name:Z.value,parentObjectId:t.parentId,modelBody:e,modelType:"qjson",modelAdditionals:{qjsonType:"qjson"}};else if(K.value)e=[{key:"qjson",model:""}],a={name:Z.value,parentObjectId:t.parentId,modelBody:e,modelType:"qjson",modelAdditionals:{qjsonType:"quickComponent"}};else if(ee.value)e=[{key:"qjson",model:""}],a={name:Z.value,parentObjectId:t.parentId,modelBody:e,modelType:"qjson",modelAdditionals:{qjsonType:"template"}};else{if(ne.value)return void console.log("isImportFromFile");if(te.value)return void console.log("isGenerateFromEntity");if(Y.value){const e=U.getEmptyProcessWizardModel(t.parentName);a={name:Z.value,parentObjectId:t.parentId,modelType:"process",modelBody:[{key:"process",model:e}],modelAdditionals:{}}}else{if(!X.value)throw(0,y.Tr)({message:"unexpected case",type:"technical"});e=[{key:"bpmn",model:""}],a={name:Z.value,parentObjectId:t.parentId,modelBody:e,modelType:"bpmn",modelAdditionals:{}}}}t.duplicateFrom&&(a.duplicateFrom=t.duplicateFrom);const i=await f.executeUseCase(u.E,a);await async function(e){await O.checkout(e),O.openItem(e)}(i),n("close")}}}),{loading:!0})}),disabled:z.value&&!(R.value&&G.value)},(0,i.toDisplayString)(t.duplicateFrom?"DUPLICATE":"CREATE"),13,N)])]))}});var U=t(5701),G=t.n(U),R=t(8236),_=t.n(R),z=t(6080),H=t.n(z),Q=t(6850),Z=t.n(Q),W=t(7182),L=t.n(W),$=t(9213),Y=t.n($),X=t(7767),J={};J.styleTagTransform=Y(),J.setAttributes=Z(),J.insert=H().bind(null,"head"),J.domAPI=_(),J.insertStyleElement=L(),G()(X.Z,J),X.Z&&X.Z.locals&&X.Z.locals;const K=(0,t(1419).Z)(O,[["__scopeId","data-v-44b85742"]])}}]);
//# sourceMappingURL=375.js.map
"use strict";(this.webpackChunkqcloud_shell=this.webpackChunkqcloud_shell||[]).push([[9721],{26693:(n,e,t)=>{t.d(e,{Z:()=>r});var o=t(34663),s=t.n(o),i=t(7638),a=t.n(i)()(s());a.push([n.id,"\n.resize-overlay[data-v-7f532546] {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100vh;\n        background: transparent;\n        cursor: nwse-resize;\n        z-index: 9999;\n}\n.chatbot-icon-container[data-v-7f532546] {\n        width: 56px;\n        height: 56px;\n        border-radius: 50%;\n        background-color: #4F537B;\n        border: none;\n        display: flex;\n        justify-content: center;\n}\n.chat-icons[data-v-7f532546] {\n        font-size: 22px;\n        margin-right: 6px;\n}\n.chat-messages[data-v-7f532546] {\n        overflow-y: auto;\n        width: 100%;\n        margin-bottom: 12px;\n}\n.chat-reset-icon[data-v-7f532546] {\n        width: 30px;\n        height: 30px;\n        margin-right: 3px;\n}\n.chatbot-container[data-v-7f532546] {\n        position: absolute;\n        bottom: 30px;\n        right: 50px;\n        z-index: 9998;\n}\n.chatbot-icon[data-v-7f532546] {\n        font-size: 33px;\n        cursor: pointer;\n        color: #eeeeee;\n}\n.chatbot-message .chat-icons[data-v-7f532546] {\n        color: #151233;\n}\n.chatbot-message .message-content[data-v-7f532546] {\n        background-color: #eeeeee;\n        padding: 20px 25px 20px 25px;\n        position: relative;\n        border-radius: 15px;\n}\n.chatbot-resize-icon[data-v-7f532546] {\n        font-size: 24px;\n        transform: rotate(180deg);\n        margin-left: 6px;\n}\n.chatbot-resize-icon[data-v-7f532546]:hover {\n        cursor: nwse-resize;\n}\n.feedback-box[data-v-7f532546] {\n        display: flex;\n        background-color: #f0f0f0;\n        border-radius: 10px;\n        padding: 6px;\n        transition: opacity 0.3s;\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\n        justify-content: center;\n        align-items: center;\n}\n.feedback-button[data-v-7f532546] {\n        border: none;\n        background-color: transparent;\n        font-size: 14px;\n        cursor: pointer;\n        margin-right: 5px;\n}\n.feedback-button[data-v-7f532546]:hover {\n        background-color: #e3e3e3;\n        border-radius: 6px;\n}\n.feedback-container[data-v-7f532546] {\n        position: absolute;\n        bottom: -27px;\n        right: 14px;\n        display: flex;\n        align-items: center;\n}\n.follow-up-questions[data-v-7f532546] {\n        display: flex;\n        justify-content: end;\n        flex-wrap: wrap;\n        margin-top: 10px;\n}\n.icon-group[data-v-7f532546] {\n        display: flex;\n        justify-content: flex-end;\n}\n.input-area-container[data-v-7f532546] {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n}\n.input-field-with-limit[data-v-7f532546] {\n        position: relative;\n        display: flex;\n        align-items: center;\n}\n.input-field-container[data-v-7f532546] {\n        width: 100%;\n        border-radius: 8px;\n        background-color: #eeeeee;\n        border: 1px solid #ccc;\n}\n.input-bottom[data-v-7f532546] {\n        display: flex;\n        align-items: center;\n        justify-content: end;\n        height: 20px;\n}\n.input-field[data-v-7f532546] {\n        box-sizing: border-box;\n        padding: 5px 6px 22px 10px;\n        border-radius: 8px;\n        background-color: #eeeeee;\n        border: none;\n        outline: none;\n        width: 100%;\n        height: auto;\n        min-height: 80px;\n        font-size: 14px;\n        resize: none; \n        word-wrap: break-word;\n}\n.input-field[data-v-7f532546]::-webkit-resizer {\n       display: none;\n}\n.character-limit[data-v-7f532546] {\n        font-size: 13px;\n        color: #777;\n        padding-bottom: 6px;\n        width: 100px; \n        text-align: right;\n}\n.send-icon[data-v-7f532546] {\n        margin: 0px 5px 5px 5px;\n        cursor: pointer;\n        color: #777;\n        font-size: 25px;\n}\n.send-icon[data-v-7f532546]:hover {\n        color: #989AC1;\n}\n.link-button[data-v-7f532546] {\n        display: inline-block;\n        margin-right: 8px;\n        margin-bottom: 8px;\n        padding: 6px 12px;\n        overflow: hidden;\n        background-color: #989AC1;\n        color: #FFFFFF;\n        border-radius: 4px;\n        text-decoration: none;\n        cursor: pointer;\n}\n.loading-image[data-v-7f532546] {\n        width: 50px;\n        height: 50px;\n}\n.loading-text[data-v-7f532546] {\n        color: #ccc;\n        font-size: 12px;\n}\n.markdown-content[data-v-7f532546] {\n        font-family: Segoe WPC,Segoe UI,sans-serif;\n        font-size: 15px;\n}\n.menu-buttons[data-v-7f532546] {\n        width: 20px;\n        height: 20px;\n        cursor: pointer;\n        border: none;\n        background: transparent;\n        font-size: 20px;\n        outline: none;\n        margin-bottom: 15px;\n}\n.menu-icons[data-v-7f532546]:hover {\n        color: #9f2601;\n}\n.message-content[data-v-7f532546] {\n        display: inline-block;\n        border-radius: 15px;\n        max-width: 80%;\n        min-width: 10%;\n        margin-bottom: 30px;\n        word-wrap: break-word;\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\n}\n.message-links[data-v-7f532546] {\n        display: flex;\n        flex-wrap: wrap;\n        margin-top: 40px;\n        width: 100%;\n}\n.message-loading[data-v-7f532546] {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n}\n.question-button[data-v-7f532546] {\n        background-color: white;\n        color: #4F537B;\n        border: 1px solid #4F537B;\n        padding: 6px 12px;\n        font-size: 14px;\n        border-radius: 5px;\n        margin: 5px;\n        cursor: pointer;\n        font-family: Segoe WPC,Segoe UI,sans-serif;\n}\n.question-button[data-v-7f532546]:hover {\n        background-color: #989AC1;\n        color: white;\n}\n.reset-button[data-v-7f532546] {\n        cursor: pointer;\n        border-radius: 50%;\n        border: none;\n        background-color: #4F537B;\n        font-size: 20px;\n        outline: none;\n        margin-right: 10px;\n        padding: 5px;\n}\n.reset-button[data-v-7f532546]:hover {\n        background-color: #151233;\n}\n.response-text[data-v-7f532546] {\n        font-family: Segoe WPC, Segoe UI, sans-serif;\n        font-size: 15px;\n}\n.top-menu[data-v-7f532546] {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        width: 100%;\n        padding-right: 14px;\n}\n.user-message .chat-icons[data-v-7f532546] {\n        color: white;\n}\n.user-message .message-content[data-v-7f532546] {\n        background-color: #4F537B;\n        color: white;\n        padding: 12px;\n        border-radius: 15px;\n        font-family: Segoe WPC, Segoe UI, sans-serif;\n}\n.user-message[data-v-7f532546] {\n        display: flex;\n        justify-content: flex-end;\n        margin-top: 12px;\n        margin-bottom: 12px;\n}\n.chat-window-container[data-v-7f532546] {\n        position: fixed;\n        bottom: 100px;\n        right: 50px;\n        width: 500px;\n        height: 700px;\n        border-radius: 5px;\n        background-color: white;\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\n}\n.chat-window[data-v-7f532546] {\n        height: calc(100% - 44px);\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n        padding: 20px 20px 6px 20px;\n}\n.chatbot-message[data-v-7f532546] {\n        display: flex;\n        align-items: end;\n}\n.icon-group[data-v-7f532546] {\n        display: flex;\n        justify-content: flex-end;\n}\n.input-field-container[data-v-7f532546] {\n        width: 100%;\n}\n.message-links[data-v-7f532546] {\n        display: flex;\n        flex-wrap: wrap;\n        margin-top: 40px;\n        width: 100%;\n}\n.message-content[data-v-7f532546] {\n        display: inline-block;\n        border-radius: 15px;\n        max-width: 80%;\n        min-width: 10%;\n        margin-bottom: 30px;\n        word-wrap: break-word;\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\n}\n\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/chatbot.vue"],names:[],mappings:"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",sourcesContent:['<template>\n    <div class="chatbot-container">\n        <div v-if="resizingOverlay" class="resize-overlay"></div>\n        <button @click="toggleChat" class="chatbot-icon-container"><i class="mdi mdi-robot chatbot-icon"></i></button>\n        <div v-if="showChat" class="chat-window-container" ref="chatWindowContainerRef">\n            <div class="top-menu">\n                <i class="mdi mdi-resize-bottom-right chatbot-resize-icon" @mousedown="startResize"></i>\n                <div class="icon-group">\n                    <button class="menu-buttons" @click="toggleChat"><i class="mdi mdi-window-close menu-icons"></i></button>\n                </div>\n            </div>\n            <div class="chat-window">\n                <div class="chat-messages" ref="chatWindowRef">\n                    <div v-for="message in chatMessages" :key="message.id" :class="getMessageClass(message)">\n                        \x3c!-- <i v-if="isChatbotResponse(message) && !isLoadingChatbotResponse(message)" class="mdi mdi-robot-happy-outline chat-icons"></i> --\x3e\n                        <div class="message-content" @mouseenter="handleMouseEnter(message)" @mouseleave="handleMouseLeave(message)">\n                            \x3c!-- <i v-if="isChatbotResponse(message) && !isLoadingChatbotResponse(message)" class="mdi mdi-robot-happy-outline chat-icons"></i>\n                            <i v-if="!isChatbotResponse(message)" class="mdi mdi-account-circle chat-icons"></i> --\x3e\n                            <div v-if="isChatbotResponse(message)" :key="message.id" class="markdown-content response-text" v-html="convertToMarkdown(message.content)"></div>\n                            <div v-else>{{ message.content }}</div>\n                            <div v-if="message.id === 0 && isChatbotResponse(message)">\n                                <hr style="margin: 20px 0; border-color: #ccc;">\n                                <div class="follow-up-questions">\n                                    <button\n                                        v-for="(question, index) in selectedQuestions"\n                                        :key="index"\n                                        @click="handleQuestionClick(question)"\n                                        class="question-button"\n                                    >\n                                        {{ question }}\n                                    </button>\n                                </div>\n                            </div>\n                            <div v-if="isChatbotResponse(message) && loadingStates[message.id]" class="message-loading">\n                                <img class="loading-image" src="../../../../images/chatbotLoading.svg" alt="studio-logo" />\n                                <p class="loading-text">Searching documentation. This may take a second!</p>\n                            </div>\n                            <div v-if="isChatbotResponse(message) && message.links" class="message-links">\n                                <div style="width: 100%;">\n                                    <p class="response-text">View More About:</p>\n                                </div>\n                                <a v-for="(link, index) in message.links" :key="index" :href="link.linkUrl" target="_blank" class="link-button response-text"><i class="mdi mdi-link-variant chat-icons" style="margin-right: 5px; color: white; font-size: 18px;"></i>{{ link.pageName }}</a>\n                            </div>\n                            <div v-if="isChatbotResponse(message) && message.followUpQuestions && message.followUpQuestions.length > 0">\n                                <hr style="margin: 20px 0; border-color: #ccc;">\n                                <div class="follow-up-questions">\n                                    <button\n                                        v-for="question in message.followUpQuestions"\n                                        :key="question"\n                                        @click="handleQuestionClick(question)"\n                                        class="question-button"\n                                    >\n                                        {{ question }}\n                                    </button>\n                                </div>\n                            </div>\n                            <div v-if="isChatbotResponse(message) && message.showFeedBack && !isLoadingChatbotResponse(message)" class="feedback-container">\n                                \x3c!-- <div style="font-size: 10px; font-family: \'Roboto\'; margin-right: 4px; margin-top: 4px;">Was this helpful?</div> --\x3e\n                                <div class="feedback-box">\n                                    <button class="feedback-button" @click="submitFeedback(true)"><i class="mdi mdi-thumb-up"></i></button>\n                                    <div style="background-color: #c1c1c1; width: 1px; height: 16px; margin-right: 6px;"></div>\n                                    <button class="feedback-button" @click="submitFeedback(false)"><i class="mdi mdi-thumb-down"></i></button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="input-area-container">\n                    <button class="reset-button" @click="clearChat"><img class="chat-reset-icon" src="../../../../images/cleaning.svg" alt="reset-chat" /></button>\n                    <div class="input-field-container">\n                        <textarea\n                            v-model="newMessage"\n                            @keyup.enter="sendMessage"\n                            type="text"\n                            placeholder="Ask me about Plateau Studio..."\n                            class="input-field"\n                            :maxlength="1000"\n                            rows="1"\n                        />\n                        <div class="input-bottom">\n                            <div class="character-limit">{{ newMessage.length }}/1000</div>\n                            <i class="mdi mdi-send send-icon" @click="sendMessage"></i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</template>\n  \n<script setup lang="ts">\nimport { ref, onMounted, reactive, nextTick } from "vue";\nimport { container } from "../../../../domain/core/diContainer";\nimport { IViewModel } from "../../../../domain/viewModel/IViewModel";\nimport MarkdownIt from "markdown-it";\nimport { IQCloudApi } from "../../../../domain/infrastructure/IQCloudApi";\n\n\n    const viewModel = container.resolve<IViewModel>(IViewModel);\n    const qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\n    const user = viewModel.user!;\n    const chatWindowRef = ref<HTMLElement | null>(null);\n    const chatWindowContainerRef = ref<HTMLElement | null>(null);\n    const placeholder = ref("");\n    const showChat = ref(false);\n    const newMessage = ref("");\n    const showFeedBackBox = ref(false);\n    const selectedQuestions: Array<string> = [];\n    const resizingOverlay = ref(false);\n\n    const placeholderQuestions: Array<string> = [\n        "How can I route to another page?",\n        "How can I export my project?",\n        "What is Live Preview and Publish used for in Studio?",\n    ];  \n\n    const selectRandomQuestions = () => {\n        selectedQuestions.length = 0;\n        const shuffledQuestions = placeholderQuestions.slice();\n        for (let i = 0; i < 3; i++) {\n            const randomIndex = Math.floor(Math.random() * shuffledQuestions.length);\n            selectedQuestions.push(shuffledQuestions.splice(randomIndex, 1)[0]);\n        }\n    };\n\n    //If followUpQuestions has < 3 elements, it will display all otherwise it will randomly select 3 elements\n    const getRandomFollowUpQuestions = (questionsArray: Array<string>, count: number) => {\n        const shuffledQuestions = questionsArray.slice();\n        for (let i = shuffledQuestions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [shuffledQuestions[i], shuffledQuestions[j]] = [shuffledQuestions[j], shuffledQuestions[i]]; \n        }\n        return shuffledQuestions.slice(0, Math.min(count, shuffledQuestions.length)); \n    };\n\n    \n    let loadingStates: Record<number, boolean> = {};\n\n    const ROLE_USER = "USER";\n    const ROLE_AI = "AI";\n    type Role = "USER" | "AI";\n\n    interface ChatMessage {\n        id: number,\n        content: string,\n        role: Role,\n        links?: Array<{ pageName: string, linkUrl:string }>,\n        showFeedBack: boolean,\n        followUpQuestions?: Array<string>,\n    }\n\n    interface ChatMessagesArray extends Array<ChatMessage> {};\n\n\n    const chatMessages: ChatMessagesArray  = reactive([\n        { id: 0, content: `Hey ${user.name}! What\'s on your mind?`, role: ROLE_AI, showFeedBack: false },\n    ]);\n\n\n    onMounted(() => {\n        scrollToBottom();\n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\n        placeholder.value = randomQuestion;\n        selectRandomQuestions();\n    });\n\n    const scrollToBottom = () => {\n        const chatWindow = chatWindowRef.value;\n        if (chatWindow) {\n            chatWindow.scrollTop = chatWindow.scrollHeight - chatWindow.clientHeight;\n        }\n    };\n\n\n    const toggleChat = () => {\n        showChat.value = !showChat.value;\n    };\n\n    const handleQuestionClick = (question: string) => {\n        newMessage.value = question;\n        sendMessage();\n    };\n\n    const sendMessage = async () => {\n\n        if (newMessage.value.trim() === "") return;\n         \n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\n        placeholder.value = randomQuestion;\n\n        const userQuestion: ChatMessage = {\n            id: chatMessages.length + 1,\n            content: newMessage.value,\n            role: ROLE_USER,\n            showFeedBack: false\n        };\n\n        chatMessages.push(userQuestion);\n        let chatHistory = [...chatMessages]; \n        newMessage.value = "";\n\n        let newId = chatMessages.length + 1;\n        const chatbotResponse: ChatMessage = {\n            id: newId,\n            content: "",\n            role: ROLE_AI, \n            showFeedBack: false\n        };\n        chatMessages.push(chatbotResponse);\n\n        loadingStates[chatbotResponse.id] = true;\n\n        nextTick(() => {\n            scrollToBottom();\n        });\n \n        const question = userQuestion.content;\n        let response = await qcloudApi.getchatbotresponse(question, chatHistory);\n        \n        let chatBotResponse = response ? response.responseText : "Unable to answer your question at this time. Try to ask again!";\n        \n        let lastMessage = chatMessages.find(msg => msg.id === newId);\n        lastMessage!.content = chatBotResponse;\n        loadingStates[chatbotResponse.id] = false;\n\n        let verifiedUrls: Array<string> = response?.verifiedUrls;\n        if (verifiedUrls && verifiedUrls.length > 0) {\n            let finalUrlObj = verifiedUrls.map(url => {\n                let docName = url.substring(url.lastIndexOf("/") + 1).replace(/-/g," ");\n                let modifiedDocName = docName.replace(/\\b\\w/g, l => l.toUpperCase());\n                return {pageName: modifiedDocName, linkUrl: url};\n            });\n            chatbotResponse.links = finalUrlObj;\n        }\n\n        let followUpQuestions: Array<string> = response.followUpQuestions; \n        if (followUpQuestions && followUpQuestions.length > 0) { \n            chatbotResponse.followUpQuestions = getRandomFollowUpQuestions(followUpQuestions, 3); \n        }\n\n        nextTick(() => {\n            scrollToBottom();\n        });\n\n    };\n\n    const isChatbotResponse = (message: ChatMessage) => {\n        return message.role === ROLE_AI;\n    };\n\n    const clearChat = () => {\n        chatMessages.splice(1, chatMessages.length);\n    };\n\n    let resizing = false;\n    let initialX = 0;\n    let initialY = 0;\n    let initialWidth = 900;\n    let initialHeight = 700;\n\n    const startResize = (event: MouseEvent) => {\n        resizingOverlay.value = true;\n        event.stopPropagation();\n        event.preventDefault();\n        resizing = true;\n        initialX = event.clientX;\n        initialY = event.clientY;\n        initialWidth = chatWindowContainerRef.value?.offsetWidth || 0;\n        initialHeight = chatWindowContainerRef.value?.offsetHeight || 0;\n        document.body.style.cursor = "nwse-resize";\n        document.body.style.userSelect = "none";\n        document.addEventListener("mousemove", handleResize);\n        document.addEventListener("mouseup", stopResize);\n    };\n\n    const handleResize = (event: MouseEvent) => {\n        if (resizing) {\n            event.stopPropagation();\n            event.preventDefault();\n            const newWidth = initialWidth + (initialX - event.clientX );\n            const newHeight = initialHeight + (initialY - event.clientY);\n            const chatWindow = chatWindowContainerRef.value;\n            if (chatWindow) {\n                chatWindow.style.width = `${Math.max(500, newWidth)}px`;\n                chatWindow.style.height = `${Math.max(700, newHeight)}px`;\n                const feedbackIconsVisible = chatMessages.some(message => isChatbotResponse(message) && message.showFeedBack);\n                if (!feedbackIconsVisible) {\n                    scrollToBottom();\n                }\n            }\n        }\n    };\n\n    const stopResize = () => {\n        resizingOverlay.value = false;\n        resizing = false;\n        document.body.style.cursor = "auto";\n        document.body.style.userSelect = "auto";\n        document.removeEventListener("mousemove", handleResize);\n        document.removeEventListener("mouseup", stopResize);\n    };\n\n\n    const isLoadingChatbotResponse = (message: ChatMessage) => {\n        return isChatbotResponse(message) && loadingStates[message.id];\n    };\n\n    const getMessageClass = (message: ChatMessage) => {\n        return message.role === ROLE_USER ? \'user-message\' : \'chatbot-message\';\n    };\n\n    \n    const markdown = new MarkdownIt();\n    const convertToMarkdown = (markdownText: string) => {\n        let markdownResponse = markdown.render(markdownText);\n        markdownResponse = markdownResponse.replace(/<code>/g, "<code style=\'color:#ee4f54; font-weight: bold;\'>");\n        return markdownResponse;\n    };\n\n\n    const submitFeedback = (isPositive: boolean) => {\n        // Logic to handle feedback submission\n        showFeedBackBox.value = false;\n    };\n\n    const handleMouseEnter = (message: ChatMessage) => {\n        if (isChatbotResponse(message)) {\n            message.showFeedBack = true;\n        }\n    };\n\n    const handleMouseLeave = (message: ChatMessage) => {\n        if (isChatbotResponse(message)) {\n            message.showFeedBack = false;\n        }\n    };\n\n<\/script>\n\n\n<style scoped>\n    .resize-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100vh;\n        background: transparent;\n        cursor: nwse-resize;\n        z-index: 9999;\n    }\n\n    .chatbot-icon-container {\n        width: 56px;\n        height: 56px;\n        border-radius: 50%;\n        background-color: #4F537B;\n        border: none;\n        display: flex;\n        justify-content: center;\n    }\n\n    .chat-icons {\n        font-size: 22px;\n        margin-right: 6px;\n    }\n\n    .chat-messages {\n        overflow-y: auto;\n        width: 100%;\n        margin-bottom: 12px;\n    }\n\n    .chat-reset-icon {\n        width: 30px;\n        height: 30px;\n        margin-right: 3px;\n    }\n\n    .chatbot-container {\n        position: absolute;\n        bottom: 30px;\n        right: 50px;\n        z-index: 9998;\n    }\n\n    .chatbot-icon {\n        font-size: 33px;\n        cursor: pointer;\n        color: #eeeeee;\n    }\n\n    .chatbot-message .chat-icons {\n        color: #151233;\n    }\n\n    .chatbot-message .message-content {\n        background-color: #eeeeee;\n        padding: 20px 25px 20px 25px;\n        position: relative;\n        border-radius: 15px;\n    }\n\n    .chatbot-resize-icon {\n        font-size: 24px;\n        transform: rotate(180deg);\n        margin-left: 6px;\n    }\n\n    .chatbot-resize-icon:hover {\n        cursor: nwse-resize;\n    }\n\n    .feedback-box {\n        display: flex;\n        background-color: #f0f0f0;\n        border-radius: 10px;\n        padding: 6px;\n        transition: opacity 0.3s;\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\n        justify-content: center;\n        align-items: center;\n    }\n\n    .feedback-button {\n        border: none;\n        background-color: transparent;\n        font-size: 14px;\n        cursor: pointer;\n        margin-right: 5px;\n    }\n\n    .feedback-button:hover {\n        background-color: #e3e3e3;\n        border-radius: 6px;\n    }\n\n    .feedback-container {\n        position: absolute;\n        bottom: -27px;\n        right: 14px;\n        display: flex;\n        align-items: center;\n    }\n\n    .follow-up-questions {\n        display: flex;\n        justify-content: end;\n        flex-wrap: wrap;\n        margin-top: 10px;\n    }\n\n    .icon-group {\n        display: flex;\n        justify-content: flex-end;\n    }\n\n    .input-area-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .input-field-with-limit {\n        position: relative;\n        display: flex;\n        align-items: center;\n    }\n\n\n    .input-field-container {\n        width: 100%;\n        border-radius: 8px;\n        background-color: #eeeeee;\n        border: 1px solid #ccc;\n    }\n\n    .input-bottom {\n        display: flex;\n        align-items: center;\n        justify-content: end;\n        height: 20px;\n    }\n\n    .input-field {\n        box-sizing: border-box;\n        padding: 5px 6px 22px 10px;\n        border-radius: 8px;\n        background-color: #eeeeee;\n        border: none;\n        outline: none;\n        width: 100%;\n        height: auto;\n        min-height: 80px;\n        font-size: 14px;\n        resize: none; \n        word-wrap: break-word; \n    }\n\n    .input-field::-webkit-resizer {\n       display: none;\n    }\n\n    .character-limit {\n        font-size: 13px;\n        color: #777;\n        padding-bottom: 6px;\n        width: 100px; \n        text-align: right;\n    }\n\n    .send-icon {\n        margin: 0px 5px 5px 5px;\n        cursor: pointer;\n        color: #777;\n        font-size: 25px;\n    }\n\n    .send-icon:hover {\n        color: #989AC1;\n    }\n\n    .link-button {\n        display: inline-block;\n        margin-right: 8px;\n        margin-bottom: 8px;\n        padding: 6px 12px;\n        overflow: hidden;\n        background-color: #989AC1;\n        color: #FFFFFF;\n        border-radius: 4px;\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    .loading-image {\n        width: 50px;\n        height: 50px;\n    }\n\n    .loading-text {\n        color: #ccc;\n        font-size: 12px;\n    }\n\n    .markdown-content {\n        font-family: Segoe WPC,Segoe UI,sans-serif;\n        font-size: 15px;\n    }\n\n    .menu-buttons {\n        width: 20px;\n        height: 20px;\n        cursor: pointer;\n        border: none;\n        background: transparent;\n        font-size: 20px;\n        outline: none;\n        margin-bottom: 15px;\n    }\n\n    .menu-icons:hover {\n        color: #9f2601;\n    }\n\n    .message-content {\n        display: inline-block;\n        border-radius: 15px;\n        max-width: 80%;\n        min-width: 10%;\n        margin-bottom: 30px;\n        word-wrap: break-word;\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\n    }\n\n    .message-links {\n        display: flex;\n        flex-wrap: wrap;\n        margin-top: 40px;\n        width: 100%;\n    }\n\n    .message-loading {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .question-button {\n        background-color: white;\n        color: #4F537B;\n        border: 1px solid #4F537B;\n        padding: 6px 12px;\n        font-size: 14px;\n        border-radius: 5px;\n        margin: 5px;\n        cursor: pointer;\n        font-family: Segoe WPC,Segoe UI,sans-serif;\n    }\n\n    .question-button:hover {\n        background-color: #989AC1;\n        color: white;\n    }\n\n    .reset-button {\n        cursor: pointer;\n        border-radius: 50%;\n        border: none;\n        background-color: #4F537B;\n        font-size: 20px;\n        outline: none;\n        margin-right: 10px;\n        padding: 5px;\n    }\n\n    .reset-button:hover {\n        background-color: #151233;\n    }\n\n    .response-text {\n        font-family: Segoe WPC, Segoe UI, sans-serif;\n        font-size: 15px;\n    }\n\n    .top-menu {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        width: 100%;\n        padding-right: 14px;\n    }\n\n    .user-message .chat-icons {\n        color: white;\n    }\n\n    .user-message .message-content {\n        background-color: #4F537B;\n        color: white;\n        padding: 12px;\n        border-radius: 15px;\n        font-family: Segoe WPC, Segoe UI, sans-serif;\n    }\n\n    .user-message {\n        display: flex;\n        justify-content: flex-end;\n        margin-top: 12px;\n        margin-bottom: 12px;\n    }\n\n    .chat-window-container {\n        position: fixed;\n        bottom: 100px;\n        right: 50px;\n        width: 500px;\n        height: 700px;\n        border-radius: 5px;\n        background-color: white;\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\n    }\n\n    .chat-window {\n        height: calc(100% - 44px);\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n        padding: 20px 20px 6px 20px;\n    }\n\n    .chatbot-message {\n        display: flex;\n        align-items: end;\n    }\n\n    .icon-group {\n        display: flex;\n        justify-content: flex-end;\n    }\n\n    .input-field-container {\n        width: 100%;\n    }\n\n    .message-links {\n        display: flex;\n        flex-wrap: wrap;\n        margin-top: 40px;\n        width: 100%;\n    }\n\n    .message-content {\n        display: inline-block;\n        border-radius: 15px;\n        max-width: 80%;\n        min-width: 10%;\n        margin-bottom: 30px;\n        word-wrap: break-word;\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\n    }\n\n</style>'],sourceRoot:""}]);const r=a},38945:(n,e,t)=>{t.d(e,{Z:()=>o});const o=t.p+"9a830afdb3af3bb0515b62ea00be093f.svg"},91743:(n,e,t)=>{t.d(e,{L:()=>i});let o=!1;new Promise((n=>n())).then((()=>o=!0)),"undefined"!=typeof doNothing&&doNothing();const s=!0===o;function i(n,e={}){let t,o,i;const a=n=>{i&&clearTimeout(i),i=setTimeout((()=>{o(new Error(`The operation has timed out. timeoutValue  : ${n}`))}),n)};return n&&a(n),{startTimer:a,promise:new Promise(((n,i)=>{var a;a=n,t=s&&e.fixSyncResolve?n=>setTimeout((()=>a(n))):a,o=i})),resolver:t,reject:o}}},5627:(n,e,t)=>{t.d(e,{OH:()=>r,b2:()=>o.b2,bh:()=>a,f3:()=>o.f3,nC:()=>o.nC});var o=t(53266),s=t(91743);function i(){const n=(0,s.L)();return setTimeout((()=>{n.resolver()}),100),n.promise}async function a(n,e){await r([n]);const t=o.nC.resolve(n);await e(t)}async function r(n,e){let t=!1;for(;!t;)try{n.forEach((n=>o.nC.resolve(n))),t=!0}catch(n){await i()}await(null==e?void 0:e())}},28246:(n,e,t)=>{t.d(e,{B:()=>o});const o=Symbol.for("IQCloudApi")},91056:(n,e,t)=>{t.d(e,{u:()=>o});const o=Symbol.for("IDialog")},1937:(n,e,t)=>{t.d(e,{Ax:()=>s,v5:()=>o});const o=Symbol.for("IRouter");function s(n){}},90585:(n,e,t)=>{t.d(e,{m:()=>o});const o=Symbol.for("IAuthenticationUseCase")},83487:(n,e,t)=>{t.d(e,{y:()=>o});const o=Symbol.for("IUseCaseExecutor")},88613:(n,e,t)=>{t.d(e,{J:()=>o});const o=Symbol.for("IViewModel")},16046:(n,e,t)=>{t.d(e,{Z:()=>dn});var o=t(71093),s=t(66190),i=t(73843),a=t(46233);const r=t.p+"8e3140858d798a5c4e899c42aac2966a.svg",l=t.p+"ad1469ad2976b2272072ffc332e11a9d.svg";var A=t(5627),c=t(88613),d=t(50335),p=t.n(d),u=t(28246);const g=n=>((0,o.dD)("data-v-7f532546"),n=n(),(0,o.Cn)(),n),h={class:"chatbot-container"},m={key:0,class:"resize-overlay"},f=[g((()=>(0,o._)("i",{class:"mdi mdi-robot chatbot-icon"},null,-1)))],b={class:"top-menu"},C=[g((()=>(0,o._)("i",{class:"mdi mdi-window-close menu-icons"},null,-1)))],x={class:"chat-window"},B=["onMouseenter","onMouseleave"],v=["innerHTML"],w={key:1},Q={key:2},y=g((()=>(0,o._)("hr",{style:{margin:"20px 0","border-color":"#ccc"}},null,-1))),k={class:"follow-up-questions"},I=["onClick"],M={key:3,class:"message-loading"},z=[g((()=>(0,o._)("img",{class:"loading-image",src:r,alt:"studio-logo"},null,-1))),g((()=>(0,o._)("p",{class:"loading-text"},"Searching documentation. This may take a second!",-1)))],E={key:4,class:"message-links"},W=g((()=>(0,o._)("div",{style:{width:"100%"}},[(0,o._)("p",{class:"response-text"},"View More About:")],-1))),R=["href"],q=g((()=>(0,o._)("i",{class:"mdi mdi-link-variant chat-icons",style:{"margin-right":"5px",color:"white","font-size":"18px"}},null,-1))),Y={key:5},U=g((()=>(0,o._)("hr",{style:{margin:"20px 0","border-color":"#ccc"}},null,-1))),S={class:"follow-up-questions"},_=["onClick"],F={key:6,class:"feedback-container"},D={class:"feedback-box"},j=[g((()=>(0,o._)("i",{class:"mdi mdi-thumb-up"},null,-1)))],H=g((()=>(0,o._)("div",{style:{"background-color":"#c1c1c1",width:"1px",height:"16px","margin-right":"6px"}},null,-1))),L=[g((()=>(0,o._)("i",{class:"mdi mdi-thumb-down"},null,-1)))],T={class:"input-area-container"},Z=[g((()=>(0,o._)("img",{class:"chat-reset-icon",src:l,alt:"reset-chat"},null,-1)))],X={class:"input-field-container"},P=["onKeyup"],O={class:"input-bottom"},N={class:"character-limit"},V=(0,o.aZ)({__name:"chatbot",setup(n){const e=A.nC.resolve(c.J),t=A.nC.resolve(u.B),r=e.user,l=(0,i.iH)(null),d=(0,i.iH)(null),g=(0,i.iH)(""),V=(0,i.iH)(!1),K=(0,i.iH)(""),$=(0,i.iH)(!1),G=[],J=(0,i.iH)(!1),nn=["How can I route to another page?","How can I export my project?","What is Live Preview and Publish used for in Studio?"];let en={};const tn="USER",on="AI",sn=(0,i.qj)([{id:0,content:`Hey ${r.name}! What's on your mind?`,role:on,showFeedBack:!1}]);(0,o.bv)((()=>{an();const n=nn[Math.floor(Math.random()*nn.length)];g.value=n,(()=>{G.length=0;const n=nn.slice();for(let e=0;e<3;e++){const e=Math.floor(Math.random()*n.length);G.push(n.splice(e,1)[0])}})()}));const an=()=>{const n=l.value;n&&(n.scrollTop=n.scrollHeight-n.clientHeight)},rn=()=>{V.value=!V.value},ln=n=>{K.value=n,An()},An=async()=>{if(""===K.value.trim())return;const n=nn[Math.floor(Math.random()*nn.length)];g.value=n;const e={id:sn.length+1,content:K.value,role:tn,showFeedBack:!1};sn.push(e);let s=[...sn];K.value="";let i=sn.length+1;const a={id:i,content:"",role:on,showFeedBack:!1};sn.push(a),en[a.id]=!0,(0,o.Y3)((()=>{an()}));const r=e.content;let l=await t.getchatbotresponse(r,s),A=l?l.responseText:"Unable to answer your question at this time. Try to ask again!";sn.find((n=>n.id===i)).content=A,en[a.id]=!1;let c=null==l?void 0:l.verifiedUrls;if(c&&c.length>0){let n=c.map((n=>({pageName:n.substring(n.lastIndexOf("/")+1).replace(/-/g," ").replace(/\b\w/g,(n=>n.toUpperCase())),linkUrl:n})));a.links=n}let d=l.followUpQuestions;d&&d.length>0&&(a.followUpQuestions=((n,e)=>{const t=n.slice();for(let n=t.length-1;n>0;n--){const e=Math.floor(Math.random()*(n+1));[t[n],t[e]]=[t[e],t[n]]}return t.slice(0,Math.min(3,t.length))})(d)),(0,o.Y3)((()=>{an()}))},cn=n=>n.role===on,dn=()=>{sn.splice(1,sn.length)};let pn=!1,un=0,gn=0,hn=900,mn=700;const fn=n=>{var e,t;J.value=!0,n.stopPropagation(),n.preventDefault(),pn=!0,un=n.clientX,gn=n.clientY,hn=(null===(e=d.value)||void 0===e?void 0:e.offsetWidth)||0,mn=(null===(t=d.value)||void 0===t?void 0:t.offsetHeight)||0,document.body.style.cursor="nwse-resize",document.body.style.userSelect="none",document.addEventListener("mousemove",bn),document.addEventListener("mouseup",Cn)},bn=n=>{if(pn){n.stopPropagation(),n.preventDefault();const e=hn+(un-n.clientX),t=mn+(gn-n.clientY),o=d.value;o&&(o.style.width=`${Math.max(500,e)}px`,o.style.height=`${Math.max(700,t)}px`,sn.some((n=>cn(n)&&n.showFeedBack))||an())}},Cn=()=>{J.value=!1,pn=!1,document.body.style.cursor="auto",document.body.style.userSelect="auto",document.removeEventListener("mousemove",bn),document.removeEventListener("mouseup",Cn)},xn=n=>cn(n)&&en[n.id],Bn=n=>n.role===tn?"user-message":"chatbot-message",vn=new(p()),wn=n=>{let e=vn.render(n);return e=e.replace(/<code>/g,"<code style='color:#ee4f54; font-weight: bold;'>"),e},Qn=n=>{$.value=!1};return(n,e)=>((0,o.wg)(),(0,o.iD)("div",h,[J.value?((0,o.wg)(),(0,o.iD)("div",m)):(0,o.kq)("v-if",!0),(0,o._)("button",{onClick:rn,class:"chatbot-icon-container"},f),V.value?((0,o.wg)(),(0,o.iD)("div",{key:1,class:"chat-window-container",ref_key:"chatWindowContainerRef",ref:d},[(0,o._)("div",b,[(0,o._)("i",{class:"mdi mdi-resize-bottom-right chatbot-resize-icon",onMousedown:fn},null,32),(0,o._)("div",{class:"icon-group"},[(0,o._)("button",{class:"menu-buttons",onClick:rn},C)])]),(0,o._)("div",x,[(0,o._)("div",{class:"chat-messages",ref_key:"chatWindowRef",ref:l},[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(sn,(n=>((0,o.wg)(),(0,o.iD)("div",{key:n.id,class:(0,s.normalizeClass)(Bn(n))},[(0,o.kq)(' <i v-if="isChatbotResponse(message) && !isLoadingChatbotResponse(message)" class="mdi mdi-robot-happy-outline chat-icons"></i> '),(0,o._)("div",{class:"message-content",onMouseenter:e=>(n=>{cn(n)&&(n.showFeedBack=!0)})(n),onMouseleave:e=>(n=>{cn(n)&&(n.showFeedBack=!1)})(n)},[(0,o.kq)(' <i v-if="isChatbotResponse(message) && !isLoadingChatbotResponse(message)" class="mdi mdi-robot-happy-outline chat-icons"></i>\n                            <i v-if="!isChatbotResponse(message)" class="mdi mdi-account-circle chat-icons"></i> '),cn(n)?((0,o.wg)(),(0,o.iD)("div",{key:n.id,class:"markdown-content response-text",innerHTML:wn(n.content)},null,8,v)):((0,o.wg)(),(0,o.iD)("div",w,(0,s.toDisplayString)(n.content),1)),0===n.id&&cn(n)?((0,o.wg)(),(0,o.iD)("div",Q,[y,(0,o._)("div",k,[((0,o.wg)(),(0,o.iD)(o.HY,null,(0,o.Ko)(G,((n,e)=>(0,o._)("button",{key:e,onClick:e=>ln(n),class:"question-button"},(0,s.toDisplayString)(n),9,I))),64))])])):(0,o.kq)("v-if",!0),cn(n)&&(0,i.SU)(en)[n.id]?((0,o.wg)(),(0,o.iD)("div",M,z)):(0,o.kq)("v-if",!0),cn(n)&&n.links?((0,o.wg)(),(0,o.iD)("div",E,[W,((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.links,((n,e)=>((0,o.wg)(),(0,o.iD)("a",{key:e,href:n.linkUrl,target:"_blank",class:"link-button response-text"},[q,(0,o.Uk)((0,s.toDisplayString)(n.pageName),1)],8,R)))),128))])):(0,o.kq)("v-if",!0),cn(n)&&n.followUpQuestions&&n.followUpQuestions.length>0?((0,o.wg)(),(0,o.iD)("div",Y,[U,(0,o._)("div",S,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.followUpQuestions,(n=>((0,o.wg)(),(0,o.iD)("button",{key:n,onClick:e=>ln(n),class:"question-button"},(0,s.toDisplayString)(n),9,_)))),128))])])):(0,o.kq)("v-if",!0),cn(n)&&n.showFeedBack&&!xn(n)?((0,o.wg)(),(0,o.iD)("div",F,[(0,o.kq)(" <div style=\"font-size: 10px; font-family: 'Roboto'; margin-right: 4px; margin-top: 4px;\">Was this helpful?</div> "),(0,o._)("div",D,[(0,o._)("button",{class:"feedback-button",onClick:e[0]||(e[0]=n=>Qn())},j),H,(0,o._)("button",{class:"feedback-button",onClick:e[1]||(e[1]=n=>Qn())},L)])])):(0,o.kq)("v-if",!0)],40,B)],2)))),128))],512),(0,o._)("div",T,[(0,o._)("button",{class:"reset-button",onClick:dn},Z),(0,o._)("div",X,[(0,o.wy)((0,o._)("textarea",{"onUpdate:modelValue":e[2]||(e[2]=n=>K.value=n),onKeyup:(0,a.withKeys)(An,["enter"]),type:"text",placeholder:"Ask me about Plateau Studio...",class:"input-field",maxlength:1e3,rows:"1"},null,40,P),[[a.vModelText,K.value]]),(0,o._)("div",O,[(0,o._)("div",N,(0,s.toDisplayString)(K.value.length)+"/1000",1),(0,o._)("i",{class:"mdi mdi-send send-icon",onClick:An})])])])])],512)):(0,o.kq)("v-if",!0)]))}});var K=t(17450),$=t.n(K),G=t(29530),J=t.n(G),nn=t(16199),en=t.n(nn),tn=t(40458),on=t.n(tn),sn=t(62916),an=t.n(sn),rn=t(92165),ln=t.n(rn),An=t(26693),cn={};cn.styleTagTransform=ln(),cn.setAttributes=on(),cn.insert=en().bind(null,"head"),cn.domAPI=J(),cn.insertStyleElement=an(),$()(An.Z,cn),An.Z&&An.Z.locals&&An.Z.locals;const dn=(0,t(32525).Z)(V,[["__scopeId","data-v-7f532546"]])}}]);
//# sourceMappingURL=9721.js.map
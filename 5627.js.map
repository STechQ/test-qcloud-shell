{"version":3,"file":"5627.js?ver=0.0.310_1709708822033","mappings":"8HASA,IAAIA,GAAe,EACnB,IAAIC,SAAcC,GAAOA,MAAOC,MAAK,IAAMH,GAAe,IACrC,oBAAf,WAA8BI,YACpC,MAAMC,GAAsC,IAAjBL,EAMpB,SAASM,EAAqBC,EAAkBC,EAAoC,CAAC,GAExF,IAAIC,EAA2CC,EAC3CC,EACJ,MAAMC,EAA6CL,IAC3CI,GAASE,aAAaF,GAC1BA,EAAQG,YAAW,KAAQJ,EAAO,IAAIK,MAAM,gDAAgDR,KAAW,GAAKA,EAA6B,EAO7I,OAJIA,GACAK,EAAWL,GAGR,CACHK,aACAI,QAAS,IAAIf,SAAW,CAACC,EAAKe,KAdT,IAACC,IAc8ChB,EAA5BO,EAdKJ,GAAsBG,EAAIW,eAAkBC,GAA8BN,YAAW,IAAMI,EAAGE,KAAUF,EAc3ER,EAASO,CAAG,IACtFR,WACAC,SAER,C,mHChCO,SAASW,EAAgBH,GAC5B,IAAII,EACJ,MAAO,IACIA,IAAWA,EAASJ,IAEnC,CAEA,SAASK,IACL,MAAMC,GAAO,SAEb,OADAV,YAAW,KAAQU,EAAKf,UAAU,GAAI,KAC/Be,EAAKR,OAChB,CAEOS,eAAeC,EAA6BC,EAAoBT,SAC7DU,EAAiB,CAACD,IACxB,MAAME,EAAM,aAA8BF,SACpCT,EAAGW,EACb,CACOJ,eAAeG,EAAiBE,EAA6BZ,GAChE,IAAIa,GAAM,EACV,MAAQA,GACJ,IACID,EAAaE,SAAQL,GAAc,aAAkBA,KACrDI,GAAM,C,CACR,MAAOE,SACCV,G,OAGRL,aAAE,EAAFA,IACV,C","sources":["webpack://qcloud_shell/./src/common/promiseHelper.ts","webpack://qcloud_shell/./src/domain/core/diContainer.ts"],"sourcesContent":["export interface IPromiseData<T> {\n    promise: Promise<T>;\n    resolver: (value: T | PromiseLike<T>) => void;\n    reject: (reason?: any) => void;\n    startTimer: (timeout: number) => void;\n}\n\n//some platforms have syncronous resolve problem (ex: IOS JavascriptCore)\ndeclare var doNothing: any;\nlet syncResolved = false as boolean;\nnew Promise<void>(res => res()).then(() => syncResolved = true);\ntypeof(doNothing) != \"undefined\" && doNothing();\nconst syncResolveProblem = syncResolved === true; // platform has sync resolve problem or not\n\ntype ResolveFunc<T> = (value: T | PromiseLike<T>) => void;\n/**\n * @param timeout timeout time in ms, undefined if infinite\n */\nexport function createPromiseData<T>(timeout?: number, opt: { fixSyncResolve?: boolean } = {}): IPromiseData<T> {\n    const syncResolveFixer = (cb: ResolveFunc<T>) => syncResolveProblem && opt.fixSyncResolve ? (value: T | PromiseLike<T>) => setTimeout(() => cb(value)) : cb;\n    let resolver: ResolveFunc<T> = <any>undefined, reject: (reason?: any) => void = <any>undefined;\n    let timer: number;\n    const startTimer: IPromiseData<T>[\"startTimer\"] = (timeout: number) => {\n        if (timer) { clearTimeout(timer); }\n        timer = setTimeout(() => { reject(new Error(`The operation has timed out. timeoutValue  : ${timeout}`)); }, timeout) as unknown as number;\n    }\n\n    if (timeout) {\n        startTimer(timeout);\n    }\n\n    return {\n        startTimer,\n        promise: new Promise<T>((res, rej) => { resolver = syncResolveFixer(res); reject = rej; }),\n        resolver,\n        reject\n    };\n}","import { DependencyContainer, container, inject, injectable, singleton } from \"tsyringe\";\nimport { createPromiseData } from \"../../common/promiseHelper\";\n\ninterface IDependencyContainer extends DependencyContainer { }; // for vite vs webpack :( remember\n\nexport function cacheResolve<T>(cb: () => T) {\n    let cached: T | undefined = undefined;\n    return () => {\n        return cached || (cached = cb());\n    };\n}\n\nfunction sleep() {\n    const prom = createPromiseData<void>();\n    setTimeout(() => { prom.resolver() }, 100);\n    return prom.promise;\n}\n\nexport async function delayWithResolve<TInterface>(dependency: symbol, cb: (dep: TInterface) => void | Promise<void>) {\n    await delayTillResolve([dependency]);\n    const dep = container.resolve<TInterface>(dependency);\n    await cb(dep);\n}\nexport async function delayTillResolve(dependencies: Array<symbol>, cb?: () => void | Promise<void>) {\n    let run = false;\n    while (!run) {\n        try {\n            dependencies.forEach(dependency => container.resolve(dependency));\n            run = true;\n        } catch (err) {\n            await sleep();\n        }\n    }\n    await cb?.();\n}\n\nexport { IDependencyContainer, container, inject, injectable, singleton };\n"],"names":["syncResolved","Promise","res","then","doNothing","syncResolveProblem","createPromiseData","timeout","opt","resolver","reject","timer","startTimer","clearTimeout","setTimeout","Error","promise","rej","cb","fixSyncResolve","value","cacheResolve","cached","sleep","prom","async","delayWithResolve","dependency","delayTillResolve","dep","dependencies","run","forEach","err"],"sourceRoot":""}
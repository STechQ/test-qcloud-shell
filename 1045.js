"use strict";(this.webpackChunkqcloud_shell=this.webpackChunkqcloud_shell||[]).push([[1045],{10410:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(34663),i=n.n(o),a=n(7638),s=n.n(a)()(i());s.push([e.id,'\n*[data-v-050f53c1]{\n  font-family: "Roboto";\n}\nul[data-v-050f53c1] {\n  list-style-type: none;\n}\n.move-to-target .mdi[data-v-050f53c1] {\n  font-size: 24px;\n  margin-right: 10px;\n}\n',"",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AAyGA;EACE,qBAAqB;AACvB;AACA;EACE,qBAAqB;AACvB;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { ITreeItem, ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IMoveUseCase } from \'../../../../domain/useCase/IMoveUseCase\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n  itemToBeMoved: IModel;\n}\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst moveUseCase = container.resolve<IMoveUseCase>(IMoveUseCase);      \nconst props = defineProps<IMoveItemInline>();\nconst selectedItem = props.itemToBeMoved;\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\n\nlet actions: { path: Array<string>; icon: string; label: string; indent: number; id: string }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet items = viewModel.studio.items;\n// const moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\n\nasync function move(targetFolderPath: Array<string>, targetFolderId: string) {\n    await executor.execute(async () => {\n      await moveUseCase.moveItem( targetFolderPath, targetFolderId, selectedItem);\n      emit("close");\n    }, { loading: true });\n}\n\n\nfunction getSortedItems(items: Array<IModel | IModule>) {\n  function getChildren(parentId: string) {\n    return items.filter(item => (item.path ? item.path[item.path.length - 1] === parentId : false) || (item.parent ? item.parent.ID == parentId : false));\n  }\n\n  function sortItems(parentId: string) {\n    const result: Array<IModel | IModule> = [];\n\n    const directChildren = getChildren(parentId);\n    for (const child of directChildren) {\n      result.push(child);\n      result.push(...sortItems(child.ID));\n    }\n\n    return result;\n  }\n\n  items.sort((a, b) => {\n    let aPath = a.path ?? [];\n    let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n      return aPath.length - bPath.length;\n    }\n    else{\n      return a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n    }\n\n  });\n\n  return items.filter(item => item.path ? item.path.length === 0 : true)\n    .reduce<Array<IModel | IModule>>((acc, rootItem) => {\n      acc.push(rootItem);\n      acc.push(...sortItems(rootItem.ID));\n      return acc;\n    }, []);\n}\nconst sortedItems = getSortedItems(items);\n\nfor (let sortedItem of sortedItems) {\n    if(sortedItem.objectType == "model") {\n      if (sortedItem.modelType == "placeholder") {\n        let indentCalculated = sortedItem.path ? (sortedItem.path.length * 20 + 20) : 20;\n        actions.push({ path: sortedItem.path ?? [], icon: "mdi mdi-folder-open", label: sortedItem.name, indent: indentCalculated, id: sortedItem.ID })\n      }\n    }\n    else if(sortedItem.objectType == "module") {\n      actions.push({ path: sortedItem.path ?? [], icon: "mdi mdi-puzzle", label: sortedItem.name, indent: 20, id: sortedItem.ID })\n    }\n}\n\n<\/script> \n\n<template>\n  <div>\n    <div id="content-area" class="popover__content">\n      <div style="height: 100%" class="errorDiv">\n        <ul style="padding-left: 0px; margin-bottom: 0px; padding-top: 5px; padding-bottom: 10px;">\n          <li v-for="action in actions" :key="action.label" class="move-to-item" :class="moveUseCase.isMoveable(action.path, action.id, selectedItem) ? \'\' : \'item-disabled\'" @click="move(action.path, action.id)"\n            :style="{ \'padding-left\': (action.indent + 20) + \'px\' }">\n            <div class="move-to-target">\n              <i :class="action.icon" style="margin-right: 10px;"></i><span>{{ action.label }}</span>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<style scoped>\n*{\n  font-family: "Roboto";\n}\nul {\n  list-style-type: none;\n}\n\n.move-to-target .mdi {\n  font-size: 24px;\n  margin-right: 10px;\n}\n</style>\n\n\n \n\n<style scoped>\n.move-to-target {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n\n.createLi {\n  cursor: pointer;\n}\n\n.move-to-item {\n  padding-top: 1px;\n  padding-right: 20px;\n}\n.move-to-item:not(.item-disabled):hover {\n  background: #D5D5D5;\n}\n.item-disabled {\n  opacity: 0.5;\n}\n</style>'],sourceRoot:""}]);const r=s},47669:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(34663),i=n.n(o),a=n(7638),s=n.n(a)()(i());s.push([e.id,"\n.move-to-target[data-v-050f53c1] {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n.createLi[data-v-050f53c1] {\n  cursor: pointer;\n}\n.move-to-item[data-v-050f53c1] {\n  padding-top: 1px;\n  padding-right: 20px;\n}\n.move-to-item[data-v-050f53c1]:not(.item-disabled):hover {\n  background: #D5D5D5;\n}\n.item-disabled[data-v-050f53c1] {\n  opacity: 0.5;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AA0HA;EACE,SAAS;EACT,cAAc;EACd,gBAAgB;EAChB,eAAe;EACf,mBAAmB;EACnB,eAAe;EACf,aAAa;EACb,mBAAmB;AACrB;AAEA;EACE,eAAe;AACjB;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,YAAY;AACd",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { ITreeItem, ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IMoveUseCase } from \'../../../../domain/useCase/IMoveUseCase\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n  itemToBeMoved: IModel;\n}\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst moveUseCase = container.resolve<IMoveUseCase>(IMoveUseCase);      \nconst props = defineProps<IMoveItemInline>();\nconst selectedItem = props.itemToBeMoved;\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\n\nlet actions: { path: Array<string>; icon: string; label: string; indent: number; id: string }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet items = viewModel.studio.items;\n// const moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\n\nasync function move(targetFolderPath: Array<string>, targetFolderId: string) {\n    await executor.execute(async () => {\n      await moveUseCase.moveItem( targetFolderPath, targetFolderId, selectedItem);\n      emit("close");\n    }, { loading: true });\n}\n\n\nfunction getSortedItems(items: Array<IModel | IModule>) {\n  function getChildren(parentId: string) {\n    return items.filter(item => (item.path ? item.path[item.path.length - 1] === parentId : false) || (item.parent ? item.parent.ID == parentId : false));\n  }\n\n  function sortItems(parentId: string) {\n    const result: Array<IModel | IModule> = [];\n\n    const directChildren = getChildren(parentId);\n    for (const child of directChildren) {\n      result.push(child);\n      result.push(...sortItems(child.ID));\n    }\n\n    return result;\n  }\n\n  items.sort((a, b) => {\n    let aPath = a.path ?? [];\n    let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n      return aPath.length - bPath.length;\n    }\n    else{\n      return a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n    }\n\n  });\n\n  return items.filter(item => item.path ? item.path.length === 0 : true)\n    .reduce<Array<IModel | IModule>>((acc, rootItem) => {\n      acc.push(rootItem);\n      acc.push(...sortItems(rootItem.ID));\n      return acc;\n    }, []);\n}\nconst sortedItems = getSortedItems(items);\n\nfor (let sortedItem of sortedItems) {\n    if(sortedItem.objectType == "model") {\n      if (sortedItem.modelType == "placeholder") {\n        let indentCalculated = sortedItem.path ? (sortedItem.path.length * 20 + 20) : 20;\n        actions.push({ path: sortedItem.path ?? [], icon: "mdi mdi-folder-open", label: sortedItem.name, indent: indentCalculated, id: sortedItem.ID })\n      }\n    }\n    else if(sortedItem.objectType == "module") {\n      actions.push({ path: sortedItem.path ?? [], icon: "mdi mdi-puzzle", label: sortedItem.name, indent: 20, id: sortedItem.ID })\n    }\n}\n\n<\/script> \n\n<template>\n  <div>\n    <div id="content-area" class="popover__content">\n      <div style="height: 100%" class="errorDiv">\n        <ul style="padding-left: 0px; margin-bottom: 0px; padding-top: 5px; padding-bottom: 10px;">\n          <li v-for="action in actions" :key="action.label" class="move-to-item" :class="moveUseCase.isMoveable(action.path, action.id, selectedItem) ? \'\' : \'item-disabled\'" @click="move(action.path, action.id)"\n            :style="{ \'padding-left\': (action.indent + 20) + \'px\' }">\n            <div class="move-to-target">\n              <i :class="action.icon" style="margin-right: 10px;"></i><span>{{ action.label }}</span>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<style scoped>\n*{\n  font-family: "Roboto";\n}\nul {\n  list-style-type: none;\n}\n\n.move-to-target .mdi {\n  font-size: 24px;\n  margin-right: 10px;\n}\n</style>\n\n\n \n\n<style scoped>\n.move-to-target {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n\n.createLi {\n  cursor: pointer;\n}\n\n.move-to-item {\n  padding-top: 1px;\n  padding-right: 20px;\n}\n.move-to-item:not(.item-disabled):hover {\n  background: #D5D5D5;\n}\n.item-disabled {\n  opacity: 0.5;\n}\n</style>'],sourceRoot:""}]);const r=s},11045:(e,t,n)=>{n.r(t),n.d(t,{default:()=>k});var o=n(71093),i=n(73843),a=n(66190),s=n(5627),r=n(64288),l=n(83487),d=n(88613);const m={id:"content-area",class:"popover__content"},p={style:{height:"100%"},class:"errorDiv"},c={style:{"padding-left":"0px","margin-bottom":"0px","padding-top":"5px","padding-bottom":"10px"}},u=["onClick"],I={class:"move-to-target"},h=(0,o.aZ)({__name:"moveItem",props:{itemToBeMoved:null},emits:["close"],setup(e,{emit:t}){var n,h;const v=e,g=s.nC.resolve(l.y),f=s.nC.resolve(r.E),A=v.itemToBeMoved,C=s.nC.resolve(d.J);let y=[];y.push({path:[],icon:"mdi mdi-vector-polyline",label:C.studio.appName,indent:0,id:C.studio.appId});const b=function(e){function t(n){const o=[],i=function(t){return e.filter((e=>!!e.path&&e.path[e.path.length-1]===t||!!e.parent&&e.parent.ID==t))}(n);for(const e of i)o.push(e),o.push(...t(e.ID));return o}return e.sort(((e,t)=>{var n,o;let i=null!==(n=e.path)&&void 0!==n?n:[],a=null!==(o=t.path)&&void 0!==o?o:[];return i.length!==a.length?i.length-a.length:e.name.toLowerCase().localeCompare(t.name.toLowerCase())})),e.filter((e=>!e.path||0===e.path.length)).reduce(((e,n)=>(e.push(n),e.push(...t(n.ID)),e)),[])}(C.studio.items);for(let e of b)if("model"==e.objectType){if("placeholder"==e.modelType){let t=e.path?20*e.path.length+20:20;y.push({path:null!==(n=e.path)&&void 0!==n?n:[],icon:"mdi mdi-folder-open",label:e.name,indent:t,id:e.ID})}}else"module"==e.objectType&&y.push({path:null!==(h=e.path)&&void 0!==h?h:[],icon:"mdi mdi-puzzle",label:e.name,indent:20,id:e.ID});return(e,n)=>((0,o.wg)(),(0,o.iD)("div",null,[(0,o._)("div",m,[(0,o._)("div",p,[(0,o._)("ul",c,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)((0,i.SU)(y),(e=>((0,o.wg)(),(0,o.iD)("li",{key:e.label,class:(0,a.normalizeClass)(["move-to-item",(0,i.SU)(f).isMoveable(e.path,e.id,(0,i.SU)(A))?"":"item-disabled"]),onClick:n=>async function(e,n){await g.execute((async()=>{await f.moveItem(e,n,A),t("close")}),{loading:!0})}(e.path,e.id),style:(0,a.normalizeStyle)({"padding-left":e.indent+20+"px"})},[(0,o._)("div",I,[(0,o._)("i",{class:(0,a.normalizeClass)(e.icon),style:{"margin-right":"10px"}},null,2),(0,o._)("span",null,(0,a.toDisplayString)(e.label),1)])],14,u)))),128))])])])]))}});var v=n(17450),g=n.n(v),f=n(29530),A=n.n(f),C=n(16199),y=n.n(C),b=n(40458),M=n.n(b),x=n(62916),w=n.n(x),E=n(92165),B=n.n(E),D=n(10410),T={};T.styleTagTransform=B(),T.setAttributes=M(),T.insert=y().bind(null,"head"),T.domAPI=A(),T.insertStyleElement=w(),g()(D.Z,T),D.Z&&D.Z.locals&&D.Z.locals;var P=n(47669),U={};U.styleTagTransform=B(),U.setAttributes=M(),U.insert=y().bind(null,"head"),U.domAPI=A(),U.insertStyleElement=w(),g()(P.Z,U),P.Z&&P.Z.locals&&P.Z.locals;const k=(0,n(32525).Z)(h,[["__scopeId","data-v-050f53c1"]])}}]);
//# sourceMappingURL=1045.js.map?ver=0.0.285_1701778355699
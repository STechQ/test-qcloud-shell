{"version":3,"file":"4349.js","mappings":"6HAWO,MAAMA,EAAUC,OAAOC,IAAI,U,kCCqB3B,MAAMC,EAAWF,OAAOC,IAAI,W,kCC0I5B,MAAME,EAAaH,OAAOC,IAAI,a","sources":["webpack://qcloud_shell/./src/domain/infrastructure/IConfig.ts","webpack://qcloud_shell/./src/domain/infrastructure/INetwork.ts","webpack://qcloud_shell/./src/domain/infrastructure/IQCloudApi.ts"],"sourcesContent":["import { ISettings } from \"../model/ISettings\";\nimport * as environmentData from \"../../environment\";\nexport interface IConfig {\n    readonly basePath: string;\n    readonly urlOrigin: string;\n\n    getValue<TKey extends keyof ISettings>(key: TKey): Readonly<ISettings[TKey]>;\n    getVersion(): string;\n    getPresentationLayer(): typeof environmentData[\"presentationLayer\"];\n    getEnvironmentName(): string;\n}\nexport const IConfig = Symbol.for(\"IConfig\");","import { AxiosResponseHeaders, RawAxiosResponseHeaders } from \"axios\";\n\nexport type Method =\n    | 'get' | 'delete' | 'head' | 'options' | 'post' | 'put' | 'patch' | 'purge' | 'link' | 'unlink'\n    | 'GET' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH' | 'PURGE' | 'LINK' | 'UNLINK';\n\nexport type IRequestHeaders = Record<string, string | number | boolean>;\nexport interface IRequest<TBody> {\n    method: Method\n    url: string;\n    body?: TBody;\n    headers?: IRequestHeaders;\n    timeout?: number;\n    withCredentials?: boolean;\n}\ntype DefinedRequest<TBody> = Omit<IRequest<TBody>, \"method\">;\nexport interface IPostRequest<TBody> extends DefinedRequest<TBody> { }\nexport interface IGetRequest extends Omit<DefinedRequest<undefined>, \"body\"> { }\n\nexport interface IResponse<TRespBody> {\n    body: TRespBody;\n    headers: RawAxiosResponseHeaders | AxiosResponseHeaders;\n    status: number;\n    statusText: string;\n}\n\nexport interface INetwork {\n    post<TRespBody, TBody>(request: IPostRequest<TBody>): Promise<IResponse<TRespBody>>;\n    get<TRespBody>(request: IGetRequest): Promise<IResponse<TRespBody>>;\n    request<TRespBody, TBody>(request: IRequest<TBody>): Promise<IResponse<TRespBody>>;\n    join(...urlParts: Array<string>): string;\n}\nexport const INetwork = Symbol.for(\"INetwork\");","import { ExportType, ICreateDeployJobParam, ICreateExportJobParam, IDeployJobItem, IExportItem, IExportJobData, IExportJobDbItem, IExportJobHistoryDbItem, IExportJobHistoryRequest, IGetExportJobsByGroupIDRequest, IInitJobHistoryRequest, IListExportJobsResponse, JobType } from \"../../../../common/qCloudTemp/exporter\";\nimport { AppSettingsModelKeys, AuthenticationType, IAppDeployParameters, IModelBody, IModelBodyObject, IModelInfo, IQCloudLogItem, ISystemUser, ITenantDefinitions, ModelType, UsageType, IApplicationExportSettings } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IModuleProduct, IModuleProductVer } from \"../../../../common/qCloudTemp/store\";\nimport { ICustomLivePreview, IDefaultLivePreview, ILivePreview, ILivePreviewSettingsRetval } from \"../../../../common/qCloudTemp/livePreview\";\nimport { IApplication, IFolder, IModel, IModule, IExportViewItem, ILoggedInUser, ModelAdditionals, IExportJobItem, ModelHistoryType, IModelHistoryInfo, IExportJobStepItem, ITreeviewItem, IExportJobArtifactInfoItem, IModuleSettingsItem, IApplicationSettingsItem } from \"../model/models\";\nimport { TemplateType, ITemplateInfo } from '../../../../common/qCloudTemp/template';\nimport { IOrganization } from \"../../../../common/qCloudTemp/membership\";\nimport { IAddFeedbackRequest, IAddFeedbackResponse, IAddOrUpdatePreferencesResponse, ICreateOrganizationResponse, IDeleteInvitationRequest, IGetOrganizationUsersRequest, IGetOrganizationUsersResponse, IGetPreferencesResponse, IGetProfileResponse, IInvitationRequest, IListInvitationsResponse, IListOrganizationsResponse, IRemoveUserFromOrganizationRequest, ISignInResponse, IUpdateInvitationRequest, IUpdateProfileResponse } from \"../../../../common/qCloudTemp/symDtoObjects\";\n\nexport interface IGetModelResponse {\n    ID: IModel[\"ID\"];\n    name: IModel[\"name\"];\n    checkouts?: Array<{ user: string, date: string }>;\n    modelType: IModel[\"modelType\"];\n    modelAdditionals: IModel[\"additionals\"];\n    model?: Array<IModelBodyObject>;\n    size?: number;\n}\n\nexport interface IGetModelHistoryResponse extends IGetModelResponse {\n    modelID: string;\n    historyType: string;\n    ownerItem: string;\n    version: string\n}\nexport interface IlistExportJobStepLogsResponse {\n    logs: Array<string>;\n}\nexport interface IDublicateModelResponse {\n    modelInfo: IModelInfo;\n    modelBody: Array<IModelBody>;\n}\n\nexport interface IUpdateLivePreviewRequest {\n    links?: ICustomLivePreview[\"links\"];\n    deepLinkParam?: ICustomLivePreview[\"deepLinkParam\"];\n    models?: ICustomLivePreview[\"models\"];\n    expiryDate?: ICustomLivePreview[\"expiryDate\"];\n    password?: ICustomLivePreview[\"password\"];\n    selected?: ICustomLivePreview[\"selected\"];\n}\n\nexport interface ICreateLivePreviewRequest {\n    appID: string;\n    type: ILivePreview[\"type\"];\n    links?: ICustomLivePreview[\"links\"];\n    deepLinkParam?: ICustomLivePreview[\"deepLinkParam\"];\n    models?: ICustomLivePreview[\"models\"];\n    expiryDate?: ICustomLivePreview[\"expiryDate\"];\n    password?: ICustomLivePreview[\"password\"];\n    selected: ICustomLivePreview[\"selected\"];\n}\n\nexport interface ICreateModelFromTemplateParam {\n    name: string;\n    parentObjectId: string;\n    modelInfoID: string;\n    modelType: ModelType;\n    modelAdditionals: ModelAdditionals;\n}\n\nexport interface IListModelsRequest {\n    applicationID: string;\n    getModelBodies?: boolean;\n    usageType?: UsageType;\n}\n\nexport interface ICreateUserRequest { \n    name: string;\n    mailAddress: string;\n    password: string;\n}\n\nexport interface IUpdateApplicationRequestParams {\n    name?: string;\n    description?: string;\n    logo?: string;\n    color?: string;\n    ownerUser?: ILoggedInUser;\n    deployParameters?: IAppDeployParameters;\n    shortID24?: string;\n    exportSettings?: IApplicationExportSettings;\n}\n\nexport interface IQCloudApi {\n    signIn(invitationId?: string): Promise<ISignInResponse>;\n    signOut(): Promise<void>;\n    getProfile(): Promise<IGetProfileResponse>;\n    updateProfile(properties: { name: string, lastName: string, role: string, }): Promise<IUpdateProfileResponse>;\n    getPreferences(): Promise<IGetPreferencesResponse>;\n    updatePreferences(preferences: { emailConsent: boolean; }): Promise<IAddOrUpdatePreferencesResponse>\n    listOrganizations(): Promise<Array<IListOrganizationsResponse>>;\n    getOrganization(organizationId: IOrganization[\"id\"]): Promise<IOrganization>;\n    listUserInvitations(): Promise<IListInvitationsResponse>;\n    createOrganization(name: IOrganization[\"name\"]): Promise<ICreateOrganizationResponse>;\n\n\n\n    createModel(params: { name: string, parentObject: IApplication | IModule | IFolder, modelBody: Array<IModelBodyObject> | undefined, modelType: ModelType, modelAdditionals?: ModelAdditionals, usageType?: UsageType, key?: AppSettingsModelKeys }): PromiseLike<IModel>;\n    createModule(name: string, options: { description?: string; applicationID?: string }): Promise<IModule>;\n    createApplication(params: { name: string, description?: string, logo?: string, color?: string, deployParameters?: IAppDeployParameters }): PromiseLike<{ application: IApplication, organization: IOrganization }>;\n    createLog(logItem: IQCloudLogItem): Promise<{ ID: string; }>;\n    getModelInfo(ID: string, params?: { checkoutControl?: boolean; createCheckout?: boolean; }): Promise<IGetModelResponse>;\n    getModel(ID: string, params?: { checkoutControl?: boolean, createCheckout?: boolean, retrieveBody?: boolean }): Promise<IGetModelResponse>;\n    getModelBody(ID: string): Promise<{ ID: string, model: IGetModelResponse[\"model\"] }>;\n    updateModel(ID: string, params: {\n        name?: string, model?: Array<IModelBodyObject>, checkin?: boolean, release?: boolean, publish?: boolean, shortComment?: string, comment?: string,\n        parentObject?: IApplication | IModule | IFolder, modelType?: ModelType, modelAdditionals?: ModelAdditionals, ownerUser?: ILoggedInUser\n    }): PromiseLike<void>;\n    updateModule(ID: string, params: { name?: string, description?: string, ownerUser?: ILoggedInUser, }): PromiseLike<{ module: IModule }>;\n    updateFolder(ID: string, params: { name: string }): Promise<void>;\n    updateApplication(ID: string, params: IUpdateApplicationRequestParams): PromiseLike<{ app: IApplication }>;\n    deleteModel(ID: string, addHistory?: boolean): PromiseLike<void>;\n    deleteModule(ID: string, addHistory?: boolean): PromiseLike<void>;\n    deleteFolder(ID: string, addHistory?: boolean): PromiseLike<void>;\n    deleteApplication(ID: string, addHistory?: boolean): PromiseLike<void>;\n    duplicateModel(sourceModel: IModel, name: string): Promise<IModel>;\n    listApplications(getDetails?: boolean): PromiseLike<Array<IApplication>>;\n    listModules(applicationID?: string): Promise<Array<IModule>>;\n    listModels(options: IListModelsRequest): Promise<Array<IGetModelResponse>>;\n    getLPSettings(appID: string): Promise<Record<AppSettingsModelKeys, ILivePreviewSettingsRetval>>;\n    listModuleChildItems(module: IModule): Promise<Array<IModel>>;\n    listModelBodies(modelIDs: Array<string>): Promise<Array<IModelBody>>;\n    getApplicationDetails(appID: string): PromiseLike<IApplication[\"details\"]>;\n    getApplication(appID: string): Promise<IApplication>;\n    getExportTypes(): Promise<Array<{ name: ExportType; text: string; }>>;\n    getExportSelectionData(applicationID: string, exportType: ExportType): Promise<Array<IExportViewItem>>;\n    listModelHistories(modelID: string, historyType?: ModelHistoryType | undefined): Promise<IModelHistoryInfo[]>;\n    listMultiModelHistories(modelIDs: Array<string>, historyType?: ModelHistoryType | undefined): Promise<IModelHistoryInfo[]>;\n    getModelHistory(historyID: string): Promise<IGetModelHistoryResponse>;\n    createExportJob(appID: string, exportType: ExportType, exportItems: Array<IExportItem>, groupID: string, layer: number): Promise<IExportJobItem>;\n    createDeployJobs(deployJobs: Array<IDeployJobItem>, isGroup: boolean): Promise<void>;\n    createBuildJobs(jobs: Array<ICreateDeployJobParam>): Promise<Array<IExportJobDbItem>>;\n    addDeletePlateauEnvJob(appID: string): Promise<void>;\n    startDeploymentJob(param: ICreateDeployJobParam): Promise<IExportJobDbItem>;\n    createPackJobs(jobs: Array<ICreateExportJobParam>): Promise<Array<IExportJobDbItem>>;\n    getExportJobsByGroupId(req: IGetExportJobsByGroupIDRequest): Promise<IListExportJobsResponse>;\n    listExportJobs(jobType: JobType, options?: { appID?: string }): Promise<Array<IExportJobItem>>;\n    initPublishHistory(request: IInitJobHistoryRequest): Promise<IExportJobHistoryDbItem>;\n    listApplicationJobHistory(request: IExportJobHistoryRequest): Promise<Array<IExportJobHistoryDbItem>>;\n    listExportJobSteps(ID: string, isMultiStep?: boolean): Promise<Array<IExportJobStepItem>>;\n    listExportJobStepLogs(stepID: string): Promise<IlistExportJobStepLogsResponse>;\n    listExportJobArtifacts(ID: string): Promise<Array<IExportJobArtifactInfoItem>>;\n    listTreeviewItems(applicationID: string): Promise<Array<ITreeviewItem>>;\n    updateApplicationSettings(settings: { modulesSettings?: Array<IModuleSettingsItem>, applicationSettings?: IApplicationSettingsItem }): Promise<void>;\n    attachModuletoApplication(appID: string, moduleID: string): Promise<void>;\n    detachModuleFromApplication(appID: string, moduleID: string): Promise<void>;\n    getApplicationUISettings(applicationID?: string): Promise<Array<ITenantDefinitions>>;\n    getApplicationDeploySettings(applicationID: string): Promise<ITenantDefinitions[]>;\n    getTenantDefinition(ID: string): Promise<ITenantDefinitions>;\n    setRootScreen(ID: string): Promise<void>;\n    putModuleInStore(objectID: string): Promise<{ product: IModuleProduct; productVer: IModuleProductVer }>;\n    createLivePreview(options?: ICreateLivePreviewRequest): Promise<ILivePreview>;\n    updateLivePreview(ID: string, options?: IUpdateLivePreviewRequest): PromiseLike<void>;\n    updateSelectedLivePreview(appID: string): PromiseLike<void>;\n    getLivePreviewInfo(appID: string, options?: { selected?: boolean; type?: ILivePreview[\"type\"]; }): Promise<ICustomLivePreview | IDefaultLivePreview>;\n    listLivePreviewInfo(appID: string): Promise<Array<ICustomLivePreview | IDefaultLivePreview>>;\n    listTemplateInfos(type?: TemplateType): Promise<Array<ITemplateInfo>>;\n    createModelFromTemplate(params: {modelInfoID: ITemplateInfo[\"ID\"], modelType: ModelType, name: string, parentObject: IApplication | IModule | IFolder, modelAdditionals?: ModelAdditionals }): Promise<IModel>;\n\n    createInvitation(request: IInvitationRequest): Promise<void>;\n    listOrganizationUsers(request: IGetOrganizationUsersRequest): Promise<IGetOrganizationUsersResponse>;\n    listOrganizationInvitations(): Promise<IListInvitationsResponse>;\n    deleteInvitation(request: IDeleteInvitationRequest): Promise<void>;\n    removeUserFromOrganization(request: IRemoveUserFromOrganizationRequest): Promise<void>;\n    updateInvitation(request: IUpdateInvitationRequest): Promise<void>;\n\n    createFeedback(request: IAddFeedbackRequest): Promise<IAddFeedbackResponse>\n}\n\nexport const IQCloudApi = Symbol.for(\"IQCloudApi\");"],"names":["IConfig","Symbol","for","INetwork","IQCloudApi"],"sourceRoot":""}
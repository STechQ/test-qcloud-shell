{"version":3,"file":"569.js?ver=0.0.318_1716972287594","mappings":"4HAWO,MAAMA,EAAUC,OAAOC,IAAI,U,mCCqB3B,MAAMC,EAAWF,OAAOC,IAAI,W","sources":["webpack://qcloud_shell/./src/domain/infrastructure/IConfig.ts","webpack://qcloud_shell/./src/domain/infrastructure/INetwork.ts"],"sourcesContent":["import { ISettings } from \"../model/ISettings\";\nimport * as environmentData from \"../../environment\";\nexport interface IConfig {\n    readonly basePath: string;\n    readonly urlOrigin: string;\n\n    getValue<TKey extends keyof ISettings>(key: TKey): Readonly<ISettings[TKey]>;\n    getVersion(): string;\n    getPresentationLayer(): typeof environmentData[\"presentationLayer\"];\n    getEnvironmentName(): string;\n}\nexport const IConfig = Symbol.for(\"IConfig\");","import { AxiosResponseHeaders, RawAxiosResponseHeaders } from \"axios\";\n\nexport type Method =\n    | 'get' | 'delete' | 'head' | 'options' | 'post' | 'put' | 'patch' | 'purge' | 'link' | 'unlink'\n    | 'GET' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH' | 'PURGE' | 'LINK' | 'UNLINK';\n\nexport type IRequestHeaders = Record<string, string | number | boolean>;\nexport interface IRequest<TBody> {\n    method: Method\n    url: string;\n    body?: TBody;\n    headers?: IRequestHeaders;\n    timeout?: number;\n    withCredentials?: boolean;\n}\ntype DefinedRequest<TBody> = Omit<IRequest<TBody>, \"method\">;\nexport interface IPostRequest<TBody> extends DefinedRequest<TBody> { }\nexport interface IGetRequest extends Omit<DefinedRequest<undefined>, \"body\"> { }\n\nexport interface IResponse<TRespBody> {\n    body: TRespBody;\n    headers: RawAxiosResponseHeaders | AxiosResponseHeaders;\n    status: number;\n    statusText: string;\n}\n\nexport interface INetwork {\n    post<TRespBody, TBody>(request: IPostRequest<TBody>): Promise<IResponse<TRespBody>>;\n    get<TRespBody>(request: IGetRequest): Promise<IResponse<TRespBody>>;\n    request<TRespBody, TBody>(request: IRequest<TBody>): Promise<IResponse<TRespBody>>;\n    join(...urlParts: Array<string>): string;\n}\nexport const INetwork = Symbol.for(\"INetwork\");"],"names":["IConfig","Symbol","for","INetwork"],"sourceRoot":""}
{"version":3,"file":"8532.js?ver=0.0.317_1715151151381","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?aa10","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?6afb","webpack://qcloud_shell/../node_modules/@stechquick/algae/src/helpers/plateau/plateauHelper.ts","webpack://qcloud_shell/../common/helpers/pathHelper.ts","webpack://qcloud_shell/../common/qCloudTemp/modelContants.ts","webpack://qcloud_shell/../common/qCloudTemp/quickCloud.ts","webpack://qcloud_shell/./src/domain/useCase/IApplicationUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/ICreateExportJob.ts","webpack://qcloud_shell/./src/domain/useCase/IDeployJobs.ts","webpack://qcloud_shell/./src/domain/useCase/IFileDisplayerUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IJobUtils.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModelVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModuleVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IPackJobs.ts","webpack://qcloud_shell/./src/domain/useCase/backoffice/IBackofficeUseCase.ts","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?3bef","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?d733","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?0cf9","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.container[data-v-13cd970a] {\\n    padding: 32px 20px 20px;\\n}\\n.settings-container[data-v-13cd970a] {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n.custom-text[data-v-13cd970a] {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n.radio-button[data-v-13cd970a] {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n.radio-text[data-v-13cd970a] {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n.existing-app-url[data-v-13cd970a] {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n.url-error[data-v-13cd970a] {\\n    border: 1px solid red;\\n}\\n.url-disable[data-v-13cd970a] {\\n    opacity: 0.5;\\n}\\n.existing-app-url[data-v-13cd970a]::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n.modules-selected-checkbox[data-v-13cd970a] {\\n    cursor: pointer;\\n}\\n.modules-selected-text[data-v-13cd970a] {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n.text-number[data-v-13cd970a] {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n.modules-datatable[data-v-13cd970a] {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n.modules-datatable[data-v-13cd970a]::-webkit-scrollbar {\\n    width: 4px;\\n}\\n.modules-datatable[data-v-13cd970a]::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n.modules-datatable[data-v-13cd970a]::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n.row-container[data-v-13cd970a] {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n.chevron[data-v-13cd970a] {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n.chevron.disabled[data-v-13cd970a] {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n.module-checkbox[data-v-13cd970a] {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n.module-name[data-v-13cd970a] {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.module-name.imported[data-v-13cd970a] {\\n    top: 10px;\\n    left: 87px;\\n}\\n.module-name.disabled[data-v-13cd970a] {\\n    color: #D5D5D5;\\n}\\n.model-checkbox[data-v-13cd970a] {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n.model-icon[data-v-13cd970a] {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n.app-tier-model-icon[data-v-13cd970a] {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n.app-tier-model-name[data-v-13cd970a] {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.app-tier-model-name.disabled[data-v-13cd970a] {\\n    color: #D5D5D5;\\n}\\n.model-name[data-v-13cd970a] {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.model-name.disabled[data-v-13cd970a] {\\n    color: #D5D5D5;\\n}\\n.version-text[data-v-13cd970a] {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n.version-text.disabled[data-v-13cd970a] {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n.version-icon[data-v-13cd970a] {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n.version-icon.disabled[data-v-13cd970a] {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n.footer[data-v-13cd970a] {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n.footer.deploy[data-v-13cd970a] {\\n    position: relative;\\n    width: 100%;\\n}\\n.footer.export[data-v-13cd970a] {\\n    margin-top: 102px;\\n}\\n.cancel-button[data-v-13cd970a] {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n.save-button[data-v-13cd970a] {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n.mobile-publish-text[data-v-13cd970a],\\n.web-publish-text[data-v-13cd970a] {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n.mobile-publish-text i[data-v-13cd970a],\\n.web-publish-text i[data-v-13cd970a] {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n.save-button.deploy[data-v-13cd970a] {\\n    padding: 10px 16px;\\n}\\n.button-disable .save-button[data-v-13cd970a] {\\n    color: #757575;\\n    cursor: default;\\n}\\n.button-disable .save-button:hover+.button-tooltip[data-v-13cd970a],\\n.start-screen:hover .button-tooltip[data-v-13cd970a],\\n.row-container:hover .button-tooltip[data-v-13cd970a],\\n.publish-info:hover .button-tooltip[data-v-13cd970a] {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n.button-tooltip[data-v-13cd970a] {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n.publish-info[data-v-13cd970a] {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n.select-environment[data-v-13cd970a] {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue\"],\"names\":[],\"mappings\":\";AAmjCA;IACI,uBAAuB;AAC3B;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;AACb;AAEA;IACI,wBAAwB;IACxB,qBAAqB;IACrB,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;AAClB;;AAEA;;;;;;GAMG;AAEH;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,2CAA2C;IAC3C,cAAc;IACd,iBAAiB;IACjB,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,UAAU;IACV,+CAA+C;IAC/C,yBAAyB;IACzB,kBAAkB;IAClB,2CAA2C;IAC3C,mBAAmB;IACnB,2BAA2B;AAC/B;AAEA;IACI,qBAAqB;AACzB;AAEA;IACI,YAAY;AAChB;AAEA;IACI,cAAc;IACd,iBAAiB;AACrB;AAEA;IACI,eAAe;AACnB;AAEA;IACI,2CAA2C;IAC3C,cAAc;IACd,qBAAqB;AAEzB;;AAEA;;GAEG;AAEH;IACI,yCAAyC;IACzC,cAAc;AAClB;AAEA;IACI,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;;GAEG;AAEH;IACI,UAAU;AACd;AAEA;IACI,+CAA+C;IAC/C,mBAAmB;AACvB;AAEA;IACI,gBAAgB;AACpB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,+CAA+C;IAC/C,yBAAyB;AAC7B;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,eAAe;AACnB;AAEA;IACI,oBAAoB;IACpB,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,UAAU;IACV,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,SAAS;IACT,UAAU;AACd;AAEA;IACI,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,UAAU;AACd;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR;AACJ;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,0BAA0B;IAC1B,cAAc;IACd,2CAA2C;IAC3C,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB;AAEA;IACI,oBAAoB;IACpB,eAAe;AACnB;AAEA;IACI,0DAA0D;IAC1D,cAAc;AAClB;AAEA;IACI,0DAA0D;IAC1D,cAAc;IACd,oBAAoB;IACpB,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,oBAAoB;AACxB;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;AAEA;IACI,iBAAiB;AACrB;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;IAChB,qBAAqB;IACrB,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,eAAe;AACnB;AAIA;IACI,+CAA+C;IAC/C,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,eAAe;AACnB;AAEA;;IAEI,iBAAiB;IACjB,mBAAmB;IACnB,WAAW;IACX,cAAc;IACd,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;AACvB;AAEA;;IAEI,eAAe;IACf,cAAc;IACd,iBAAiB;AACrB;AAEA;IACI,kBAAkB;AACtB;AAEA;IACI,cAAc;IACd,eAAe;AACnB;AAEA;;;;IAII,mBAAmB;IACnB,oCAAoC;IACpC,UAAU;AACd;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,cAAc;IACd,eAAe;IACf,qBAAqB;IACrB,kBAAkB;IAClB,kBAAkB;IAClB,qBAAqB;IACrB,wBAAwB;IACxB,SAAS;IACT,UAAU;IACV,UAAU;AACd;AAEA;IACI,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB;AAEA;IACI,WAAW;IACX,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB;AACJ\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container\\\">\\n        <div>\\n            <CheckboxComp :class=\\\"['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']\\\"\\n                :minus=\\\"mainCheckboxState == false\\\" :check=\\\"mainCheckboxState == true\\\"\\n                @click=\\\"handleModuleCountCheckboxEvent(mainCheckboxState == undefined)\\\" />\\n            <div :class=\\\"['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n                <span class=\\\"text-number\\\">{{ allChildCheckedModulesCount + anyChildCheckedModulesCount +\\n                    checkedRootLevelModelsCount }}</span>\\n                of <span class=\\\"text-number\\\">{{ totalRootLevelCount }}</span> items selected\\n            </div>\\n        </div>\\n        <div :class=\\\"['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']\\\" id=\\\"module-container-div\\\"> </div>\\n        <div v-if=\\\"props.screenType == 'Deploy'\\\" style=\\\"margin-bottom: 102px\\\">\\n            <div style=\\\"display: flex; align-items: center;\\\">\\n                <span class=\\\"custom-text environment\\\"> Publish To </span>\\n                <span class=\\\"publish-info\\\">\\n                    <i class=\\\"mdi mdi-information\\\"></i>\\n                    <span class=\\\"button-tooltip\\\" style=\\\"top: 460px; left: 96px; z-index: 1; width: 231px;\\\">Publish To\\n                        options may change depending on the module type you choose.</span>\\n                </span>\\n            </div>\\n\\n            <CustomSelect :options=\\\"publishTargets\\\" @input=\\\"onTargetSelect\\\" :selectedOption=\\\"selectedTarget\\\"\\n                :default=\\\"selectedTarget\\\" :disabledOptions=\\\"disabledOptions\\\" selectedClass=\\\"selected-environment\\\"\\n                placeholder=\\\"Select the publish environment of your application\\\" class=\\\"select-environment\\\">\\n            </CustomSelect>\\n        </div>\\n        <!--         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> -->\\n        <div :class=\\\"['footer', props.screenType == 'Deploy' ? 'deploy' : 'export']\\\">\\n            <div :class=\\\"['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']\\\" @click=\\\"close\\\">Cancel</div>\\n            <div v-if=\\\"props.screenType == 'Export'\\\" :class=\\\"(saveButtonDisable ? ' button-disable' : '')\\\"\\n                @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button \\\">DOWNLOAD</span>\\n                <span v-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -80px; left: 626px; z-index: 1; width: 145px;\\\">There are no items ready to publish. At least\\n                    one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 640px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n            <div v-if=\\\"props.screenType == 'Deploy'\\\" :class=\\\"[(saveButtonDisable ? ' button-disable' : '')]\\\"\\n                @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button deploy\\\">PUBLISH</span>\\n                <span v-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 652px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!selectedTarget\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 644px; z-index: 1; width: 123px;\\\">You need to select a publish\\n                    environment.</span>\\n                <span v-else-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">There are no items ready to publish. At least\\n                    one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n\\n        </div>\\n    </div>\\n</template>\\n\\n\\n<script setup lang=\\\"ts\\\">\\nimport { CryptoHelper } from \\\"@stechquick/algae/lib/helpers/cryptoHelper\\\";\\nimport { PlateauHelper } from \\\"@stechquick/algae/lib/helpers/plateau/plateauHelper\\\";\\nimport { computed, createApp, defineAsyncComponent, onMounted, ref } from \\\"vue\\\";\\nimport { IOrganizationCloud } from \\\"../../../../../../../common/clean/domain/useCases/ICloudProvider\\\";\\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem, ITableData } from \\\"../../../../../../../common/qCloudTemp/exporter\\\";\\nimport { APP_ITEM_CONTENT_TYPES, IModuleRelatedModelItem, IQJsonAdditionals } from \\\"../../../../../../../common/qCloudTemp/quickCloud\\\";\\nimport { container } from \\\"../../../../../domain/core/diContainer\\\";\\nimport { IQCloudApi } from \\\"../../../../../domain/infrastructure/IQCloudApi\\\";\\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \\\"../../../../../domain/model/models\\\";\\nimport { IDialog } from \\\"../../../../../domain/presentation/IDialog\\\";\\nimport { ICreateExportJob } from \\\"../../../../../domain/useCase/ICreateExportJob\\\";\\nimport { IDeployJobs } from \\\"../../../../../domain/useCase/IDeployJobs\\\";\\nimport { IJobUtils } from \\\"../../../../../domain/useCase/IJobUtils\\\";\\nimport { IListMultiModelVersions } from \\\"../../../../../domain/useCase/IListMultiModelVersions\\\";\\nimport { IListMultiModuleVersions } from \\\"../../../../../domain/useCase/IListMultiModuleVersions\\\";\\nimport { IPackJobs } from \\\"../../../../../domain/useCase/IPackJobs\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IViewModel } from \\\"../../../../../domain/viewModel/IViewModel\\\";\\nimport { IViewModelManager } from \\\"../../../../../domain/viewModel/IViewModelManager\\\";\\nimport { IBackofficeUseCase } from \\\"../../../../../domain/useCase/backoffice/IBackofficeUseCase\\\";\\nimport { IApplicationUseCase } from \\\"../../../../../domain/useCase/IApplicationUseCase\\\";\\nimport ExportDialogItem from \\\"./components/exportDialogItem.vue\\\";\\nimport CustomSelect from \\\"../../../components/customSelect.vue\\\";\\nimport CheckboxComp from \\\"../../checkboxComp.vue\\\";\\nimport { FileDisplayerExternalData, IFileDisplayerUseCase } from \\\"../../../../../domain/useCase/IFileDisplayerUseCase\\\";\\nimport { ITreeItem } from \\\"../../../../../domain/presentation/ITreeView\\\";\\nimport { PathHelper } from \\\"../../../../../../../common/helpers/pathHelper\\\";\\nimport { FileExplorerConstants } from \\\"../../../../../domain/useCase/IFileExplorer\\\";\\nimport { IObjectUseCase } from \\\"../../../../../domain/useCase/IObjectUseCase\\\";\\n\\ninterface IDeployScreenAdditionalProps {\\n    screenType: \\\"Export\\\" | \\\"Deploy\\\";\\n    platformSelection: IPlatformSelection;\\n}\\n\\ninterface IDisabledOptions {\\n    index: number\\n    cause: string;\\n}\\n\\nconst props = defineProps<IDeployScreenAdditionalProps>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\\nconst fileDisplayerUseCase = container.resolve<IFileDisplayerUseCase>(IFileDisplayerUseCase);\\nconst objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\\n\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\nconst items = ref<Array<ITableData>>([]);\\nconst validations = ref<boolean>(true);\\nconst selectedTarget = ref<string>(\\\"\\\");\\nconst disabledOptions = ref<Array<IDisabledOptions>>();\\nconst publishTargets = ref<Array<string>>();\\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\\nconst startScreen = ref<IModel>();\\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>>();\\nconst dependencyErrorStr = ref<string>('');\\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\n\\n\\nonMounted(async () => {\\n    await executor.execute(async () => {\\n        await Promise.all([\\n            executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, {}).then(res => modelHistories.value = res),\\n            executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, {}).then(res => importedModuleVersions.value = res)\\n        ])\\n        initDependencies();\\n        handleItems();\\n        props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n        validations.value = validate();\\n    }, { loading: true });\\n})\\n\\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && e.allChildChecked).length);\\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && !e.allChildChecked && e.anyChildChecked).length);\\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \\\"module\\\" && e.checked).length);\\nconst totalRootLevelCount = computed(() => items.value.length);\\nconst saveButtonDisable = computed(() => (props.screenType == \\\"Deploy\\\" && props.platformSelection.web && selectedTarget.value == \\\"\\\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \\\"Export\\\" && !validateStartScreen()) || !validateDependencies());\\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true\\n    : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0 ? false : undefined));\\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\\nconst isAllDependenciesOK = computed(validateDependencies)\\nconst isStartScreenOK = computed(validateStartScreen)\\n\\nfunction validate() {\\n    let result = true;\\n    const modules = items.value.filter(e => e.type == \\\"module\\\" && e.anyChildChecked);\\n    const appLayerItems = items.value.filter(e => e.type == \\\"qjson\\\" && e.checked);\\n\\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => (item.additionals as IQJsonAdditionals | undefined)?.isRootPage);\\n    if (!startScreen.value)\\n        return false;\\n\\n    if (props.screenType == \\\"Deploy\\\") {\\n        if (modules.length > 0)\\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \\\"entityDesigner\\\" && f.checked)).length <= 0\\n\\n        let isApplicationWillDeploy = appLayerItems.length > 0;\\n        if (isApplicationWillDeploy) {\\n            result = appLayerItems\\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nfunction validateDependencies() {\\n    const checkMap = new Map<string, boolean>();\\n    items.value.forEach(item => {\\n        if (item.type == 'module' && item.children && item.children.length > 0)\\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\\n        else\\n            checkMap.set(item.id, item.checked == true)\\n    })\\n\\n    const mustBeCheckedMap = new Map<string, Array<string>>();\\n    dependencyMap.value?.forEach((deps, id) => {\\n        if (!checkMap.get(id))\\n            return;\\n\\n        deps.dependedTo.forEach(dependedId => {\\n            if (checkMap.get(dependedId))\\n                return;\\n\\n            if (mustBeCheckedMap.has(id)) {\\n                const vals = mustBeCheckedMap.get(id)!\\n                vals.push(dependedId)\\n                mustBeCheckedMap.set(id, vals)\\n            } else {\\n                mustBeCheckedMap.set(id, [dependedId])\\n            }\\n\\n        });\\n    })\\n\\n    //set deps error text\\n    const [firstItemID] = mustBeCheckedMap.keys();\\n    if (firstItemID) {\\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\\n        dependencyErrorStr.value = `Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\\n    }\\n\\n    return mustBeCheckedMap.size == 0\\n}\\n\\nfunction validateStartScreen() {\\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\\n}\\n\\nfunction findItem(ID: string) {\\n    for (const item of items.value) {\\n        if (item.type != 'module' && item.id == ID)\\n            return item;\\n        if (item.type == 'module' && item.children && item.children.length > 0) {\\n            const f = item.children.find(e => e.id == ID)\\n            if (f) return f\\n        }\\n    }\\n}\\n\\nfunction initDependencies() {\\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>();\\n    const depMap = new Map<string, Array<string>>();\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n\\n        const isImportedModule = item.owner.objectType == \\\"module\\\" && isModuleImported(item.owner as IModule);\\n\\n        let version: string | undefined;\\n        if (!isImportedModule) {\\n            const maxVersion = getItemMaxVersion(item)\\n            if (!maxVersion)\\n                return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\\n            version = maxVersion;\\n        }\\n        else {\\n            const moduleVersions = importedModuleVersions.value?.get(item.owner.ID)\\n            const moduleVersion = (item.owner as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n\\n            const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\\n            version = importedModuleModel?.version\\n        }\\n\\n        const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\\n\\n        depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\\n    });\\n\\n\\n    depMap.forEach((dependedTo, modelId) => {\\n        const dependedBy = Array<string>();\\n        depMap.forEach((dependencies, depModelId) => {\\n            if (dependencies.some(depId => depId == modelId))\\n                dependedBy.push(depModelId)\\n        })\\n        map.set(modelId, { dependedBy, dependedTo });\\n    })\\n    dependencyMap.value = map;\\n}\\n\\nfunction isModelDepended(item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\\n    if (!deps) return false;\\n\\n    return deps.some(dep => items.value.some(item => {\\n        if (item.type == 'module' && item.anyChildChecked) {\\n            return item.children?.some(child => child.checked && child.id == dep)\\n        }\\n        return item.id == dep && item.checked\\n    }));\\n}\\nfunction createDialogComp(item: ITableData) {\\n    const newChild = createApp(ExportDialogItem, {\\n        handleItemCheckEvent,\\n        startScreen,\\n        versionDialog,\\n        handleCollapse,\\n        item: item,\\n        moduleVersionDialog\\n    });\\n    const mountEl = document.createElement('div');\\n    newChild.mount(mountEl);\\n    const parentEl = document.getElementById('module-container-div');\\n    parentEl?.appendChild(mountEl);\\n}\\nfunction createAndAppendItem({ newItem }: { newItem: ITableData }) {\\n    createDialogComp(newItem);\\n    if ((newItem).type != \\\"module\\\") {\\n        items.value.push(newItem);\\n    }\\n}\\n\\nfunction handleItems() {\\n    // - App Settings\\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings');\\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\\n    const settingsData = appSettings && {\\n        id: appSettings.ID,\\n        name: appSettings.name,\\n        checked: true,\\n        disabled: false,\\n        type: (appSettings as IModel).modelType,\\n        version: !maxVersion ? 'latest' : maxVersion\\n    };\\n    appSettings && settingsData && createAndAppendItem({ newItem: settingsData });\\n\\n\\n    // - UI Settings\\n    const uiSettingsID = CryptoHelper.CreateGuid();\\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appSettings\\\") as Array<IModel>;\\n    const uiSettings: ITableData = {\\n        id: uiSettingsID,\\n        collapsed: true,\\n        name: \\\"UI Settings\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        checked: true,\\n        children: [{} as ITableData]\\n    };\\n    uiSettings && createAndAppendItem({ newItem: uiSettings });\\n    uiSettings.children = uiSettingsModels.map(settings => {\\n        const maxVersion = getItemMaxVersion(settings)\\n        const childData = {\\n            id: settings.ID,\\n            parentId: uiSettingsID,\\n            name: settings.name,\\n            type: settings.modelType,\\n            checked: maxVersion != undefined,\\n            usageType: settings?.usageType,\\n            disabled: !maxVersion,\\n            version: maxVersion,\\n            level: 2\\n        }\\n        createAndAppendItem({ newItem: childData });\\n        return childData;\\n    })\\n    handleParentCheckedStatus(uiSettings, false);\\n\\n\\n    // - Styled Components\\n    const uiAssetID = CryptoHelper.CreateGuid();\\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appAssetList\\\") as Array<IModel>;\\n    const uiAssetList: ITableData = {\\n        id: uiAssetID,\\n        collapsed: true,\\n        name: \\\"Styled Components\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        anyChildChecked: true,\\n        allChildChecked: true,\\n        children: [{} as ITableData]\\n    };\\n    uiAssetList && createAndAppendItem({ newItem: uiAssetList });\\n    uiAssetList.children = appAssetList.map((asset) => {\\n        const childAsset = {\\n            id: asset.ID,\\n            parentId: uiAssetID,\\n            name: asset.name,\\n            type: asset.modelType,\\n            checked: true,\\n            usageType: asset?.usageType,\\n            level: 2\\n        }\\n        createAndAppendItem({ newItem: childAsset });\\n        return childAsset;\\n    }) as Array<ITableData>;\\n    handleParentCheckedStatus(uiAssetList, false);\\n\\n    \\n    const treeItems = fileDisplayerUseCase.cloneFileExplorerTreeView({\\n        displayFilterer: (item, hasChildren) => {\\n            switch (item.ID) { case FileExplorerConstants.uiAssetListID: case FileExplorerConstants.uiSettingsID: return false; default: break; }\\n            switch (item.objectType) {\\n                case \\\"application\\\": return false;\\n                case \\\"module\\\": return true;\\n                case \\\"folder\\\": return hasChildren;\\n                case \\\"model\\\": return true;\\n            }\\n        },\\n    });\\n\\n    const converter = (treeItem: ITreeItem<FileDisplayerExternalData>, options: {ownerModule?: {isImportedModule: boolean;moduleVersion: string | undefined;relatedModelHistories: IModuleRelatedModelItem[] | undefined}}): ITableData => {\\n        const item = treeItem.externalData;\\n        if (item.objectType == \\\"application\\\") { throw new Error(\\\"unexpected item type\\\"); }\\n\\n        const fullPath = objectUseCase.getFullPath(item, \\\"self\\\");\\n        let level = fullPath.split(\\\"/\\\").length - 1;\\n\\n        let tableData: ITableData;\\n        switch(item.objectType) {\\n            case \\\"folder\\\":\\n                tableData = {\\n                    id: item.ID, name: item.name, type: \\\"folder\\\", collapsed: true, level,\\n                    children: treeItem.children?.map((item) => converter(item, { ownerModule: options.ownerModule })),\\n                };\\n                tableData.children?.forEach(child => child.parent = tableData);\\n                handleParentCheckedStatus(tableData, false);\\n                break;\\n            case \\\"model\\\":\\n                if (options.ownerModule) {\\n                    tableData = { id: item.ID, name: item.name, type: item.modelType, level };\\n                    if (!options.ownerModule.isImportedModule || item.isUnmodifiable) {\\n                        const maxVersion = getItemMaxVersion(item);\\n                        tableData = {\\n                            ...tableData,\\n                            checked: maxVersion ? true : item.isUnmodifiable,\\n                            disabled: maxVersion ? false : !item.isUnmodifiable,\\n                            version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                        };\\n                    } else {\\n                        const importedModulesModel = options.ownerModule.relatedModelHistories?.find(e => e.modelID == item.ID)\\n                        tableData = { ...tableData, checked: true, disabled: false, version: importedModulesModel?.version };\\n                    }\\n                } else {\\n                    const maxVersion = getItemMaxVersion(item);\\n                    tableData = {\\n                        id: item.ID,\\n                        name: item.name,\\n                        checked: maxVersion ? true : item.isUnmodifiable,\\n                        disabled: maxVersion ? false : !item.isUnmodifiable,\\n                        type: item.modelType,\\n                        version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                        level,\\n                    };\\n                }\\n                break;\\n            case \\\"module\\\":\\n                const isImportedModule = isModuleImported(item);\\n                const moduleVersion = item.relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion;\\n                const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\\n                \\n                tableData = {\\n                    id: item.ID,\\n                    collapsed: true,\\n                    name: item.name,\\n                    type: \\\"module\\\",\\n                    imported: isImportedModule,\\n                    version: moduleVersion,\\n                    children: treeItem.children?.map((item) => converter(item, {ownerModule: {isImportedModule, moduleVersion, relatedModelHistories}})),\\n                }\\n                tableData.children?.forEach(child => child.parent = tableData);\\n                handleParentCheckedStatus(tableData, false);\\n                break;\\n        }\\n        return tableData;\\n    };\\n    const tableDatas = treeItems.map(item => converter(item, {}));\\n\\n    const traverser = (tableData: ITableData) => {\\n        createAndAppendItem({ newItem: tableData });\\n        tableData.children?.forEach(traverser);\\n    };\\n    \\n    tableDatas.forEach(traverser);\\n}\\n\\nfunction getItemMaxVersion(item: IModel): string | undefined {\\n    if (!modelHistories.value?.has(item.ID))\\n        return undefined;\\n\\n    const versions = modelHistories.value.get(item.ID);\\n    if (!versions)\\n        return undefined;\\n\\n    const findMaxVersion = (versions: Array<string>) => {\\n        const versionNumbers = versions.map(v => {\\n            const parts: Array<string> = v.split(\\\".\\\");\\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\\n        })\\n\\n        versionNumbers.sort((a, b) => b - a);\\n\\n        const maxVersion = versionNumbers[0];\\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\\n    }\\n\\n    return findMaxVersion(versions.map(e => e.version!));\\n\\n}\\nfunction checkMaxVersionOfAllItems() {\\n    let isThereVersion: boolean = false;\\n    items.value.forEach(item => {\\n        if (item.type == \\\"module\\\") {\\n            item.children?.forEach(child => {\\n                if (child.version) {\\n                    isThereVersion = true;\\n                }\\n\\n            })\\n        }\\n        else {\\n            if (item.version) {\\n                isThereVersion = true;\\n            }\\n        }\\n    })\\n    return isThereVersion;\\n}\\nfunction handleModuleCountCheckboxEvent(value: boolean) {\\n    items.value.filter(e => !e.disabled).forEach((item) => {\\n        item.checked = value;\\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\\n        if (allItemsCheckable) item.allChildChecked = value;\\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\\n    });\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleCollapse(item: ITableData, childIterate?: boolean, collapsed?: boolean) {\\n    item.collapsed = collapsed !== undefined ? collapsed : !item.collapsed;\\n    if (childIterate) {\\n        item.children?.forEach(child => {\\n            const childEl = document.getElementById(child.id);\\n            childEl!.style.display = item.collapsed ? \\\"none\\\" : \\\"block\\\";\\n            handleCollapse(child, childIterate, item.collapsed);\\n        })\\n    }\\n}\\n\\nfunction checkAllDependents(item: ITableData, recurseParent: boolean) {\\n    if (item.disabled || item.checked) return;\\n\\n    item.checked = true\\n    item.parent && handleParentCheckedStatus(item.parent, recurseParent);\\n\\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\\n    if (!deps) return;\\n\\n    deps.forEach(dep => {\\n        items.value.forEach(item => {\\n            if (item.type == 'module' && !item.allChildChecked) {\\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\\n                willCheckItem && checkAllDependents(willCheckItem, recurseParent);\\n                handleParentCheckedStatus(item, recurseParent);\\n                return;\\n            }\\n\\n            if (!item.checked && item.id == dep) {\\n                checkAllDependents(item, recurseParent);\\n                item.parent && handleParentCheckedStatus(item.parent, recurseParent);\\n            }\\n        })\\n    });\\n}\\n\\nfunction handleItemCheckEvent(item: ITableData) {\\n    if (item.disabled || isModelDepended(item) || item.name == 'App Settings')\\n        return;\\n\\n    if (item.type != \\\"module\\\" && item.type != \\\"folder\\\") {\\n        if (item.checked) {\\n            item.checked = false;\\n            item.parent && handleParentCheckedStatus(item.parent, true);\\n        } else {\\n            checkAllDependents(item, true);\\n        }\\n    } else {\\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\\n            if (item.anyChildChecked) {\\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\\n                item.checked = false;\\n                handleParentCheckedStatus(item, true);\\n            } else {\\n                item.children.forEach(child => checkAllDependents(child, true));\\n                item.checked = true;\\n            }\\n        }\\n        else {\\n            item.checked = !item.checked;\\n            item.allChildChecked = false;\\n        }\\n    }\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleParentCheckedStatus(item: ITableData, recurseParent: boolean) {\\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\\n    if (recurseParent && item.parent) {\\n        handleParentCheckedStatus(item.parent, true);\\n    }\\n}\\n\\nfunction syncPublishTargets() {\\n    publishTargets.value = []; disabledOptions.value = [];\\n\\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\\n    if (!targets)\\n        return;\\n\\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\\n    if (!isSelectAnyItem) {\\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\\n        const disabledOptionList = Array<IDisabledOptions>();\\n        for (let i = 0; i < publishTargets.value.length; i++) {\\n            disabledOptionList.push({ index: i, cause: \\\"You need to include items to publish.\\\" })\\n        }\\n        disabledOptions.value = disabledOptionList;\\n        return;\\n    }\\n\\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\\n\\n    const disabledOptionList = Array<IDisabledOptions>();\\n    for (let i = 0; i < sortedTargets.length; i++) {\\n        const cause = sortedTargets[i].cause;\\n        if (cause) disabledOptionList.push({ index: i, cause })\\n    }\\n    disabledOptions.value = disabledOptionList;\\n    publishTargets.value = sortedTargets.map(e => e.optionName);\\n\\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \\\"\\\";\\n}\\n\\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\\n    const list = Array<{ optionName: string, cause?: string }>();\\n\\n    Object.keys(targets).forEach(e => {\\n        const key = e as keyof IOrganizationCloud;\\n        const value = targets[key];\\n        const optionName = cloudTargetMap(key)!;\\n        if (!value)\\n            return list.push({ optionName, cause: \\\"You are not authorized to publish to this target.\\\" });\\n\\n\\n        switch (key) {\\n            case \\\"azure\\\":\\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\\n                    if (!items || items.length == 0) { return status; }\\n                    for (const item of items) {\\n                        if (item.checked || item.anyChildChecked) {\\n                            if (item.type == \\\"module\\\") {\\n                                status = traverseSelectedItems(status, item.children);\\n                            }\\n                            if (item.type == \\\"entityDesigner\\\" || item.type == \\\"bpmn\\\" || item.type == \\\"process\\\") {\\n                                status = false;\\n                                break;\\n                            }\\n                        }\\n\\n                    }\\n                    return status;\\n                }\\n\\n                const status = traverseSelectedItems(true, items.value);\\n                if (!status)\\n                    return list.push({ optionName, cause: \\\"Entity and process models cannot be published to this target.\\\" });\\n                break;\\n            case \\\"plateauGCP\\\":\\n                const modulesHasNotAnEDModel = items.value.filter(e => e.name != \\\"UI Settings\\\").find(e => e.type == \\\"module\\\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \\\"bpmn\\\" || c.type == \\\"process\\\")) && !e.children?.some(c => c.type == \\\"entityDesigner\\\" && c.checked))\\n                if (modulesHasNotAnEDModel)\\n                    return list.push({ optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.` })\\n                break;\\n        }\\n\\n        list.push({ optionName });\\n    })\\n\\n    return list;\\n}\\n\\nfunction updateDependencyMap(newVersion: string, item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id);\\n    dependencyMap.value?.set(item.id, {\\n        dependedBy: deps?.dependedBy || Array<string>(),\\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\\n    })\\n}\\n\\nfunction versionDialog(item: ITableData) {\\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\\n    const hasAnyVersion = modelHistories.value?.has(item.id);\\n    const options = {\\n        clickedNode, cb: (version: string) => {\\n            item.version = version;\\n            updateDependencyMap(version, item);\\n        }\\n    } as any;\\n\\n    if (hasAnyVersion) {\\n        options.versions = modelHistories.value?.get(item.id)\\n    }\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/modelVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" }, options\\n    );\\n}\\n\\n\\nfunction moduleVersionDialog(item: ITableData) {\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/moduleVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" },\\n        {\\n            module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => {\\n                item.version = moduleVersion.version;\\n                item.children?.forEach(child => {\\n                    const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\\n                    child.version = modulesModel?.version\\n                    updateDependencyMap(modulesModel?.version!, child);\\n                })\\n            }\\n        }\\n    );\\n}\\n\\nfunction close() {\\n    emit(\\\"close\\\");\\n}\\n\\nasync function save() {\\n    executor.execute(\\n        async () => {\\n            const initAsGroup = async () => {\\n                const groupID = CryptoHelper.CreateGuid();\\n                await initHistory(groupID);\\n                await packJob(groupID);\\n                return groupID;\\n            }\\n\\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\\n\\n            switch (props.screenType) {\\n                case \\\"Export\\\":\\n                    if (isFlowBackend) {\\n                        const deployItems = await createAzureDeployItems();\\n                        await packJobsUseCase.createPackJobs([{\\n                            appID: viewModel.studio.appId,\\n                            exportType: \\\"qui\\\",\\n                            selectionData: deployItems\\n                        }]);\\n                        break;\\n                    }\\n\\n                    const groupID = await initAsGroup();\\n                    await createExportJob(groupID);\\n                    break;\\n                case \\\"Deploy\\\":\\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\\n                        case \\\"plateauGCP\\\":\\n                            const groupID = await initAsGroup();\\n                            await createDeployJob(groupID);\\n                            break;\\n                        case \\\"azure\\\":\\n                            const deployItems = await createAzureDeployItems();\\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\\n                            break;\\n                    }\\n            }\\n            const userMobileUsage = viewModel.user?.mobileUsage;\\n            const appMobileUsage = currentApp.value?.mobileUsage;\\n            if(props.platformSelection && props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \\\"backofficeUpdate\\\"})\\n                \\n            }\\n            emit(\\\"close\\\");\\n        },\\n        { loading: true });\\n}\\n\\nasync function createAzureDeployItems() {\\n    const deployItems: Array<IExportItem> = [];\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        const path = item.owner.objectType == \\\"module\\\" ? PathHelper.join(item.owner.name, item.path) : item.path;\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\\n        if (!items || items.length == 0) { return; }\\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\\n            if (item.type == \\\"module\\\" || item.type == \\\"folder\\\") {\\n                traverseSelectedItems(item.children);\\n                return;\\n            }\\n\\n            const itemMap = itemIdObj[item.id];\\n\\n            const deployItem: IExportItem = {\\n                id: item.id,\\n                name: jobUtils.getFileFullname(itemMap.item),\\n                path: itemMap.path,\\n                type: jobUtils.getItemType(itemMap.item),\\n                ver: item.version || \\\"latest\\\",\\n                isRootPage: (itemMap.item.additionals as IQJsonAdditionals | undefined)?.isRootPage,\\n                modulePrefix: itemMap.prefix,\\n                ownerType: 'application',\\n                ownerName: viewModel.studio.appName,\\n                size: itemMap.item.size,\\n                createDate: itemMap.item.createDate,\\n            };\\n            deployItems.push(deployItem)\\n        });\\n    };\\n\\n    traverseSelectedItems(items.value);\\n    const uniqueItems = removeDuplicates(deployItems)\\n    console.log(uniqueItems)\\n    return uniqueItems;\\n}\\n\\nfunction removeDuplicates(objects: IExportItem[]): IExportItem[] {\\n    const seenIds = new Set<string>(); // Collection to keep track of seen IDs\\n    const uniqueObjects: IExportItem[] = []; // Array to store unique objects\\n\\n    for (const obj of objects) {\\n        if (!seenIds.has(obj.id)) {\\n            uniqueObjects.push(obj); // Add the object if ID not seen before\\n            seenIds.add(obj.id); // Mark this ID as seen\\n        }\\n    }\\n\\n    return uniqueObjects; // Return the list of unique objects\\n}\\nasync function initHistory(groupID: string) {\\n    return qcloudApi.initPublishHistory({\\n        appID: viewModel.studio.appId,\\n        ID: groupID,\\n        isMultiStep: true,\\n        type: props.screenType == \\\"Deploy\\\" ? \\\"publish\\\" : \\\"download\\\",\\n        cloudProvider: props.screenType == \\\"Deploy\\\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\\n        platform: props.platformSelection\\n    });\\n}\\n\\nasync function packJob(groupID: string) {\\n    let exportItemMap = new Map<string, Array<IExportItem>>();\\n    const appName = viewModel.studio.appName;\\n\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        const path = item.owner.objectType == \\\"module\\\" ? PathHelper.join(item.owner.name, item.path) : item.path;\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const createExportObject = (tableItem: ITableData) => {\\n        const itemMap = itemIdObj[tableItem.id];\\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == itemMap.item.modelType);\\n\\n        const retVal: IExportItem = {\\n            id: tableItem.id,\\n            ver: tableItem.version!,\\n            type: jobUtils.getItemType(itemMap.item),\\n            path: itemMap.path,\\n            modulePrefix: itemMap.prefix,\\n            name: jobUtils.getFileFullname(itemMap.item),\\n            ownerType: isAppItem ? 'application' : (itemMap.item.owner.objectType as \\\"module\\\" | \\\"application\\\"),\\n            ownerName: isAppItem ? appName : itemMap.item.owner.name,\\n        };\\n        return retVal;\\n    }\\n\\n    const addToExportItem = (key: string, obj: IExportItem) => {\\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\\n        let items = exportItemMap.get(key);\\n        if (items && items.length > 0) {\\n            items.push(obj);\\n            exportItemMap.set(key, items);\\n        } else\\n            exportItemMap.set(key, [obj]);\\n    }\\n    const mapTableItemToExportItem = (tableItems: Array<ITableData>) => {\\n        tableItems.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\\n        if (asset.type == 'module') {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                const obj = createExportObject(child);\\n                if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n\\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n            });\\n        } \\n        else if(asset.type == \\\"folder\\\") {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                if(child.type == \\\"folder\\\") {\\n                    mapTableItemToExportItem([child])\\n                }\\n                else {\\n                    const obj = createExportObject(child);\\n                    if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n                \\n                    const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                    addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n                }\\n            });\\n        }\\n        else {\\n            const obj = createExportObject(asset);\\n            if (asset.type == 'qjson') {\\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \\\"model\\\" && i.modelType == \\\"qjson\\\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\\n                obj.isRootPage = isRootPage ? true : undefined;\\n            }\\n            addToExportItem(appName, obj);\\n        }\\n    })\\n    }\\n    mapTableItemToExportItem(items.value);\\n   \\n\\n    let jobs = Array<ICreateExportJobParam>();\\n    exportItemMap.forEach((v, k) => {\\n        jobs.push({\\n            appID: viewModel.studio.appId,\\n            exportType: \\\"qui\\\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \\\"model\\\":  \\\"qui\\\"\\n            selectionData: v,\\n            cause: props.screenType == 'Export' ? 'download' : \\\"publish\\\",\\n            layer: 0,\\n            groupID: groupID,\\n            platformSelection: props.platformSelection\\n        })\\n    })\\n\\n    await packJobsUseCase.createPackJobs(jobs);\\n}\\nasync function createExportJob(groupID: string) {\\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\\n        appID: viewModel.studio.appId,\\n        exportType: \\\"qui\\\",\\n        selectionData: [],\\n        layer: 1,\\n        groupID: groupID\\n    });\\n}\\n\\nasync function createDeployJob(groupID: string) {\\n    //1-(n) L1- deployJob(build)\\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\\n        .then(jobs => jobs.jobs.map(e => {\\n            const jobData = e.jobData as IExportJobData;\\n            return {\\n                ownerName: jobData.items[0].ownerName,\\n                jobID: e.jobID,\\n                type: jobData.items[0].ownerType,\\n                mainDir: getDeployableArchiveRoot(jobData)\\n            }\\n        }));\\n\\n    if (!packages || packages.length <= 0)\\n        return;\\n\\n    let buildJobs = Array<ICreateDeployJobParam>();\\n    packages.forEach(pack => {\\n        buildJobs.push({\\n            appID: viewModel.studio.appId,\\n            type: \\\"build\\\",\\n            package: {\\n                type: pack.type as DeployType,\\n                name: pack.ownerName!,\\n                mainDir: pack.mainDir,\\n                zip: `${pack.jobID}.zip`,\\n            },\\n            layer: 1,\\n            groupID: groupID\\n        })\\n    })\\n\\n    await deployJobsUseCase.createBuildJobs(buildJobs);\\n\\n    //2-(1) L2- deployJob(deployment)\\n    let jobParam: ICreateDeployJobParam = {\\n        appID: viewModel.studio.appId,\\n        type: \\\"deployment\\\",\\n        deployConfig: {\\n            process: {\\n                configModelIDs: getProcessConfigList(),\\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \\\"bpmn\\\"))\\n            }\\n        },\\n        layer: 2,\\n        groupID: groupID,\\n        platformSelection: props.platformSelection\\n    }\\n\\n    await deployJobsUseCase.startDeploymentJob(jobParam);\\n}\\n\\nfunction getProcessConfigList() {\\n    let processConfigList = Array<IProcessConfigModelItem>();\\n    items.value.forEach((asset) => {\\n        if (asset.type == \\\"module\\\" && asset.anyChildChecked && asset.children) {\\n            const usingService = asset.children.find(c => c.type == \\\"entityDesigner\\\");\\n            if (!usingService)\\n                return;\\n\\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\\n            asset.children.forEach(child => {\\n                if (child.checked && child.type == \\\"process\\\") {\\n                    processConfigList.push({\\n                        moduleName: serviceName,\\n                        model: {\\n                            id: child.id,\\n                            name: child.name,\\n                            version: child.version!\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n    })\\n    return processConfigList;\\n}\\n\\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\\n    if (jobData.items[0].ownerType == \\\"module\\\") {\\n        let edModel = jobData.items.find(e => e.type == \\\"entityDesigner\\\");\\n        if (!edModel)\\n            throw new Error(\\\"!!! this module cannot deploy. Because its have not a service\\\");\\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\\n    }\\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\\n}\\n\\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \\\"Public Cloud\\\", plateauGCP: \\\"Plateau Platform Playground\\\" };\\n    if (pureVal) {\\n        return Object.keys(map).find(e => {\\n            if (map[e as keyof IOrganizationCloud] === name) {\\n                return true;\\n            }\\n        })\\n    } else {\\n        let key = Object.keys(map).includes(name);\\n        if (!key)\\n            return;\\n        return map[name as keyof IOrganizationCloud];\\n    }\\n}\\n\\nfunction onTargetSelect(value: string) {\\n    selectedTarget.value = value\\n}\\n\\nconst isModuleImported = (item: IModule) => {\\n    return objectUseCase.isModuleImported(item);\\n}\\n\\n</script>\\n\\n\\n<style scoped>\\n.container {\\n    padding: 32px 20px 20px;\\n}\\n\\n.settings-container {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n\\n.custom-text {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n\\n.radio-button {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n\\n.radio-text {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n\\n.existing-app-url {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n\\n.url-error {\\n    border: 1px solid red;\\n}\\n\\n.url-disable {\\n    opacity: 0.5;\\n}\\n\\n.existing-app-url::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n\\n.modules-selected-checkbox {\\n    cursor: pointer;\\n}\\n\\n.modules-selected-text {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n    ;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n\\n.text-number {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.modules-datatable {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n\\n.modules-datatable::-webkit-scrollbar {\\n    width: 4px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n\\n.row-container {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n\\n.chevron {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n\\n.chevron.disabled {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n\\n.module-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n\\n.module-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.module-name.imported {\\n    top: 10px;\\n    left: 87px;\\n}\\n\\n.module-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n\\n.model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n\\n.app-tier-model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n\\n.app-tier-model-name {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.version-text {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.version-text.disabled {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.version-icon {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n\\n.version-icon.disabled {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.footer {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n\\n.footer.deploy {\\n    position: relative;\\n    width: 100%;\\n}\\n\\n.footer.export {\\n    margin-top: 102px;\\n}\\n\\n.cancel-button {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n\\n\\n.save-button {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n.mobile-publish-text,\\n.web-publish-text {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.mobile-publish-text i,\\n.web-publish-text i {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n\\n.save-button.deploy {\\n    padding: 10px 16px;\\n}\\n\\n.button-disable .save-button {\\n    color: #757575;\\n    cursor: default;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n\\n.button-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n\\n.publish-info {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n\\n.select-environment {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n</style>\\n\\n<style>\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue\"],\"names\":[],\"mappings\":\";AA84CA;IACI,6BAA6B;IAC7B,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,yBAAyB;IACzB,gBAAgB;AACpB;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,yBAAyB;IACzB,0CAA0C;IAC1C,2BAA2B;AAC/B\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container\\\">\\n        <div>\\n            <CheckboxComp :class=\\\"['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']\\\"\\n                :minus=\\\"mainCheckboxState == false\\\" :check=\\\"mainCheckboxState == true\\\"\\n                @click=\\\"handleModuleCountCheckboxEvent(mainCheckboxState == undefined)\\\" />\\n            <div :class=\\\"['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n                <span class=\\\"text-number\\\">{{ allChildCheckedModulesCount + anyChildCheckedModulesCount +\\n                    checkedRootLevelModelsCount }}</span>\\n                of <span class=\\\"text-number\\\">{{ totalRootLevelCount }}</span> items selected\\n            </div>\\n        </div>\\n        <div :class=\\\"['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']\\\" id=\\\"module-container-div\\\"> </div>\\n        <div v-if=\\\"props.screenType == 'Deploy'\\\" style=\\\"margin-bottom: 102px\\\">\\n            <div style=\\\"display: flex; align-items: center;\\\">\\n                <span class=\\\"custom-text environment\\\"> Publish To </span>\\n                <span class=\\\"publish-info\\\">\\n                    <i class=\\\"mdi mdi-information\\\"></i>\\n                    <span class=\\\"button-tooltip\\\" style=\\\"top: 460px; left: 96px; z-index: 1; width: 231px;\\\">Publish To\\n                        options may change depending on the module type you choose.</span>\\n                </span>\\n            </div>\\n\\n            <CustomSelect :options=\\\"publishTargets\\\" @input=\\\"onTargetSelect\\\" :selectedOption=\\\"selectedTarget\\\"\\n                :default=\\\"selectedTarget\\\" :disabledOptions=\\\"disabledOptions\\\" selectedClass=\\\"selected-environment\\\"\\n                placeholder=\\\"Select the publish environment of your application\\\" class=\\\"select-environment\\\">\\n            </CustomSelect>\\n        </div>\\n        <!--         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> -->\\n        <div :class=\\\"['footer', props.screenType == 'Deploy' ? 'deploy' : 'export']\\\">\\n            <div :class=\\\"['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']\\\" @click=\\\"close\\\">Cancel</div>\\n            <div v-if=\\\"props.screenType == 'Export'\\\" :class=\\\"(saveButtonDisable ? ' button-disable' : '')\\\"\\n                @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button \\\">DOWNLOAD</span>\\n                <span v-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -80px; left: 626px; z-index: 1; width: 145px;\\\">There are no items ready to publish. At least\\n                    one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 640px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n            <div v-if=\\\"props.screenType == 'Deploy'\\\" :class=\\\"[(saveButtonDisable ? ' button-disable' : '')]\\\"\\n                @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button deploy\\\">PUBLISH</span>\\n                <span v-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 652px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!selectedTarget\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 644px; z-index: 1; width: 123px;\\\">You need to select a publish\\n                    environment.</span>\\n                <span v-else-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">There are no items ready to publish. At least\\n                    one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n\\n        </div>\\n    </div>\\n</template>\\n\\n\\n<script setup lang=\\\"ts\\\">\\nimport { CryptoHelper } from \\\"@stechquick/algae/lib/helpers/cryptoHelper\\\";\\nimport { PlateauHelper } from \\\"@stechquick/algae/lib/helpers/plateau/plateauHelper\\\";\\nimport { computed, createApp, defineAsyncComponent, onMounted, ref } from \\\"vue\\\";\\nimport { IOrganizationCloud } from \\\"../../../../../../../common/clean/domain/useCases/ICloudProvider\\\";\\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem, ITableData } from \\\"../../../../../../../common/qCloudTemp/exporter\\\";\\nimport { APP_ITEM_CONTENT_TYPES, IModuleRelatedModelItem, IQJsonAdditionals } from \\\"../../../../../../../common/qCloudTemp/quickCloud\\\";\\nimport { container } from \\\"../../../../../domain/core/diContainer\\\";\\nimport { IQCloudApi } from \\\"../../../../../domain/infrastructure/IQCloudApi\\\";\\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \\\"../../../../../domain/model/models\\\";\\nimport { IDialog } from \\\"../../../../../domain/presentation/IDialog\\\";\\nimport { ICreateExportJob } from \\\"../../../../../domain/useCase/ICreateExportJob\\\";\\nimport { IDeployJobs } from \\\"../../../../../domain/useCase/IDeployJobs\\\";\\nimport { IJobUtils } from \\\"../../../../../domain/useCase/IJobUtils\\\";\\nimport { IListMultiModelVersions } from \\\"../../../../../domain/useCase/IListMultiModelVersions\\\";\\nimport { IListMultiModuleVersions } from \\\"../../../../../domain/useCase/IListMultiModuleVersions\\\";\\nimport { IPackJobs } from \\\"../../../../../domain/useCase/IPackJobs\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IViewModel } from \\\"../../../../../domain/viewModel/IViewModel\\\";\\nimport { IViewModelManager } from \\\"../../../../../domain/viewModel/IViewModelManager\\\";\\nimport { IBackofficeUseCase } from \\\"../../../../../domain/useCase/backoffice/IBackofficeUseCase\\\";\\nimport { IApplicationUseCase } from \\\"../../../../../domain/useCase/IApplicationUseCase\\\";\\nimport ExportDialogItem from \\\"./components/exportDialogItem.vue\\\";\\nimport CustomSelect from \\\"../../../components/customSelect.vue\\\";\\nimport CheckboxComp from \\\"../../checkboxComp.vue\\\";\\nimport { FileDisplayerExternalData, IFileDisplayerUseCase } from \\\"../../../../../domain/useCase/IFileDisplayerUseCase\\\";\\nimport { ITreeItem } from \\\"../../../../../domain/presentation/ITreeView\\\";\\nimport { PathHelper } from \\\"../../../../../../../common/helpers/pathHelper\\\";\\nimport { FileExplorerConstants } from \\\"../../../../../domain/useCase/IFileExplorer\\\";\\nimport { IObjectUseCase } from \\\"../../../../../domain/useCase/IObjectUseCase\\\";\\n\\ninterface IDeployScreenAdditionalProps {\\n    screenType: \\\"Export\\\" | \\\"Deploy\\\";\\n    platformSelection: IPlatformSelection;\\n}\\n\\ninterface IDisabledOptions {\\n    index: number\\n    cause: string;\\n}\\n\\nconst props = defineProps<IDeployScreenAdditionalProps>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\\nconst fileDisplayerUseCase = container.resolve<IFileDisplayerUseCase>(IFileDisplayerUseCase);\\nconst objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\\n\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\nconst items = ref<Array<ITableData>>([]);\\nconst validations = ref<boolean>(true);\\nconst selectedTarget = ref<string>(\\\"\\\");\\nconst disabledOptions = ref<Array<IDisabledOptions>>();\\nconst publishTargets = ref<Array<string>>();\\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\\nconst startScreen = ref<IModel>();\\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>>();\\nconst dependencyErrorStr = ref<string>('');\\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\n\\n\\nonMounted(async () => {\\n    await executor.execute(async () => {\\n        await Promise.all([\\n            executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, {}).then(res => modelHistories.value = res),\\n            executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, {}).then(res => importedModuleVersions.value = res)\\n        ])\\n        initDependencies();\\n        handleItems();\\n        props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n        validations.value = validate();\\n    }, { loading: true });\\n})\\n\\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && e.allChildChecked).length);\\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && !e.allChildChecked && e.anyChildChecked).length);\\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \\\"module\\\" && e.checked).length);\\nconst totalRootLevelCount = computed(() => items.value.length);\\nconst saveButtonDisable = computed(() => (props.screenType == \\\"Deploy\\\" && props.platformSelection.web && selectedTarget.value == \\\"\\\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \\\"Export\\\" && !validateStartScreen()) || !validateDependencies());\\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true\\n    : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0 ? false : undefined));\\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\\nconst isAllDependenciesOK = computed(validateDependencies)\\nconst isStartScreenOK = computed(validateStartScreen)\\n\\nfunction validate() {\\n    let result = true;\\n    const modules = items.value.filter(e => e.type == \\\"module\\\" && e.anyChildChecked);\\n    const appLayerItems = items.value.filter(e => e.type == \\\"qjson\\\" && e.checked);\\n\\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => (item.additionals as IQJsonAdditionals | undefined)?.isRootPage);\\n    if (!startScreen.value)\\n        return false;\\n\\n    if (props.screenType == \\\"Deploy\\\") {\\n        if (modules.length > 0)\\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \\\"entityDesigner\\\" && f.checked)).length <= 0\\n\\n        let isApplicationWillDeploy = appLayerItems.length > 0;\\n        if (isApplicationWillDeploy) {\\n            result = appLayerItems\\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nfunction validateDependencies() {\\n    const checkMap = new Map<string, boolean>();\\n    items.value.forEach(item => {\\n        if (item.type == 'module' && item.children && item.children.length > 0)\\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\\n        else\\n            checkMap.set(item.id, item.checked == true)\\n    })\\n\\n    const mustBeCheckedMap = new Map<string, Array<string>>();\\n    dependencyMap.value?.forEach((deps, id) => {\\n        if (!checkMap.get(id))\\n            return;\\n\\n        deps.dependedTo.forEach(dependedId => {\\n            if (checkMap.get(dependedId))\\n                return;\\n\\n            if (mustBeCheckedMap.has(id)) {\\n                const vals = mustBeCheckedMap.get(id)!\\n                vals.push(dependedId)\\n                mustBeCheckedMap.set(id, vals)\\n            } else {\\n                mustBeCheckedMap.set(id, [dependedId])\\n            }\\n\\n        });\\n    })\\n\\n    //set deps error text\\n    const [firstItemID] = mustBeCheckedMap.keys();\\n    if (firstItemID) {\\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\\n        dependencyErrorStr.value = `Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\\n    }\\n\\n    return mustBeCheckedMap.size == 0\\n}\\n\\nfunction validateStartScreen() {\\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\\n}\\n\\nfunction findItem(ID: string) {\\n    for (const item of items.value) {\\n        if (item.type != 'module' && item.id == ID)\\n            return item;\\n        if (item.type == 'module' && item.children && item.children.length > 0) {\\n            const f = item.children.find(e => e.id == ID)\\n            if (f) return f\\n        }\\n    }\\n}\\n\\nfunction initDependencies() {\\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>();\\n    const depMap = new Map<string, Array<string>>();\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n\\n        const isImportedModule = item.owner.objectType == \\\"module\\\" && isModuleImported(item.owner as IModule);\\n\\n        let version: string | undefined;\\n        if (!isImportedModule) {\\n            const maxVersion = getItemMaxVersion(item)\\n            if (!maxVersion)\\n                return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\\n            version = maxVersion;\\n        }\\n        else {\\n            const moduleVersions = importedModuleVersions.value?.get(item.owner.ID)\\n            const moduleVersion = (item.owner as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n\\n            const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\\n            version = importedModuleModel?.version\\n        }\\n\\n        const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\\n\\n        depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\\n    });\\n\\n\\n    depMap.forEach((dependedTo, modelId) => {\\n        const dependedBy = Array<string>();\\n        depMap.forEach((dependencies, depModelId) => {\\n            if (dependencies.some(depId => depId == modelId))\\n                dependedBy.push(depModelId)\\n        })\\n        map.set(modelId, { dependedBy, dependedTo });\\n    })\\n    dependencyMap.value = map;\\n}\\n\\nfunction isModelDepended(item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\\n    if (!deps) return false;\\n\\n    return deps.some(dep => items.value.some(item => {\\n        if (item.type == 'module' && item.anyChildChecked) {\\n            return item.children?.some(child => child.checked && child.id == dep)\\n        }\\n        return item.id == dep && item.checked\\n    }));\\n}\\nfunction createDialogComp(item: ITableData) {\\n    const newChild = createApp(ExportDialogItem, {\\n        handleItemCheckEvent,\\n        startScreen,\\n        versionDialog,\\n        handleCollapse,\\n        item: item,\\n        moduleVersionDialog\\n    });\\n    const mountEl = document.createElement('div');\\n    newChild.mount(mountEl);\\n    const parentEl = document.getElementById('module-container-div');\\n    parentEl?.appendChild(mountEl);\\n}\\nfunction createAndAppendItem({ newItem }: { newItem: ITableData }) {\\n    createDialogComp(newItem);\\n    if ((newItem).type != \\\"module\\\") {\\n        items.value.push(newItem);\\n    }\\n}\\n\\nfunction handleItems() {\\n    // - App Settings\\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings');\\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\\n    const settingsData = appSettings && {\\n        id: appSettings.ID,\\n        name: appSettings.name,\\n        checked: true,\\n        disabled: false,\\n        type: (appSettings as IModel).modelType,\\n        version: !maxVersion ? 'latest' : maxVersion\\n    };\\n    appSettings && settingsData && createAndAppendItem({ newItem: settingsData });\\n\\n\\n    // - UI Settings\\n    const uiSettingsID = CryptoHelper.CreateGuid();\\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appSettings\\\") as Array<IModel>;\\n    const uiSettings: ITableData = {\\n        id: uiSettingsID,\\n        collapsed: true,\\n        name: \\\"UI Settings\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        checked: true,\\n        children: [{} as ITableData]\\n    };\\n    uiSettings && createAndAppendItem({ newItem: uiSettings });\\n    uiSettings.children = uiSettingsModels.map(settings => {\\n        const maxVersion = getItemMaxVersion(settings)\\n        const childData = {\\n            id: settings.ID,\\n            parentId: uiSettingsID,\\n            name: settings.name,\\n            type: settings.modelType,\\n            checked: maxVersion != undefined,\\n            usageType: settings?.usageType,\\n            disabled: !maxVersion,\\n            version: maxVersion,\\n            level: 2\\n        }\\n        createAndAppendItem({ newItem: childData });\\n        return childData;\\n    })\\n    handleParentCheckedStatus(uiSettings, false);\\n\\n\\n    // - Styled Components\\n    const uiAssetID = CryptoHelper.CreateGuid();\\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appAssetList\\\") as Array<IModel>;\\n    const uiAssetList: ITableData = {\\n        id: uiAssetID,\\n        collapsed: true,\\n        name: \\\"Styled Components\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        anyChildChecked: true,\\n        allChildChecked: true,\\n        children: [{} as ITableData]\\n    };\\n    uiAssetList && createAndAppendItem({ newItem: uiAssetList });\\n    uiAssetList.children = appAssetList.map((asset) => {\\n        const childAsset = {\\n            id: asset.ID,\\n            parentId: uiAssetID,\\n            name: asset.name,\\n            type: asset.modelType,\\n            checked: true,\\n            usageType: asset?.usageType,\\n            level: 2\\n        }\\n        createAndAppendItem({ newItem: childAsset });\\n        return childAsset;\\n    }) as Array<ITableData>;\\n    handleParentCheckedStatus(uiAssetList, false);\\n\\n    \\n    const treeItems = fileDisplayerUseCase.cloneFileExplorerTreeView({\\n        displayFilterer: (item, hasChildren) => {\\n            switch (item.ID) { case FileExplorerConstants.uiAssetListID: case FileExplorerConstants.uiSettingsID: return false; default: break; }\\n            switch (item.objectType) {\\n                case \\\"application\\\": return false;\\n                case \\\"module\\\": return true;\\n                case \\\"folder\\\": return hasChildren;\\n                case \\\"model\\\": return true;\\n            }\\n        },\\n    });\\n\\n    const converter = (treeItem: ITreeItem<FileDisplayerExternalData>, options: {ownerModule?: {isImportedModule: boolean;moduleVersion: string | undefined;relatedModelHistories: IModuleRelatedModelItem[] | undefined}}): ITableData => {\\n        const item = treeItem.externalData;\\n        if (item.objectType == \\\"application\\\") { throw new Error(\\\"unexpected item type\\\"); }\\n\\n        const fullPath = objectUseCase.getFullPath(item, \\\"self\\\");\\n        let level = fullPath.split(\\\"/\\\").length - 1;\\n\\n        let tableData: ITableData;\\n        switch(item.objectType) {\\n            case \\\"folder\\\":\\n                tableData = {\\n                    id: item.ID, name: item.name, type: \\\"folder\\\", collapsed: true, level,\\n                    children: treeItem.children?.map((item) => converter(item, { ownerModule: options.ownerModule })),\\n                };\\n                tableData.children?.forEach(child => child.parent = tableData);\\n                handleParentCheckedStatus(tableData, false);\\n                break;\\n            case \\\"model\\\":\\n                if (options.ownerModule) {\\n                    tableData = { id: item.ID, name: item.name, type: item.modelType, level };\\n                    if (!options.ownerModule.isImportedModule || item.isUnmodifiable) {\\n                        const maxVersion = getItemMaxVersion(item);\\n                        tableData = {\\n                            ...tableData,\\n                            checked: maxVersion ? true : item.isUnmodifiable,\\n                            disabled: maxVersion ? false : !item.isUnmodifiable,\\n                            version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                        };\\n                    } else {\\n                        const importedModulesModel = options.ownerModule.relatedModelHistories?.find(e => e.modelID == item.ID)\\n                        tableData = { ...tableData, checked: true, disabled: false, version: importedModulesModel?.version };\\n                    }\\n                } else {\\n                    const maxVersion = getItemMaxVersion(item);\\n                    tableData = {\\n                        id: item.ID,\\n                        name: item.name,\\n                        checked: maxVersion ? true : item.isUnmodifiable,\\n                        disabled: maxVersion ? false : !item.isUnmodifiable,\\n                        type: item.modelType,\\n                        version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                        level,\\n                    };\\n                }\\n                break;\\n            case \\\"module\\\":\\n                const isImportedModule = isModuleImported(item);\\n                const moduleVersion = item.relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion;\\n                const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\\n                \\n                tableData = {\\n                    id: item.ID,\\n                    collapsed: true,\\n                    name: item.name,\\n                    type: \\\"module\\\",\\n                    imported: isImportedModule,\\n                    version: moduleVersion,\\n                    children: treeItem.children?.map((item) => converter(item, {ownerModule: {isImportedModule, moduleVersion, relatedModelHistories}})),\\n                }\\n                tableData.children?.forEach(child => child.parent = tableData);\\n                handleParentCheckedStatus(tableData, false);\\n                break;\\n        }\\n        return tableData;\\n    };\\n    const tableDatas = treeItems.map(item => converter(item, {}));\\n\\n    const traverser = (tableData: ITableData) => {\\n        createAndAppendItem({ newItem: tableData });\\n        tableData.children?.forEach(traverser);\\n    };\\n    \\n    tableDatas.forEach(traverser);\\n}\\n\\nfunction getItemMaxVersion(item: IModel): string | undefined {\\n    if (!modelHistories.value?.has(item.ID))\\n        return undefined;\\n\\n    const versions = modelHistories.value.get(item.ID);\\n    if (!versions)\\n        return undefined;\\n\\n    const findMaxVersion = (versions: Array<string>) => {\\n        const versionNumbers = versions.map(v => {\\n            const parts: Array<string> = v.split(\\\".\\\");\\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\\n        })\\n\\n        versionNumbers.sort((a, b) => b - a);\\n\\n        const maxVersion = versionNumbers[0];\\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\\n    }\\n\\n    return findMaxVersion(versions.map(e => e.version!));\\n\\n}\\nfunction checkMaxVersionOfAllItems() {\\n    let isThereVersion: boolean = false;\\n    items.value.forEach(item => {\\n        if (item.type == \\\"module\\\") {\\n            item.children?.forEach(child => {\\n                if (child.version) {\\n                    isThereVersion = true;\\n                }\\n\\n            })\\n        }\\n        else {\\n            if (item.version) {\\n                isThereVersion = true;\\n            }\\n        }\\n    })\\n    return isThereVersion;\\n}\\nfunction handleModuleCountCheckboxEvent(value: boolean) {\\n    items.value.filter(e => !e.disabled).forEach((item) => {\\n        item.checked = value;\\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\\n        if (allItemsCheckable) item.allChildChecked = value;\\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\\n    });\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleCollapse(item: ITableData, childIterate?: boolean, collapsed?: boolean) {\\n    item.collapsed = collapsed !== undefined ? collapsed : !item.collapsed;\\n    if (childIterate) {\\n        item.children?.forEach(child => {\\n            const childEl = document.getElementById(child.id);\\n            childEl!.style.display = item.collapsed ? \\\"none\\\" : \\\"block\\\";\\n            handleCollapse(child, childIterate, item.collapsed);\\n        })\\n    }\\n}\\n\\nfunction checkAllDependents(item: ITableData, recurseParent: boolean) {\\n    if (item.disabled || item.checked) return;\\n\\n    item.checked = true\\n    item.parent && handleParentCheckedStatus(item.parent, recurseParent);\\n\\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\\n    if (!deps) return;\\n\\n    deps.forEach(dep => {\\n        items.value.forEach(item => {\\n            if (item.type == 'module' && !item.allChildChecked) {\\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\\n                willCheckItem && checkAllDependents(willCheckItem, recurseParent);\\n                handleParentCheckedStatus(item, recurseParent);\\n                return;\\n            }\\n\\n            if (!item.checked && item.id == dep) {\\n                checkAllDependents(item, recurseParent);\\n                item.parent && handleParentCheckedStatus(item.parent, recurseParent);\\n            }\\n        })\\n    });\\n}\\n\\nfunction handleItemCheckEvent(item: ITableData) {\\n    if (item.disabled || isModelDepended(item) || item.name == 'App Settings')\\n        return;\\n\\n    if (item.type != \\\"module\\\" && item.type != \\\"folder\\\") {\\n        if (item.checked) {\\n            item.checked = false;\\n            item.parent && handleParentCheckedStatus(item.parent, true);\\n        } else {\\n            checkAllDependents(item, true);\\n        }\\n    } else {\\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\\n            if (item.anyChildChecked) {\\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\\n                item.checked = false;\\n                handleParentCheckedStatus(item, true);\\n            } else {\\n                item.children.forEach(child => checkAllDependents(child, true));\\n                item.checked = true;\\n            }\\n        }\\n        else {\\n            item.checked = !item.checked;\\n            item.allChildChecked = false;\\n        }\\n    }\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleParentCheckedStatus(item: ITableData, recurseParent: boolean) {\\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\\n    if (recurseParent && item.parent) {\\n        handleParentCheckedStatus(item.parent, true);\\n    }\\n}\\n\\nfunction syncPublishTargets() {\\n    publishTargets.value = []; disabledOptions.value = [];\\n\\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\\n    if (!targets)\\n        return;\\n\\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\\n    if (!isSelectAnyItem) {\\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\\n        const disabledOptionList = Array<IDisabledOptions>();\\n        for (let i = 0; i < publishTargets.value.length; i++) {\\n            disabledOptionList.push({ index: i, cause: \\\"You need to include items to publish.\\\" })\\n        }\\n        disabledOptions.value = disabledOptionList;\\n        return;\\n    }\\n\\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\\n\\n    const disabledOptionList = Array<IDisabledOptions>();\\n    for (let i = 0; i < sortedTargets.length; i++) {\\n        const cause = sortedTargets[i].cause;\\n        if (cause) disabledOptionList.push({ index: i, cause })\\n    }\\n    disabledOptions.value = disabledOptionList;\\n    publishTargets.value = sortedTargets.map(e => e.optionName);\\n\\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \\\"\\\";\\n}\\n\\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\\n    const list = Array<{ optionName: string, cause?: string }>();\\n\\n    Object.keys(targets).forEach(e => {\\n        const key = e as keyof IOrganizationCloud;\\n        const value = targets[key];\\n        const optionName = cloudTargetMap(key)!;\\n        if (!value)\\n            return list.push({ optionName, cause: \\\"You are not authorized to publish to this target.\\\" });\\n\\n\\n        switch (key) {\\n            case \\\"azure\\\":\\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\\n                    if (!items || items.length == 0) { return status; }\\n                    for (const item of items) {\\n                        if (item.checked || item.anyChildChecked) {\\n                            if (item.type == \\\"module\\\") {\\n                                status = traverseSelectedItems(status, item.children);\\n                            }\\n                            if (item.type == \\\"entityDesigner\\\" || item.type == \\\"bpmn\\\" || item.type == \\\"process\\\") {\\n                                status = false;\\n                                break;\\n                            }\\n                        }\\n\\n                    }\\n                    return status;\\n                }\\n\\n                const status = traverseSelectedItems(true, items.value);\\n                if (!status)\\n                    return list.push({ optionName, cause: \\\"Entity and process models cannot be published to this target.\\\" });\\n                break;\\n            case \\\"plateauGCP\\\":\\n                const modulesHasNotAnEDModel = items.value.filter(e => e.name != \\\"UI Settings\\\").find(e => e.type == \\\"module\\\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \\\"bpmn\\\" || c.type == \\\"process\\\")) && !e.children?.some(c => c.type == \\\"entityDesigner\\\" && c.checked))\\n                if (modulesHasNotAnEDModel)\\n                    return list.push({ optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.` })\\n                break;\\n        }\\n\\n        list.push({ optionName });\\n    })\\n\\n    return list;\\n}\\n\\nfunction updateDependencyMap(newVersion: string, item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id);\\n    dependencyMap.value?.set(item.id, {\\n        dependedBy: deps?.dependedBy || Array<string>(),\\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\\n    })\\n}\\n\\nfunction versionDialog(item: ITableData) {\\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\\n    const hasAnyVersion = modelHistories.value?.has(item.id);\\n    const options = {\\n        clickedNode, cb: (version: string) => {\\n            item.version = version;\\n            updateDependencyMap(version, item);\\n        }\\n    } as any;\\n\\n    if (hasAnyVersion) {\\n        options.versions = modelHistories.value?.get(item.id)\\n    }\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/modelVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" }, options\\n    );\\n}\\n\\n\\nfunction moduleVersionDialog(item: ITableData) {\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/moduleVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" },\\n        {\\n            module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => {\\n                item.version = moduleVersion.version;\\n                item.children?.forEach(child => {\\n                    const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\\n                    child.version = modulesModel?.version\\n                    updateDependencyMap(modulesModel?.version!, child);\\n                })\\n            }\\n        }\\n    );\\n}\\n\\nfunction close() {\\n    emit(\\\"close\\\");\\n}\\n\\nasync function save() {\\n    executor.execute(\\n        async () => {\\n            const initAsGroup = async () => {\\n                const groupID = CryptoHelper.CreateGuid();\\n                await initHistory(groupID);\\n                await packJob(groupID);\\n                return groupID;\\n            }\\n\\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\\n\\n            switch (props.screenType) {\\n                case \\\"Export\\\":\\n                    if (isFlowBackend) {\\n                        const deployItems = await createAzureDeployItems();\\n                        await packJobsUseCase.createPackJobs([{\\n                            appID: viewModel.studio.appId,\\n                            exportType: \\\"qui\\\",\\n                            selectionData: deployItems\\n                        }]);\\n                        break;\\n                    }\\n\\n                    const groupID = await initAsGroup();\\n                    await createExportJob(groupID);\\n                    break;\\n                case \\\"Deploy\\\":\\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\\n                        case \\\"plateauGCP\\\":\\n                            const groupID = await initAsGroup();\\n                            await createDeployJob(groupID);\\n                            break;\\n                        case \\\"azure\\\":\\n                            const deployItems = await createAzureDeployItems();\\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\\n                            break;\\n                    }\\n            }\\n            const userMobileUsage = viewModel.user?.mobileUsage;\\n            const appMobileUsage = currentApp.value?.mobileUsage;\\n            if(props.platformSelection && props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \\\"backofficeUpdate\\\"})\\n                \\n            }\\n            emit(\\\"close\\\");\\n        },\\n        { loading: true });\\n}\\n\\nasync function createAzureDeployItems() {\\n    const deployItems: Array<IExportItem> = [];\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        const path = item.owner.objectType == \\\"module\\\" ? PathHelper.join(item.owner.name, item.path) : item.path;\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\\n        if (!items || items.length == 0) { return; }\\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\\n            if (item.type == \\\"module\\\" || item.type == \\\"folder\\\") {\\n                traverseSelectedItems(item.children);\\n                return;\\n            }\\n\\n            const itemMap = itemIdObj[item.id];\\n\\n            const deployItem: IExportItem = {\\n                id: item.id,\\n                name: jobUtils.getFileFullname(itemMap.item),\\n                path: itemMap.path,\\n                type: jobUtils.getItemType(itemMap.item),\\n                ver: item.version || \\\"latest\\\",\\n                isRootPage: (itemMap.item.additionals as IQJsonAdditionals | undefined)?.isRootPage,\\n                modulePrefix: itemMap.prefix,\\n                ownerType: 'application',\\n                ownerName: viewModel.studio.appName,\\n                size: itemMap.item.size,\\n                createDate: itemMap.item.createDate,\\n            };\\n            deployItems.push(deployItem)\\n        });\\n    };\\n\\n    traverseSelectedItems(items.value);\\n    const uniqueItems = removeDuplicates(deployItems)\\n    console.log(uniqueItems)\\n    return uniqueItems;\\n}\\n\\nfunction removeDuplicates(objects: IExportItem[]): IExportItem[] {\\n    const seenIds = new Set<string>(); // Collection to keep track of seen IDs\\n    const uniqueObjects: IExportItem[] = []; // Array to store unique objects\\n\\n    for (const obj of objects) {\\n        if (!seenIds.has(obj.id)) {\\n            uniqueObjects.push(obj); // Add the object if ID not seen before\\n            seenIds.add(obj.id); // Mark this ID as seen\\n        }\\n    }\\n\\n    return uniqueObjects; // Return the list of unique objects\\n}\\nasync function initHistory(groupID: string) {\\n    return qcloudApi.initPublishHistory({\\n        appID: viewModel.studio.appId,\\n        ID: groupID,\\n        isMultiStep: true,\\n        type: props.screenType == \\\"Deploy\\\" ? \\\"publish\\\" : \\\"download\\\",\\n        cloudProvider: props.screenType == \\\"Deploy\\\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\\n        platform: props.platformSelection\\n    });\\n}\\n\\nasync function packJob(groupID: string) {\\n    let exportItemMap = new Map<string, Array<IExportItem>>();\\n    const appName = viewModel.studio.appName;\\n\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        const path = item.owner.objectType == \\\"module\\\" ? PathHelper.join(item.owner.name, item.path) : item.path;\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const createExportObject = (tableItem: ITableData) => {\\n        const itemMap = itemIdObj[tableItem.id];\\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == itemMap.item.modelType);\\n\\n        const retVal: IExportItem = {\\n            id: tableItem.id,\\n            ver: tableItem.version!,\\n            type: jobUtils.getItemType(itemMap.item),\\n            path: itemMap.path,\\n            modulePrefix: itemMap.prefix,\\n            name: jobUtils.getFileFullname(itemMap.item),\\n            ownerType: isAppItem ? 'application' : (itemMap.item.owner.objectType as \\\"module\\\" | \\\"application\\\"),\\n            ownerName: isAppItem ? appName : itemMap.item.owner.name,\\n        };\\n        return retVal;\\n    }\\n\\n    const addToExportItem = (key: string, obj: IExportItem) => {\\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\\n        let items = exportItemMap.get(key);\\n        if (items && items.length > 0) {\\n            items.push(obj);\\n            exportItemMap.set(key, items);\\n        } else\\n            exportItemMap.set(key, [obj]);\\n    }\\n    const mapTableItemToExportItem = (tableItems: Array<ITableData>) => {\\n        tableItems.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\\n        if (asset.type == 'module') {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                const obj = createExportObject(child);\\n                if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n\\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n            });\\n        } \\n        else if(asset.type == \\\"folder\\\") {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                if(child.type == \\\"folder\\\") {\\n                    mapTableItemToExportItem([child])\\n                }\\n                else {\\n                    const obj = createExportObject(child);\\n                    if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n                \\n                    const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                    addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n                }\\n            });\\n        }\\n        else {\\n            const obj = createExportObject(asset);\\n            if (asset.type == 'qjson') {\\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \\\"model\\\" && i.modelType == \\\"qjson\\\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\\n                obj.isRootPage = isRootPage ? true : undefined;\\n            }\\n            addToExportItem(appName, obj);\\n        }\\n    })\\n    }\\n    mapTableItemToExportItem(items.value);\\n   \\n\\n    let jobs = Array<ICreateExportJobParam>();\\n    exportItemMap.forEach((v, k) => {\\n        jobs.push({\\n            appID: viewModel.studio.appId,\\n            exportType: \\\"qui\\\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \\\"model\\\":  \\\"qui\\\"\\n            selectionData: v,\\n            cause: props.screenType == 'Export' ? 'download' : \\\"publish\\\",\\n            layer: 0,\\n            groupID: groupID,\\n            platformSelection: props.platformSelection\\n        })\\n    })\\n\\n    await packJobsUseCase.createPackJobs(jobs);\\n}\\nasync function createExportJob(groupID: string) {\\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\\n        appID: viewModel.studio.appId,\\n        exportType: \\\"qui\\\",\\n        selectionData: [],\\n        layer: 1,\\n        groupID: groupID\\n    });\\n}\\n\\nasync function createDeployJob(groupID: string) {\\n    //1-(n) L1- deployJob(build)\\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\\n        .then(jobs => jobs.jobs.map(e => {\\n            const jobData = e.jobData as IExportJobData;\\n            return {\\n                ownerName: jobData.items[0].ownerName,\\n                jobID: e.jobID,\\n                type: jobData.items[0].ownerType,\\n                mainDir: getDeployableArchiveRoot(jobData)\\n            }\\n        }));\\n\\n    if (!packages || packages.length <= 0)\\n        return;\\n\\n    let buildJobs = Array<ICreateDeployJobParam>();\\n    packages.forEach(pack => {\\n        buildJobs.push({\\n            appID: viewModel.studio.appId,\\n            type: \\\"build\\\",\\n            package: {\\n                type: pack.type as DeployType,\\n                name: pack.ownerName!,\\n                mainDir: pack.mainDir,\\n                zip: `${pack.jobID}.zip`,\\n            },\\n            layer: 1,\\n            groupID: groupID\\n        })\\n    })\\n\\n    await deployJobsUseCase.createBuildJobs(buildJobs);\\n\\n    //2-(1) L2- deployJob(deployment)\\n    let jobParam: ICreateDeployJobParam = {\\n        appID: viewModel.studio.appId,\\n        type: \\\"deployment\\\",\\n        deployConfig: {\\n            process: {\\n                configModelIDs: getProcessConfigList(),\\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \\\"bpmn\\\"))\\n            }\\n        },\\n        layer: 2,\\n        groupID: groupID,\\n        platformSelection: props.platformSelection\\n    }\\n\\n    await deployJobsUseCase.startDeploymentJob(jobParam);\\n}\\n\\nfunction getProcessConfigList() {\\n    let processConfigList = Array<IProcessConfigModelItem>();\\n    items.value.forEach((asset) => {\\n        if (asset.type == \\\"module\\\" && asset.anyChildChecked && asset.children) {\\n            const usingService = asset.children.find(c => c.type == \\\"entityDesigner\\\");\\n            if (!usingService)\\n                return;\\n\\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\\n            asset.children.forEach(child => {\\n                if (child.checked && child.type == \\\"process\\\") {\\n                    processConfigList.push({\\n                        moduleName: serviceName,\\n                        model: {\\n                            id: child.id,\\n                            name: child.name,\\n                            version: child.version!\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n    })\\n    return processConfigList;\\n}\\n\\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\\n    if (jobData.items[0].ownerType == \\\"module\\\") {\\n        let edModel = jobData.items.find(e => e.type == \\\"entityDesigner\\\");\\n        if (!edModel)\\n            throw new Error(\\\"!!! this module cannot deploy. Because its have not a service\\\");\\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\\n    }\\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\\n}\\n\\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \\\"Public Cloud\\\", plateauGCP: \\\"Plateau Platform Playground\\\" };\\n    if (pureVal) {\\n        return Object.keys(map).find(e => {\\n            if (map[e as keyof IOrganizationCloud] === name) {\\n                return true;\\n            }\\n        })\\n    } else {\\n        let key = Object.keys(map).includes(name);\\n        if (!key)\\n            return;\\n        return map[name as keyof IOrganizationCloud];\\n    }\\n}\\n\\nfunction onTargetSelect(value: string) {\\n    selectedTarget.value = value\\n}\\n\\nconst isModuleImported = (item: IModule) => {\\n    return objectUseCase.isModuleImported(item);\\n}\\n\\n</script>\\n\\n\\n<style scoped>\\n.container {\\n    padding: 32px 20px 20px;\\n}\\n\\n.settings-container {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n\\n.custom-text {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n\\n.radio-button {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n\\n.radio-text {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n\\n.existing-app-url {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n\\n.url-error {\\n    border: 1px solid red;\\n}\\n\\n.url-disable {\\n    opacity: 0.5;\\n}\\n\\n.existing-app-url::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n\\n.modules-selected-checkbox {\\n    cursor: pointer;\\n}\\n\\n.modules-selected-text {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n    ;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n\\n.text-number {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.modules-datatable {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n\\n.modules-datatable::-webkit-scrollbar {\\n    width: 4px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n\\n.row-container {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n\\n.chevron {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n\\n.chevron.disabled {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n\\n.module-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n\\n.module-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.module-name.imported {\\n    top: 10px;\\n    left: 87px;\\n}\\n\\n.module-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n\\n.model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n\\n.app-tier-model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n\\n.app-tier-model-name {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.version-text {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.version-text.disabled {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.version-icon {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n\\n.version-icon.disabled {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.footer {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n\\n.footer.deploy {\\n    position: relative;\\n    width: 100%;\\n}\\n\\n.footer.export {\\n    margin-top: 102px;\\n}\\n\\n.cancel-button {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n\\n\\n.save-button {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n.mobile-publish-text,\\n.web-publish-text {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.mobile-publish-text i,\\n.web-publish-text i {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n\\n.save-button.deploy {\\n    padding: 10px 16px;\\n}\\n\\n.button-disable .save-button {\\n    color: #757575;\\n    cursor: default;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n\\n.button-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n\\n.publish-info {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n\\n.select-environment {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n</style>\\n\\n<style>\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\nexport class PlateauHelper {\n    public static purify = (str: string) => str.replace(/[^a-zA-Z0-9]/g, \"\").toLowerCase();\n\n    public static getPlateauEnvironmentName = (envPrefix: string, appName: string) => {\n        if(!envPrefix || !appName)\n            throw new Error(\"Environment name prefix or application name not found!!!\" );\n\n        envPrefix = (envPrefix.endsWith(\"-\") ? envPrefix : (envPrefix + \"-\")).toLowerCase();\n        appName = PlateauHelper.purify(appName);\n        return `${envPrefix}${appName}`;\n    }\n\n    public static getQuiPackageNameFromAppName = (appName: string) => `${PlateauHelper.purify(appName)}-qui`;\n\n    public static getApplicationUINameFromQuiPkg = (quiPackageName: string) => PlateauHelper.purify(quiPackageName.replace(\"-qui\", \"ui\"));\n    \n    public static getApplicationHostNamePrefix = (appName: string) => `${PlateauHelper.purify(appName)}ui`;\n\n    public static getServiceNameFromModel = (modelName: string) => PlateauHelper.purify(modelName.replace(\".dm\", \"\"));\n}\n","export class PathHelper {\n    public static join(path1: string, path2: string) {\n        const pathPart1 = path1.endsWith(\"/\") ? path1.substring(0, path1.length - 1) : path1;\n        const pathPart2 = path2.startsWith(\"/\") ? path2.substring(1) : path2;\n        let fullPath = pathPart1 + \"/\" + pathPart2;\n        fullPath = fullPath.endsWith(\"/\") ? fullPath.substring(0, fullPath.length - 1) : fullPath;\n        return fullPath;\n    }\n}","import { IQJsonAdditionals, ModelAdditionals, ModelType, ModuleObjectType } from \"./quickCloud\";\n\ntype ValueOf<Type> = Type extends any ? Type[keyof Type] : never;\ntype FieldValueOf<Type extends typeof typeSafety, Field extends keyof Type[keyof Type]> = Type[keyof Type][Field]\nexport type EditorModelTypes = ValueOf<FieldValueOf<typeof EditorConsts, \"modelKeys\">>;\nlet typeSafety: Record<string, { modelKeys: Record<string, string> }>;\nexport const EditorConsts = typeSafety = {\n    quick: {\n        modelKeys: {\n            self: \"qjson\" as \"qjson\",\n        }\n    },\n    flow: {\n        modelKeys: {\n            design: \"flow-design\" as \"flow-design\",\n            runtime: \"flow-runtime\" as \"flow-runtime\",\n        }\n    },\n    workflow: {\n        modelKeys: {\n            design: \"workflow-design\" as \"workflow-design\",\n            runtime: \"workflow-runtime\" as \"workflow-runtime\",\n        }\n    },\n    flowEntity: {\n        modelKeys: {\n            single: \"flow-entity\" as \"flow-entity\",\n        }\n    },\n};\n\ninterface ModelVisualInfo {\n    icon: string;\n    color: string;\n}\nconst cssJsTsYaml: ModelVisualInfo = { color: \"#449DD1\", icon: \"mdi mdi-cog-outline\" };\nconst jpegJpgPngSvgGif: ModelVisualInfo = { color: \"#212121\", icon: \"mdi mdi-image-outline \" }\nconst formatIcon: ModelVisualInfo = { color: \"#212121\", icon: \"mdi mdi-format-font \" }\nconst moduleVisual = { color: \"#007C77\", icon: \"mdi mdi-puzzle\" }\nconst modelVisuals: Record<ModelType | \"folder\", ModelVisualInfo | Error | ((additional: ModelAdditionals | undefined) => ModelVisualInfo)> = {\n    qjson: (additionals) => {\n        if (additionals && (additionals as IQJsonAdditionals).qjsonType == \"quickComponent\") {\n            return { color: \"#449DD1\", icon: \"mdi mdi-shape-outline\" };\n        }\n        return { color: \"#449DD1\", icon: \"mdi mdi-palette\" };\n    },\n    css: { color: \"#151233\", icon: \"mdi mdi-music-accidental-sharp\" },\n    js: cssJsTsYaml,\n    ts: cssJsTsYaml,\n    yaml: cssJsTsYaml,\n    entityDesigner: { color: \"#E9724C\", icon: \"mdi mdi-database\" },\n    bpmn: { color: \"#007C77\", icon: \"mdi mdi-vector-polyline\" },\n    process: { color: \"#007C77\", icon: \"mdi mdi-auto-fix\" },\n    flow: { color: \"#007C77\", icon: \"mdi mdi-step-forward\" },\n    workflow: { color: \"#007C77\", icon: \"mdi mdi-step-forward\" },\n    flowEntity: { color: \"blue\", icon: \"mdi mdi-step-forward\" },\n    namedComponent: { color: \"#212121\", icon: \"mdi mdi-cube-outline\" },\n    step: new Error(\"unimplemented for namedComponent\"),\n    jpeg: jpegJpgPngSvgGif,\n    jpg: jpegJpgPngSvgGif,\n    png: jpegJpgPngSvgGif,\n    svg: jpegJpgPngSvgGif,\n    gif: jpegJpgPngSvgGif,\n    woff: formatIcon,\n    woff2: formatIcon,\n    ttf: formatIcon,\n    otf: formatIcon,\n    lottie: jpegJpgPngSvgGif,\n    appSettings: { color: \"#151233\", icon: \"mdi mdi-cog\" },\n    json: new Error(\"unimplemented for json\"),\n    flowProcess: { color: \"#007C77\", icon: \"mdi mdi-chart-sankey-variant\" },\n    object: { color: \"#007C77\", icon: \"mdi mdi-cube\" },\n    folder: { color: \"#212121\", icon: \"mdi mdi-folder\" }\n}\n\nexport class ModelContants {\n    public static getModelVisualInfo(modelType: ModelType | ModuleObjectType | \"folder\", modelAdditionals: ModelAdditionals | undefined): ModelVisualInfo {\n        const retVal = modelType == \"module\" ? moduleVisual : modelVisuals[modelType];\n        if (retVal instanceof Error) { throw retVal; }\n        return typeof retVal == \"function\" ? retVal(modelAdditionals) : retVal;\n    }\n}","import { IAppCloud, IOrganizationCloud } from \"../clean/domain/useCases/ICloudProvider\";\nimport { IOrganization, IOrganizationFeatures, IEditorTypes } from \"./membership\";\n\n\nexport const DEPENDED_MODEL_KEYS = [\"qjson\", \"named\", \"img\", \"woff\", \"woff2\", \"ttf\", \"otf\"];\nexport const DEPENDED_IMAGE_KEYS = [\"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\"];\nexport const APP_ITEM_CONTENT_TYPES = [\"qjson\", \"css\", \"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\", \"lottie\", \"json\", \"woff\", \"woff2\", \"ttf\", \"otf\"];\n\nexport type ObjectID = string; // GUID\n//export type AuthenticationTypes = [\"QCLOUDAUTH\", \"ADFS\"];\nexport type AuthenticationType = \"QCLOUDAUTH\" | \"ADFS\";\nexport type ModelHistoryType = \"update\" | \"delete\" | \"checkin\" | \"publish\" | \"ownerItemDelete\";\nexport type DomainObjectType = \"domain\";\nexport type ApplicationObjectType = \"application\";\nexport type ModuleObjectType = \"module\";\nexport type FolderObjectType = \"folder\";\nexport type ModelObjectType = \"model\";\nexport type AppSettingsObjectType = \"appSettings\";\nexport type AppAssetObjectType = \"appAssetList\";\nexport type QJsonType = \"qjson\" | \"template\" | \"pageTemplate\" | \"quickComponent\";\nexport type ModelResponseType = \"info\" | \"body\" | \"full\";\nexport type ContentType = \"qjson\" | \"js\" | \"ts\" | \"yaml\" | \"css\" | \"png\" | \"jpg\" | \"jpeg\" | \"svg\" | \"gif\" | \"lottie\" | \"woff\" | \"woff2\" | \"ttf\" | \"otf\" | \"json\";\nexport type ModelType = ContentType | \"bpmn\" | \"process\" | \"entityDesigner\" | \"namedComponent\" | \"flow\" | \"workflow\" | \"step\" | \"flowEntity\" | \"appSettings\" | \"flowProcess\" | \"object\";\nexport type UsageType = AppSettingsObjectType | AppAssetObjectType;\nexport type ModuleType = \"basic\";\nexport type AllCreateObjectTypes = ModelType | FolderObjectType | ModuleObjectType;\nexport type AppSettingsModelKeys = \"settings\" | \"componentList\" | \"containerServices\" | \"pipeline\" | \"alert\" | \"loading\" | \"globalLocalization\" | \"localProxy\" | \"style\" | \"rootqjson\" | \"asset\" | \"appSettings\";\nexport type ExtensionType = \"png\" | \"jpg\" | \"jpeg\" | \"svg\" | \"gif\" | \"json\" | \"woff\" | \"woff2\" | \"ttf\" | \"otf\";\nexport type ModuleShareType = 'reference' | 'version';\n\nexport const UISettingsType = {\n    alert: \"Alert Component\",\n    pipeline: \"Pipeline\",\n    loading: \"Loading Component\",\n    settings: \"Settings File\",\n    localProxy: \"Local Proxy File\",\n    contSvc: \"Container Services File\",\n    css: \"Style File\",\n    compList: \"Component List\",\n    globalLocalization: \"Global Localization\",\n    assetList: \"Asset List\",\n    appSettings: \"App Settings\"\n} as const;\nexport type UISettingsType = typeof UISettingsType[keyof typeof UISettingsType];\n\nexport interface ICloudObject {\n    ID: ObjectID;\n    name: string;\n    ownerUser: ObjectID;\n    createDate: Date;\n    createdBy: ObjectID;\n    updateDate?: Date;\n    updatedBy?: ObjectID;\n    isPermanent?: boolean;\n    priority?: number;\n}\n\nexport interface IMicroserviceDefinition {\n    name: string;\n    version: string;\n}\n\nexport interface IApplicationDetails {\n    moduleCount: number;\n    pageCount: number;\n    pageTemplateCount: number;\n    templateCount: number;\n    processCount: number;\n    entityCount: number;\n    uiSettingsCount: number;\n}\n\nexport interface IApplicationExportSettings {\n    selectedType: \"download\" | \"fileSystem\";\n}\n\nexport interface IApplicationLogoInfo {\n    hostUrl: string;\n    path: string;\n    updateDate: Date;\n}\n\nexport interface IApplication extends ICloudObject {\n    /**\n     * This is the RESERVED ID which should be used for publishments.\n     */\n    publishmentId?: ObjectID;\n    objectType: ApplicationObjectType;\n    //logo?: string;\n    logoInfo?: IApplicationLogoInfo;\n    color?: string;\n    description?: string;\n    store?: {\n        productID: ObjectID;\n        productVerID: ObjectID;\n    };\n    cloud?: IAppCloud;\n    exportSettings?: IApplicationExportSettings;\n    modifyDate?: Date;\n    firstPublishDate?: Date;\n    lastPublishDate?: Date;\n    mobileUsage?: IUpdateMobileUsage;\n    lastReleasedVersion?: string;\n}\n\nexport interface IOrganizationData extends IOrganization {\n    showOrgInfo: boolean;\n}\nexport interface IModuleRelatedApplicationItem {\n    applicationID: ObjectID;\n    importedVersion?: string;\n}\n\nexport interface IModuleRelatedModelItem {\n    modelID: ObjectID;\n    version: string;\n}\n\nexport interface IModuleBackend extends ICloudObject {\n    description?: string;\n    modifyDate?: Date;\n    prefix?: string;\n    objectType: ModuleObjectType;\n    relatedApplications: Array<IModuleRelatedApplicationItem>;\n    moduleType?: ModuleType;\n    store?: {\n        productID: ObjectID;\n        productVerID: ObjectID;\n    };\n    mainOwner: ObjectID;\n    shareType?: ModuleShareType;  //migrate: related app i birden fazla olanlar icin 'reference'\n    currentVersion?: string;\n    lastReleasedVersion?: string;\n    applicationID?: string;\n    ownerOrg?: {\n        orgName: string,\n        dbName: string,\n        orgId: string\n    }\n}\n\nexport interface IModuleVersion extends ICloudObject {\n    moduleID: ObjectID;\n    version: string;\n    relatedApplications?: Array<IModuleRelatedApplicationItem>;\n    relatedModelHistories: Array<IModuleRelatedModelItem>;\n    description?: string;\n}\n\nexport interface IModelCopyInfo {\n    sourceModelID: ObjectID;\n    date: Date;\n    user: string;\n}\n\nexport type AllModelAdditionalTypes = IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals | IFlowModelAdditionals | IStepModelAdditionals | IAppSettingsModelAddtionals\n\nexport interface IModelInfo extends ICloudObject {\n    objectType: ModelObjectType;\n    ownerItem: ObjectID;\n    ownerType: ApplicationObjectType | ModuleObjectType;\n    modelType: ModelType;\n    extension?: ExtensionType;\n    modelAdditionals: AllModelAdditionalTypes;\n    key?: AppSettingsModelKeys;\n    checkouts?: Array<IModelCheckout>;\n    usageType?: UsageType;\n    copyFromInfo?: IModelCopyInfo;\n    size?: number;\n    store?: {\n        productVerID?: ObjectID;\n        productVerContentID?: ObjectID;\n    };\n    latestPublishedVer?: string;\n    dependentModels?: Array<IDependentModel>;\n    path?: string;\n    modelID?: string;\n    version?: string;\n    isUnmodifiable?: boolean;\n}\n\nexport interface IDependentModel {\n    modelId: string;\n}\n\nexport interface IModelBodyObject {\n    key: string;\n    model: any;\n}\n\nexport interface IModelBody extends IModelBodyObject {\n    modelID: ObjectID;// this variable cannot change by version.\n    informationId: ObjectID; //if model is versioned model; informationId = histID\n    createDate: Date;\n    size?: number;\n}\n\nexport interface IModelCheckout {\n    user: string;\n    date: Date;\n}\n\nexport interface IQJsonAdditionals {\n    qjsonType: QJsonType;\n    image?: string;\n    isRootPage?: boolean;\n}\n\nexport interface IProcessWizardAdditionals { }\n\nexport interface IBpmnAdditionals {\n    isAutoGenerated?: boolean; //undefined & false => auto generated | true => manuel added\n    isModifiedByUser?: boolean;\n}\n\nexport interface IEntityDesignerAddtionals { }\n\nexport interface IFlowModelAdditionals { }\nexport interface IStepModelAdditionals {\n    compatibilities: { ui: boolean; service: boolean; };\n}\n\nexport interface IAppSettingsModelAddtionals { }\n\nexport type ModelAdditionals = IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals | IAppSettingsModelAddtionals;\n\nexport interface IModelHistoryInfo extends ICloudObject, IModelInfo {\n    modelID: ObjectID;\n    historyType: ModelHistoryType;\n    version?: string;\n    shortComment?: string;\n    comment?: string;\n    dependentModels?: Array<IDependentModel>;\n}\n\nexport interface ISystemUser extends ICloudObject {\n    mailAddress: string;\n    loginType: AuthenticationType;\n    password?: string;\n}\n\nexport interface IQCloudLogItem {\n    ID?: string;\n    detail: any;\n    stack?: string;\n    state?: { app: { ID: string; name: string }; openItemIDs?: Array<string>; currentItemID?: string };\n    level: \"debug\" | \"info\" | \"log\" | \"trace\" | \"warning\" | \"error\";\n    type: \"business\" | \"technical\";\n}\n\nexport interface IQCloudLogDBItem extends IQCloudLogItem {\n    date: Date;\n    user?: { ID: ObjectID; name?: string; email: string };\n}\n\n\nexport interface ITenantDefinitions extends ICloudObject {\n    value: any;\n    isActive: boolean;\n    objectType?: AppSettingsObjectType | \"deploySettings\" | \"appTemplate\";\n    targetObjectType?: ApplicationObjectType | DomainObjectType;\n    contentType?: ContentType;\n    description?: string;\n    key?: AppSettingsModelKeys;\n}\n\nexport type ItemLimitActionType = \"deleteOldest\" | \"stopAdding\";\n\nexport interface IItemLimitationDetail {\n    value: number;\n    action?: ItemLimitActionType;\n}\n\nexport interface IItemLimitations {\n    history: {\n        maxCountPerModel: IItemLimitationDetail;\n        maxCountPerModule: IItemLimitationDetail;\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    model: {\n        maxCountPerModule: IItemLimitationDetail;\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    module: {\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    application: {\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n}\n\n// let itemLimittations: IItemLimitations = {\n//     history: {\n//         maxCountPerModel: { value: -1 },\n//         maxCountPerModule: { value: -1 },\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     model: {\n//         maxCountPerModule: { value: -1 },\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     module: {\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     application: {\n//         maxCountPerTenant: { value: -1 },\n//     },\n// }\n\n// const items = [\n//     {targetobject: \"history\", limitkey: \"maxCountPerModel\", value: 10, limitaction: \"deleteOldest\"},\n//     {targetobject: \"model\", limitkey: \"maxCountPerApplication\", value: 20, limitaction: \"deleteOldest\"}\n// ];\n\n// items.forEach(item => {\n//     const itemLimit = itemLimittations as any;\n//     itemLimit[item.targetobject][item.limitkey] = {value: item.value, action: item.limitaction};\n//     itemLimittations = itemLimit as IItemLimitations;\n// });\n\n// const dic:Record<string, Array<{text: string, value: string}>> = {\n//     \"history\": [\n//         {text: \"maxCountountPerModel\", value: \"maxCountountPerModel\"},\n//         {text: \"maxCountountPerModule\", value: \"maxCountountPerModule\"},\n//         {text: \"maxCountountPerApplication\", value: \"maxCountountPerApplication\"},\n//         {text: \"maxCountountPerTenant\", value: \"maxCountountPerTenant\"},\n//     ],\n//     \"model\": [\n//         {text: \"maxCountountPerModule\", value: \"maxCountountPerModule\"},\n//         {text: \"maxCountountPerApplication\", value: \"maxCountountPerApplication\"},\n//         {text: \"maxCountountPerTenant\", value: \"maxCountountPerTenant\"}\n//     ],\n//     \"module\": [],\n//     \"application\": []\n// }\n\n\nexport interface IOrganizationActions {\n    publish?: {\n        targets?: Record<keyof IOrganizationCloud, boolean>;\n    };\n    entityGenerationDomain?: \"softtech\" | \"isbank\";\n}\n\nexport type ITreeviewItemType = ModelType | \"module\";\n\nexport interface ITreeviewItem {\n    id: string;\n    // parentId?: string;\n    name: string;\n    priority: number;\n    type: ITreeviewItemType;\n    createDate: Date;\n    path: string;\n    shortName?: string;\n    modelAdditionals?: IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals;\n    children?: Array<ITreeviewItem>;\n    moduleType?: ModuleType;\n    usageType?: UsageType;\n    checkouts?: Array<IModelCheckout>;\n    relatedApplications?: IModuleBackend[\"relatedApplications\"];\n    size?: number;\n    prefix?: string;\n    dependentModels?: Array<IDependentModel>;\n    moduleMainOwner?: ObjectID;\n    moduleShareType?: ModuleShareType;\n    currentModuleVersion?: string;\n    currentModelVersion?: string;\n    // relatedModelHistories?: IModule[\"relatedModelHistories\"];\n    lastReleasedModuleVersion?: string;\n    modelID?: string,\n    ownerOrg?: {\n        orgName: string,\n        dbName: string,\n        orgId: string\n    }\n}\n\nexport interface IScreenItem {\n    id: string;\n    fileName: string;\n    ownerItem: string;\n}\n\nexport interface IApplicationCard extends IApplication {\n    moduleCount: number;\n    pageCount: number;\n    templateCount: number;\n}\n\nexport interface IPimQJsonOptions {\n    qJsonType?: QJsonType;\n}\n\nexport type GeneratePageType = \"create\" | \"list\" | \"update\";\n\nexport interface IIntegration extends ICloudObject {\n    theme: string;\n    settings: {\n        engine: {\n            version: string;\n            babel: boolean;\n            embedded: boolean;\n            multitab: boolean;\n            plugins: Array<{\n                Native: [\n                    {\n                        name: string;\n                        text: string;\n                        dependencies: Array<string>;\n                        enabled: boolean;\n                    }\n                ];\n                Quick: [\n                    {\n                        name: string;\n                        text: string;\n                        dependencies: Array<string>;\n                        enabled: boolean;\n                    }\n                ];\n            }>;\n            region: string;\n            backend: string;\n        };\n        backends: Array<string>;\n        configuration: any; //IWebSDKSettings\n    };\n    componentList: Record<\n        string,\n        Record<\n            string,\n            {\n                type: string;\n                required: boolean;\n                editorDefaultValue: string;\n                runTimeOverrideValue: string;\n                runTimeDefaultValue: string;\n                options: Array<string>;\n            }\n        >\n    >;\n}\n\nexport interface IAppToken {\n    secret: string;\n    app: string;\n    email: string;\n}\n\nexport interface ITags extends ICloudObject {\n    description?: string;\n}\n\nexport interface IOrganizationGroup extends ICloudObject {\n    description?: string;\n    createdBy: string;\n    createDate: Date;\n    owners?: Array<string>;\n    features?: IOrganizationFeatures;\n    applications?: IEditorTypes;\n    mainOrganizationId?: IOrganization[\"id\"];\n    mainAppId?: IApplication[\"ID\"]\n}\n\nexport interface ISDActivities {\n    ID: ObjectID;\n    username: string;\n    lastAccessDate: Date;\n    logs: Array<{ time: Date }>;\n}\nexport interface IUpdateMobileUsage {\n    isMobileTemplateUsed?: boolean;\n    isMobilePublished?: boolean;\n}\n\nexport interface IOrganizationGroupList {\n    name: string,\n    ownership: \"Owner\" | \"User\" | \"Requested\",\n    photoLink?: string\n}\n\nexport interface IOrganizationActiveGroups {\n    organizationName: string,\n    appCount: number,\n    licensed: boolean,\n    joinDate: Date\n}","import { IApplicationExportSettings } from '../../../../common/qCloudTemp/quickCloud';\nimport { IUpdateApplicationRequest } from '../../../../common/qCloudTemp/symDtoObjects';\nimport { IApplication, ILoggedInUser } from \"../model/models\";\n\nexport interface IUpdateApplicationParam {\n    ID: string;\n    name?: string;\n    description?: string;\n    logo?: string;\n    color?: string;\n    ownerUser?: ILoggedInUser;\n    exportSettings?: IApplicationExportSettings;\n}\nexport interface ICreateApplicationParam {\n    name: string;\n    description?: string;\n    logo?: string;\n    color?: string;\n    templateName?: string;\n    organizationGroupId: string | undefined;\n}\nexport interface IApplicationUseCase {\n    updateApplication(param: IUpdateApplicationRequest): Promise<void>;\n    createApplication(param: ICreateApplicationParam): Promise<IApplication>;\n}\nexport const IApplicationUseCase = Symbol.for(\"IApplicationUseCase\");","import { ICreateExportJobParam } from \"../../../../common/qCloudTemp/exporter\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface ICreateExportJob extends IUseCase<void, ICreateExportJobParam> {}\n\nexport const ICreateExportJob = Symbol.for(\"ICreateExportJob\");","import { ICreateDeployJobParam, IDeployJobItem, IExportItem, IPlatformSelection } from \"../../../../common/qCloudTemp/exporter\";\nimport { IProviderGetLastBuildStatusResponse } from \"../infrastructure/IProviderApi\";\n\nexport interface IDeployJobs {\n    createAppDeployJob(deployItems: Array<IExportItem>, platformSelection?: IPlatformSelection ): Promise<void>;\n    startDeploymentJob(deployJobs: ICreateDeployJobParam): Promise<void>;\n    createBuildJobs(deployJobs: Array<ICreateDeployJobParam>): Promise<void>;\n    checkRepoHasService(repoIds: Array<number>): Promise<Array<{ repoId: number; exist: boolean }>>;\n    getRepoNameById(repoId: number): Promise<string>;\n    getProductConfigInfo(productRepoId: number, quiRepoId?: number): Promise<{ domain: string; quiName?: string }>;\n    getLastBuildStatus(jobName: string): Promise<IProviderGetLastBuildStatusResponse>;\n}\n\nexport const IDeployJobs = Symbol.for(\"IDeployJobs\");","import { IApplication, IFolder, IModel, IModule } from \"../model/models\";\nimport { ITreeItem, ITreeView } from \"../presentation/ITreeView\";\nimport { IFEExternalData } from \"./IFileExplorer\";\n\nexport interface IDisplayItemsAdditional {\n    id: string;\n    name: string;\n    externalData: FileDisplayerExternalData;\n}\nexport type DisplayModelsCb = (item: FileDisplayerExternalData, hasChildren: boolean) => boolean;\nexport interface ICloneFileExplorerOptions {\n    displayFilterer?: DisplayModelsCb;\n    cb?: { select?: (item: ITreeItem<FileDisplayerExternalData>) => void };\n}\nexport interface IDisplayItemsOptions extends ICloneFileExplorerOptions {\n    additionalItems?: Array<IDisplayItemsAdditional>;\n    additionalRoot?: IDisplayItemsAdditional;\n}\n\nexport type FileDisplayerExternalData = IApplication | IFEExternalData;\n\nexport interface IFileDisplayerUseCase {\n    cloneFileExplorerTreeView(options: ICloneFileExplorerOptions): Array<ITreeItem<FileDisplayerExternalData>>;\n    createFileExplorerClone(domElement: HTMLElement, options: IDisplayItemsOptions): ITreeView<FileDisplayerExternalData>;\n}\nexport const IFileDisplayerUseCase = Symbol.for(\"IFileDisplayerUseCase\");","import { IExportItem } from \"../../../../common/qCloudTemp/exporter\";\nimport { IExportViewItem, IModel } from \"../model/models\";\n\nexport interface IJobUtils {\n    //settingTypeMapper(fileName: string): IExportItem[\"type\"];\n    getItemType(item: IExportViewItem | IModel): IExportItem[\"type\"];\n    getFileFullname(item: IExportViewItem | IModel): string;\n}\n\nexport const IJobUtils = Symbol.for(\"IJobUtils\");","import { IModelHistoryInfo } from \"../model/models\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModelVersionsParam { }\nexport interface IListMultiModelVersions extends IUseCase<Map<string, Array<IModelHistoryInfo>>, IListMultiModelVersionsParam> {\n\n}\nexport const IListMultiModelVersions = Symbol.for(\"IListMultiModelVersions\");","import { IModuleVersion } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModuleVersionsParam { }\nexport interface IListMultiModuleVersions extends IUseCase<Map<string, Array<IModuleVersion>>, IListMultiModuleVersionsParam> {\n\n}\nexport const IListMultiModuleVersions = Symbol.for(\"IListMultiModuleVersions\");","import { ICreateExportJobParam, IExportJobDbItem } from \"../../../../common/qCloudTemp/exporter\";\nimport { IAddAppVersionPackJobRequest } from \"../../../../common/qCloudTemp/symDtoObjects\";\nexport interface IPackJobs {\n    createPackJobs(jobs: Array<ICreateExportJobParam>): Promise<Array<IExportJobDbItem>>;\n    createAppVersionPackJobs(request: IAddAppVersionPackJobRequest): Promise<IExportJobDbItem>;\n}\n\nexport const IPackJobs = Symbol.for(\"IPackJobs\");","import { IUser_SUSI } from \"../../../../../common/qCloudTemp/authentication\";\nimport { IOrganization } from \"../../../../../common/qCloudTemp/membership\";\nimport { IOrganizationGroup, ISDActivities, ITags } from \"../../../../../common/qCloudTemp/quickCloud\";\nimport { IAddOrganizationGroupRequest, IAddTagRequest, IBoRemoveTagFromOrganizationRequest, IBoRemoveUserFromOrganizationRequest, IGetOrganizaionGroupDetailsRequest, IGetOrganizaionGroupDetailsResponse, IUpdateMobileUsage, IUpdateOrganizaionGroupRequest, IUpdateTagRequest, IUpdateOrganizaionGroupOwnersRequest } from \"../../../../../common/qCloudTemp/symDtoObjects\";\nimport { IUserRequest } from \"../../../../../common/qCloudTemp/userRequest\";\nimport { IBoUpdateOrganizationProps, IUpdateUserInfo } from \"../../infrastructure/IQCloudApi\";\nimport { IApplication, IApplicationExtended } from \"../../model/models\";\n\nexport const IgnoredOrgGroupIds = ['7vipy7ub-v6v1-jnvx-mcdw-2avf532', 'kc5tkrxi-knql-fbnx-zokw-6yymka7b'];\nexport interface IAzureResourceGroupUrls {\n    overviewUrl: string;\n    costUrl: string;\n}\n\nexport interface IOrganizationUIExtended extends IOrganization {\n    organizationGroupName?: string;\n    createdBy?: string;\n    tagNames?: Array<string>;\n    licensed?: 'LICENSED' | 'Demo Org' | 'Free';\n\n}\n\nexport interface IUser_SUSIExtended extends IUser_SUSI {\n    organizationNames?: Array<string>;\n    organizationGroupNames?: Array<string>;\n    licensed?: 'LICENSED' | 'Demo User' | 'Free';\n}\n\nexport interface IUserRequestExtended extends IUserRequest {\n    userName?: string;\n    userLastname?: string;\n    userRole?: string;\n    organizationName?: string;\n    organizationAccountType?: string;\n}\n\n\nexport interface IBackofficeUseCase {\n    setBreadcrumb(values: Array<string>): void;\n    clearBreadcrumb(): void;\n    getAzureResourceGroupUrls(resourceGroupId: string): Promise<IAzureResourceGroupUrls>;\n    getDashboardInfo(): Promise<void>;\n    getUserInfo(userId: string): Promise<IUser_SUSI>;\n    getOrganizationInfo(organizationId: string): Promise<IOrganization>;\n    listUsers(): Promise<void>;\n    listOrganizations(): Promise<Array<IOrganizationUIExtended>>;\n    getOrgGroupNameByOrgID(orgID: string): Promise<string | undefined>\n    updateUserInfo(userId: string, properties: IUpdateUserInfo): Promise<IUser_SUSI>;\n    removeUserFromOrganization(properties: IBoRemoveUserFromOrganizationRequest): Promise<void>;\n    listOrganizationUsers(organizationId: string): Promise<Array<IUser_SUSI>>;\n    listOrganizationApps(organizationId: string): Promise<Array<IApplication>>;\n    deleteOrganization(organizationId: string, organizationName: string): Promise<void>;\n    updateOrganization(organizationId: string, properties: IBoUpdateOrganizationProps): Promise<IOrganization>;\n    deleteUser(userId: string, userEmail: string): Promise<void>;\n    getOrganizationsByUserId(userID: string): Promise<IOrganization[]>;\n    addTag(properties: IAddTagRequest): Promise<void>;\n    getTag(tagID: string): Promise<ITags>;\n    listTags(): Promise<void>;\n    updateTag(properties: IUpdateTagRequest): Promise<void>;\n    deleteTag(tagID: string): Promise<void>;\n    getOrganizationsByTagId(tagID: string): Promise<IOrganization[]>;\n    removeTagFromOrganization(properties: IBoRemoveTagFromOrganizationRequest): Promise<void>;\n    listUserRequests(): Promise<Array<IUserRequest>>;\n    addOrganizationGroup(properties: IAddOrganizationGroupRequest): Promise<void>;\n    listOrganizationGroups(): Promise<IOrganizationGroup[]>\n    updateOrganizationGroup(request: IUpdateOrganizaionGroupRequest): Promise<void>;\n    updateOrganizationGroupOwners(request: IUpdateOrganizaionGroupOwnersRequest): Promise<void>\n    getOrganizationGroupDetails(request: IGetOrganizaionGroupDetailsRequest): Promise<IGetOrganizaionGroupDetailsResponse>;\n    getOrganizationAppsByOrganizationIdForOrgGroup(orgID: string, orgGroup: IGetOrganizaionGroupDetailsResponse): IApplication[] | undefined;\n    getAllAppsForOrgGroup(orgGroup: IGetOrganizaionGroupDetailsResponse): IApplicationExtended[];\n    getUsersPerOrganizationForOrgGroup(orgID: string, orgGroup: IGetOrganizaionGroupDetailsResponse): IUser_SUSI[];\n    deleteOrganizationFromGorup(organizationId: string): Promise<void>;\n    deleteOrganizationGroup(organizationGroupId: string): Promise<void>;\n    listServiceDesignerActivities(): Promise<Array<ISDActivities>>;\n    downloadActivityXlsxFile(activities: Array<ISDActivities>): Promise<void>;\n    updateUserMobileUsage(mobileUsage: IUpdateMobileUsage): Promise<void>;\n    downloadUserListXlsxFile(users: Array<IUser_SUSIExtended>): Promise<void>;\n    downloadOrganizationListXlsxFile(organizations: Array<IOrganizationUIExtended>): Promise<void>;\n    deleteUserStandAloneInfo(userId: string): Promise<void>;\n}\n\nexport const IBackofficeUseCase = Symbol.for(\"IBackofficeUseCase\");","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, normalizeClass as _normalizeClass, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-13cd970a\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"container\" }\nconst _hoisted_2 = { class: \"text-number\" }\nconst _hoisted_3 = { class: \"text-number\" }\nconst _hoisted_4 = {\n  key: 0,\n  style: {\"margin-bottom\":\"102px\"}\n}\nconst _hoisted_5 = /*#__PURE__*/_createStaticVNode(\"<div style=\\\"display:flex;align-items:center;\\\" data-v-13cd970a><span class=\\\"custom-text environment\\\" data-v-13cd970a> Publish To </span><span class=\\\"publish-info\\\" data-v-13cd970a><i class=\\\"mdi mdi-information\\\" data-v-13cd970a></i><span class=\\\"button-tooltip\\\" style=\\\"top:460px;left:96px;z-index:1;width:231px;\\\" data-v-13cd970a>Publish To options may change depending on the module type you choose.</span></span></div>\", 1)\nconst _hoisted_6 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"save-button\" }, \"DOWNLOAD\", -1 /* HOISTED */))\nconst _hoisted_7 = {\n  key: 0,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-80px\",\"left\":\"626px\",\"z-index\":\"1\",\"width\":\"145px\"}\n}\nconst _hoisted_8 = {\n  key: 1,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"640px\",\"z-index\":\"1\",\"width\":\"120px\"}\n}\nconst _hoisted_9 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"save-button deploy\" }, \"PUBLISH\", -1 /* HOISTED */))\nconst _hoisted_11 = {\n  key: 0,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"652px\",\"z-index\":\"1\",\"width\":\"120px\"}\n}\nconst _hoisted_12 = {\n  key: 1,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"123px\"}\n}\nconst _hoisted_13 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\nconst _hoisted_14 = {\n  key: 3,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\n\nimport { CryptoHelper } from \"@stechquick/algae/lib/helpers/cryptoHelper\";\nimport { PlateauHelper } from \"@stechquick/algae/lib/helpers/plateau/plateauHelper\";\nimport { computed, createApp, defineAsyncComponent, onMounted, ref } from \"vue\";\nimport { IOrganizationCloud } from \"../../../../../../../common/clean/domain/useCases/ICloudProvider\";\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem, ITableData } from \"../../../../../../../common/qCloudTemp/exporter\";\nimport { APP_ITEM_CONTENT_TYPES, IModuleRelatedModelItem, IQJsonAdditionals } from \"../../../../../../../common/qCloudTemp/quickCloud\";\nimport { container } from \"../../../../../domain/core/diContainer\";\nimport { IQCloudApi } from \"../../../../../domain/infrastructure/IQCloudApi\";\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \"../../../../../domain/model/models\";\nimport { IDialog } from \"../../../../../domain/presentation/IDialog\";\nimport { ICreateExportJob } from \"../../../../../domain/useCase/ICreateExportJob\";\nimport { IDeployJobs } from \"../../../../../domain/useCase/IDeployJobs\";\nimport { IJobUtils } from \"../../../../../domain/useCase/IJobUtils\";\nimport { IListMultiModelVersions } from \"../../../../../domain/useCase/IListMultiModelVersions\";\nimport { IListMultiModuleVersions } from \"../../../../../domain/useCase/IListMultiModuleVersions\";\nimport { IPackJobs } from \"../../../../../domain/useCase/IPackJobs\";\nimport { IUseCaseExecutor } from \"../../../../../domain/useCase/IUseCaseExecutor\";\nimport { IViewModel } from \"../../../../../domain/viewModel/IViewModel\";\nimport { IViewModelManager } from \"../../../../../domain/viewModel/IViewModelManager\";\nimport { IBackofficeUseCase } from \"../../../../../domain/useCase/backoffice/IBackofficeUseCase\";\nimport { IApplicationUseCase } from \"../../../../../domain/useCase/IApplicationUseCase\";\nimport ExportDialogItem from \"./components/exportDialogItem.vue\";\nimport CustomSelect from \"../../../components/customSelect.vue\";\nimport CheckboxComp from \"../../checkboxComp.vue\";\nimport { FileDisplayerExternalData, IFileDisplayerUseCase } from \"../../../../../domain/useCase/IFileDisplayerUseCase\";\nimport { ITreeItem } from \"../../../../../domain/presentation/ITreeView\";\nimport { PathHelper } from \"../../../../../../../common/helpers/pathHelper\";\nimport { FileExplorerConstants } from \"../../../../../domain/useCase/IFileExplorer\";\nimport { IObjectUseCase } from \"../../../../../domain/useCase/IObjectUseCase\";\n\ninterface IDeployScreenAdditionalProps {\n    screenType: \"Export\" | \"Deploy\";\n    platformSelection: IPlatformSelection;\n}\n\ninterface IDisabledOptions {\n    index: number\n    cause: string;\n}\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'publishDialog',\n  props: {\n    screenType: null,\n    platformSelection: null\n  },\n  emits: [\"close\"],\n  setup(__props: any, { emit }) {\n\nconst props = __props as {\n    screenType: \"Export\" | \"Deploy\";\n    platformSelection: IPlatformSelection;\n};\n\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\nconst fileDisplayerUseCase = container.resolve<IFileDisplayerUseCase>(IFileDisplayerUseCase);\nconst objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\n\n\n\nconst items = ref<Array<ITableData>>([]);\nconst validations = ref<boolean>(true);\nconst selectedTarget = ref<string>(\"\");\nconst disabledOptions = ref<Array<IDisabledOptions>>();\nconst publishTargets = ref<Array<string>>();\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\nconst startScreen = ref<IModel>();\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>>();\nconst dependencyErrorStr = ref<string>('');\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\n\n\nonMounted(async () => {\n    await executor.execute(async () => {\n        await Promise.all([\n            executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, {}).then(res => modelHistories.value = res),\n            executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, {}).then(res => importedModuleVersions.value = res)\n        ])\n        initDependencies();\n        handleItems();\n        props.screenType == \"Deploy\" && syncPublishTargets();\n        validations.value = validate();\n    }, { loading: true });\n})\n\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \"module\" && e.allChildChecked).length);\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \"module\" && !e.allChildChecked && e.anyChildChecked).length);\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \"module\" && e.checked).length);\nconst totalRootLevelCount = computed(() => items.value.length);\nconst saveButtonDisable = computed(() => (props.screenType == \"Deploy\" && props.platformSelection.web && selectedTarget.value == \"\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \"Export\" && !validateStartScreen()) || !validateDependencies());\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true\n    : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0 ? false : undefined));\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\nconst isAllDependenciesOK = computed(validateDependencies)\nconst isStartScreenOK = computed(validateStartScreen)\n\nfunction validate() {\n    let result = true;\n    const modules = items.value.filter(e => e.type == \"module\" && e.anyChildChecked);\n    const appLayerItems = items.value.filter(e => e.type == \"qjson\" && e.checked);\n\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => (item.additionals as IQJsonAdditionals | undefined)?.isRootPage);\n    if (!startScreen.value)\n        return false;\n\n    if (props.screenType == \"Deploy\") {\n        if (modules.length > 0)\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \"entityDesigner\" && f.checked)).length <= 0\n\n        let isApplicationWillDeploy = appLayerItems.length > 0;\n        if (isApplicationWillDeploy) {\n            result = appLayerItems\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\n        }\n    }\n\n    return result;\n}\n\nfunction validateDependencies() {\n    const checkMap = new Map<string, boolean>();\n    items.value.forEach(item => {\n        if (item.type == 'module' && item.children && item.children.length > 0)\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\n        else\n            checkMap.set(item.id, item.checked == true)\n    })\n\n    const mustBeCheckedMap = new Map<string, Array<string>>();\n    dependencyMap.value?.forEach((deps, id) => {\n        if (!checkMap.get(id))\n            return;\n\n        deps.dependedTo.forEach(dependedId => {\n            if (checkMap.get(dependedId))\n                return;\n\n            if (mustBeCheckedMap.has(id)) {\n                const vals = mustBeCheckedMap.get(id)!\n                vals.push(dependedId)\n                mustBeCheckedMap.set(id, vals)\n            } else {\n                mustBeCheckedMap.set(id, [dependedId])\n            }\n\n        });\n    })\n\n    //set deps error text\n    const [firstItemID] = mustBeCheckedMap.keys();\n    if (firstItemID) {\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\n        dependencyErrorStr.value = `Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\n    }\n\n    return mustBeCheckedMap.size == 0\n}\n\nfunction validateStartScreen() {\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\n}\n\nfunction findItem(ID: string) {\n    for (const item of items.value) {\n        if (item.type != 'module' && item.id == ID)\n            return item;\n        if (item.type == 'module' && item.children && item.children.length > 0) {\n            const f = item.children.find(e => e.id == ID)\n            if (f) return f\n        }\n    }\n}\n\nfunction initDependencies() {\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string> }>();\n    const depMap = new Map<string, Array<string>>();\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item) => {\n        if (item.objectType != \"model\") { return; }\n\n        const isImportedModule = item.owner.objectType == \"module\" && isModuleImported(item.owner as IModule);\n\n        let version: string | undefined;\n        if (!isImportedModule) {\n            const maxVersion = getItemMaxVersion(item)\n            if (!maxVersion)\n                return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\n            version = maxVersion;\n        }\n        else {\n            const moduleVersions = importedModuleVersions.value?.get(item.owner.ID)\n            const moduleVersion = (item.owner as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n\n            const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\n            version = importedModuleModel?.version\n        }\n\n        const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\n\n        depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\n    });\n\n\n    depMap.forEach((dependedTo, modelId) => {\n        const dependedBy = Array<string>();\n        depMap.forEach((dependencies, depModelId) => {\n            if (dependencies.some(depId => depId == modelId))\n                dependedBy.push(depModelId)\n        })\n        map.set(modelId, { dependedBy, dependedTo });\n    })\n    dependencyMap.value = map;\n}\n\nfunction isModelDepended(item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\n    if (!deps) return false;\n\n    return deps.some(dep => items.value.some(item => {\n        if (item.type == 'module' && item.anyChildChecked) {\n            return item.children?.some(child => child.checked && child.id == dep)\n        }\n        return item.id == dep && item.checked\n    }));\n}\nfunction createDialogComp(item: ITableData) {\n    const newChild = createApp(ExportDialogItem, {\n        handleItemCheckEvent,\n        startScreen,\n        versionDialog,\n        handleCollapse,\n        item: item,\n        moduleVersionDialog\n    });\n    const mountEl = document.createElement('div');\n    newChild.mount(mountEl);\n    const parentEl = document.getElementById('module-container-div');\n    parentEl?.appendChild(mountEl);\n}\nfunction createAndAppendItem({ newItem }: { newItem: ITableData }) {\n    createDialogComp(newItem);\n    if ((newItem).type != \"module\") {\n        items.value.push(newItem);\n    }\n}\n\nfunction handleItems() {\n    // - App Settings\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings');\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\n    const settingsData = appSettings && {\n        id: appSettings.ID,\n        name: appSettings.name,\n        checked: true,\n        disabled: false,\n        type: (appSettings as IModel).modelType,\n        version: !maxVersion ? 'latest' : maxVersion\n    };\n    appSettings && settingsData && createAndAppendItem({ newItem: settingsData });\n\n\n    // - UI Settings\n    const uiSettingsID = CryptoHelper.CreateGuid();\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \"model\" && item.usageType == \"appSettings\") as Array<IModel>;\n    const uiSettings: ITableData = {\n        id: uiSettingsID,\n        collapsed: true,\n        name: \"UI Settings\",\n        type: \"module\",\n        imported: false,\n        checked: true,\n        children: [{} as ITableData]\n    };\n    uiSettings && createAndAppendItem({ newItem: uiSettings });\n    uiSettings.children = uiSettingsModels.map(settings => {\n        const maxVersion = getItemMaxVersion(settings)\n        const childData = {\n            id: settings.ID,\n            parentId: uiSettingsID,\n            name: settings.name,\n            type: settings.modelType,\n            checked: maxVersion != undefined,\n            usageType: settings?.usageType,\n            disabled: !maxVersion,\n            version: maxVersion,\n            level: 2\n        }\n        createAndAppendItem({ newItem: childData });\n        return childData;\n    })\n    handleParentCheckedStatus(uiSettings, false);\n\n\n    // - Styled Components\n    const uiAssetID = CryptoHelper.CreateGuid();\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \"model\" && item.usageType == \"appAssetList\") as Array<IModel>;\n    const uiAssetList: ITableData = {\n        id: uiAssetID,\n        collapsed: true,\n        name: \"Styled Components\",\n        type: \"module\",\n        imported: false,\n        anyChildChecked: true,\n        allChildChecked: true,\n        children: [{} as ITableData]\n    };\n    uiAssetList && createAndAppendItem({ newItem: uiAssetList });\n    uiAssetList.children = appAssetList.map((asset) => {\n        const childAsset = {\n            id: asset.ID,\n            parentId: uiAssetID,\n            name: asset.name,\n            type: asset.modelType,\n            checked: true,\n            usageType: asset?.usageType,\n            level: 2\n        }\n        createAndAppendItem({ newItem: childAsset });\n        return childAsset;\n    }) as Array<ITableData>;\n    handleParentCheckedStatus(uiAssetList, false);\n\n    \n    const treeItems = fileDisplayerUseCase.cloneFileExplorerTreeView({\n        displayFilterer: (item, hasChildren) => {\n            switch (item.ID) { case FileExplorerConstants.uiAssetListID: case FileExplorerConstants.uiSettingsID: return false; default: break; }\n            switch (item.objectType) {\n                case \"application\": return false;\n                case \"module\": return true;\n                case \"folder\": return hasChildren;\n                case \"model\": return true;\n            }\n        },\n    });\n\n    const converter = (treeItem: ITreeItem<FileDisplayerExternalData>, options: {ownerModule?: {isImportedModule: boolean;moduleVersion: string | undefined;relatedModelHistories: IModuleRelatedModelItem[] | undefined}}): ITableData => {\n        const item = treeItem.externalData;\n        if (item.objectType == \"application\") { throw new Error(\"unexpected item type\"); }\n\n        const fullPath = objectUseCase.getFullPath(item, \"self\");\n        let level = fullPath.split(\"/\").length - 1;\n\n        let tableData: ITableData;\n        switch(item.objectType) {\n            case \"folder\":\n                tableData = {\n                    id: item.ID, name: item.name, type: \"folder\", collapsed: true, level,\n                    children: treeItem.children?.map((item) => converter(item, { ownerModule: options.ownerModule })),\n                };\n                tableData.children?.forEach(child => child.parent = tableData);\n                handleParentCheckedStatus(tableData, false);\n                break;\n            case \"model\":\n                if (options.ownerModule) {\n                    tableData = { id: item.ID, name: item.name, type: item.modelType, level };\n                    if (!options.ownerModule.isImportedModule || item.isUnmodifiable) {\n                        const maxVersion = getItemMaxVersion(item);\n                        tableData = {\n                            ...tableData,\n                            checked: maxVersion ? true : item.isUnmodifiable,\n                            disabled: maxVersion ? false : !item.isUnmodifiable,\n                            version: item.isUnmodifiable ? 'latest' : maxVersion,\n                        };\n                    } else {\n                        const importedModulesModel = options.ownerModule.relatedModelHistories?.find(e => e.modelID == item.ID)\n                        tableData = { ...tableData, checked: true, disabled: false, version: importedModulesModel?.version };\n                    }\n                } else {\n                    const maxVersion = getItemMaxVersion(item);\n                    tableData = {\n                        id: item.ID,\n                        name: item.name,\n                        checked: maxVersion ? true : item.isUnmodifiable,\n                        disabled: maxVersion ? false : !item.isUnmodifiable,\n                        type: item.modelType,\n                        version: item.isUnmodifiable ? 'latest' : maxVersion,\n                        level,\n                    };\n                }\n                break;\n            case \"module\":\n                const isImportedModule = isModuleImported(item);\n                const moduleVersion = item.relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion;\n                const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\n                \n                tableData = {\n                    id: item.ID,\n                    collapsed: true,\n                    name: item.name,\n                    type: \"module\",\n                    imported: isImportedModule,\n                    version: moduleVersion,\n                    children: treeItem.children?.map((item) => converter(item, {ownerModule: {isImportedModule, moduleVersion, relatedModelHistories}})),\n                }\n                tableData.children?.forEach(child => child.parent = tableData);\n                handleParentCheckedStatus(tableData, false);\n                break;\n        }\n        return tableData;\n    };\n    const tableDatas = treeItems.map(item => converter(item, {}));\n\n    const traverser = (tableData: ITableData) => {\n        createAndAppendItem({ newItem: tableData });\n        tableData.children?.forEach(traverser);\n    };\n    \n    tableDatas.forEach(traverser);\n}\n\nfunction getItemMaxVersion(item: IModel): string | undefined {\n    if (!modelHistories.value?.has(item.ID))\n        return undefined;\n\n    const versions = modelHistories.value.get(item.ID);\n    if (!versions)\n        return undefined;\n\n    const findMaxVersion = (versions: Array<string>) => {\n        const versionNumbers = versions.map(v => {\n            const parts: Array<string> = v.split(\".\");\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\n        })\n\n        versionNumbers.sort((a, b) => b - a);\n\n        const maxVersion = versionNumbers[0];\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\n    }\n\n    return findMaxVersion(versions.map(e => e.version!));\n\n}\nfunction checkMaxVersionOfAllItems() {\n    let isThereVersion: boolean = false;\n    items.value.forEach(item => {\n        if (item.type == \"module\") {\n            item.children?.forEach(child => {\n                if (child.version) {\n                    isThereVersion = true;\n                }\n\n            })\n        }\n        else {\n            if (item.version) {\n                isThereVersion = true;\n            }\n        }\n    })\n    return isThereVersion;\n}\nfunction handleModuleCountCheckboxEvent(value: boolean) {\n    items.value.filter(e => !e.disabled).forEach((item) => {\n        item.checked = value;\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\n        if (allItemsCheckable) item.allChildChecked = value;\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\n    });\n\n    validations.value = validate();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n}\n\nfunction handleCollapse(item: ITableData, childIterate?: boolean, collapsed?: boolean) {\n    item.collapsed = collapsed !== undefined ? collapsed : !item.collapsed;\n    if (childIterate) {\n        item.children?.forEach(child => {\n            const childEl = document.getElementById(child.id);\n            childEl!.style.display = item.collapsed ? \"none\" : \"block\";\n            handleCollapse(child, childIterate, item.collapsed);\n        })\n    }\n}\n\nfunction checkAllDependents(item: ITableData, recurseParent: boolean) {\n    if (item.disabled || item.checked) return;\n\n    item.checked = true\n    item.parent && handleParentCheckedStatus(item.parent, recurseParent);\n\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\n    if (!deps) return;\n\n    deps.forEach(dep => {\n        items.value.forEach(item => {\n            if (item.type == 'module' && !item.allChildChecked) {\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\n                willCheckItem && checkAllDependents(willCheckItem, recurseParent);\n                handleParentCheckedStatus(item, recurseParent);\n                return;\n            }\n\n            if (!item.checked && item.id == dep) {\n                checkAllDependents(item, recurseParent);\n                item.parent && handleParentCheckedStatus(item.parent, recurseParent);\n            }\n        })\n    });\n}\n\nfunction handleItemCheckEvent(item: ITableData) {\n    if (item.disabled || isModelDepended(item) || item.name == 'App Settings')\n        return;\n\n    if (item.type != \"module\" && item.type != \"folder\") {\n        if (item.checked) {\n            item.checked = false;\n            item.parent && handleParentCheckedStatus(item.parent, true);\n        } else {\n            checkAllDependents(item, true);\n        }\n    } else {\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\n            if (item.anyChildChecked) {\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\n                item.checked = false;\n                handleParentCheckedStatus(item, true);\n            } else {\n                item.children.forEach(child => checkAllDependents(child, true));\n                item.checked = true;\n            }\n        }\n        else {\n            item.checked = !item.checked;\n            item.allChildChecked = false;\n        }\n    }\n\n    validations.value = validate();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n}\n\nfunction handleParentCheckedStatus(item: ITableData, recurseParent: boolean) {\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\n    if (recurseParent && item.parent) {\n        handleParentCheckedStatus(item.parent, true);\n    }\n}\n\nfunction syncPublishTargets() {\n    publishTargets.value = []; disabledOptions.value = [];\n\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\n    if (!targets)\n        return;\n\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\n    if (!isSelectAnyItem) {\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\n        const disabledOptionList = Array<IDisabledOptions>();\n        for (let i = 0; i < publishTargets.value.length; i++) {\n            disabledOptionList.push({ index: i, cause: \"You need to include items to publish.\" })\n        }\n        disabledOptions.value = disabledOptionList;\n        return;\n    }\n\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\n\n    const disabledOptionList = Array<IDisabledOptions>();\n    for (let i = 0; i < sortedTargets.length; i++) {\n        const cause = sortedTargets[i].cause;\n        if (cause) disabledOptionList.push({ index: i, cause })\n    }\n    disabledOptions.value = disabledOptionList;\n    publishTargets.value = sortedTargets.map(e => e.optionName);\n\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \"\";\n}\n\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\n    const list = Array<{ optionName: string, cause?: string }>();\n\n    Object.keys(targets).forEach(e => {\n        const key = e as keyof IOrganizationCloud;\n        const value = targets[key];\n        const optionName = cloudTargetMap(key)!;\n        if (!value)\n            return list.push({ optionName, cause: \"You are not authorized to publish to this target.\" });\n\n\n        switch (key) {\n            case \"azure\":\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\n                    if (!items || items.length == 0) { return status; }\n                    for (const item of items) {\n                        if (item.checked || item.anyChildChecked) {\n                            if (item.type == \"module\") {\n                                status = traverseSelectedItems(status, item.children);\n                            }\n                            if (item.type == \"entityDesigner\" || item.type == \"bpmn\" || item.type == \"process\") {\n                                status = false;\n                                break;\n                            }\n                        }\n\n                    }\n                    return status;\n                }\n\n                const status = traverseSelectedItems(true, items.value);\n                if (!status)\n                    return list.push({ optionName, cause: \"Entity and process models cannot be published to this target.\" });\n                break;\n            case \"plateauGCP\":\n                const modulesHasNotAnEDModel = items.value.filter(e => e.name != \"UI Settings\").find(e => e.type == \"module\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \"bpmn\" || c.type == \"process\")) && !e.children?.some(c => c.type == \"entityDesigner\" && c.checked))\n                if (modulesHasNotAnEDModel)\n                    return list.push({ optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.` })\n                break;\n        }\n\n        list.push({ optionName });\n    })\n\n    return list;\n}\n\nfunction updateDependencyMap(newVersion: string, item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id);\n    dependencyMap.value?.set(item.id, {\n        dependedBy: deps?.dependedBy || Array<string>(),\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\n    })\n}\n\nfunction versionDialog(item: ITableData) {\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\n    const hasAnyVersion = modelHistories.value?.has(item.id);\n    const options = {\n        clickedNode, cb: (version: string) => {\n            item.version = version;\n            updateDependencyMap(version, item);\n        }\n    } as any;\n\n    if (hasAnyVersion) {\n        options.versions = modelHistories.value?.get(item.id)\n    }\n    dialog.showDialog(\n        defineAsyncComponent(() => import(\"../../application/modelVersionDialog.vue\")),\n        { closable: true, title: \"Change Version\", width: \"1080px\", maxHeight: \"500px\", overflow: \"auto\" }, options\n    );\n}\n\n\nfunction moduleVersionDialog(item: ITableData) {\n    dialog.showDialog(\n        defineAsyncComponent(() => import(\"../../application/moduleVersionDialog.vue\")),\n        { closable: true, title: \"Change Version\", width: \"1080px\", maxHeight: \"500px\", overflow: \"auto\" },\n        {\n            module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => {\n                item.version = moduleVersion.version;\n                item.children?.forEach(child => {\n                    const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\n                    child.version = modulesModel?.version\n                    updateDependencyMap(modulesModel?.version!, child);\n                })\n            }\n        }\n    );\n}\n\nfunction close() {\n    emit(\"close\");\n}\n\nasync function save() {\n    executor.execute(\n        async () => {\n            const initAsGroup = async () => {\n                const groupID = CryptoHelper.CreateGuid();\n                await initHistory(groupID);\n                await packJob(groupID);\n                return groupID;\n            }\n\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\n\n            switch (props.screenType) {\n                case \"Export\":\n                    if (isFlowBackend) {\n                        const deployItems = await createAzureDeployItems();\n                        await packJobsUseCase.createPackJobs([{\n                            appID: viewModel.studio.appId,\n                            exportType: \"qui\",\n                            selectionData: deployItems\n                        }]);\n                        break;\n                    }\n\n                    const groupID = await initAsGroup();\n                    await createExportJob(groupID);\n                    break;\n                case \"Deploy\":\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\n                        case \"plateauGCP\":\n                            const groupID = await initAsGroup();\n                            await createDeployJob(groupID);\n                            break;\n                        case \"azure\":\n                            const deployItems = await createAzureDeployItems();\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\n                            break;\n                    }\n            }\n            const userMobileUsage = viewModel.user?.mobileUsage;\n            const appMobileUsage = currentApp.value?.mobileUsage;\n            if(props.platformSelection && props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \"backofficeUpdate\"})\n                \n            }\n            emit(\"close\");\n        },\n        { loading: true });\n}\n\nasync function createAzureDeployItems() {\n    const deployItems: Array<IExportItem> = [];\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\n        if (item.objectType != \"model\") { return; }\n        const path = item.owner.objectType == \"module\" ? PathHelper.join(item.owner.name, item.path) : item.path;\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\n        if (!items || items.length == 0) { return; }\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\n            if (item.type == \"module\" || item.type == \"folder\") {\n                traverseSelectedItems(item.children);\n                return;\n            }\n\n            const itemMap = itemIdObj[item.id];\n\n            const deployItem: IExportItem = {\n                id: item.id,\n                name: jobUtils.getFileFullname(itemMap.item),\n                path: itemMap.path,\n                type: jobUtils.getItemType(itemMap.item),\n                ver: item.version || \"latest\",\n                isRootPage: (itemMap.item.additionals as IQJsonAdditionals | undefined)?.isRootPage,\n                modulePrefix: itemMap.prefix,\n                ownerType: 'application',\n                ownerName: viewModel.studio.appName,\n                size: itemMap.item.size,\n                createDate: itemMap.item.createDate,\n            };\n            deployItems.push(deployItem)\n        });\n    };\n\n    traverseSelectedItems(items.value);\n    const uniqueItems = removeDuplicates(deployItems)\n    console.log(uniqueItems)\n    return uniqueItems;\n}\n\nfunction removeDuplicates(objects: IExportItem[]): IExportItem[] {\n    const seenIds = new Set<string>(); // Collection to keep track of seen IDs\n    const uniqueObjects: IExportItem[] = []; // Array to store unique objects\n\n    for (const obj of objects) {\n        if (!seenIds.has(obj.id)) {\n            uniqueObjects.push(obj); // Add the object if ID not seen before\n            seenIds.add(obj.id); // Mark this ID as seen\n        }\n    }\n\n    return uniqueObjects; // Return the list of unique objects\n}\nasync function initHistory(groupID: string) {\n    return qcloudApi.initPublishHistory({\n        appID: viewModel.studio.appId,\n        ID: groupID,\n        isMultiStep: true,\n        type: props.screenType == \"Deploy\" ? \"publish\" : \"download\",\n        cloudProvider: props.screenType == \"Deploy\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\n        platform: props.platformSelection\n    });\n}\n\nasync function packJob(groupID: string) {\n    let exportItemMap = new Map<string, Array<IExportItem>>();\n    const appName = viewModel.studio.appName;\n\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, prefix) => {\n        if (item.objectType != \"model\") { return; }\n        const path = item.owner.objectType == \"module\" ? PathHelper.join(item.owner.name, item.path) : item.path;\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const createExportObject = (tableItem: ITableData) => {\n        const itemMap = itemIdObj[tableItem.id];\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == itemMap.item.modelType);\n\n        const retVal: IExportItem = {\n            id: tableItem.id,\n            ver: tableItem.version!,\n            type: jobUtils.getItemType(itemMap.item),\n            path: itemMap.path,\n            modulePrefix: itemMap.prefix,\n            name: jobUtils.getFileFullname(itemMap.item),\n            ownerType: isAppItem ? 'application' : (itemMap.item.owner.objectType as \"module\" | \"application\"),\n            ownerName: isAppItem ? appName : itemMap.item.owner.name,\n        };\n        return retVal;\n    }\n\n    const addToExportItem = (key: string, obj: IExportItem) => {\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\n        let items = exportItemMap.get(key);\n        if (items && items.length > 0) {\n            items.push(obj);\n            exportItemMap.set(key, items);\n        } else\n            exportItemMap.set(key, [obj]);\n    }\n    const mapTableItemToExportItem = (tableItems: Array<ITableData>) => {\n        tableItems.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\n        if (asset.type == 'module') {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                const obj = createExportObject(child);\n                if (obj.type == \"entityDesigner\")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\n            });\n        } \n        else if(asset.type == \"folder\") {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                if(child.type == \"folder\") {\n                    mapTableItemToExportItem([child])\n                }\n                else {\n                    const obj = createExportObject(child);\n                    if (obj.type == \"entityDesigner\")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n                \n                    const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\n                    addToExportItem(useSeperateModule ? asset.name : appName, obj);\n                }\n            });\n        }\n        else {\n            const obj = createExportObject(asset);\n            if (asset.type == 'qjson') {\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \"model\" && i.modelType == \"qjson\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\n                obj.isRootPage = isRootPage ? true : undefined;\n            }\n            addToExportItem(appName, obj);\n        }\n    })\n    }\n    mapTableItemToExportItem(items.value);\n   \n\n    let jobs = Array<ICreateExportJobParam>();\n    exportItemMap.forEach((v, k) => {\n        jobs.push({\n            appID: viewModel.studio.appId,\n            exportType: \"qui\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \"model\":  \"qui\"\n            selectionData: v,\n            cause: props.screenType == 'Export' ? 'download' : \"publish\",\n            layer: 0,\n            groupID: groupID,\n            platformSelection: props.platformSelection\n        })\n    })\n\n    await packJobsUseCase.createPackJobs(jobs);\n}\nasync function createExportJob(groupID: string) {\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\n        appID: viewModel.studio.appId,\n        exportType: \"qui\",\n        selectionData: [],\n        layer: 1,\n        groupID: groupID\n    });\n}\n\nasync function createDeployJob(groupID: string) {\n    //1-(n) L1- deployJob(build)\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\n        .then(jobs => jobs.jobs.map(e => {\n            const jobData = e.jobData as IExportJobData;\n            return {\n                ownerName: jobData.items[0].ownerName,\n                jobID: e.jobID,\n                type: jobData.items[0].ownerType,\n                mainDir: getDeployableArchiveRoot(jobData)\n            }\n        }));\n\n    if (!packages || packages.length <= 0)\n        return;\n\n    let buildJobs = Array<ICreateDeployJobParam>();\n    packages.forEach(pack => {\n        buildJobs.push({\n            appID: viewModel.studio.appId,\n            type: \"build\",\n            package: {\n                type: pack.type as DeployType,\n                name: pack.ownerName!,\n                mainDir: pack.mainDir,\n                zip: `${pack.jobID}.zip`,\n            },\n            layer: 1,\n            groupID: groupID\n        })\n    })\n\n    await deployJobsUseCase.createBuildJobs(buildJobs);\n\n    //2-(1) L2- deployJob(deployment)\n    let jobParam: ICreateDeployJobParam = {\n        appID: viewModel.studio.appId,\n        type: \"deployment\",\n        deployConfig: {\n            process: {\n                configModelIDs: getProcessConfigList(),\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \"bpmn\"))\n            }\n        },\n        layer: 2,\n        groupID: groupID,\n        platformSelection: props.platformSelection\n    }\n\n    await deployJobsUseCase.startDeploymentJob(jobParam);\n}\n\nfunction getProcessConfigList() {\n    let processConfigList = Array<IProcessConfigModelItem>();\n    items.value.forEach((asset) => {\n        if (asset.type == \"module\" && asset.anyChildChecked && asset.children) {\n            const usingService = asset.children.find(c => c.type == \"entityDesigner\");\n            if (!usingService)\n                return;\n\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\n            asset.children.forEach(child => {\n                if (child.checked && child.type == \"process\") {\n                    processConfigList.push({\n                        moduleName: serviceName,\n                        model: {\n                            id: child.id,\n                            name: child.name,\n                            version: child.version!\n                        }\n                    })\n                }\n            })\n        }\n    })\n    return processConfigList;\n}\n\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\n    if (jobData.items[0].ownerType == \"module\") {\n        let edModel = jobData.items.find(e => e.type == \"entityDesigner\");\n        if (!edModel)\n            throw new Error(\"!!! this module cannot deploy. Because its have not a service\");\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\n    }\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\n}\n\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \"Public Cloud\", plateauGCP: \"Plateau Platform Playground\" };\n    if (pureVal) {\n        return Object.keys(map).find(e => {\n            if (map[e as keyof IOrganizationCloud] === name) {\n                return true;\n            }\n        })\n    } else {\n        let key = Object.keys(map).includes(name);\n        if (!key)\n            return;\n        return map[name as keyof IOrganizationCloud];\n    }\n}\n\nfunction onTargetSelect(value: string) {\n    selectedTarget.value = value\n}\n\nconst isModuleImported = (item: IModule) => {\n    return objectUseCase.isModuleImported(item);\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", null, [\n      _createVNode(CheckboxComp, {\n        class: _normalizeClass(['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']),\n        minus: _unref(mainCheckboxState) == false,\n        check: _unref(mainCheckboxState) == true,\n        onClick: _cache[0] || (_cache[0] = ($event: any) => (handleModuleCountCheckboxEvent(_unref(mainCheckboxState) == undefined)))\n      }, null, 8 /* PROPS */, [\"class\", \"minus\", \"check\"]),\n      _createElementVNode(\"div\", {\n        class: _normalizeClass(['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : ''])\n      }, [\n        _createElementVNode(\"span\", _hoisted_2, _toDisplayString(_unref(allChildCheckedModulesCount) + _unref(anyChildCheckedModulesCount) +\n                    _unref(checkedRootLevelModelsCount)), 1 /* TEXT */),\n        _createTextVNode(\" of \"),\n        _createElementVNode(\"span\", _hoisted_3, _toDisplayString(_unref(totalRootLevelCount)), 1 /* TEXT */),\n        _createTextVNode(\" items selected \")\n      ], 2 /* CLASS */)\n    ]),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass(['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']),\n      id: \"module-container-div\"\n    }, null, 2 /* CLASS */),\n    (props.screenType == 'Deploy')\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n          _hoisted_5,\n          _createVNode(CustomSelect, {\n            options: publishTargets.value,\n            onInput: onTargetSelect,\n            selectedOption: selectedTarget.value,\n            default: selectedTarget.value,\n            disabledOptions: disabledOptions.value,\n            selectedClass: \"selected-environment\",\n            placeholder: \"Select the publish environment of your application\",\n            class: \"select-environment\"\n          }, null, 8 /* PROPS */, [\"options\", \"selectedOption\", \"default\", \"disabledOptions\"])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    _createCommentVNode(\"         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> \"),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass(['footer', props.screenType == 'Deploy' ? 'deploy' : 'export'])\n    }, [\n      _createElementVNode(\"div\", {\n        class: _normalizeClass(['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']),\n        onClick: close\n      }, \"Cancel\", 2 /* CLASS */),\n      (props.screenType == 'Export')\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 0,\n            class: _normalizeClass((_unref(saveButtonDisable) ? ' button-disable' : '')),\n            onClick: _cache[1] || (_cache[1] = ($event: any) => (!_unref(saveButtonDisable) && save()))\n          }, [\n            _hoisted_6,\n            (!_unref(isThereVersion))\n              ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \"There are no items ready to publish. At least one of your items must be ready to publish.\"))\n              : (!_unref(isStartScreenOK))\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_8, \"You need to include your start screen.\"))\n                : (!_unref(isAllDependenciesOK))\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_9, _toDisplayString(dependencyErrorStr.value), 1 /* TEXT */))\n                  : _createCommentVNode(\"v-if\", true)\n          ], 2 /* CLASS */))\n        : _createCommentVNode(\"v-if\", true),\n      (props.screenType == 'Deploy')\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 1,\n            class: _normalizeClass([(_unref(saveButtonDisable) ? ' button-disable' : '')]),\n            onClick: _cache[2] || (_cache[2] = ($event: any) => (!_unref(saveButtonDisable) && save()))\n          }, [\n            _hoisted_10,\n            (!_unref(isStartScreenOK))\n              ? (_openBlock(), _createElementBlock(\"span\", _hoisted_11, \"You need to include your start screen.\"))\n              : (!selectedTarget.value)\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_12, \"You need to select a publish environment.\"))\n                : (!_unref(isThereVersion))\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_13, \"There are no items ready to publish. At least one of your items must be ready to publish.\"))\n                  : (!_unref(isAllDependenciesOK))\n                    ? (_openBlock(), _createElementBlock(\"span\", _hoisted_14, _toDisplayString(dependencyErrorStr.value), 1 /* TEXT */))\n                    : _createCommentVNode(\"v-if\", true)\n          ], 2 /* CLASS */))\n        : _createCommentVNode(\"v-if\", true)\n    ], 2 /* CLASS */)\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=0&id=13cd970a&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=0&id=13cd970a&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=1&id=13cd970a&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=1&id=13cd970a&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./publishDialog.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./publishDialog.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./publishDialog.vue?vue&type=style&index=0&id=13cd970a&scoped=true&lang=css\"\nimport \"./publishDialog.vue?vue&type=style&index=1&id=13cd970a&lang=css\"\n\nimport exportComponent from \"/home/runner/work/studio/studio/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-13cd970a\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","purify","str","replace","toLowerCase","getPlateauEnvironmentName","envPrefix","appName","Error","endsWith","PlateauHelper","getQuiPackageNameFromAppName","getApplicationUINameFromQuiPkg","quiPackageName","getApplicationHostNamePrefix","getServiceNameFromModel","modelName","PathHelper","static","path1","path2","fullPath","substring","length","startsWith","typeSafety","EditorConsts","quick","modelKeys","self","flow","design","runtime","workflow","flowEntity","single","cssJsTsYaml","color","icon","jpegJpgPngSvgGif","formatIcon","moduleVisual","modelVisuals","qjson","additionals","qjsonType","css","js","ts","yaml","entityDesigner","bpmn","process","namedComponent","step","jpeg","jpg","png","svg","gif","woff","woff2","ttf","otf","lottie","appSettings","json","flowProcess","object","folder","ModelContants","modelType","modelAdditionals","retVal","DEPENDED_IMAGE_KEYS","APP_ITEM_CONTENT_TYPES","UISettingsType","alert","pipeline","loading","settings","localProxy","contSvc","compList","globalLocalization","assetList","IApplicationUseCase","Symbol","for","ICreateExportJob","IDeployJobs","IFileDisplayerUseCase","IJobUtils","IListMultiModelVersions","IListMultiModuleVersions","IPackJobs","IgnoredOrgGroupIds","IBackofficeUseCase","_withScopeId","n","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","key","style","_hoisted_5","_hoisted_6","_","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","__name","props","screenType","platformSelection","emits","setup","__props","emit","viewModel","IViewModel","viewModelManager","IViewModelManager","dialog","IDialog","executor","IUseCaseExecutor","deployJobsUseCase","qcloudApi","IQCloudApi","packJobsUseCase","jobUtils","backofficeUseCase","applicationUseCase","fileDisplayerUseCase","objectUseCase","IObjectUseCase","items","validations","selectedTarget","disabledOptions","publishTargets","modelHistories","importedModuleVersions","startScreen","dependencyMap","dependencyErrorStr","currentApp","apps","find","app","ID","studio","appId","async","execute","Promise","all","executeUseCase","then","res","value","map","Map","depMap","flatMapItems","item","objectType","version","owner","isModuleImported","moduleVersions","get","moduleVersion","relatedApplications","applicationID","importedVersion","importedModuleModel","filter","e","flatMap","relatedModelHistories","modelID","maxVersion","getItemMaxVersion","set","dependentModels","modelId","Array","historyItem","forEach","dependedTo","dependedBy","dependencies","depModelId","some","depId","initDependencies","name","settingsData","checked","disabled","type","createAndAppendItem","newItem","uiSettingsID","CryptoHelper","uiSettingsModels","usageType","uiSettings","collapsed","imported","children","childData","parentId","undefined","level","handleParentCheckedStatus","uiAssetID","appAssetList","uiAssetList","anyChildChecked","allChildChecked","asset","childAsset","treeItems","cloneFileExplorerTreeView","displayFilterer","hasChildren","converter","treeItem","options","externalData","tableData","getFullPath","split","ownerModule","child","parent","isImportedModule","isUnmodifiable","importedModulesModel","tableDatas","traverser","handleItems","syncPublishTargets","validate","allChildCheckedModulesCount","anyChildCheckedModulesCount","checkedRootLevelModelsCount","totalRootLevelCount","saveButtonDisable","web","validateStartScreen","validateDependencies","mainCheckboxState","isThereVersion","checkMaxVersionOfAllItems","isAllDependenciesOK","isStartScreenOK","result","modules","appLayerItems","isRootPage","f","findIndex","checkMap","mustBeCheckedMap","deps","dependedId","has","vals","firstItemID","keys","firstItemDeps","firstItemDepStr","findItem","join","size","newChild","createApp","handleItemCheckEvent","versionDialog","handleCollapse","moduleVersionDialog","mountEl","document","createElement","mount","parentEl","getElementById","appendChild","createDialogComp","versions","versionNumbers","v","parts","parseInt","sort","a","b","Math","floor","findMaxVersion","childIterate","display","checkAllDependents","recurseParent","dep","willCheckItem","isModelDepended","c","targets","user","selectedOrganization","actions","publish","Object","entries","cloudTargetMap","disabledOptionList","i","index","cause","checkedPublishTargets","list","optionName","traverseSelectedItems","status","modulesHasNotAnEDModel","checkAndSetDisabledCauses","sortedTargets","updateDependencyMap","newVersion","clickedNode","state","text","cb","showDialog","closable","title","width","maxHeight","overflow","modulesModel","close","save","initAsGroup","groupID","initPublishHistory","appID","isMultiStep","cloudProvider","platform","initHistory","exportItemMap","itemIdObj","prefix","path","createExportObject","tableItem","itemMap","isAppItem","ver","getItemType","modulePrefix","getFileFullname","ownerType","ownerName","addToExportItem","obj","mapTableItemToExportItem","tableItems","entityGenerationDomain","useSeperateModule","jobs","k","exportType","selectionData","layer","createPackJobs","packJob","isFlowBackend","applications","deployItems","createAzureDeployItems","createExportJob","packages","getExportJobsByGroupId","jobData","jobID","mainDir","getDeployableArchiveRoot","buildJobs","pack","package","zip","createBuildJobs","jobParam","deployConfig","configModelIDs","getProcessConfigList","enabled","startDeploymentJob","createDeployJob","createAppDeployJob","userMobileUsage","mobileUsage","appMobileUsage","mobile","isMobilePublished","updateUserMobileUsage","updateApplication","updateReason","deployItem","createDate","uniqueItems","objects","seenIds","Set","uniqueObjects","add","removeDuplicates","console","log","processConfigList","usingService","serviceName","moduleName","model","edModel","pureVal","azure","plateauGCP","includes","onTargetSelect","_ctx","_cache","minus","check","onClick","$event","onInput","selectedOption","default","selectedClass","placeholder","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement"],"sourceRoot":""}
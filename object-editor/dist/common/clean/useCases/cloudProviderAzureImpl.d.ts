import { IDeleteOrganizationOptions, IUploadCdnFilesToStorageOptions, IUploadModelsToStorageOptions } from "../domain/useCases/ICloudProvider";
import { IUploadableObject } from "../infrastructure/cloud/azureLow";
import { ICloudDiContainer, ICloudProvider, ICreateAppOptions, ICreateOrganizationOptions, IDeleteAppOptions, IOrganizationOptions, IUpdateUIOptions } from "../domain/useCases/ICloudProvider";
import { IAzureCloudAppsCredentials } from "../infrastructure/cloud/azureLowCommon";
export declare class CloudProviderAzureImpl implements ICloudProvider {
    private readonly diContainer;
    private readonly credentials;
    type: ICloudProvider["type"];
    constructor(diContainer: ICloudDiContainer, credentials: IAzureCloudAppsCredentials);
    createOrganization(options: ICreateOrganizationOptions): Promise<void>;
    deleteOrganization(options: IDeleteOrganizationOptions): Promise<void>;
    deleteApp(options: IDeleteAppOptions): Promise<void>;
    private deleteBackend;
    private deleteUI;
    updateApp(options: IUpdateUIOptions, newName: string): Promise<void>;
    private updateUI;
    private updateBackend;
    createApp(options: ICreateAppOptions): Promise<void>;
    uploadModelsToOrganizationStorage(options: IUploadModelsToStorageOptions, files: Array<IUploadableObject>): Promise<void>;
    uploadCdnFilesToOrganizationStorage(options: IUploadCdnFilesToStorageOptions, files: Array<IUploadableObject>): Promise<void>;
    private createOrganizationStorage;
    private switchOrganizationStorageToPublicAccessIfNot;
    private upgradeOrganizationStorageToStaticSiteIfNot;
    private uploadFilesToOrganizationStorage;
    private createUI;
    private createBackend;
    private uploadFolderAndPublishFunctionApp;
    private createFunctionApp;
    private updateFunctionAppDBEnvVar;
    private createBackendDatabase;
    private deleteBackendDatabase;
    private deleteFunctionApp;
    private createAppServicePlan;
    private deleteAppServicePlan;
    private callUpdateOrganizationCloud;
    private callUpdateAppCloud;
    private createOrganizationResourceGroup;
    private createUIStorage;
    private deleteUIStorage;
    private uploadFolderToStaticSite;
    private createOrganizationDNSZone;
    private createDNSRecord;
    private deleteDNSRecord;
    private updateStorageAccountDomainName;
    deleteUser(userId: string): Promise<void>;
}
type ITagInfo = Record<string, string>;
export declare const createTags: (organization: IOrganizationOptions) => ITagInfo;
export {};
//# sourceMappingURL=cloudProviderAzureImpl.d.ts.map
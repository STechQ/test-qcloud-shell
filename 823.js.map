{"version":3,"file":"823.js?ver=0.0.320_1717572220292","mappings":"4GAKA,IAAIA,E,yBACG,MAAMC,EAAeD,EAAa,CACrCE,MAAO,CACHC,UAAW,CACPC,KAAM,UAGdC,KAAM,CACFF,UAAW,CACPG,OAAQ,cACRC,QAAS,iBAGjBC,SAAU,CACNL,UAAW,CACPG,OAAQ,kBACRC,QAAS,qBAGjBE,WAAY,CACRN,UAAW,CACPO,OAAQ,iBASdC,EAA+B,CAAEC,MAAO,UAAWC,KAAM,uBACzDC,EAAoC,CAAEF,MAAO,UAAWC,KAAM,0BAC9DE,EAA8B,CAAEH,MAAO,UAAWC,KAAM,wBACxDG,EAAe,CAAEJ,MAAO,UAAWC,KAAM,kBACzCI,EAAwI,CAC1IC,MAAQC,GACAA,GAA+D,kBAA/CA,EAAkCC,UAC3C,CAAER,MAAO,UAAWC,KAAM,yBAE9B,CAAED,MAAO,UAAWC,KAAM,mBAErCQ,IAAK,CAAET,MAAO,UAAWC,KAAM,kCAC/BS,GAAIX,EACJY,GAAIZ,EACJa,KAAMb,EACNc,eAAgB,CAAEb,MAAO,UAAWC,KAAM,oBAC1Ca,KAAM,CAAEd,MAAO,UAAWC,KAAM,2BAChCc,QAAS,CAAEf,MAAO,UAAWC,KAAM,oBACnCR,KAAM,CAAEO,MAAO,UAAWC,KAAM,wBAChCL,SAAU,CAAEI,MAAO,UAAWC,KAAM,wBACpCJ,WAAY,CAAEG,MAAO,OAAQC,KAAM,wBACnCe,eAAgB,CAAEhB,MAAO,UAAWC,KAAM,wBAC1CgB,KAAM,IAAIC,MAAM,oCAChBC,KAAMjB,EACNkB,IAAKlB,EACLmB,IAAKnB,EACLoB,IAAKpB,EACLqB,IAAKrB,EACLsB,KAAMrB,EACNsB,MAAOtB,EACPuB,IAAKvB,EACLwB,IAAKxB,EACLyB,OAAQ1B,EACR2B,YAAa,CAAE7B,MAAO,UAAWC,KAAM,eACvC6B,KAAM,IAAIZ,MAAM,0BAChBa,YAAa,CAAE/B,MAAO,UAAWC,KAAM,gCACvC+B,OAAQ,CAAEhC,MAAO,UAAWC,KAAM,gBAClCgC,OAAQ,CAAEjC,MAAO,UAAWC,KAAM,mBAG/B,MAAMiC,EACFC,0BAA0BC,EAAoDC,GACjF,MAAMC,EAAsB,UAAbF,EAAwBhC,EAAeC,EAAa+B,GACnE,GAAIE,aAAkBpB,MAAS,MAAMoB,EACrC,MAAwB,mBAAVA,EAAuBA,EAAOD,GAAoBC,CACpE,E,mCC5DG,MAAMC,EAAiBC,OAAOC,IAAI,iB,mCCKlC,MAAMC,EAAwBF,OAAOC,IAAI,wB,mCClBzC,MAAME,EAA0BH,OAAOC,IAAI,0B,mCCA3C,MAAMG,EAA2BJ,OAAOC,IAAI,2B","sources":["webpack://qcloud_shell/../common/qCloudTemp/modelContants.ts","webpack://qcloud_shell/./src/domain/infrastructure/IFormValidator.ts","webpack://qcloud_shell/./src/domain/useCase/IFileDisplayerUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModelVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModuleVersions.ts"],"sourcesContent":["import { IQJsonAdditionals, ModelAdditionals, ModelType, ModuleObjectType } from \"./quickCloud\";\n\ntype ValueOf<Type> = Type extends any ? Type[keyof Type] : never;\ntype FieldValueOf<Type extends typeof typeSafety, Field extends keyof Type[keyof Type]> = Type[keyof Type][Field]\nexport type EditorModelTypes = ValueOf<FieldValueOf<typeof EditorConsts, \"modelKeys\">>;\nlet typeSafety: Record<string, { modelKeys: Record<string, string> }>;\nexport const EditorConsts = typeSafety = {\n    quick: {\n        modelKeys: {\n            self: \"qjson\" as \"qjson\",\n        }\n    },\n    flow: {\n        modelKeys: {\n            design: \"flow-design\" as \"flow-design\",\n            runtime: \"flow-runtime\" as \"flow-runtime\",\n        }\n    },\n    workflow: {\n        modelKeys: {\n            design: \"workflow-design\" as \"workflow-design\",\n            runtime: \"workflow-runtime\" as \"workflow-runtime\",\n        }\n    },\n    flowEntity: {\n        modelKeys: {\n            single: \"flow-entity\" as \"flow-entity\",\n        }\n    },\n};\n\ninterface ModelVisualInfo {\n    icon: string;\n    color: string;\n}\nconst cssJsTsYaml: ModelVisualInfo = { color: \"#449DD1\", icon: \"mdi mdi-cog-outline\" };\nconst jpegJpgPngSvgGif: ModelVisualInfo = { color: \"#212121\", icon: \"mdi mdi-image-outline \" }\nconst formatIcon: ModelVisualInfo = { color: \"#212121\", icon: \"mdi mdi-format-font \" }\nconst moduleVisual = { color: \"#007C77\", icon: \"mdi mdi-puzzle\" }\nconst modelVisuals: Record<ModelType | \"folder\", ModelVisualInfo | Error | ((additional: ModelAdditionals | undefined) => ModelVisualInfo)> = {\n    qjson: (additionals) => {\n        if (additionals && (additionals as IQJsonAdditionals).qjsonType == \"quickComponent\") {\n            return { color: \"#449DD1\", icon: \"mdi mdi-shape-outline\" };\n        }\n        return { color: \"#449DD1\", icon: \"mdi mdi-palette\" };\n    },\n    css: { color: \"#151233\", icon: \"mdi mdi-music-accidental-sharp\" },\n    js: cssJsTsYaml,\n    ts: cssJsTsYaml,\n    yaml: cssJsTsYaml,\n    entityDesigner: { color: \"#E9724C\", icon: \"mdi mdi-database\" },\n    bpmn: { color: \"#007C77\", icon: \"mdi mdi-vector-polyline\" },\n    process: { color: \"#007C77\", icon: \"mdi mdi-auto-fix\" },\n    flow: { color: \"#007C77\", icon: \"mdi mdi-step-forward\" },\n    workflow: { color: \"#007C77\", icon: \"mdi mdi-step-forward\" },\n    flowEntity: { color: \"blue\", icon: \"mdi mdi-step-forward\" },\n    namedComponent: { color: \"#212121\", icon: \"mdi mdi-cube-outline\" },\n    step: new Error(\"unimplemented for namedComponent\"),\n    jpeg: jpegJpgPngSvgGif,\n    jpg: jpegJpgPngSvgGif,\n    png: jpegJpgPngSvgGif,\n    svg: jpegJpgPngSvgGif,\n    gif: jpegJpgPngSvgGif,\n    woff: formatIcon,\n    woff2: formatIcon,\n    ttf: formatIcon,\n    otf: formatIcon,\n    lottie: jpegJpgPngSvgGif,\n    appSettings: { color: \"#151233\", icon: \"mdi mdi-cog\" },\n    json: new Error(\"unimplemented for json\"),\n    flowProcess: { color: \"#007C77\", icon: \"mdi mdi-chart-sankey-variant\" },\n    object: { color: \"#007C77\", icon: \"mdi mdi-cube\" },\n    folder: { color: \"#212121\", icon: \"mdi mdi-folder\" }\n}\n\nexport class ModelContants {\n    public static getModelVisualInfo(modelType: ModelType | ModuleObjectType | \"folder\", modelAdditionals: ModelAdditionals | undefined): ModelVisualInfo {\n        const retVal = modelType == \"module\" ? moduleVisual : modelVisuals[modelType];\n        if (retVal instanceof Error) { throw retVal; }\n        return typeof retVal == \"function\" ? retVal(modelAdditionals) : retVal;\n    }\n}","export interface IFormValidatorOptions {\n    maxLength?: number;\n    minLength?: number;\n    minAndMaxLength?: { min: number; max: number; };\n    email?: boolean;\n    availableCharacters?: boolean;\n    nonSpaceCharacter?: boolean;\n    customRegex?: { regex: RegExp; message: string; };\n}\n\nexport interface IFormValidatorResponseItem {\n    key: keyof IFormValidatorOptions;\n    message: string;\n    isValid: boolean;\n}\n\nexport interface IFormValidator {\n    validate(value: string, options: IFormValidatorOptions): Array<IFormValidatorResponseItem>;\n}\n\nexport const IFormValidator = Symbol.for(\"IFormValidator\");","import { IApplication, IFolder, IModel, IModule } from \"../model/models\";\nimport { ITreeItem, ITreeView } from \"../presentation/ITreeView\";\nimport { IFEExternalData } from \"./IFileExplorer\";\n\nexport interface IDisplayItemsAdditional {\n    id: string;\n    name: string;\n    externalData: FileDisplayerExternalData;\n}\nexport type DisplayModelsCb = (item: FileDisplayerExternalData, hasChildren: boolean) => boolean;\nexport interface ICloneFileExplorerOptions {\n    displayFilterer?: DisplayModelsCb;\n    cb?: { select?: (item: ITreeItem<FileDisplayerExternalData>) => void };\n}\nexport interface IDisplayItemsOptions extends ICloneFileExplorerOptions {\n    additionalItems?: Array<IDisplayItemsAdditional>;\n    additionalRoot?: IDisplayItemsAdditional;\n}\n\nexport type FileDisplayerExternalData = IApplication | IFEExternalData;\n\nexport interface IFileDisplayerUseCase {\n    cloneFileExplorerTreeView(options: ICloneFileExplorerOptions): Array<ITreeItem<FileDisplayerExternalData>>;\n    createFileExplorerClone(domElement: HTMLElement, options: IDisplayItemsOptions): ITreeView<FileDisplayerExternalData>;\n}\nexport const IFileDisplayerUseCase = Symbol.for(\"IFileDisplayerUseCase\");","import { IModelHistoryInfo } from \"../model/models\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModelVersionsParam { }\nexport interface IListMultiModelVersions extends IUseCase<Map<string, Array<IModelHistoryInfo>>, IListMultiModelVersionsParam> {\n\n}\nexport const IListMultiModelVersions = Symbol.for(\"IListMultiModelVersions\");","import { IModuleVersion } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModuleVersionsParam { }\nexport interface IListMultiModuleVersions extends IUseCase<Map<string, Array<IModuleVersion>>, IListMultiModuleVersionsParam> {\n\n}\nexport const IListMultiModuleVersions = Symbol.for(\"IListMultiModuleVersions\");"],"names":["typeSafety","EditorConsts","quick","modelKeys","self","flow","design","runtime","workflow","flowEntity","single","cssJsTsYaml","color","icon","jpegJpgPngSvgGif","formatIcon","moduleVisual","modelVisuals","qjson","additionals","qjsonType","css","js","ts","yaml","entityDesigner","bpmn","process","namedComponent","step","Error","jpeg","jpg","png","svg","gif","woff","woff2","ttf","otf","lottie","appSettings","json","flowProcess","object","folder","ModelContants","static","modelType","modelAdditionals","retVal","IFormValidator","Symbol","for","IFileDisplayerUseCase","IListMultiModelVersions","IListMultiModuleVersions"],"sourceRoot":""}
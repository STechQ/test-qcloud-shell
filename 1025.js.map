{"version":3,"file":"1025.js","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?ff59","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?c4e3","webpack://qcloud_shell/../node_modules/@stechquick/algae/src/helpers/cryptoHelper.ts","webpack://qcloud_shell/../node_modules/@stechquick/algae/src/helpers/plateau/plateauHelper.ts","webpack://qcloud_shell/../common/qCloudTemp/modelContants.ts","webpack://qcloud_shell/../common/qCloudTemp/quickCloud.ts","webpack://qcloud_shell/./src/domain/useCase/IApplicationUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IBackofficeUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/ICreateExportJob.ts","webpack://qcloud_shell/./src/domain/useCase/IDeployJobs.ts","webpack://qcloud_shell/./src/domain/useCase/IJobUtils.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModelVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IListMultiModuleVersions.ts","webpack://qcloud_shell/./src/domain/useCase/IPackJobs.ts","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?3bef","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?7089","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue?5a4e","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/publish/publishDialog.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.container[data-v-898671a4] {\\n    padding: 32px 20px 20px;\\n}\\n.settings-container[data-v-898671a4] {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n.custom-text[data-v-898671a4] {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n.radio-button[data-v-898671a4] {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n.radio-text[data-v-898671a4] {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n.existing-app-url[data-v-898671a4] {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n.url-error[data-v-898671a4] {\\n    border: 1px solid red;\\n}\\n.url-disable[data-v-898671a4] {\\n    opacity: 0.5;\\n}\\n.existing-app-url[data-v-898671a4]::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n.modules-selected-checkbox[data-v-898671a4] {\\n    cursor: pointer;\\n}\\n.modules-selected-text[data-v-898671a4] {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n.text-number[data-v-898671a4] {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n.modules-datatable[data-v-898671a4] {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n.modules-datatable[data-v-898671a4]::-webkit-scrollbar {\\n    width: 4px;\\n}\\n.modules-datatable[data-v-898671a4]::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n.modules-datatable[data-v-898671a4]::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n.row-container[data-v-898671a4] {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n.chevron[data-v-898671a4] {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n.chevron.disabled[data-v-898671a4] {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n.module-checkbox[data-v-898671a4] {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n.module-name[data-v-898671a4] {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.module-name.imported[data-v-898671a4] {\\n    top: 10px;\\n    left: 87px;\\n}\\n.module-name.disabled[data-v-898671a4] {\\n    color: #D5D5D5;\\n}\\n.model-checkbox[data-v-898671a4] {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n.model-icon[data-v-898671a4] {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n.app-tier-model-icon[data-v-898671a4] {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n.app-tier-model-name[data-v-898671a4] {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.app-tier-model-name.disabled[data-v-898671a4] {\\n    color: #D5D5D5;\\n}\\n.model-name[data-v-898671a4] {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n.model-name.disabled[data-v-898671a4] {\\n    color: #D5D5D5;\\n}\\n.version-text[data-v-898671a4] {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n.version-text.disabled[data-v-898671a4] {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n.version-icon[data-v-898671a4] {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n.version-icon.disabled[data-v-898671a4] {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n.footer[data-v-898671a4] {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n.footer.deploy[data-v-898671a4] {\\n    position: relative;\\n    width: 100%;\\n}\\n.footer.export[data-v-898671a4] {\\n    margin-top: 102px;\\n}\\n.cancel-button[data-v-898671a4] {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n.save-button[data-v-898671a4] {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n.mobile-publish-text[data-v-898671a4],\\n.web-publish-text[data-v-898671a4] {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n.mobile-publish-text i[data-v-898671a4],\\n.web-publish-text i[data-v-898671a4] {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n.save-button.deploy[data-v-898671a4] {\\n    padding: 10px 16px;\\n}\\n.button-disable .save-button[data-v-898671a4] {\\n    color: #757575;\\n    cursor: default;\\n}\\n.button-disable .save-button:hover+.button-tooltip[data-v-898671a4],\\n.start-screen:hover .button-tooltip[data-v-898671a4],\\n.row-container:hover .button-tooltip[data-v-898671a4],\\n.publish-info:hover .button-tooltip[data-v-898671a4] {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n.button-tooltip[data-v-898671a4] {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n.publish-info[data-v-898671a4] {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n.qjson-color[data-v-898671a4] {\\n    color: #449dd1;\\n}\\n.yaml-color[data-v-898671a4] {\\n    color: #449dd1;\\n}\\n.namedcomp-color[data-v-898671a4] {\\n    color: #212121;\\n}\\n.app-settings-color[data-v-898671a4] {\\n    color: #151233;\\n}\\n.js-color[data-v-898671a4] {\\n    color: #449dd1;\\n}\\n.css-color[data-v-898671a4] {\\n    color: #151233;\\n}\\n.process-color[data-v-898671a4] {\\n    color: #007c77;\\n}\\n.bpmn-color[data-v-898671a4] {\\n    color: #007c77;\\n}\\n.entity-designer-color[data-v-898671a4] {\\n    color: #e9724c;\\n}\\n.select-environment[data-v-898671a4] {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container\\\">\\n        <div>\\n            <CheckboxComp :class=\\\"['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']\\\"\\n                :minus=\\\"mainCheckboxState == false\\\" :check=\\\"mainCheckboxState == true\\\"\\n                @click=\\\"handleModuleCountCheckboxEvent(mainCheckboxState == undefined)\\\" />\\n            <div :class=\\\"['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n                <span class=\\\"text-number\\\">{{  allChildCheckedModulesCount + anyChildCheckedModulesCount + checkedRootLevelModelsCount }}</span>\\n                of <span class=\\\"text-number\\\">{{ totalRootLevelCount }}</span> items selected\\n            </div>\\n        </div>\\n\\n        <div :class=\\\"['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n            <div v-for=\\\"item in items\\\">\\n                <div v-if=\\\"item?.type == 'module'\\\">\\n                    <div class=\\\"row-container\\\">\\n                        <i v-if=\\\"!item.imported\\\" :class=\\\"'mdi mdi-menu' + (item.collapsed ? '-right' : '-down') + ' chevron' + (!item.children || item.children.length == 0 ? ' disabled': '')\\\"\\n                            @click=\\\"handleCollapse(item)\\\" />\\n                        <CheckboxComp class=\\\"module-checkbox\\\" :check=\\\"item.allChildChecked\\\"\\n                            :minus=\\\"!item.allChildChecked && item.anyChildChecked\\\" :disabled=\\\"item.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(item)\\\" />\\n                        <i v-if=\\\"item.imported\\\" class=\\\"app-tier-model-icon mdi mdi-puzzle\\\" />\\n                        <span :class=\\\"['module-name', item.imported ? ` imported` : (item.disabled ? ' disabled': '')]\\\">{{ item.name }}</span>\\n                        <div v-if=\\\"item.imported\\\" class='version-text' @click=\\\"moduleVersionDialog(item)\\\">\\n                            {{ item.version ? item.version : 'No version' }}\\n                            <i :class=\\\"['mdi mdi-pencil-outline version-icon']\\\"></i>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row-container\\\" v-show=\\\"!item.imported && !item.collapsed\\\" v-for=\\\"child in item?.children\\\">\\n                        <CheckboxComp class=\\\"model-checkbox\\\" :check=\\\"child.checked\\\" :disabled=\\\"child.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(child)\\\" />\\n                        <i v-if=\\\"child.type != 'module'\\\" :class=\\\"'model-icon ' + ModelContants.getModelVisualInfo(child.type, undefined).icon\\\" \\n                            :style=\\\"{ color: ModelContants.getModelVisualInfo(child.type, undefined).color }\\\" />\\n                        \\n                        <span :class=\\\"['model-name', child.disabled ? ' disabled' : '']\\\">{{ child.name }}</span>\\n                        <div v-if=\\\"!child.usageType || child.usageType == 'appSettings'\\\" :class=\\\"['version-text', child.disabled ? 'disabled' : '']\\\" @click=\\\"versionDialog(child)\\\">\\n                            {{ child.version ? child.version : 'No version' }} <i v-if=\\\"!child.usageType || child.usageType == 'appSettings'\\\" :class=\\\"['mdi mdi-pencil-outline version-icon', child.disabled ? 'disabled' : '']\\\"></i>\\n                        </div>\\n                        <span v-if=\\\"child.disabled && !child.version\\\" class=\\\"button-tooltip\\\" \\n                            style=\\\"z-index: 1; width: 300px;\\\">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n                        </span>\\n                    </div>\\n                </div>\\n                <div v-else>\\n                    <div class=\\\"row-container\\\">\\n                        <CheckboxComp class=\\\"module-checkbox\\\" :check=\\\"item?.checked\\\" :disabled=\\\"item.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(item)\\\" />\\n                        <i v-if=\\\"item?.type == 'qjson'\\\" class=\\\"mdi mdi-palette qjson-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'yaml'\\\" class=\\\"mdi mdi-cog-outline yaml-color app-tier-model-icon\\\" />\\n                        <i v-if=\\\"item?.type == 'js'\\\"\\n                            class=\\\"mdi mdi-cog-outline js-color app-tier-model-icon\\\" />\\n                        <i v-if=\\\"item?.type == 'css'\\\"\\n                            class=\\\"mdi mdi-music-accidental-sharp css-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'process'\\\" class=\\\"mdi mdi-auto-fix process-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'bpmn'\\\" class=\\\"mdi mdi-vector-polyline bpmn-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'entityDesigner'\\\"\\n                            class=\\\"mdi mdi-database entity-designer-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'flow'\\\" class=\\\"mdi mdi-step-forward bpmn-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item.type == 'namedComponent'\\\" class=\\\"mdi mdi-cube-outline namedcomp-color app-tier-model-icon\\\"></i>\\n                        <i v-else-if=\\\"item.type == 'appSettings'\\\" class=\\\"mdi mdi-cog app-settings-color app-tier-model-icon\\\"></i>\\n                        <span class=\\\"app-tier-model-name\\\">{{ item?.name }}\\n                            <span class=\\\"start-screen\\\" v-if=\\\"startScreen?.ID == item.id\\\">\\n                                <i class=\\\"mdi mdi-home-outline\\\"></i>\\n                                <span class=\\\"button-tooltip\\\" style=\\\"top: -30px; left: 2px; z-index: 1; width: 80px;\\\">Start\\n                                    Screen</span>\\n                            </span>\\n                        </span>\\n\\n                        <span v-if=\\\"!item.usageType\\\" :class=\\\"['version-text', item.disabled ? 'disabled' : '']\\\" @click=\\\"versionDialog(item)\\\">\\n                            {{ item.version ? item.version : 'No version' }} <i v-if=\\\"!item.usageType\\\" :class=\\\"['mdi mdi-pencil-outline version-icon', item.disabled ? 'disabled' : '']\\\"></i>\\n                        </span>\\n                        <span v-if=\\\"item.disabled && !item.version\\\" class=\\\"button-tooltip\\\"\\n                            style=\\\"z-index: 1; width: 300px;\\\">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n                        </span>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div v-if=\\\"props.screenType == 'Deploy'\\\" style=\\\"margin-bottom: 102px\\\">\\n            <div style=\\\"display: flex; align-items: center;\\\">\\n                <span class=\\\"custom-text environment\\\"> Publish To </span>\\n                <span class=\\\"publish-info\\\">\\n                    <i class=\\\"mdi mdi-information\\\"></i>\\n                    <span class=\\\"button-tooltip\\\" style=\\\"top: 460px; left: 96px; z-index: 1; width: 231px;\\\">Publish To\\n                        options may change depending on the module type you choose.</span>\\n                </span>\\n            </div>\\n\\n            <CustomSelect :options=\\\"publishTargets\\\" @input=\\\"onTargetSelect\\\" :selectedOption=\\\"selectedTarget\\\"\\n                :default=\\\"selectedTarget\\\" :disabledOptions=\\\"disabledOptions\\\" selectedClass=\\\"selected-environment\\\"\\n                placeholder=\\\"Select the publish environment of your application\\\" class=\\\"select-environment\\\">\\n            </CustomSelect>\\n        </div>\\n<!--         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> -->\\n        <div :class=\\\"['footer', props.screenType == 'Deploy' ? 'deploy' : 'export']\\\">\\n            <div :class=\\\"['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']\\\" @click=\\\"close\\\">Cancel</div>\\n            <div v-if=\\\"props.screenType == 'Export'\\\" :class=\\\"(saveButtonDisable ? ' button-disable' : '')\\\" @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button \\\">DOWNLOAD</span>\\n                <span v-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -80px; left: 626px; z-index: 1; width: 145px;\\\">There are no items ready to publish. At least one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 640px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n            <div v-if=\\\"props.screenType == 'Deploy'\\\" :class=\\\"[(saveButtonDisable ? ' button-disable' : '')]\\\" @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button deploy\\\">PUBLISH</span>\\n                <span v-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 652px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!selectedTarget\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 644px; z-index: 1; width: 123px;\\\">You need to select a publish environment.</span>\\n                <span v-else-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">There are no items ready to publish. At least one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n\\n        </div>\\n    </div>\\n</template>\\n\\n\\n<script setup lang=\\\"ts\\\">\\nimport { CryptoHelper } from \\\"@stechquick/algae/lib/helpers/cryptoHelper\\\";\\nimport { PlateauHelper } from \\\"@stechquick/algae/lib/helpers/plateau/plateauHelper\\\";\\nimport { computed, defineAsyncComponent, onMounted, ref } from \\\"vue\\\";\\nimport { IOrganizationCloud } from \\\"../../../../../../../common/clean/domain/useCases/ICloudProvider\\\";\\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem } from \\\"../../../../../../../common/qCloudTemp/exporter\\\";\\nimport { ModelContants } from \\\"../../../../../../../common/qCloudTemp/modelContants\\\";\\nimport { IQJsonAdditionals, UsageType, APP_ITEM_CONTENT_TYPES } from \\\"../../../../../../../common/qCloudTemp/quickCloud\\\";\\nimport { container } from \\\"../../../../../domain/core/diContainer\\\";\\nimport { IQCloudApi } from \\\"../../../../../domain/infrastructure/IQCloudApi\\\";\\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \\\"../../../../../domain/model/models\\\";\\nimport { IDialog } from \\\"../../../../../domain/presentation/IDialog\\\";\\nimport { ICreateExportJob } from \\\"../../../../../domain/useCase/ICreateExportJob\\\";\\nimport { IDeployJobs } from \\\"../../../../../domain/useCase/IDeployJobs\\\";\\nimport { IJobUtils } from \\\"../../../../../domain/useCase/IJobUtils\\\";\\nimport { IListMultiModelVersions } from \\\"../../../../../domain/useCase/IListMultiModelVersions\\\";\\nimport { IPackJobs } from \\\"../../../../../domain/useCase/IPackJobs\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IViewModel } from \\\"../../../../../domain/viewModel/IViewModel\\\";\\nimport { IViewModelManager } from \\\"../../../../../domain/viewModel/IViewModelManager\\\";\\nimport CustomSelect from \\\"../../../components/customSelect.vue\\\";\\nimport CheckboxComp from \\\"../../checkboxComp.vue\\\";\\nimport { IListMultiModuleVersions } from \\\"../../../../../domain/useCase/IListMultiModuleVersions\\\";\\nimport { IBackofficeUseCase } from \\\"../../../../../domain/useCase/IBackofficeUseCase\\\";\\nimport { IApplicationUseCase } from \\\"../../../../../domain/useCase/IApplicationUseCase\\\";\\n\\ninterface ITableData {\\n    id: string;\\n    parentId?: string;\\n    collapsed?: boolean;\\n    anyChildChecked?: boolean;\\n    allChildChecked?: boolean;\\n    checked?: boolean;\\n    name: string;\\n    type: IModel[\\\"modelType\\\"] | IModule[\\\"objectType\\\"];\\n    version?: string;\\n    disabled?: boolean | true;\\n    children?: Array<ITableData>;\\n    usageType?: UsageType;\\n    imported?: boolean;\\n}\\n\\ninterface IDeployScreenAdditionalProps {\\n    screenType: \\\"Export\\\" | \\\"Deploy\\\";\\n    platformSelection: IPlatformSelection;\\n}\\n\\ninterface IDisabledOptions {\\n    index: number\\n    cause: string;\\n}\\n\\nconst props = defineProps<IDeployScreenAdditionalProps>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\\n\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\nconst items = ref<Array<ITableData>>([]);\\nconst validations = ref<boolean>(true);\\nconst selectedTarget = ref<string>(\\\"\\\");\\nconst disabledOptions = ref<Array<IDisabledOptions>>();\\nconst publishTargets = ref<Array<string>>();\\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\\nconst startScreen = ref<IModel>();\\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>>();\\nconst dependencyErrorStr = ref<string>('');\\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\n\\n\\nonMounted(async () => {\\n    await Promise.all([\\n        executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, { }).then(res => modelHistories.value = res),\\n        executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, { }).then(res => importedModuleVersions.value = res)\\n    ])\\n    initDependencies();\\n    handleItems();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n    validations.value = validate();\\n})\\n\\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && e.allChildChecked).length);\\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && !e.allChildChecked && e.anyChildChecked).length);\\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \\\"module\\\" && e.checked).length);\\nconst totalRootLevelCount = computed(() => items.value.length);\\nconst saveButtonDisable = computed(() => (props.screenType == \\\"Deploy\\\" && props.platformSelection.web && selectedTarget.value == \\\"\\\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \\\"Export\\\" && !validateStartScreen()) || !validateDependencies());\\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true \\n        : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0  ? false : undefined));\\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\\nconst isAllDependenciesOK = computed(validateDependencies)\\nconst isStartScreenOK = computed(validateStartScreen)\\n\\nfunction validate() {\\n    let result = true;\\n    const modules = items.value.filter(e => e.type == \\\"module\\\" && e.anyChildChecked);\\n    const appLayerItems = items.value.filter(e => e.type == \\\"qjson\\\" && e.checked);\\n\\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => item.isRootPage);\\n    if(!startScreen.value)\\n        return false;\\n\\n    if (props.screenType == \\\"Deploy\\\") {\\n        if (modules.length > 0)\\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \\\"entityDesigner\\\" && f.checked)).length <= 0\\n\\n        let isApplicationWillDeploy = appLayerItems.length > 0;\\n        if (isApplicationWillDeploy) {\\n            result = appLayerItems\\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nfunction validateDependencies() {\\n    const checkMap = new Map<string, boolean>();\\n    items.value.forEach(item => {\\n        if(item.type == 'module' && item.children && item.children.length > 0)\\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\\n        else\\n            checkMap.set(item.id, item.checked == true)\\n    })\\n\\n    const mustBeCheckedMap = new Map<string, Array<string>>();\\n    dependencyMap.value?.forEach((deps, id) => {\\n        if(!checkMap.get(id)) \\n            return;\\n\\n        deps.dependedTo.forEach(dependedId => {\\n            if(checkMap.get(dependedId))\\n                return;\\n\\n            if(mustBeCheckedMap.has(id)){\\n                const vals = mustBeCheckedMap.get(id)!\\n                vals.push(dependedId)\\n                mustBeCheckedMap.set(id, vals)\\n            }else {\\n                mustBeCheckedMap.set(id, [dependedId])\\n            }\\n            \\n        });\\n    })\\n\\n    //set deps error text\\n    const [firstItemID] = mustBeCheckedMap.keys();\\n    if(firstItemID) {\\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\\n        dependencyErrorStr.value =`Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\\n    }\\n\\n    return mustBeCheckedMap.size == 0\\n}\\n\\nfunction validateStartScreen() {\\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\\n}\\n\\nfunction findItem (ID: string) {\\n    for(const item of items.value){\\n        if(item.type != 'module' && item.id == ID)\\n            return item;\\n        if(item.type == 'module' && item.children && item.children.length> 0 ){\\n            const f = item.children.find(e => e.id == ID)\\n            if(f) return f\\n        }\\n    }\\n}\\n\\nfunction initDependencies() {\\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>();\\n    const depMap = new Map<string, Array<string>>();\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path) => {\\n            if (item.objectType != \\\"model\\\") { return; }\\n\\n            const isImportedModule = item.parent.objectType == \\\"module\\\" && isModuleImported(item.parent);\\n            \\n            let version: string | undefined;\\n            if(!isImportedModule){\\n                const maxVersion = getItemMaxVersion(item)\\n                if(!maxVersion)\\n                    return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\\n                version = maxVersion;\\n            }\\n            else {\\n                const moduleVersions = importedModuleVersions.value?.get(item.parent.ID)\\n                const moduleVersion = (item.parent as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n\\n                const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\\n                version = importedModuleModel?.version\\n            }\\n\\n            const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\\n\\n            depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\\n    });\\n\\n    \\n    depMap.forEach((dependedTo, modelId) => {\\n        const dependedBy = Array<string>();\\n        depMap.forEach((dependencies, depModelId) => {\\n            if (dependencies.some(depId => depId == modelId))\\n                dependedBy.push(depModelId)\\n        })\\n        map.set(modelId, {dependedBy, dependedTo});\\n    })\\n    dependencyMap.value = map;\\n}\\n\\nfunction isModelDepended(item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\\n    if(!deps) return false;\\n\\n    return deps.some(dep => items.value.some(item => {\\n        if(item.type == 'module' && item.anyChildChecked){\\n            return item.children?.some(child => child.checked && child.id == dep)\\n        }\\n        return item.id == dep && item.checked\\n    }));\\n}\\n\\nasync function handleItems() {\\n    // - modules and module items\\n    items.value = viewModel.studio.items\\n        .filter((item) => item.objectType == \\\"module\\\" && item.children.length > 0)\\n        .map((item) => {\\n            const isImportedModule = isModuleImported(item as IModule);\\n            const moduleVersion = (item as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n            const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\\n            const tableData: ITableData = {\\n                id: item.ID,\\n                collapsed: true,\\n                name: item.name,\\n                type: \\\"module\\\",\\n                imported: isImportedModule,\\n                version: moduleVersion,\\n                children: (item as IModule).children\\n                    .filter((child) => child.objectType == \\\"model\\\")\\n                    .map(child => child as IModel)\\n                    .map(child => {\\n                        const childModel: ITableData = {id: child.ID,parentId: item.ID,name: child.name,type: (child as IModel).modelType}\\n                        if(!isImportedModule || child.isUnmodifiable){\\n                            const maxVersion = getItemMaxVersion(child)                         \\n                            return {\\n                                ...childModel,\\n                                checked: maxVersion ? true : child.isUnmodifiable,\\n                                disabled: maxVersion ? false : !child.isUnmodifiable,\\n                                version: child.isUnmodifiable ? 'latest' : maxVersion,\\n                            } as ITableData\\n                        }\\n                        \\n                        const importedModulesModel = relatedModelHistories?.find(e => e.modelID == child.ID)\\n                        return {...childModel, checked: true,disabled: false, version: importedModulesModel?.version } as ITableData\\n                    })\\n            }\\n            handleParentCheckedStatus(tableData);\\n            return tableData;\\n        });\\n\\n    // - App Settings\\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings')!\\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\\n    appSettings && items.value.push({\\n        id: appSettings.ID,\\n        name: appSettings.name,\\n        checked: true,\\n        disabled: false,\\n        type: (appSettings as IModel).modelType,\\n        version: !maxVersion ? 'latest' : maxVersion\\n    });\\n\\n    // - application items\\n    viewModel.studio.items\\n        .filter((item) => item.objectType == \\\"model\\\" && item.modelType != \\\"appSettings\\\" && item.usageType != \\\"appSettings\\\" && item.usageType != \\\"appAssetList\\\")\\n        .map(item => item as IModel)\\n        .forEach(item => {\\n            const maxVersion = getItemMaxVersion(item)\\n            items.value.push({\\n                    id: item.ID,\\n                    name: item.name,\\n                    checked: maxVersion ? true : item.isUnmodifiable,\\n                    disabled: maxVersion ? false : !item.isUnmodifiable,\\n                    type: item.modelType,\\n                    version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                });\\n        });\\n        \\n    // - UI Settings\\n    const uiSettingsID = CryptoHelper.CreateGuid();\\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appSettings\\\") as Array<IModel>;\\n    const uiSettings: ITableData = {\\n        id: uiSettingsID,\\n        collapsed: true,\\n        name: \\\"UI Settings\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        children: uiSettingsModels.map(settings => {\\n            const maxVersion = getItemMaxVersion(settings)\\n            return {\\n                id: settings.ID,\\n                parentId: uiSettingsID,\\n                name: settings.name,\\n                type: settings.modelType,\\n                checked: maxVersion != undefined,\\n                usageType: settings?.usageType,\\n                disabled: !maxVersion,\\n                version: maxVersion,\\n            }\\n        }) as Array<ITableData>,\\n    };\\n    handleParentCheckedStatus(uiSettings);\\n\\n    // - Styled Components\\n    const uiAssetID = CryptoHelper.CreateGuid();\\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appAssetList\\\") as Array<IModel>;\\n    const uiAssetList: ITableData = {\\n        id: uiAssetID,\\n        collapsed: true,\\n        name: \\\"Styled Components\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        anyChildChecked: true,\\n        allChildChecked: true,\\n        children: appAssetList.map((asset) => ({\\n            id: asset.ID,\\n            parentId: uiAssetID,\\n            name: asset.name,\\n            type: asset.modelType,\\n            checked: true,\\n            usageType: asset?.usageType,\\n        })) as Array<ITableData>,\\n    };\\n    handleParentCheckedStatus(uiAssetList);\\n\\n    items.value.unshift(uiAssetList);\\n    items.value.unshift(uiSettings);\\n}\\n\\nfunction getItemMaxVersion(item: IModel): string | undefined {\\n    if (!modelHistories.value?.has(item.ID))\\n        return undefined;\\n\\n    const versions = modelHistories.value.get(item.ID);\\n    if (!versions)\\n        return undefined;\\n\\n    const findMaxVersion = (versions: Array<string>) => {\\n        const versionNumbers = versions.map(v => {\\n            const parts: Array<string> = v.split(\\\".\\\");\\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\\n        })\\n\\n        versionNumbers.sort((a, b) => b - a);\\n\\n        const maxVersion = versionNumbers[0];\\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\\n    }\\n\\n    return findMaxVersion(versions.map(e => e.version!));\\n\\n}\\nfunction checkMaxVersionOfAllItems() {\\n    let isThereVersion: boolean = false;\\n    items.value.forEach(item => {\\n        if(item.type == \\\"module\\\") {\\n            item.children?.forEach(child => {\\n                if(child.version) {\\n                    isThereVersion = true;\\n                }\\n                \\n            })\\n        }\\n        else {\\n            if(item.version) {\\n                isThereVersion = true;\\n            }\\n        }\\n    })\\n    return isThereVersion;\\n}\\nfunction handleModuleCountCheckboxEvent(value: boolean) {\\n    items.value.filter(e => !e.disabled).forEach((item) => {\\n        item.checked = value;\\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\\n        if (allItemsCheckable) item.allChildChecked = value;\\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\\n    });\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleCollapse(item: ITableData) {\\n    item.collapsed = !item.collapsed;\\n}\\n\\nfunction checkAllDependents(item: ITableData) {\\n    if(item.disabled || item.checked) return;\\n\\n    item.checked = true\\n    item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!);\\n\\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\\n    if(!deps) return;\\n\\n    deps.forEach(dep => {\\n        items.value.forEach(item => {\\n            if(item.type == 'module' && !item.allChildChecked){\\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\\n                willCheckItem && checkAllDependents(willCheckItem)\\n                handleParentCheckedStatus(item)\\n                return;\\n            }\\n\\n            if(!item.checked && item.id == dep) {\\n                checkAllDependents(item)\\n                item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\\n            }\\n        })\\n    });\\n}\\n\\nfunction handleItemCheckEvent(item: ITableData) {\\n    if(item.disabled || isModelDepended(item) || item.name == 'App Settings')\\n        return;\\n\\n    if(item.type != \\\"module\\\") {\\n        if(item.checked){\\n            item.checked = false;\\n            item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\\n        } else {\\n            checkAllDependents(item)\\n        }\\n    } else {\\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\\n            if (item.anyChildChecked) {\\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\\n                item.checked = false;\\n                handleParentCheckedStatus(item);\\n            } else {\\n                item.children.forEach(checkAllDependents);\\n                item.checked = true;\\n            }\\n        }\\n        else {\\n            item.checked = !item.checked;\\n            item.allChildChecked = false;\\n        }\\n    }\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleParentCheckedStatus(item: ITableData) {\\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\\n}\\n\\nfunction syncPublishTargets() {\\n    publishTargets.value = []; disabledOptions.value = [];\\n\\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\\n    if (!targets)\\n        return;\\n\\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\\n    if (!isSelectAnyItem) {\\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\\n        const disabledOptionList = Array<IDisabledOptions>();\\n        for (let i = 0; i < publishTargets.value.length; i++) {\\n            disabledOptionList.push({ index: i, cause: \\\"You need to include items to publish.\\\" })\\n        }\\n        disabledOptions.value = disabledOptionList;\\n        return;\\n    }\\n\\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\\n\\n    const disabledOptionList = Array<IDisabledOptions>();\\n    for (let i = 0; i < sortedTargets.length; i++) {\\n        const cause = sortedTargets[i].cause;\\n        if (cause) disabledOptionList.push({ index: i, cause })\\n    }\\n    disabledOptions.value = disabledOptionList;\\n    publishTargets.value = sortedTargets.map(e => e.optionName);\\n\\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \\\"\\\";\\n}\\n\\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\\n    const list = Array<{ optionName: string, cause?: string }>();\\n\\n    Object.keys(targets).forEach(e => {\\n        const key = e as keyof IOrganizationCloud;\\n        const value = targets[key];\\n        const optionName = cloudTargetMap(key)!;\\n        if (!value)\\n            return list.push({ optionName, cause: \\\"You are not authorized to publish to this target.\\\" });\\n\\n\\n        switch (key) {\\n            case \\\"azure\\\":\\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\\n                    if (!items || items.length == 0) { return status; }\\n                    for (const item of items) {\\n                        if (item.checked || item.anyChildChecked) {\\n                            if (item.type == \\\"module\\\") {\\n                                status = traverseSelectedItems(status, item.children);\\n                            }\\n                            if (item.type == \\\"entityDesigner\\\" || item.type == \\\"bpmn\\\" || item.type == \\\"process\\\") {\\n                                status = false;\\n                                break;\\n                            }\\n                        }\\n\\n                    }\\n                    return status;\\n                }\\n\\n                const status = traverseSelectedItems(true, items.value);\\n                if (!status)\\n                    return list.push({ optionName, cause: \\\"Entity and process models cannot be published to this target.\\\" });\\n                break;\\n            case \\\"plateauGCP\\\":\\n                const modulesHasNotAnEDModel =  items.value.filter(e => e.name != \\\"UI Settings\\\").find(e => e.type == \\\"module\\\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \\\"bpmn\\\" || c.type == \\\"process\\\")) && !e.children?.some(c => c.type == \\\"entityDesigner\\\" && c.checked))\\n                if (modulesHasNotAnEDModel)\\n                    return list.push({optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.`})\\n                break;\\n        }\\n\\n        list.push({ optionName });\\n    })\\n\\n    return list;\\n}\\n\\nfunction updateDependencyMap(newVersion: string, item: ITableData) { \\n    const deps = dependencyMap.value?.get(item.id);\\n    dependencyMap.value?.set(item.id, {\\n        dependedBy: deps?.dependedBy || Array<string>(), \\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\\n    })\\n}\\n\\nfunction versionDialog(item: ITableData) {\\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\\n    const hasAnyVersion = modelHistories.value?.has(item.id);\\n    const options = { clickedNode, cb: (version: string) => { \\n        item.version = version;\\n        updateDependencyMap(version, item);\\n    } } as any;\\n\\n    if (hasAnyVersion) {\\n        options.versions = modelHistories.value?.get(item.id)\\n    }\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/modelVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" }, options\\n    );\\n}\\n\\n\\nfunction moduleVersionDialog(item: ITableData) {\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/moduleVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" },\\n        { module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => { \\n            item.version = moduleVersion.version;\\n            item.children?.forEach(child => {\\n                const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\\n                child.version = modulesModel?.version\\n                updateDependencyMap(modulesModel?.version!, child);\\n            })\\n        }}\\n    );\\n}\\n\\nfunction close() {\\n    emit(\\\"close\\\");\\n}\\n\\nasync function save() {\\n    executor.execute(\\n        async () => {\\n            const initAsGroup = async () => {\\n                const groupID = CryptoHelper.CreateGuid();\\n                await initHistory(groupID);\\n                await packJob(groupID);\\n                return groupID;\\n            }\\n\\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\\n\\n            switch (props.screenType) {\\n                case \\\"Export\\\":\\n                    if(isFlowBackend) {\\n                        const deployItems = await createAzureDeployItems();\\n                        await packJobsUseCase.createPackJobs([{\\n                            appID: viewModel.studio.appId,\\n                            exportType: \\\"qui\\\",\\n                            selectionData: deployItems\\n                        }]);\\n                        break;\\n                    }\\n\\n                    const groupID = await initAsGroup();\\n                    await createExportJob(groupID);\\n                    break;\\n                case \\\"Deploy\\\":\\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\\n                        case \\\"plateauGCP\\\":\\n                            const groupID = await initAsGroup();\\n                            await createDeployJob(groupID);\\n                            break;\\n                        case \\\"azure\\\":\\n                            const deployItems = await createAzureDeployItems();\\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\\n                            break;\\n                    }\\n            }\\n            const userMobileUsage = viewModel.user?.mobileUsage;\\n            const appMobileUsage = currentApp.value?.mobileUsage;\\n            if(props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \\\"backofficeUpdate\\\"})\\n                \\n            }\\n            emit(\\\"close\\\");\\n        },\\n        { loading: true });\\n}\\n\\nasync function createAzureDeployItems() {\\n    const deployItems: Array<IExportItem> = [];\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\\n        if (!items || items.length == 0) { return; }\\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\\n            if (item.type == \\\"module\\\") {\\n                traverseSelectedItems(item.children);\\n                return;\\n            }\\n\\n            const itemMap = itemIdObj[item.id];\\n\\n            const deployItem: IExportItem = {\\n                id: item.id,\\n                name: jobUtils.getFileFullname(itemMap.item),\\n                path: itemMap.path,\\n                type: jobUtils.getItemType(itemMap.item),\\n                ver: item.version || \\\"latest\\\",\\n                isRootPage: itemMap.item.isRootPage,\\n                modulePrefix: itemMap.prefix,\\n                ownerType: 'application',\\n                ownerName: viewModel.studio.appName,\\n                size: itemMap.item.size,\\n                createDate: itemMap.item.createDate,\\n            };\\n            deployItems.push(deployItem)\\n        });\\n    };\\n\\n    traverseSelectedItems(items.value);\\n\\n    return deployItems;\\n}\\n\\nasync function initHistory(groupID: string) {\\n    return qcloudApi.initPublishHistory({\\n        appID: viewModel.studio.appId,\\n        ID: groupID,\\n        isMultiStep: true,\\n        type: props.screenType == \\\"Deploy\\\" ? \\\"publish\\\" : \\\"download\\\",\\n        cloudProvider: props.screenType == \\\"Deploy\\\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\\n        platform: props.platformSelection\\n    });\\n}\\n\\nasync function packJob(groupID: string) {\\n    let exportItemMap = new Map<string, Array<IExportItem>>();\\n    const appName = viewModel.studio.appName;\\n\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const createExportObject = (tableItem: ITableData) => {\\n        const item = itemIdObj[tableItem.id].item;\\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == item.modelType);\\n        const retVal: IExportItem = {\\n            id: tableItem.id,\\n            ver: tableItem.version!,\\n            type: jobUtils.getItemType(item),\\n            path: itemIdObj[tableItem.id].path,\\n            modulePrefix: itemIdObj[tableItem.id].prefix,\\n            name: jobUtils.getFileFullname(item),\\n            ownerType: isAppItem ? 'application' : (item.parent.objectType as \\\"module\\\" | \\\"application\\\"),\\n            ownerName: isAppItem ? appName : item.parent.name,\\n        };\\n        return retVal;\\n    }\\n\\n    const addToExportItem = (key: string, obj: IExportItem) => {\\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\\n        let items = exportItemMap.get(key);\\n        if(items && items.length > 0){\\n            items.push(obj);\\n            exportItemMap.set(key, items);\\n        } else\\n            exportItemMap.set(key, [obj]);\\n    }\\n\\n    items.value.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\\n        if (asset.type == 'module') {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                const obj = createExportObject(child);\\n                if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n\\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n            });\\n        } else {\\n            const obj = createExportObject(asset);\\n            if (asset.type == 'qjson'){\\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \\\"model\\\" && i.modelType == \\\"qjson\\\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\\n                obj.isRootPage = isRootPage ? true : undefined;\\n            }\\n            addToExportItem(appName, obj);\\n        }\\n    })\\n\\n    let jobs = Array<ICreateExportJobParam>();\\n    exportItemMap.forEach((v, k) => {\\n        jobs.push({\\n            appID: viewModel.studio.appId,\\n            exportType: \\\"qui\\\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \\\"model\\\":  \\\"qui\\\"\\n            selectionData: v,\\n            cause: props.screenType == 'Export' ? 'download': \\\"publish\\\",\\n            layer: 0,\\n            groupID: groupID,\\n            platformSelection: props.platformSelection\\n        })\\n    })\\n    \\n    await packJobsUseCase.createPackJobs(jobs);\\n}\\n\\nasync function createExportJob(groupID: string) {\\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\\n        appID: viewModel.studio.appId,\\n        exportType: \\\"qui\\\",\\n        selectionData: [],\\n        layer: 1,\\n        groupID: groupID\\n    });\\n}\\n\\nasync function createDeployJob(groupID: string) {\\n    //1-(n) L1- deployJob(build)\\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\\n        .then(jobs => jobs.jobs.map(e => {\\n            const jobData = e.jobData as IExportJobData;\\n            return {\\n                ownerName: jobData.items[0].ownerName,\\n                jobID: e.jobID,\\n                type: jobData.items[0].ownerType,\\n                mainDir: getDeployableArchiveRoot(jobData)\\n            }\\n        }));\\n\\n    if (!packages || packages.length <= 0)\\n        return;\\n\\n    let buildJobs = Array<ICreateDeployJobParam>();\\n    packages.forEach(pack => {\\n        buildJobs.push({\\n            appID: viewModel.studio.appId,\\n            type: \\\"build\\\",\\n            package: {\\n                type: pack.type as DeployType,\\n                name: pack.ownerName!,\\n                mainDir: pack.mainDir,\\n                zip: `${pack.jobID}.zip`,\\n            },\\n            layer: 1,\\n            groupID: groupID\\n        })\\n    })\\n\\n    await deployJobsUseCase.createBuildJobs(buildJobs);\\n\\n    //2-(1) L2- deployJob(deployment)\\n    let jobParam: ICreateDeployJobParam = {\\n        appID: viewModel.studio.appId,\\n        type: \\\"deployment\\\",\\n        deployConfig: {\\n            process: {\\n                configModelIDs: getProcessConfigList(),\\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \\\"bpmn\\\"))\\n            }\\n        },\\n        layer: 2,\\n        groupID: groupID,\\n        platformSelection: props.platformSelection\\n    }\\n\\n    await deployJobsUseCase.startDeploymentJob(jobParam);\\n}\\n\\nfunction getProcessConfigList() {\\n    let processConfigList = Array<IProcessConfigModelItem>();\\n    items.value.forEach((asset) => {\\n        if (asset.type == \\\"module\\\" && asset.anyChildChecked && asset.children) {\\n            const usingService = asset.children.find(c => c.type == \\\"entityDesigner\\\");\\n            if (!usingService)\\n                return;\\n\\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\\n            asset.children.forEach(child => {\\n                if (child.checked && child.type == \\\"process\\\") {\\n                    processConfigList.push({\\n                        moduleName: serviceName,\\n                        model: {\\n                            id: child.id,\\n                            name: child.name,\\n                            version: child.version!\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n    })\\n    return processConfigList;\\n}\\n\\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\\n    if (jobData.items[0].ownerType == \\\"module\\\") {\\n        let edModel = jobData.items.find(e => e.type == \\\"entityDesigner\\\");\\n        if (!edModel)\\n            throw new Error(\\\"!!! this module cannot deploy. Because its have not a service\\\");\\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\\n    }\\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\\n}\\n\\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \\\"Public Cloud\\\", plateauGCP: \\\"Plateau Platform Playground\\\" };\\n    if (pureVal) {\\n        return Object.keys(map).find(e => {\\n            if (map[e as keyof IOrganizationCloud] === name) {\\n                return true;\\n            }\\n        })\\n    } else {\\n        let key = Object.keys(map).includes(name);\\n        if (!key)\\n            return;\\n        return map[name as keyof IOrganizationCloud];\\n    }\\n}\\n\\nfunction onTargetSelect(value: string) {\\n    selectedTarget.value = value\\n}\\n\\nconst isModuleImported = (item: IModule) => {\\n    const hasAVersion = item.relatedApplications.find(e => e.applicationID == viewModel.studio.appId)?.importedVersion;\\n    if(item.mainOwner != viewModel.studio.appId && item.relatedApplications.at(0)?.applicationID != viewModel.studio.appId && hasAVersion)\\n        return true;\\n    return false;\\n}\\n\\n</script>\\n\\n\\n<style scoped>\\n.container {\\n    padding: 32px 20px 20px;\\n}\\n\\n.settings-container {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n\\n.custom-text {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n\\n.radio-button {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n\\n.radio-text {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n\\n.existing-app-url {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n\\n.url-error {\\n    border: 1px solid red;\\n}\\n\\n.url-disable {\\n    opacity: 0.5;\\n}\\n\\n.existing-app-url::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n\\n.modules-selected-checkbox {\\n    cursor: pointer;\\n}\\n\\n.modules-selected-text {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n    ;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n\\n.text-number {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.modules-datatable {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n\\n.modules-datatable::-webkit-scrollbar {\\n    width: 4px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n\\n.row-container {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n\\n.chevron {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n\\n.chevron.disabled {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n\\n.module-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n\\n.module-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.module-name.imported {\\n    top: 10px;\\n    left: 87px;\\n}\\n.module-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n\\n.model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n\\n.app-tier-model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n\\n.app-tier-model-name {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.version-text {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.version-text.disabled {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.version-icon {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n\\n.version-icon.disabled {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.footer {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n\\n.footer.deploy {\\n    position: relative;\\n    width: 100%;\\n}\\n\\n.footer.export {\\n    margin-top: 102px;\\n}\\n\\n.cancel-button {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n\\n\\n.save-button {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n.mobile-publish-text,\\n.web-publish-text {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.mobile-publish-text i,\\n.web-publish-text i {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n\\n.save-button.deploy {\\n    padding: 10px 16px;\\n}\\n\\n.button-disable .save-button {\\n    color: #757575;\\n    cursor: default;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n\\n.button-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n\\n.publish-info {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n\\n.qjson-color {\\n    color: #449dd1;\\n}\\n\\n.yaml-color {\\n    color: #449dd1;\\n}\\n.namedcomp-color {\\n    color: #212121;\\n}\\n.app-settings-color {\\n    color: #151233;\\n}\\n\\n.js-color {\\n    color: #449dd1;\\n}\\n\\n.css-color {\\n    color: #151233;\\n}\\n\\n.process-color {\\n    color: #007c77;\\n}\\n\\n.bpmn-color {\\n    color: #007c77;\\n}\\n\\n.entity-designer-color {\\n    color: #e9724c;\\n}\\n\\n.select-environment {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n</style>\\n\\n<style>\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue\"],\"names\":[],\"mappings\":\";AAi4CA;IACI,6BAA6B;IAC7B,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,yBAAyB;IACzB,gBAAgB;AACpB;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,yBAAyB;IACzB,0CAA0C;IAC1C,2BAA2B;AAC/B\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container\\\">\\n        <div>\\n            <CheckboxComp :class=\\\"['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']\\\"\\n                :minus=\\\"mainCheckboxState == false\\\" :check=\\\"mainCheckboxState == true\\\"\\n                @click=\\\"handleModuleCountCheckboxEvent(mainCheckboxState == undefined)\\\" />\\n            <div :class=\\\"['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n                <span class=\\\"text-number\\\">{{  allChildCheckedModulesCount + anyChildCheckedModulesCount + checkedRootLevelModelsCount }}</span>\\n                of <span class=\\\"text-number\\\">{{ totalRootLevelCount }}</span> items selected\\n            </div>\\n        </div>\\n\\n        <div :class=\\\"['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : '']\\\">\\n            <div v-for=\\\"item in items\\\">\\n                <div v-if=\\\"item?.type == 'module'\\\">\\n                    <div class=\\\"row-container\\\">\\n                        <i v-if=\\\"!item.imported\\\" :class=\\\"'mdi mdi-menu' + (item.collapsed ? '-right' : '-down') + ' chevron' + (!item.children || item.children.length == 0 ? ' disabled': '')\\\"\\n                            @click=\\\"handleCollapse(item)\\\" />\\n                        <CheckboxComp class=\\\"module-checkbox\\\" :check=\\\"item.allChildChecked\\\"\\n                            :minus=\\\"!item.allChildChecked && item.anyChildChecked\\\" :disabled=\\\"item.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(item)\\\" />\\n                        <i v-if=\\\"item.imported\\\" class=\\\"app-tier-model-icon mdi mdi-puzzle\\\" />\\n                        <span :class=\\\"['module-name', item.imported ? ` imported` : (item.disabled ? ' disabled': '')]\\\">{{ item.name }}</span>\\n                        <div v-if=\\\"item.imported\\\" class='version-text' @click=\\\"moduleVersionDialog(item)\\\">\\n                            {{ item.version ? item.version : 'No version' }}\\n                            <i :class=\\\"['mdi mdi-pencil-outline version-icon']\\\"></i>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row-container\\\" v-show=\\\"!item.imported && !item.collapsed\\\" v-for=\\\"child in item?.children\\\">\\n                        <CheckboxComp class=\\\"model-checkbox\\\" :check=\\\"child.checked\\\" :disabled=\\\"child.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(child)\\\" />\\n                        <i v-if=\\\"child.type != 'module'\\\" :class=\\\"'model-icon ' + ModelContants.getModelVisualInfo(child.type, undefined).icon\\\" \\n                            :style=\\\"{ color: ModelContants.getModelVisualInfo(child.type, undefined).color }\\\" />\\n                        \\n                        <span :class=\\\"['model-name', child.disabled ? ' disabled' : '']\\\">{{ child.name }}</span>\\n                        <div v-if=\\\"!child.usageType || child.usageType == 'appSettings'\\\" :class=\\\"['version-text', child.disabled ? 'disabled' : '']\\\" @click=\\\"versionDialog(child)\\\">\\n                            {{ child.version ? child.version : 'No version' }} <i v-if=\\\"!child.usageType || child.usageType == 'appSettings'\\\" :class=\\\"['mdi mdi-pencil-outline version-icon', child.disabled ? 'disabled' : '']\\\"></i>\\n                        </div>\\n                        <span v-if=\\\"child.disabled && !child.version\\\" class=\\\"button-tooltip\\\" \\n                            style=\\\"z-index: 1; width: 300px;\\\">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n                        </span>\\n                    </div>\\n                </div>\\n                <div v-else>\\n                    <div class=\\\"row-container\\\">\\n                        <CheckboxComp class=\\\"module-checkbox\\\" :check=\\\"item?.checked\\\" :disabled=\\\"item.disabled\\\"\\n                            @click=\\\"handleItemCheckEvent(item)\\\" />\\n                        <i v-if=\\\"item?.type == 'qjson'\\\" class=\\\"mdi mdi-palette qjson-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'yaml'\\\" class=\\\"mdi mdi-cog-outline yaml-color app-tier-model-icon\\\" />\\n                        <i v-if=\\\"item?.type == 'js'\\\"\\n                            class=\\\"mdi mdi-cog-outline js-color app-tier-model-icon\\\" />\\n                        <i v-if=\\\"item?.type == 'css'\\\"\\n                            class=\\\"mdi mdi-music-accidental-sharp css-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'process'\\\" class=\\\"mdi mdi-auto-fix process-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'bpmn'\\\" class=\\\"mdi mdi-vector-polyline bpmn-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'entityDesigner'\\\"\\n                            class=\\\"mdi mdi-database entity-designer-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item?.type == 'flow'\\\" class=\\\"mdi mdi-step-forward bpmn-color app-tier-model-icon\\\" />\\n                        <i v-else-if=\\\"item.type == 'namedComponent'\\\" class=\\\"mdi mdi-cube-outline namedcomp-color app-tier-model-icon\\\"></i>\\n                        <i v-else-if=\\\"item.type == 'appSettings'\\\" class=\\\"mdi mdi-cog app-settings-color app-tier-model-icon\\\"></i>\\n                        <span class=\\\"app-tier-model-name\\\">{{ item?.name }}\\n                            <span class=\\\"start-screen\\\" v-if=\\\"startScreen?.ID == item.id\\\">\\n                                <i class=\\\"mdi mdi-home-outline\\\"></i>\\n                                <span class=\\\"button-tooltip\\\" style=\\\"top: -30px; left: 2px; z-index: 1; width: 80px;\\\">Start\\n                                    Screen</span>\\n                            </span>\\n                        </span>\\n\\n                        <span v-if=\\\"!item.usageType\\\" :class=\\\"['version-text', item.disabled ? 'disabled' : '']\\\" @click=\\\"versionDialog(item)\\\">\\n                            {{ item.version ? item.version : 'No version' }} <i v-if=\\\"!item.usageType\\\" :class=\\\"['mdi mdi-pencil-outline version-icon', item.disabled ? 'disabled' : '']\\\"></i>\\n                        </span>\\n                        <span v-if=\\\"item.disabled && !item.version\\\" class=\\\"button-tooltip\\\"\\n                            style=\\\"z-index: 1; width: 300px;\\\">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\\n                        </span>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div v-if=\\\"props.screenType == 'Deploy'\\\" style=\\\"margin-bottom: 102px\\\">\\n            <div style=\\\"display: flex; align-items: center;\\\">\\n                <span class=\\\"custom-text environment\\\"> Publish To </span>\\n                <span class=\\\"publish-info\\\">\\n                    <i class=\\\"mdi mdi-information\\\"></i>\\n                    <span class=\\\"button-tooltip\\\" style=\\\"top: 460px; left: 96px; z-index: 1; width: 231px;\\\">Publish To\\n                        options may change depending on the module type you choose.</span>\\n                </span>\\n            </div>\\n\\n            <CustomSelect :options=\\\"publishTargets\\\" @input=\\\"onTargetSelect\\\" :selectedOption=\\\"selectedTarget\\\"\\n                :default=\\\"selectedTarget\\\" :disabledOptions=\\\"disabledOptions\\\" selectedClass=\\\"selected-environment\\\"\\n                placeholder=\\\"Select the publish environment of your application\\\" class=\\\"select-environment\\\">\\n            </CustomSelect>\\n        </div>\\n<!--         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> -->\\n        <div :class=\\\"['footer', props.screenType == 'Deploy' ? 'deploy' : 'export']\\\">\\n            <div :class=\\\"['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']\\\" @click=\\\"close\\\">Cancel</div>\\n            <div v-if=\\\"props.screenType == 'Export'\\\" :class=\\\"(saveButtonDisable ? ' button-disable' : '')\\\" @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button \\\">DOWNLOAD</span>\\n                <span v-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -80px; left: 626px; z-index: 1; width: 145px;\\\">There are no items ready to publish. At least one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 640px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n            <div v-if=\\\"props.screenType == 'Deploy'\\\" :class=\\\"[(saveButtonDisable ? ' button-disable' : '')]\\\" @click=\\\"!saveButtonDisable && save()\\\">\\n                <span class=\\\"save-button deploy\\\">PUBLISH</span>\\n                <span v-if=\\\"!isStartScreenOK\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 652px; z-index: 1; width: 120px;\\\">You need to include your start screen.</span>\\n                <span v-else-if=\\\"!selectedTarget\\\" class=\\\"button-tooltip\\\"\\n                    style=\\\"top: -46px; left: 644px; z-index: 1; width: 123px;\\\">You need to select a publish environment.</span>\\n                <span v-else-if=\\\"!isThereVersion\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">There are no items ready to publish. At least one of your items must be ready to publish.</span>\\n                <span v-else-if=\\\"!isAllDependenciesOK\\\" class=\\\"button-tooltip\\\" \\n                    style=\\\"top: -95px; left: 644px; z-index: 1; width: 135px;\\\">{{ dependencyErrorStr }}</span>\\n            </div>\\n\\n        </div>\\n    </div>\\n</template>\\n\\n\\n<script setup lang=\\\"ts\\\">\\nimport { CryptoHelper } from \\\"@stechquick/algae/lib/helpers/cryptoHelper\\\";\\nimport { PlateauHelper } from \\\"@stechquick/algae/lib/helpers/plateau/plateauHelper\\\";\\nimport { computed, defineAsyncComponent, onMounted, ref } from \\\"vue\\\";\\nimport { IOrganizationCloud } from \\\"../../../../../../../common/clean/domain/useCases/ICloudProvider\\\";\\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem } from \\\"../../../../../../../common/qCloudTemp/exporter\\\";\\nimport { ModelContants } from \\\"../../../../../../../common/qCloudTemp/modelContants\\\";\\nimport { IQJsonAdditionals, UsageType, APP_ITEM_CONTENT_TYPES } from \\\"../../../../../../../common/qCloudTemp/quickCloud\\\";\\nimport { container } from \\\"../../../../../domain/core/diContainer\\\";\\nimport { IQCloudApi } from \\\"../../../../../domain/infrastructure/IQCloudApi\\\";\\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \\\"../../../../../domain/model/models\\\";\\nimport { IDialog } from \\\"../../../../../domain/presentation/IDialog\\\";\\nimport { ICreateExportJob } from \\\"../../../../../domain/useCase/ICreateExportJob\\\";\\nimport { IDeployJobs } from \\\"../../../../../domain/useCase/IDeployJobs\\\";\\nimport { IJobUtils } from \\\"../../../../../domain/useCase/IJobUtils\\\";\\nimport { IListMultiModelVersions } from \\\"../../../../../domain/useCase/IListMultiModelVersions\\\";\\nimport { IPackJobs } from \\\"../../../../../domain/useCase/IPackJobs\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IViewModel } from \\\"../../../../../domain/viewModel/IViewModel\\\";\\nimport { IViewModelManager } from \\\"../../../../../domain/viewModel/IViewModelManager\\\";\\nimport CustomSelect from \\\"../../../components/customSelect.vue\\\";\\nimport CheckboxComp from \\\"../../checkboxComp.vue\\\";\\nimport { IListMultiModuleVersions } from \\\"../../../../../domain/useCase/IListMultiModuleVersions\\\";\\nimport { IBackofficeUseCase } from \\\"../../../../../domain/useCase/IBackofficeUseCase\\\";\\nimport { IApplicationUseCase } from \\\"../../../../../domain/useCase/IApplicationUseCase\\\";\\n\\ninterface ITableData {\\n    id: string;\\n    parentId?: string;\\n    collapsed?: boolean;\\n    anyChildChecked?: boolean;\\n    allChildChecked?: boolean;\\n    checked?: boolean;\\n    name: string;\\n    type: IModel[\\\"modelType\\\"] | IModule[\\\"objectType\\\"];\\n    version?: string;\\n    disabled?: boolean | true;\\n    children?: Array<ITableData>;\\n    usageType?: UsageType;\\n    imported?: boolean;\\n}\\n\\ninterface IDeployScreenAdditionalProps {\\n    screenType: \\\"Export\\\" | \\\"Deploy\\\";\\n    platformSelection: IPlatformSelection;\\n}\\n\\ninterface IDisabledOptions {\\n    index: number\\n    cause: string;\\n}\\n\\nconst props = defineProps<IDeployScreenAdditionalProps>();\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\\nconst dialog = container.resolve<IDialog>(IDialog);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\\n\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\nconst items = ref<Array<ITableData>>([]);\\nconst validations = ref<boolean>(true);\\nconst selectedTarget = ref<string>(\\\"\\\");\\nconst disabledOptions = ref<Array<IDisabledOptions>>();\\nconst publishTargets = ref<Array<string>>();\\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\\nconst startScreen = ref<IModel>();\\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>>();\\nconst dependencyErrorStr = ref<string>('');\\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\n\\n\\nonMounted(async () => {\\n    await Promise.all([\\n        executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, { }).then(res => modelHistories.value = res),\\n        executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, { }).then(res => importedModuleVersions.value = res)\\n    ])\\n    initDependencies();\\n    handleItems();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n    validations.value = validate();\\n})\\n\\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && e.allChildChecked).length);\\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \\\"module\\\" && !e.allChildChecked && e.anyChildChecked).length);\\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \\\"module\\\" && e.checked).length);\\nconst totalRootLevelCount = computed(() => items.value.length);\\nconst saveButtonDisable = computed(() => (props.screenType == \\\"Deploy\\\" && props.platformSelection.web && selectedTarget.value == \\\"\\\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \\\"Export\\\" && !validateStartScreen()) || !validateDependencies());\\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true \\n        : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0  ? false : undefined));\\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\\nconst isAllDependenciesOK = computed(validateDependencies)\\nconst isStartScreenOK = computed(validateStartScreen)\\n\\nfunction validate() {\\n    let result = true;\\n    const modules = items.value.filter(e => e.type == \\\"module\\\" && e.anyChildChecked);\\n    const appLayerItems = items.value.filter(e => e.type == \\\"qjson\\\" && e.checked);\\n\\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => item.isRootPage);\\n    if(!startScreen.value)\\n        return false;\\n\\n    if (props.screenType == \\\"Deploy\\\") {\\n        if (modules.length > 0)\\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \\\"entityDesigner\\\" && f.checked)).length <= 0\\n\\n        let isApplicationWillDeploy = appLayerItems.length > 0;\\n        if (isApplicationWillDeploy) {\\n            result = appLayerItems\\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nfunction validateDependencies() {\\n    const checkMap = new Map<string, boolean>();\\n    items.value.forEach(item => {\\n        if(item.type == 'module' && item.children && item.children.length > 0)\\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\\n        else\\n            checkMap.set(item.id, item.checked == true)\\n    })\\n\\n    const mustBeCheckedMap = new Map<string, Array<string>>();\\n    dependencyMap.value?.forEach((deps, id) => {\\n        if(!checkMap.get(id)) \\n            return;\\n\\n        deps.dependedTo.forEach(dependedId => {\\n            if(checkMap.get(dependedId))\\n                return;\\n\\n            if(mustBeCheckedMap.has(id)){\\n                const vals = mustBeCheckedMap.get(id)!\\n                vals.push(dependedId)\\n                mustBeCheckedMap.set(id, vals)\\n            }else {\\n                mustBeCheckedMap.set(id, [dependedId])\\n            }\\n            \\n        });\\n    })\\n\\n    //set deps error text\\n    const [firstItemID] = mustBeCheckedMap.keys();\\n    if(firstItemID) {\\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\\n        dependencyErrorStr.value =`Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\\n    }\\n\\n    return mustBeCheckedMap.size == 0\\n}\\n\\nfunction validateStartScreen() {\\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\\n}\\n\\nfunction findItem (ID: string) {\\n    for(const item of items.value){\\n        if(item.type != 'module' && item.id == ID)\\n            return item;\\n        if(item.type == 'module' && item.children && item.children.length> 0 ){\\n            const f = item.children.find(e => e.id == ID)\\n            if(f) return f\\n        }\\n    }\\n}\\n\\nfunction initDependencies() {\\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>();\\n    const depMap = new Map<string, Array<string>>();\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path) => {\\n            if (item.objectType != \\\"model\\\") { return; }\\n\\n            const isImportedModule = item.parent.objectType == \\\"module\\\" && isModuleImported(item.parent);\\n            \\n            let version: string | undefined;\\n            if(!isImportedModule){\\n                const maxVersion = getItemMaxVersion(item)\\n                if(!maxVersion)\\n                    return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\\n                version = maxVersion;\\n            }\\n            else {\\n                const moduleVersions = importedModuleVersions.value?.get(item.parent.ID)\\n                const moduleVersion = (item.parent as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n\\n                const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\\n                version = importedModuleModel?.version\\n            }\\n\\n            const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\\n\\n            depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\\n    });\\n\\n    \\n    depMap.forEach((dependedTo, modelId) => {\\n        const dependedBy = Array<string>();\\n        depMap.forEach((dependencies, depModelId) => {\\n            if (dependencies.some(depId => depId == modelId))\\n                dependedBy.push(depModelId)\\n        })\\n        map.set(modelId, {dependedBy, dependedTo});\\n    })\\n    dependencyMap.value = map;\\n}\\n\\nfunction isModelDepended(item: ITableData) {\\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\\n    if(!deps) return false;\\n\\n    return deps.some(dep => items.value.some(item => {\\n        if(item.type == 'module' && item.anyChildChecked){\\n            return item.children?.some(child => child.checked && child.id == dep)\\n        }\\n        return item.id == dep && item.checked\\n    }));\\n}\\n\\nasync function handleItems() {\\n    // - modules and module items\\n    items.value = viewModel.studio.items\\n        .filter((item) => item.objectType == \\\"module\\\" && item.children.length > 0)\\n        .map((item) => {\\n            const isImportedModule = isModuleImported(item as IModule);\\n            const moduleVersion = (item as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\\n            const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\\n            const tableData: ITableData = {\\n                id: item.ID,\\n                collapsed: true,\\n                name: item.name,\\n                type: \\\"module\\\",\\n                imported: isImportedModule,\\n                version: moduleVersion,\\n                children: (item as IModule).children\\n                    .filter((child) => child.objectType == \\\"model\\\")\\n                    .map(child => child as IModel)\\n                    .map(child => {\\n                        const childModel: ITableData = {id: child.ID,parentId: item.ID,name: child.name,type: (child as IModel).modelType}\\n                        if(!isImportedModule || child.isUnmodifiable){\\n                            const maxVersion = getItemMaxVersion(child)                         \\n                            return {\\n                                ...childModel,\\n                                checked: maxVersion ? true : child.isUnmodifiable,\\n                                disabled: maxVersion ? false : !child.isUnmodifiable,\\n                                version: child.isUnmodifiable ? 'latest' : maxVersion,\\n                            } as ITableData\\n                        }\\n                        \\n                        const importedModulesModel = relatedModelHistories?.find(e => e.modelID == child.ID)\\n                        return {...childModel, checked: true,disabled: false, version: importedModulesModel?.version } as ITableData\\n                    })\\n            }\\n            handleParentCheckedStatus(tableData);\\n            return tableData;\\n        });\\n\\n    // - App Settings\\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings')!\\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\\n    appSettings && items.value.push({\\n        id: appSettings.ID,\\n        name: appSettings.name,\\n        checked: true,\\n        disabled: false,\\n        type: (appSettings as IModel).modelType,\\n        version: !maxVersion ? 'latest' : maxVersion\\n    });\\n\\n    // - application items\\n    viewModel.studio.items\\n        .filter((item) => item.objectType == \\\"model\\\" && item.modelType != \\\"appSettings\\\" && item.usageType != \\\"appSettings\\\" && item.usageType != \\\"appAssetList\\\")\\n        .map(item => item as IModel)\\n        .forEach(item => {\\n            const maxVersion = getItemMaxVersion(item)\\n            items.value.push({\\n                    id: item.ID,\\n                    name: item.name,\\n                    checked: maxVersion ? true : item.isUnmodifiable,\\n                    disabled: maxVersion ? false : !item.isUnmodifiable,\\n                    type: item.modelType,\\n                    version: item.isUnmodifiable ? 'latest' : maxVersion,\\n                });\\n        });\\n        \\n    // - UI Settings\\n    const uiSettingsID = CryptoHelper.CreateGuid();\\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appSettings\\\") as Array<IModel>;\\n    const uiSettings: ITableData = {\\n        id: uiSettingsID,\\n        collapsed: true,\\n        name: \\\"UI Settings\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        children: uiSettingsModels.map(settings => {\\n            const maxVersion = getItemMaxVersion(settings)\\n            return {\\n                id: settings.ID,\\n                parentId: uiSettingsID,\\n                name: settings.name,\\n                type: settings.modelType,\\n                checked: maxVersion != undefined,\\n                usageType: settings?.usageType,\\n                disabled: !maxVersion,\\n                version: maxVersion,\\n            }\\n        }) as Array<ITableData>,\\n    };\\n    handleParentCheckedStatus(uiSettings);\\n\\n    // - Styled Components\\n    const uiAssetID = CryptoHelper.CreateGuid();\\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \\\"model\\\" && item.usageType == \\\"appAssetList\\\") as Array<IModel>;\\n    const uiAssetList: ITableData = {\\n        id: uiAssetID,\\n        collapsed: true,\\n        name: \\\"Styled Components\\\",\\n        type: \\\"module\\\",\\n        imported: false,\\n        anyChildChecked: true,\\n        allChildChecked: true,\\n        children: appAssetList.map((asset) => ({\\n            id: asset.ID,\\n            parentId: uiAssetID,\\n            name: asset.name,\\n            type: asset.modelType,\\n            checked: true,\\n            usageType: asset?.usageType,\\n        })) as Array<ITableData>,\\n    };\\n    handleParentCheckedStatus(uiAssetList);\\n\\n    items.value.unshift(uiAssetList);\\n    items.value.unshift(uiSettings);\\n}\\n\\nfunction getItemMaxVersion(item: IModel): string | undefined {\\n    if (!modelHistories.value?.has(item.ID))\\n        return undefined;\\n\\n    const versions = modelHistories.value.get(item.ID);\\n    if (!versions)\\n        return undefined;\\n\\n    const findMaxVersion = (versions: Array<string>) => {\\n        const versionNumbers = versions.map(v => {\\n            const parts: Array<string> = v.split(\\\".\\\");\\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\\n        })\\n\\n        versionNumbers.sort((a, b) => b - a);\\n\\n        const maxVersion = versionNumbers[0];\\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\\n    }\\n\\n    return findMaxVersion(versions.map(e => e.version!));\\n\\n}\\nfunction checkMaxVersionOfAllItems() {\\n    let isThereVersion: boolean = false;\\n    items.value.forEach(item => {\\n        if(item.type == \\\"module\\\") {\\n            item.children?.forEach(child => {\\n                if(child.version) {\\n                    isThereVersion = true;\\n                }\\n                \\n            })\\n        }\\n        else {\\n            if(item.version) {\\n                isThereVersion = true;\\n            }\\n        }\\n    })\\n    return isThereVersion;\\n}\\nfunction handleModuleCountCheckboxEvent(value: boolean) {\\n    items.value.filter(e => !e.disabled).forEach((item) => {\\n        item.checked = value;\\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\\n        if (allItemsCheckable) item.allChildChecked = value;\\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\\n    });\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleCollapse(item: ITableData) {\\n    item.collapsed = !item.collapsed;\\n}\\n\\nfunction checkAllDependents(item: ITableData) {\\n    if(item.disabled || item.checked) return;\\n\\n    item.checked = true\\n    item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!);\\n\\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\\n    if(!deps) return;\\n\\n    deps.forEach(dep => {\\n        items.value.forEach(item => {\\n            if(item.type == 'module' && !item.allChildChecked){\\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\\n                willCheckItem && checkAllDependents(willCheckItem)\\n                handleParentCheckedStatus(item)\\n                return;\\n            }\\n\\n            if(!item.checked && item.id == dep) {\\n                checkAllDependents(item)\\n                item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\\n            }\\n        })\\n    });\\n}\\n\\nfunction handleItemCheckEvent(item: ITableData) {\\n    if(item.disabled || isModelDepended(item) || item.name == 'App Settings')\\n        return;\\n\\n    if(item.type != \\\"module\\\") {\\n        if(item.checked){\\n            item.checked = false;\\n            item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\\n        } else {\\n            checkAllDependents(item)\\n        }\\n    } else {\\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\\n            if (item.anyChildChecked) {\\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\\n                item.checked = false;\\n                handleParentCheckedStatus(item);\\n            } else {\\n                item.children.forEach(checkAllDependents);\\n                item.checked = true;\\n            }\\n        }\\n        else {\\n            item.checked = !item.checked;\\n            item.allChildChecked = false;\\n        }\\n    }\\n\\n    validations.value = validate();\\n    props.screenType == \\\"Deploy\\\" && syncPublishTargets();\\n}\\n\\nfunction handleParentCheckedStatus(item: ITableData) {\\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\\n}\\n\\nfunction syncPublishTargets() {\\n    publishTargets.value = []; disabledOptions.value = [];\\n\\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\\n    if (!targets)\\n        return;\\n\\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\\n    if (!isSelectAnyItem) {\\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\\n        const disabledOptionList = Array<IDisabledOptions>();\\n        for (let i = 0; i < publishTargets.value.length; i++) {\\n            disabledOptionList.push({ index: i, cause: \\\"You need to include items to publish.\\\" })\\n        }\\n        disabledOptions.value = disabledOptionList;\\n        return;\\n    }\\n\\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\\n\\n    const disabledOptionList = Array<IDisabledOptions>();\\n    for (let i = 0; i < sortedTargets.length; i++) {\\n        const cause = sortedTargets[i].cause;\\n        if (cause) disabledOptionList.push({ index: i, cause })\\n    }\\n    disabledOptions.value = disabledOptionList;\\n    publishTargets.value = sortedTargets.map(e => e.optionName);\\n\\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \\\"\\\";\\n}\\n\\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\\n    const list = Array<{ optionName: string, cause?: string }>();\\n\\n    Object.keys(targets).forEach(e => {\\n        const key = e as keyof IOrganizationCloud;\\n        const value = targets[key];\\n        const optionName = cloudTargetMap(key)!;\\n        if (!value)\\n            return list.push({ optionName, cause: \\\"You are not authorized to publish to this target.\\\" });\\n\\n\\n        switch (key) {\\n            case \\\"azure\\\":\\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\\n                    if (!items || items.length == 0) { return status; }\\n                    for (const item of items) {\\n                        if (item.checked || item.anyChildChecked) {\\n                            if (item.type == \\\"module\\\") {\\n                                status = traverseSelectedItems(status, item.children);\\n                            }\\n                            if (item.type == \\\"entityDesigner\\\" || item.type == \\\"bpmn\\\" || item.type == \\\"process\\\") {\\n                                status = false;\\n                                break;\\n                            }\\n                        }\\n\\n                    }\\n                    return status;\\n                }\\n\\n                const status = traverseSelectedItems(true, items.value);\\n                if (!status)\\n                    return list.push({ optionName, cause: \\\"Entity and process models cannot be published to this target.\\\" });\\n                break;\\n            case \\\"plateauGCP\\\":\\n                const modulesHasNotAnEDModel =  items.value.filter(e => e.name != \\\"UI Settings\\\").find(e => e.type == \\\"module\\\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \\\"bpmn\\\" || c.type == \\\"process\\\")) && !e.children?.some(c => c.type == \\\"entityDesigner\\\" && c.checked))\\n                if (modulesHasNotAnEDModel)\\n                    return list.push({optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.`})\\n                break;\\n        }\\n\\n        list.push({ optionName });\\n    })\\n\\n    return list;\\n}\\n\\nfunction updateDependencyMap(newVersion: string, item: ITableData) { \\n    const deps = dependencyMap.value?.get(item.id);\\n    dependencyMap.value?.set(item.id, {\\n        dependedBy: deps?.dependedBy || Array<string>(), \\n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\\n    })\\n}\\n\\nfunction versionDialog(item: ITableData) {\\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\\n    const hasAnyVersion = modelHistories.value?.has(item.id);\\n    const options = { clickedNode, cb: (version: string) => { \\n        item.version = version;\\n        updateDependencyMap(version, item);\\n    } } as any;\\n\\n    if (hasAnyVersion) {\\n        options.versions = modelHistories.value?.get(item.id)\\n    }\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/modelVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" }, options\\n    );\\n}\\n\\n\\nfunction moduleVersionDialog(item: ITableData) {\\n    dialog.showDialog(\\n        defineAsyncComponent(() => import(\\\"../../application/moduleVersionDialog.vue\\\")),\\n        { closable: true, title: \\\"Change Version\\\", width: \\\"1080px\\\", maxHeight: \\\"500px\\\", overflow: \\\"auto\\\" },\\n        { module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => { \\n            item.version = moduleVersion.version;\\n            item.children?.forEach(child => {\\n                const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\\n                child.version = modulesModel?.version\\n                updateDependencyMap(modulesModel?.version!, child);\\n            })\\n        }}\\n    );\\n}\\n\\nfunction close() {\\n    emit(\\\"close\\\");\\n}\\n\\nasync function save() {\\n    executor.execute(\\n        async () => {\\n            const initAsGroup = async () => {\\n                const groupID = CryptoHelper.CreateGuid();\\n                await initHistory(groupID);\\n                await packJob(groupID);\\n                return groupID;\\n            }\\n\\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\\n\\n            switch (props.screenType) {\\n                case \\\"Export\\\":\\n                    if(isFlowBackend) {\\n                        const deployItems = await createAzureDeployItems();\\n                        await packJobsUseCase.createPackJobs([{\\n                            appID: viewModel.studio.appId,\\n                            exportType: \\\"qui\\\",\\n                            selectionData: deployItems\\n                        }]);\\n                        break;\\n                    }\\n\\n                    const groupID = await initAsGroup();\\n                    await createExportJob(groupID);\\n                    break;\\n                case \\\"Deploy\\\":\\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\\n                        case \\\"plateauGCP\\\":\\n                            const groupID = await initAsGroup();\\n                            await createDeployJob(groupID);\\n                            break;\\n                        case \\\"azure\\\":\\n                            const deployItems = await createAzureDeployItems();\\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\\n                            break;\\n                    }\\n            }\\n            const userMobileUsage = viewModel.user?.mobileUsage;\\n            const appMobileUsage = currentApp.value?.mobileUsage;\\n            if(props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \\\"backofficeUpdate\\\"})\\n                \\n            }\\n            emit(\\\"close\\\");\\n        },\\n        { loading: true });\\n}\\n\\nasync function createAzureDeployItems() {\\n    const deployItems: Array<IExportItem> = [];\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\\n        if (!items || items.length == 0) { return; }\\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\\n            if (item.type == \\\"module\\\") {\\n                traverseSelectedItems(item.children);\\n                return;\\n            }\\n\\n            const itemMap = itemIdObj[item.id];\\n\\n            const deployItem: IExportItem = {\\n                id: item.id,\\n                name: jobUtils.getFileFullname(itemMap.item),\\n                path: itemMap.path,\\n                type: jobUtils.getItemType(itemMap.item),\\n                ver: item.version || \\\"latest\\\",\\n                isRootPage: itemMap.item.isRootPage,\\n                modulePrefix: itemMap.prefix,\\n                ownerType: 'application',\\n                ownerName: viewModel.studio.appName,\\n                size: itemMap.item.size,\\n                createDate: itemMap.item.createDate,\\n            };\\n            deployItems.push(deployItem)\\n        });\\n    };\\n\\n    traverseSelectedItems(items.value);\\n\\n    return deployItems;\\n}\\n\\nasync function initHistory(groupID: string) {\\n    return qcloudApi.initPublishHistory({\\n        appID: viewModel.studio.appId,\\n        ID: groupID,\\n        isMultiStep: true,\\n        type: props.screenType == \\\"Deploy\\\" ? \\\"publish\\\" : \\\"download\\\",\\n        cloudProvider: props.screenType == \\\"Deploy\\\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\\n        platform: props.platformSelection\\n    });\\n}\\n\\nasync function packJob(groupID: string) {\\n    let exportItemMap = new Map<string, Array<IExportItem>>();\\n    const appName = viewModel.studio.appName;\\n\\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\\n        if (item.objectType != \\\"model\\\") { return; }\\n        itemIdObj[item.ID] = { item, path, prefix };\\n        return item;\\n    });\\n\\n    const createExportObject = (tableItem: ITableData) => {\\n        const item = itemIdObj[tableItem.id].item;\\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == item.modelType);\\n        const retVal: IExportItem = {\\n            id: tableItem.id,\\n            ver: tableItem.version!,\\n            type: jobUtils.getItemType(item),\\n            path: itemIdObj[tableItem.id].path,\\n            modulePrefix: itemIdObj[tableItem.id].prefix,\\n            name: jobUtils.getFileFullname(item),\\n            ownerType: isAppItem ? 'application' : (item.parent.objectType as \\\"module\\\" | \\\"application\\\"),\\n            ownerName: isAppItem ? appName : item.parent.name,\\n        };\\n        return retVal;\\n    }\\n\\n    const addToExportItem = (key: string, obj: IExportItem) => {\\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\\n        let items = exportItemMap.get(key);\\n        if(items && items.length > 0){\\n            items.push(obj);\\n            exportItemMap.set(key, items);\\n        } else\\n            exportItemMap.set(key, [obj]);\\n    }\\n\\n    items.value.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\\n        if (asset.type == 'module') {\\n            asset.children!.filter(e => e.checked).forEach(child => {\\n                const obj = createExportObject(child);\\n                if (obj.type == \\\"entityDesigner\\\")\\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\\n\\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\\n            });\\n        } else {\\n            const obj = createExportObject(asset);\\n            if (asset.type == 'qjson'){\\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \\\"model\\\" && i.modelType == \\\"qjson\\\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\\n                obj.isRootPage = isRootPage ? true : undefined;\\n            }\\n            addToExportItem(appName, obj);\\n        }\\n    })\\n\\n    let jobs = Array<ICreateExportJobParam>();\\n    exportItemMap.forEach((v, k) => {\\n        jobs.push({\\n            appID: viewModel.studio.appId,\\n            exportType: \\\"qui\\\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \\\"model\\\":  \\\"qui\\\"\\n            selectionData: v,\\n            cause: props.screenType == 'Export' ? 'download': \\\"publish\\\",\\n            layer: 0,\\n            groupID: groupID,\\n            platformSelection: props.platformSelection\\n        })\\n    })\\n    \\n    await packJobsUseCase.createPackJobs(jobs);\\n}\\n\\nasync function createExportJob(groupID: string) {\\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\\n        appID: viewModel.studio.appId,\\n        exportType: \\\"qui\\\",\\n        selectionData: [],\\n        layer: 1,\\n        groupID: groupID\\n    });\\n}\\n\\nasync function createDeployJob(groupID: string) {\\n    //1-(n) L1- deployJob(build)\\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\\n        .then(jobs => jobs.jobs.map(e => {\\n            const jobData = e.jobData as IExportJobData;\\n            return {\\n                ownerName: jobData.items[0].ownerName,\\n                jobID: e.jobID,\\n                type: jobData.items[0].ownerType,\\n                mainDir: getDeployableArchiveRoot(jobData)\\n            }\\n        }));\\n\\n    if (!packages || packages.length <= 0)\\n        return;\\n\\n    let buildJobs = Array<ICreateDeployJobParam>();\\n    packages.forEach(pack => {\\n        buildJobs.push({\\n            appID: viewModel.studio.appId,\\n            type: \\\"build\\\",\\n            package: {\\n                type: pack.type as DeployType,\\n                name: pack.ownerName!,\\n                mainDir: pack.mainDir,\\n                zip: `${pack.jobID}.zip`,\\n            },\\n            layer: 1,\\n            groupID: groupID\\n        })\\n    })\\n\\n    await deployJobsUseCase.createBuildJobs(buildJobs);\\n\\n    //2-(1) L2- deployJob(deployment)\\n    let jobParam: ICreateDeployJobParam = {\\n        appID: viewModel.studio.appId,\\n        type: \\\"deployment\\\",\\n        deployConfig: {\\n            process: {\\n                configModelIDs: getProcessConfigList(),\\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \\\"bpmn\\\"))\\n            }\\n        },\\n        layer: 2,\\n        groupID: groupID,\\n        platformSelection: props.platformSelection\\n    }\\n\\n    await deployJobsUseCase.startDeploymentJob(jobParam);\\n}\\n\\nfunction getProcessConfigList() {\\n    let processConfigList = Array<IProcessConfigModelItem>();\\n    items.value.forEach((asset) => {\\n        if (asset.type == \\\"module\\\" && asset.anyChildChecked && asset.children) {\\n            const usingService = asset.children.find(c => c.type == \\\"entityDesigner\\\");\\n            if (!usingService)\\n                return;\\n\\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\\n            asset.children.forEach(child => {\\n                if (child.checked && child.type == \\\"process\\\") {\\n                    processConfigList.push({\\n                        moduleName: serviceName,\\n                        model: {\\n                            id: child.id,\\n                            name: child.name,\\n                            version: child.version!\\n                        }\\n                    })\\n                }\\n            })\\n        }\\n    })\\n    return processConfigList;\\n}\\n\\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\\n    if (jobData.items[0].ownerType == \\\"module\\\") {\\n        let edModel = jobData.items.find(e => e.type == \\\"entityDesigner\\\");\\n        if (!edModel)\\n            throw new Error(\\\"!!! this module cannot deploy. Because its have not a service\\\");\\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\\n    }\\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\\n}\\n\\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \\\"Public Cloud\\\", plateauGCP: \\\"Plateau Platform Playground\\\" };\\n    if (pureVal) {\\n        return Object.keys(map).find(e => {\\n            if (map[e as keyof IOrganizationCloud] === name) {\\n                return true;\\n            }\\n        })\\n    } else {\\n        let key = Object.keys(map).includes(name);\\n        if (!key)\\n            return;\\n        return map[name as keyof IOrganizationCloud];\\n    }\\n}\\n\\nfunction onTargetSelect(value: string) {\\n    selectedTarget.value = value\\n}\\n\\nconst isModuleImported = (item: IModule) => {\\n    const hasAVersion = item.relatedApplications.find(e => e.applicationID == viewModel.studio.appId)?.importedVersion;\\n    if(item.mainOwner != viewModel.studio.appId && item.relatedApplications.at(0)?.applicationID != viewModel.studio.appId && hasAVersion)\\n        return true;\\n    return false;\\n}\\n\\n</script>\\n\\n\\n<style scoped>\\n.container {\\n    padding: 32px 20px 20px;\\n}\\n\\n.settings-container {\\n    position: relative;\\n    top: 0px;\\n    left: 0px;\\n}\\n\\n.custom-text {\\n    /* position: absolute; */\\n    font-family: 'Roboto';\\n    font-style: normal;\\n    font-weight: 500;\\n    font-size: 15px;\\n    line-height: 18px;\\n    /* left: 24px; */\\n    color: #212121;\\n}\\n\\n/* .custom-text.title{\\n    top: 92px;\\n}\\n\\n.custom-text.environment{\\n    top: 174px;\\n} */\\n\\n.radio-button {\\n    position: absolute;\\n    top: 60px;\\n    left: 20px;\\n    cursor: pointer;\\n}\\n\\n.radio-text {\\n    position: absolute;\\n    top: 59px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n    user-select: none;\\n    cursor: pointer;\\n}\\n\\n.existing-app-url {\\n    position: absolute;\\n    width: 760px;\\n    height: 40px;\\n    top: 114px;\\n    left: 20px;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #bcbcbc;\\n    border-radius: 4px;\\n    font: normal normal normal 14px/19px Roboto;\\n    letter-spacing: 0px;\\n    padding: 10px 0px 10px 10px;\\n}\\n\\n.url-error {\\n    border: 1px solid red;\\n}\\n\\n.url-disable {\\n    opacity: 0.5;\\n}\\n\\n.existing-app-url::placeholder {\\n    color: #bcbcbc;\\n    user-select: none;\\n}\\n\\n.modules-selected-checkbox {\\n    cursor: pointer;\\n}\\n\\n.modules-selected-text {\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #757575;\\n    margin: 0 0 13px 30px;\\n    ;\\n}\\n\\n/* .modules-selected-text.deploy {\\n    top: 257px;\\n} */\\n\\n.text-number {\\n    font: normal normal bold 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.modules-datatable {\\n    width: 760px;\\n    height: 288px;\\n    border: 1px solid #bcbcbc;\\n    overflow-x: hidden;\\n    overflow-y: auto;\\n    margin-bottom: 20px;\\n}\\n\\n/* .modules-datatable.deploy {\\n    top: 286px;\\n} */\\n\\n.modules-datatable::-webkit-scrollbar {\\n    width: 4px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb {\\n    background: #bcbcbc 0% 0% no-repeat padding-box;\\n    border-radius: 10px;\\n}\\n\\n.modules-datatable::-webkit-scrollbar-thumb:hover {\\n    background: #555;\\n}\\n\\n.row-container {\\n    width: 100%;\\n    height: 36px;\\n    position: relative;\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #e0e0e0;\\n}\\n\\n.chevron {\\n    position: absolute;\\n    left: 4px;\\n    color: #757575;\\n    font-size: 24px;\\n}\\n\\n.chevron.disabled {\\n    pointer-events: none;\\n    color: #D5D5D5;\\n}\\n\\n.module-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 43px;\\n    cursor: pointer;\\n}\\n\\n.module-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 69px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.module-name.imported {\\n    top: 10px;\\n    left: 87px;\\n}\\n.module-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-checkbox {\\n    position: absolute;\\n    top: 10px;\\n    left: 59px;\\n    cursor: pointer;\\n}\\n\\n.model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 85px;\\n}\\n\\n.app-tier-model-icon {\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    top: 6px;\\n    left: 69px\\n}\\n\\n.app-tier-model-name {\\n    position: absolute;\\n    top: 10px;\\n    left: 87px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.app-tier-model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.model-name {\\n    position: absolute;\\n    top: 9px;\\n    left: 103px;\\n    font: normal normal normal 14px/19px Roboto;\\n    color: #212121;\\n}\\n\\n.model-name.disabled {\\n    color: #D5D5D5;\\n}\\n\\n.version-text {\\n    margin: 10px 7px 10px auto;\\n    display: table;\\n    font: normal normal normal 12px/16px Roboto;\\n    color: #757575;\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.version-text.disabled {\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.version-icon {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #D5D5D5;\\n}\\n\\n.version-icon.disabled {\\n    font: normal normal normal 16px/19px Material Design Icons;\\n    color: #EEEEEE;\\n    pointer-events: none;\\n    cursor: pointer;\\n}\\n\\n.footer {\\n    position: relative;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: end;\\n}\\n\\n.footer.deploy {\\n    position: relative;\\n    width: 100%;\\n}\\n\\n.footer.export {\\n    margin-top: 102px;\\n}\\n\\n.cancel-button {\\n    border-radius: 4px;\\n    user-select: none;\\n    font-style: normal;\\n    font-weight: 500;\\n    font-family: \\\"ROBOTO\\\";\\n    font-size: 15px;\\n    color: #757575;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n\\n\\n.save-button {\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    user-select: none;\\n    font-weight: 500;\\n    font-size: 15px;\\n    color: #ffffff;\\n    padding: 10px 16px;\\n    cursor: pointer;\\n}\\n\\n.mobile-publish-text,\\n.web-publish-text {\\n    padding: 5px 12px;\\n    margin-bottom: 52px;\\n    width: 100%;\\n    color: #757575;\\n    font-size: 14px;\\n    background: #F5F5FA;\\n    border-radius: 4px;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.mobile-publish-text i,\\n.web-publish-text i {\\n    font-size: 24px;\\n    color: #151233;\\n    margin-right: 4px;\\n}\\n\\n.save-button.deploy {\\n    padding: 10px 16px;\\n}\\n\\n.button-disable .save-button {\\n    color: #757575;\\n    cursor: default;\\n}\\n\\n.button-disable .save-button:hover+.button-tooltip,\\n.start-screen:hover .button-tooltip,\\n.row-container:hover .button-tooltip,\\n.publish-info:hover .button-tooltip {\\n    visibility: visible;\\n    transition: opacity 0.3s ease-out 1s;\\n    opacity: 1;\\n}\\n\\n.button-tooltip {\\n    visibility: hidden;\\n    position: absolute;\\n    background: #757575;\\n    color: #FFFFFF;\\n    font-size: 11px;\\n    font-family: 'Roboto';\\n    text-align: center;\\n    border-radius: 4px;\\n    letter-spacing: 0.2px;\\n    padding: 6px 8px 6px 8px;\\n    top: 56px;\\n    left: 63px;\\n    opacity: 0;\\n}\\n\\n.publish-info {\\n    color: #757575;\\n    font-size: 20px;\\n    margin-left: 10px;\\n}\\n\\n.qjson-color {\\n    color: #449dd1;\\n}\\n\\n.yaml-color {\\n    color: #449dd1;\\n}\\n.namedcomp-color {\\n    color: #212121;\\n}\\n.app-settings-color {\\n    color: #151233;\\n}\\n\\n.js-color {\\n    color: #449dd1;\\n}\\n\\n.css-color {\\n    color: #151233;\\n}\\n\\n.process-color {\\n    color: #007c77;\\n}\\n\\n.bpmn-color {\\n    color: #007c77;\\n}\\n\\n.entity-designer-color {\\n    color: #e9724c;\\n}\\n\\n.select-environment {\\n    width: 100%;\\n    font-size: 15px;\\n    height: 40px;\\n    line-height: 40px;\\n    margin-top: 4px\\n}\\n</style>\\n\\n<style>\\n.selected-environment {\\n    background-color: transparent;\\n    border-radius: 4px;\\n    border: 1px solid #BCBCBC;\\n    color: #212121;\\n    padding-left: 12px;\\n}\\n\\n.custom-placeholder:empty:before {\\n    color: #BCBCBC !important;\\n    font-weight: 400;\\n}\\n\\n.custom-select .items .option {\\n    font-size: 14px;\\n    padding-left: 12px;\\n    line-height: 32px;\\n}\\n\\n.custom-select .items .option:hover {\\n    background-color: #EEEEEE;\\n    color: #212121;\\n}\\n\\n.custom-select .items .option.disabled:hover {\\n    background-color: #FFFFFF;\\n    color: #212121;\\n}\\n\\n.custom-select.select-environment .items {\\n    margin-top: 4px;\\n    color: #212121;\\n    border-radius: 4px;\\n    border: 1px solid #E3E3E3;\\n    overflow: hidden;\\n    background-color: #FFFFFF;\\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\\n    position: static !important;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export class CryptoHelper {\n    private static guidCounter = 0;\n\n    /**\n     * \n     * @param base number layout (number of distinct digits) (10'luk sayı düzeni, 16'lık sayı düzeni)\n     * @param length length of word. Max value: 16\n     */\n    public static GetRandomWord(base: number, length: number) {\n        return Math.random().toString(base).substring(2, length + 2);\n    }\n\n    /**\n     * Ex: be945482-jf10-40d1-a50d-rzxa2c41fdcu\n     */\n    public static CreateGuid() {\n        return [8, 4, 4, 4, 6].map(length => this.GetRandomWord(36, length)).join(\"-\") + ((++CryptoHelper.guidCounter) % 2150000000).toString(36);\n    }\n}","\nexport class PlateauHelper {\n    public static purify = (str: string) => str.replace(/[^a-zA-Z0-9]/g, \"\").toLowerCase();\n\n    public static getPlateauEnvironmentName = (envPrefix: string, appName: string) => {\n        if(!envPrefix || !appName)\n            throw new Error(\"Environment name prefix or application name not found!!!\" );\n\n        envPrefix = (envPrefix.endsWith(\"-\") ? envPrefix : (envPrefix + \"-\")).toLowerCase();\n        appName = PlateauHelper.purify(appName);\n        return `${envPrefix}${appName}`;\n    }\n\n    public static getQuiPackageNameFromAppName = (appName: string) => `${PlateauHelper.purify(appName)}-qui`;\n\n    public static getApplicationUINameFromQuiPkg = (quiPackageName: string) => PlateauHelper.purify(quiPackageName.replace(\"-qui\", \"ui\"));\n    \n    public static getApplicationHostNamePrefix = (appName: string) => `${PlateauHelper.purify(appName)}ui`;\n\n    public static getServiceNameFromModel = (modelName: string) => PlateauHelper.purify(modelName.replace(\".dm\", \"\"));\n}\n","import { IQJsonAdditionals, ModelAdditionals, ModelType } from \"./quickCloud\";\n\ntype ValueOf<Type> = Type extends any ? Type[keyof Type] : never;\ntype FieldValueOf<Type extends typeof typeSafety, Field extends keyof Type[keyof Type]> = Type[keyof Type][Field]\nexport type EditorModelTypes = ValueOf<FieldValueOf<typeof EditorConsts, \"modelKeys\">>;\nlet typeSafety: Record<string, { modelKeys: Record<string, string> }>;\nexport const EditorConsts = typeSafety = {\n    quick: {\n        modelKeys: {\n            self: \"qjson\" as \"qjson\",\n        }\n    },\n    flow: {\n        modelKeys: {\n            design: \"flow-design\" as \"flow-design\",\n            runtime: \"flow-runtime\" as \"flow-runtime\",\n        }\n    },\n    flowEntity: {\n        modelKeys: {\n            single: \"flow-entity\" as \"flow-entity\",\n        }\n    },\n};\n\ninterface ModelVisualInfo {\n    icon: string;\n    color: string;\n}\nconst cssJsTsYaml: ModelVisualInfo = { color: \"#449DD1\", icon: \"mdi mdi-cog-outline\" };\nconst jpegJpgPngSvgGif: ModelVisualInfo = { color: \"#212121\", icon: \"mdi mdi-image-outline \" }\nconst modelVisuals: Record<ModelType, ModelVisualInfo | Error | ((additional: ModelAdditionals | undefined) => ModelVisualInfo)> = {\n    qjson: (additionals) => {\n        if (additionals && (additionals as IQJsonAdditionals).qjsonType == \"quickComponent\") {\n            return { color: \"#449DD1\", icon: \"mdi mdi-shape-outline\" };\n        }\n        return { color: \"#449DD1\", icon: \"mdi mdi-palette\" };\n    },\n    css: { color: \"#151233\", icon: \"mdi mdi-music-accidental-sharp\" },\n    js: cssJsTsYaml,\n    ts: cssJsTsYaml,\n    yaml: cssJsTsYaml,\n    entityDesigner: { color: \"#E9724C\", icon: \"mdi mdi-database\" },\n    bpmn: { color: \"#007C77\", icon: \"mdi mdi-vector-polyline\" },\n    process: { color: \"#007C77\", icon: \"mdi mdi-auto-fix\" },\n    flow: { color: \"#007C77\", icon: \"mdi mdi-step-forward\" },\n    flowEntity: { color: \"blue\", icon: \"mdi mdi-step-forward\" },\n    namedComponent: { color: \"#212121\", icon: \"mdi mdi-cube-outline\" },\n    step: new Error(\"unimplemented for namedComponent\"),\n    jpeg: jpegJpgPngSvgGif,\n    jpg: jpegJpgPngSvgGif,\n    png: jpegJpgPngSvgGif,\n    svg: jpegJpgPngSvgGif,\n    gif: jpegJpgPngSvgGif,\n    woff: { color: \"#007C77\", icon: \"mdi-format-font,\" },\n    woff2: { color: \"#007C77\", icon: \"mdi-format-font,\" },\n    ttf: { color: \"#007C77\", icon: \"mdi-format-font,\" },\n    lottie: jpegJpgPngSvgGif,\n    appSettings: new Error(\"unimplemented for appSettings\"),\n    placeholder: { color: \"#212121\", icon: \"mdi mdi-folder-open\" },\n    json: new Error(\"unimplemented for json\"),\n}\n\nexport class ModelContants {\n    public static getModelVisualInfo(modelType: ModelType, modelAdditionals: ModelAdditionals | undefined): ModelVisualInfo {\n        const retVal = modelVisuals[modelType];\n        if (retVal instanceof Error) { throw retVal; }\n        return typeof retVal == \"function\" ? retVal(modelAdditionals) : retVal;\n    }\n}","import { IAppCloud, IOrganizationCloud } from \"../clean/domain/useCases/ICloudProvider\";\n\n\nexport const DEPENDED_MODEL_KEYS = [\"qjson\", \"named\", \"img\",  \"woff\", \"woff2\", \"ttf\"];\nexport const DEPENDED_IMAGE_KEYS = [ \"png\", \"jpg\", \"jpeg\", \"svg\", \"gif\"];\nexport const APP_ITEM_CONTENT_TYPES = [\"qjson\", \"css\" , \"png\" , \"jpg\" , \"jpeg\" , \"svg\" , \"gif\" , \"lottie\" , \"json\", \"woff\", \"woff2\", \"ttf\"];\n\nexport type ObjectID = string; // GUID\n//export type AuthenticationTypes = [\"QCLOUDAUTH\", \"ADFS\"];\nexport type AuthenticationType = \"QCLOUDAUTH\" | \"ADFS\";\nexport type ModelHistoryType = \"update\" | \"delete\" | \"checkin\" | \"publish\" | \"ownerItemDelete\";\nexport type DomainObjectType = \"domain\";\nexport type ApplicationObjectType = \"application\";\nexport type ModuleObjectType = \"module\";\nexport type FolderObjectType = \"folder\";\nexport type ModelObjectType = \"model\";\nexport type AppSettingsObjectType = \"appSettings\";\nexport type AppAssetObjectType = \"appAssetList\";\nexport type QJsonType = \"qjson\" | \"template\" | \"pageTemplate\" | \"quickComponent\";\nexport type ModelResponseType = \"info\" | \"body\" | \"full\";\nexport type ContentType = \"qjson\" | \"js\" | \"ts\" | \"yaml\" | \"css\" | \"png\" | \"jpg\" | \"jpeg\" | \"svg\" | \"gif\" | \"lottie\" | \"woff\" | \"woff2\" | \"ttf\" | \"json\";\nexport type ModelType = ContentType | \"bpmn\" | \"process\" | \"entityDesigner\" | \"namedComponent\" | \"flow\" | \"step\" | \"flowEntity\" | \"appSettings\" | \"placeholder\";\nexport type UsageType = AppSettingsObjectType | AppAssetObjectType;\nexport type ModuleType = \"basic\";\nexport type AllCreateObjectTypes = ModelType | FolderObjectType | ModuleObjectType;\nexport type AppSettingsModelKeys = \"settings\" | \"componentList\" | \"containerServices\" | \"pipeline\" | \"alert\" | \"loading\" | \"globalLocalization\" | \"localProxy\" | \"style\" | \"rootqjson\" | \"asset\" | \"appSettings\";\nexport type ExtensionType = \"png\" | \"jpg\" | \"jpeg\" | \"svg\" | \"gif\" | \"json\" | \"woff\" | \"woff2\" | \"ttf\";\nexport type ModuleShareType = 'reference' | 'version';\n\nexport const UISettingsType = {\n    alert: \"Alert Component\",\n    pipeline: \"Pipeline\",\n    loading: \"Loading Component\",\n    settings: \"Settings File\",\n    localProxy: \"Local Proxy File\",\n    contSvc: \"Container Services File\",\n    css: \"Style File\",\n    compList: \"Component List\",\n    globalLocalization: \"Global Localization\",\n    assetList: \"Asset List\"\n} as const;\nexport type UISettingsType = typeof UISettingsType[keyof typeof UISettingsType];\n\nexport interface ICloudObject {\n    ID: ObjectID;\n    shortID24?: string; //TODO: delete\n    name: string;\n    ownerUser: ObjectID;\n    createDate: Date;\n    createdBy: ObjectID;\n    updateDate?: Date;\n    updatedBy?: ObjectID;\n    isPermanent?: boolean;\n    priority?: number;\n    path?: Array<String>;\n}\n\nexport interface IMicroserviceDefinition {\n    name: string;\n    version: string;\n}\n\nexport interface IApplicationDetails {\n    moduleCount: number;\n    pageCount: number;\n    pageTemplateCount: number;\n    templateCount: number;\n    processCount: number;\n    entityCount: number;\n    uiSettingsCount: number;\n}\n\nexport interface IApplicationExportSettings {\n    selectedType: \"download\" | \"fileSystem\";\n}\n\nexport interface IApplicationLogoInfo {\n    hostUrl: string;\n    path: string;\n    updateDate: Date;\n}\n\nexport interface IApplication extends ICloudObject {\n    /**\n     * This is the RESERVED ID which should be used for publishments.\n     */\n    publishmentId?: ObjectID;\n    objectType: ApplicationObjectType;\n    //logo?: string;\n    logoInfo?: IApplicationLogoInfo;\n    color?: string;\n    description?: string;\n    store?: {\n        productID: ObjectID;\n        productVerID: ObjectID;\n    };\n    cloud?: IAppCloud;\n    exportSettings?: IApplicationExportSettings;\n    modifyDate?: Date;\n    firstPublishDate?: Date;\n    lastPublishDate?: Date;\n    mobileUsage?: IUpdateMobileUsage;\n}\n\nexport interface IModuleRelatedApplicationItem {\n    applicationID: ObjectID;\n    importedVersion?: string;\n}\n\nexport interface IModuleRelatedModelItem {\n    modelID: ObjectID;\n    version: string;\n}\n\nexport interface IModule extends ICloudObject {\n    description?: string;\n    modifyDate?: Date;\n    prefix?: string;\n    objectType: ModuleObjectType;\n    relatedApplications: Array<IModuleRelatedApplicationItem>;\n    moduleType?: ModuleType;\n    store?: {\n        productID: ObjectID;\n        productVerID: ObjectID;\n    };\n    mainOwner: ObjectID;\n    shareType?: ModuleShareType;  //migrate: related app i birden fazla olanlar icin 'reference'\n    currentVersion?: string;\n    lastReleasedVersion?: string;\n}\n\nexport interface IModuleVersion extends ICloudObject {\n    moduleID: ObjectID;\n    version: string;\n    relatedApplications?: Array<IModuleRelatedApplicationItem>;\n    relatedModelHistories: Array<IModuleRelatedModelItem>;\n    description?: string;\n}\n\nexport interface IModelCopyInfo {\n    sourceModelID: ObjectID;\n    date: Date;\n    user: string;\n}\n\nexport type AllModelAdditionalTypes = IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals | IFlowModelAdditionals | IStepModelAdditionals | IAppSettingsModelAddtionals\n\nexport interface IModelInfo extends ICloudObject {\n    objectType: ModelObjectType;\n    ownerItem: ObjectID;\n    ownerType: ApplicationObjectType | ModuleObjectType;\n    modelType: ModelType;\n    extension?: ExtensionType;\n    modelAdditionals: AllModelAdditionalTypes;\n    key?: AppSettingsModelKeys;\n    checkouts?: Array<IModelCheckout>;\n    usageType?: UsageType;\n    copyFromInfo?: IModelCopyInfo;\n    size?: number;\n    store?: {\n        productVerID?: ObjectID;\n        productVerContentID?: ObjectID;\n    };\n    latestPublishedVer?: number;\n    dependentModels?: Array<IDependentModel>;\n    path?: Array<String>;\n    modelID?: string;\n    version?: string;\n}\n\nexport interface IDependentModel {\n    modelId: string;\n}\n\nexport interface IModelBodyObject {\n    key: string;\n    model: any;\n}\n\nexport interface IModelBody extends IModelBodyObject {\n    modelID: ObjectID;// this variable cannot change by version.\n    informationId: ObjectID; //if model is versioned model; informationId = histID\n    createDate: Date;\n    size?: number;\n}\n\nexport interface IModelCheckout {\n    user: string;\n    date: Date;\n}\n\nexport interface IQJsonAdditionals {\n    qjsonType: QJsonType;\n    image?: string;\n    isRootPage?: boolean;\n}\n\nexport interface IProcessWizardAdditionals { }\n\nexport interface IBpmnAdditionals {\n    isAutoGenerated?: boolean; //undefined & false => auto generated | true => manuel added\n    isModifiedByUser?: boolean;\n}\n\nexport interface IEntityDesignerAddtionals { }\n\nexport interface IFlowModelAdditionals { }\nexport interface IStepModelAdditionals {\n    compatibilities: { ui: boolean; service: boolean; };\n}\n\nexport interface IAppSettingsModelAddtionals { }\n\nexport type ModelAdditionals = IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals | IAppSettingsModelAddtionals;\n\nexport interface IModelHistoryInfo extends ICloudObject, IModelInfo {\n    modelID: ObjectID;\n    historyType: ModelHistoryType;\n    version?: string;\n    shortComment?: string;\n    comment?: string;\n    dependentModels?: Array<IDependentModel>;\n}\n\nexport interface ISystemUser extends ICloudObject {\n    mailAddress: string;\n    loginType: AuthenticationType;\n    password?: string;\n}\n\nexport interface IQCloudLogItem {\n    ID?: string;\n    detail: any;\n    stack?: string;\n    state?: { app: { ID: string; name: string }; openItemIDs?: Array<string>; currentItemID?: string };\n    level: \"debug\" | \"info\" | \"log\" | \"trace\" | \"warning\" | \"error\";\n    type: \"business\" | \"technical\";\n}\n\nexport interface IQCloudLogDBItem extends IQCloudLogItem {\n    date: Date;\n    user?: { ID: ObjectID; name?: string; email: string };\n}\n\n\nexport interface ITenantDefinitions extends ICloudObject {\n    value: any;\n    isActive: boolean;\n    objectType?: AppSettingsObjectType | \"deploySettings\" | \"appTemplate\";\n    targetObjectType?: ApplicationObjectType | DomainObjectType;\n    contentType?: ContentType;\n    description?: string;\n    key?: AppSettingsModelKeys;\n}\n\nexport type ItemLimitActionType = \"deleteOldest\" | \"stopAdding\";\n\nexport interface IItemLimitationDetail {\n    value: number;\n    action?: ItemLimitActionType;\n}\n\nexport interface IItemLimitations {\n    history: {\n        maxCountPerModel: IItemLimitationDetail;\n        maxCountPerModule: IItemLimitationDetail;\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    model: {\n        maxCountPerModule: IItemLimitationDetail;\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    module: {\n        maxCountPerApplication: IItemLimitationDetail;\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n    application: {\n        maxCountPerTenant: IItemLimitationDetail;\n    };\n}\n\n// let itemLimittations: IItemLimitations = {\n//     history: {\n//         maxCountPerModel: { value: -1 },\n//         maxCountPerModule: { value: -1 },\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     model: {\n//         maxCountPerModule: { value: -1 },\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     module: {\n//         maxCountPerApplication: { value: -1 },\n//         maxCountPerTenant: { value: -1 },\n//     },\n//     application: {\n//         maxCountPerTenant: { value: -1 },\n//     },\n// }\n\n// const items = [\n//     {targetobject: \"history\", limitkey: \"maxCountPerModel\", value: 10, limitaction: \"deleteOldest\"},\n//     {targetobject: \"model\", limitkey: \"maxCountPerApplication\", value: 20, limitaction: \"deleteOldest\"}\n// ];\n\n// items.forEach(item => {\n//     const itemLimit = itemLimittations as any;\n//     itemLimit[item.targetobject][item.limitkey] = {value: item.value, action: item.limitaction};\n//     itemLimittations = itemLimit as IItemLimitations;\n// });\n\n// const dic:Record<string, Array<{text: string, value: string}>> = {\n//     \"history\": [\n//         {text: \"maxCountountPerModel\", value: \"maxCountountPerModel\"},\n//         {text: \"maxCountountPerModule\", value: \"maxCountountPerModule\"},\n//         {text: \"maxCountountPerApplication\", value: \"maxCountountPerApplication\"},\n//         {text: \"maxCountountPerTenant\", value: \"maxCountountPerTenant\"},\n//     ],\n//     \"model\": [\n//         {text: \"maxCountountPerModule\", value: \"maxCountountPerModule\"},\n//         {text: \"maxCountountPerApplication\", value: \"maxCountountPerApplication\"},\n//         {text: \"maxCountountPerTenant\", value: \"maxCountountPerTenant\"}\n//     ],\n//     \"module\": [],\n//     \"application\": []\n// }\n\n\nexport interface IOrganizationActions {\n    publish?: {\n        targets?: Record<keyof IOrganizationCloud, boolean>;\n    };\n    entityGenerationDomain?: \"softtech\" | \"isbank\";\n}\n\nexport type ITreeviewItemType = ModelType | \"module\" | \"folder\";\n\nexport interface ITreeviewItem {\n    id: string;\n    parentId?: string;\n    name: string;\n    priority: number;\n    type: ITreeviewItemType;\n    createDate: Date;\n    path: Array<String>;\n    shortName?: string;\n    modelAdditionals?: IQJsonAdditionals | IProcessWizardAdditionals | IBpmnAdditionals | IEntityDesignerAddtionals;\n    children?: Array<ITreeviewItem>;\n    moduleType?: ModuleType;\n    usageType?: UsageType;\n    checkouts?: Array<IModelCheckout>;\n    relatedApplications?: IModule[\"relatedApplications\"];\n    size?: number;\n    prefix?: string;\n    dependentModels?: Array<IDependentModel>;\n    moduleMainOwner?: ObjectID;\n    moduleShareType?: ModuleShareType;\n    currentModuleVersion?: string;\n    currentModelVersion?: string;\n    lastReleasedModuleVersion?: string;\n}\n\nexport interface IScreenItem {\n    id: string;\n    fileName: string;\n    ownerItem: string;\n}\n\nexport interface IApplicationCard extends IApplication {\n    moduleCount: number;\n    pageCount: number;\n    templateCount: number;\n}\n\nexport interface IPimQJsonOptions {\n    qJsonType?: QJsonType;\n}\n\nexport type GeneratePageType = \"create\" | \"list\" | \"update\";\n\nexport interface IIntegration extends ICloudObject {\n    theme: string;\n    settings: {\n        engine: {\n            version: string;\n            babel: boolean;\n            embedded: boolean;\n            multitab: boolean;\n            plugins: Array<{\n                Native: [\n                    {\n                        name: string;\n                        text: string;\n                        dependencies: Array<string>;\n                        enabled: boolean;\n                    }\n                ];\n                Quick: [\n                    {\n                        name: string;\n                        text: string;\n                        dependencies: Array<string>;\n                        enabled: boolean;\n                    }\n                ];\n            }>;\n            region: string;\n            backend: string;\n        };\n        backends: Array<string>;\n        configuration: any; //IWebSDKSettings\n    };\n    componentList: Record<\n        string,\n        Record<\n            string,\n            {\n                type: string;\n                required: boolean;\n                editorDefaultValue: string;\n                runTimeOverrideValue: string;\n                runTimeDefaultValue: string;\n                options: Array<string>;\n            }\n        >\n    >;\n}\n\nexport interface IAppToken {\n    secret: string;\n    app: string;\n    email: string;\n}\n\nexport interface ITags extends ICloudObject {\n    description?: string;\n}\n\nexport interface IOrganizationGroup extends ICloudObject {\n    description?: string;\n    createdBy: string;\n    createDate: Date;\n}\n\nexport interface ISDActivities {\n    ID: ObjectID;\n    username: string;\n    lastAccessDate: Date;\n    logs: Array<{time : Date}>;\n}\nexport interface IUpdateMobileUsage {\n    isMobileTemplateUsed?: boolean;\n    isMobilePublished?: boolean;\n}","import { IApplicationExportSettings } from '../../../../common/qCloudTemp/quickCloud';\nimport { IUpdateApplicationRequest } from '../../../../common/qCloudTemp/symDtoObjects';\nimport { IApplication, ILoggedInUser } from \"../model/models\";\n\nexport interface IUpdateApplicationParam {\n    ID: string;\n    name?: string;\n    description?: string;\n    logo?: string;\n    color?: string;\n    ownerUser?: ILoggedInUser;\n    exportSettings?: IApplicationExportSettings;\n}\nexport interface ICreateApplicationParam {\n    name: string;\n    description?: string;\n    logo?: string;\n    color?: string;\n    templateName?: string;\n}\nexport interface IApplicationUseCase {\n    updateApplication(param: IUpdateApplicationRequest): Promise<void>;\n    createApplication(param: ICreateApplicationParam): Promise<IApplication>;\n}\nexport const IApplicationUseCase = Symbol.for(\"IApplicationUseCase\");","import { IUser_SUSI } from \"../../../../common/qCloudTemp/authentication\";\nimport { IOrganization } from \"../../../../common/qCloudTemp/membership\";\nimport { IApplication, IOrganizationGroup, ISDActivities, ITags } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IAddOrganizationGroupRequest, IAddTagRequest, IBoListOrganizationUsersRequest, IBoRemoveTagFromOrganizationRequest, IBoRemoveUserFromOrganizationRequest, IBoUpdateOrganizationRequest, IBoUpdateOrganizationResponse, IUpdateTagRequest, IGetOrganizaionGroupDetailsRequest, IGetOrganizaionGroupDetailsResponse, IUpdateOrganizaionGroupRequest, IUpdateMobileUsage, } from \"../../../../common/qCloudTemp/symDtoObjects\";\nimport { IUserRequest } from \"../../../../common/qCloudTemp/userRequest\";\nimport { IUpdateOrganization, IUpdateUserInfo } from \"../infrastructure/IQCloudApi\";\n\nexport interface IAzureResourceGroupUrls {\n    overviewUrl: string;\n    costUrl: string;\n}\n\nexport interface IOrganizationUIExtended extends IOrganization {\n    organizationGroupName?: string;\n    createdBy?: string;\n    tagNames?: Array<string>;\n}\n\nexport interface IUser_SUSIExtended extends IUser_SUSI {\n    organizationNames?: Array<string>;\n    licensed?: boolean;\n}\nexport interface IApplicationExtended extends IApplication {\n    organizationName?: string;\n    licensed?: boolean;\n}\nexport interface IUserRequestExtended extends IUserRequest {\n    userName?: string;\n    userLastname?: string;\n    userRole?: string;\n    organizationName?: string;\n    organizationAccountType?: string;\n}\nexport interface IApplicationExtended extends IApplication {\n    uiPageCount: number;\n    uiPageSize: number;\n}\n\nexport interface IBackofficeUseCase {\n    setBreadcrumb(values: Array<string>): void;\n    clearBreadcrumb(): void;\n    getAzureResourceGroupUrls(resourceGroupId: string): Promise<IAzureResourceGroupUrls>;\n    getDashboardInfo(): Promise<void>;\n    getUserInfo(userId: string): Promise<IUser_SUSI>;\n    getOrganizationInfo(organizationId: string): Promise<IOrganization>;\n    listUsers(): Promise<void>;\n    listOrganizations(): Promise<Array<IOrganizationUIExtended>>;\n    getOrgGroupNameByOrgID(orgID: string): Promise<string | undefined>\n    updateUserInfo(userId: string, properties: IUpdateUserInfo): Promise<IUser_SUSI>;\n    removeUserFromOrganization(properties: IBoRemoveUserFromOrganizationRequest): Promise<void>;\n    listOrganizationUsers(organizationId: string): Promise<Array<IUser_SUSI>>;\n    listOrganizationApps(organizationId: string): Promise<Array<IApplication>>;\n    deleteOrganization(organizationId: string, organizationName: string): Promise<void>;\n    updateOrganization(organizationId: string, properties: IUpdateOrganization): Promise<IOrganization>;\n    deleteUser(userId: string, userEmail: string): Promise<void>;\n    getOrganizationsByUserId(userID: string): Promise<IOrganization[]>;\n    addTag(properties: IAddTagRequest): Promise<void>;\n    getTag(tagID: string): Promise<ITags>;\n    listTags(): Promise<void>;\n    updateTag(properties: IUpdateTagRequest): Promise<void>;\n    deleteTag(tagID: string): Promise<void>;\n    getOrganizationsByTagId(tagID: string): Promise<IOrganization[]>;\n    removeTagFromOrganization(properties: IBoRemoveTagFromOrganizationRequest): Promise<void>;\n    listUserRequests(): Promise<Array<IUserRequest>>;\n    addOrganizationGroup(properties: IAddOrganizationGroupRequest): Promise<void>;\n    listOrganizationGroups(): Promise<IOrganizationGroup[]>\n    updateOrganizationGroup(request: IUpdateOrganizaionGroupRequest): Promise<void>;\n    getOrganizationGroupDetails(request: IGetOrganizaionGroupDetailsRequest): Promise<IGetOrganizaionGroupDetailsResponse>;\n    getOrganizationAppsByOrganizationIdForOrgGroup(orgID: string, orgGroup: IGetOrganizaionGroupDetailsResponse): IApplication[] | undefined;\n    getAllAppsForOrgGroup(orgGroup: IGetOrganizaionGroupDetailsResponse): IApplicationExtended[];\n    getUsersPerOrganizationForOrgGroup(orgID: string, orgGroup: IGetOrganizaionGroupDetailsResponse): IUser_SUSI[];\n    deleteOrganizationFromGorup(organizationId: string): Promise<void>;\n    deleteOrganizationGroup(organizationGroupId: string): Promise<void>;\n    listServiceDesignerActivities(): Promise<Array<ISDActivities>>;\n    downloadActivityXlsxFile(activities: Array<ISDActivities>): Promise<void>;\n    updateUserMobileUsage(mobileUsage: IUpdateMobileUsage): Promise<void>;\n    downloadUserListXlsxFile(users: Array<IUser_SUSIExtended>): Promise<void>;\n    deleteUserStandAloneInfo(userId: string): Promise<void>;\n}\n\nexport const IBackofficeUseCase = Symbol.for(\"IBackofficeUseCase\");","import { ICreateExportJobParam } from \"../../../../common/qCloudTemp/exporter\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface ICreateExportJob extends IUseCase<void, ICreateExportJobParam> {}\n\nexport const ICreateExportJob = Symbol.for(\"ICreateExportJob\");","import { ICreateDeployJobParam, IDeployJobItem, IExportItem, IPlatformSelection } from \"../../../../common/qCloudTemp/exporter\";\nimport { IProviderGetLastBuildStatusResponse } from \"../infrastructure/IProviderApi\";\n\nexport interface IDeployJobs {\n    createAppDeployJob(deployItems: Array<IExportItem>, platformSelection?: IPlatformSelection ): Promise<void>;\n    startDeploymentJob(deployJobs: ICreateDeployJobParam): Promise<void>;\n    createBuildJobs(deployJobs: Array<ICreateDeployJobParam>): Promise<void>;\n    checkRepoHasService(repoIds: Array<number>): Promise<Array<{ repoId: number; exist: boolean }>>;\n    getRepoNameById(repoId: number): Promise<string>;\n    getProductConfigInfo(productRepoId: number, quiRepoId?: number): Promise<{ domain: string; quiName?: string }>;\n    getLastBuildStatus(jobName: string): Promise<IProviderGetLastBuildStatusResponse>;\n}\n\nexport const IDeployJobs = Symbol.for(\"IDeployJobs\");","import { IExportItem } from \"../../../../common/qCloudTemp/exporter\";\nimport { IExportViewItem, IModel } from \"../model/models\";\n\nexport interface IJobUtils {\n    //settingTypeMapper(fileName: string): IExportItem[\"type\"];\n    getItemType(item: IExportViewItem | IModel): IExportItem[\"type\"];\n    getFileFullname(item: IExportViewItem | IModel): string;\n}\n\nexport const IJobUtils = Symbol.for(\"IJobUtils\");","import { IModelHistoryInfo } from \"../model/models\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModelVersionsParam { }\nexport interface IListMultiModelVersions extends IUseCase<Map<string, Array<IModelHistoryInfo>>, IListMultiModelVersionsParam> {\n\n}\nexport const IListMultiModelVersions = Symbol.for(\"IListMultiModelVersions\");","import { IModuleVersion } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IListMultiModuleVersionsParam { }\nexport interface IListMultiModuleVersions extends IUseCase<Map<string, Array<IModuleVersion>>, IListMultiModuleVersionsParam> {\n\n}\nexport const IListMultiModuleVersions = Symbol.for(\"IListMultiModuleVersions\");","import { ICreateExportJobParam, IExportJobDbItem } from \"../../../../common/qCloudTemp/exporter\";\nexport interface IPackJobs {\n    createPackJobs(jobs: Array<ICreateExportJobParam>): Promise<Array<IExportJobDbItem>>;\n}\n\nexport const IPackJobs = Symbol.for(\"IPackJobs\");","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, normalizeClass as _normalizeClass, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, vShow as _vShow, withDirectives as _withDirectives, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-898671a4\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"container\" }\nconst _hoisted_2 = { class: \"text-number\" }\nconst _hoisted_3 = { class: \"text-number\" }\nconst _hoisted_4 = { key: 0 }\nconst _hoisted_5 = { class: \"row-container\" }\nconst _hoisted_6 = [\"onClick\"]\nconst _hoisted_7 = {\n  key: 1,\n  class: \"app-tier-model-icon mdi mdi-puzzle\"\n}\nconst _hoisted_8 = [\"onClick\"]\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: /*#__PURE__*/_normalizeClass(['mdi mdi-pencil-outline version-icon'])\n}, null, -1 /* HOISTED */))\nconst _hoisted_10 = { class: \"row-container\" }\nconst _hoisted_11 = [\"onClick\"]\nconst _hoisted_12 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"z-index\":\"1\",\"width\":\"300px\"}\n}\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Stop Working\", -1 /* HOISTED */))\nconst _hoisted_14 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Ready to Publish\", -1 /* HOISTED */))\nconst _hoisted_15 = { key: 1 }\nconst _hoisted_16 = { class: \"row-container\" }\nconst _hoisted_17 = {\n  key: 0,\n  class: \"mdi mdi-palette qjson-color app-tier-model-icon\"\n}\nconst _hoisted_18 = {\n  key: 1,\n  class: \"mdi mdi-cog-outline yaml-color app-tier-model-icon\"\n}\nconst _hoisted_19 = {\n  key: 2,\n  class: \"mdi mdi-cog-outline js-color app-tier-model-icon\"\n}\nconst _hoisted_20 = {\n  key: 3,\n  class: \"mdi mdi-music-accidental-sharp css-color app-tier-model-icon\"\n}\nconst _hoisted_21 = {\n  key: 4,\n  class: \"mdi mdi-auto-fix process-color app-tier-model-icon\"\n}\nconst _hoisted_22 = {\n  key: 5,\n  class: \"mdi mdi-vector-polyline bpmn-color app-tier-model-icon\"\n}\nconst _hoisted_23 = {\n  key: 6,\n  class: \"mdi mdi-database entity-designer-color app-tier-model-icon\"\n}\nconst _hoisted_24 = {\n  key: 7,\n  class: \"mdi mdi-step-forward bpmn-color app-tier-model-icon\"\n}\nconst _hoisted_25 = {\n  key: 8,\n  class: \"mdi mdi-cube-outline namedcomp-color app-tier-model-icon\"\n}\nconst _hoisted_26 = {\n  key: 9,\n  class: \"mdi mdi-cog app-settings-color app-tier-model-icon\"\n}\nconst _hoisted_27 = { class: \"app-tier-model-name\" }\nconst _hoisted_28 = {\n  key: 0,\n  class: \"start-screen\"\n}\nconst _hoisted_29 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-home-outline\" }, null, -1 /* HOISTED */))\nconst _hoisted_30 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"button-tooltip\",\n  style: {\"top\":\"-30px\",\"left\":\"2px\",\"z-index\":\"1\",\"width\":\"80px\"}\n}, \"Start Screen\", -1 /* HOISTED */))\nconst _hoisted_31 = [\n  _hoisted_29,\n  _hoisted_30\n]\nconst _hoisted_32 = [\"onClick\"]\nconst _hoisted_33 = {\n  key: 11,\n  class: \"button-tooltip\",\n  style: {\"z-index\":\"1\",\"width\":\"300px\"}\n}\nconst _hoisted_34 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Stop Working\", -1 /* HOISTED */))\nconst _hoisted_35 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"b\", null, \"Ready to Publish\", -1 /* HOISTED */))\nconst _hoisted_36 = {\n  key: 0,\n  style: {\"margin-bottom\":\"102px\"}\n}\nconst _hoisted_37 = /*#__PURE__*/_createStaticVNode(\"<div style=\\\"display:flex;align-items:center;\\\" data-v-898671a4><span class=\\\"custom-text environment\\\" data-v-898671a4> Publish To </span><span class=\\\"publish-info\\\" data-v-898671a4><i class=\\\"mdi mdi-information\\\" data-v-898671a4></i><span class=\\\"button-tooltip\\\" style=\\\"top:460px;left:96px;z-index:1;width:231px;\\\" data-v-898671a4>Publish To options may change depending on the module type you choose.</span></span></div>\", 1)\nconst _hoisted_38 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"save-button\" }, \"DOWNLOAD\", -1 /* HOISTED */))\nconst _hoisted_39 = {\n  key: 0,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-80px\",\"left\":\"626px\",\"z-index\":\"1\",\"width\":\"145px\"}\n}\nconst _hoisted_40 = {\n  key: 1,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"640px\",\"z-index\":\"1\",\"width\":\"120px\"}\n}\nconst _hoisted_41 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\nconst _hoisted_42 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"save-button deploy\" }, \"PUBLISH\", -1 /* HOISTED */))\nconst _hoisted_43 = {\n  key: 0,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"652px\",\"z-index\":\"1\",\"width\":\"120px\"}\n}\nconst _hoisted_44 = {\n  key: 1,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-46px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"123px\"}\n}\nconst _hoisted_45 = {\n  key: 2,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\nconst _hoisted_46 = {\n  key: 3,\n  class: \"button-tooltip\",\n  style: {\"top\":\"-95px\",\"left\":\"644px\",\"z-index\":\"1\",\"width\":\"135px\"}\n}\n\nimport { CryptoHelper } from \"@stechquick/algae/lib/helpers/cryptoHelper\";\nimport { PlateauHelper } from \"@stechquick/algae/lib/helpers/plateau/plateauHelper\";\nimport { computed, defineAsyncComponent, onMounted, ref } from \"vue\";\nimport { IOrganizationCloud } from \"../../../../../../../common/clean/domain/useCases/ICloudProvider\";\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem } from \"../../../../../../../common/qCloudTemp/exporter\";\nimport { ModelContants } from \"../../../../../../../common/qCloudTemp/modelContants\";\nimport { IQJsonAdditionals, UsageType, APP_ITEM_CONTENT_TYPES } from \"../../../../../../../common/qCloudTemp/quickCloud\";\nimport { container } from \"../../../../../domain/core/diContainer\";\nimport { IQCloudApi } from \"../../../../../domain/infrastructure/IQCloudApi\";\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from \"../../../../../domain/model/models\";\nimport { IDialog } from \"../../../../../domain/presentation/IDialog\";\nimport { ICreateExportJob } from \"../../../../../domain/useCase/ICreateExportJob\";\nimport { IDeployJobs } from \"../../../../../domain/useCase/IDeployJobs\";\nimport { IJobUtils } from \"../../../../../domain/useCase/IJobUtils\";\nimport { IListMultiModelVersions } from \"../../../../../domain/useCase/IListMultiModelVersions\";\nimport { IPackJobs } from \"../../../../../domain/useCase/IPackJobs\";\nimport { IUseCaseExecutor } from \"../../../../../domain/useCase/IUseCaseExecutor\";\nimport { IViewModel } from \"../../../../../domain/viewModel/IViewModel\";\nimport { IViewModelManager } from \"../../../../../domain/viewModel/IViewModelManager\";\nimport CustomSelect from \"../../../components/customSelect.vue\";\nimport CheckboxComp from \"../../checkboxComp.vue\";\nimport { IListMultiModuleVersions } from \"../../../../../domain/useCase/IListMultiModuleVersions\";\nimport { IBackofficeUseCase } from \"../../../../../domain/useCase/IBackofficeUseCase\";\nimport { IApplicationUseCase } from \"../../../../../domain/useCase/IApplicationUseCase\";\n\ninterface ITableData {\n    id: string;\n    parentId?: string;\n    collapsed?: boolean;\n    anyChildChecked?: boolean;\n    allChildChecked?: boolean;\n    checked?: boolean;\n    name: string;\n    type: IModel[\"modelType\"] | IModule[\"objectType\"];\n    version?: string;\n    disabled?: boolean | true;\n    children?: Array<ITableData>;\n    usageType?: UsageType;\n    imported?: boolean;\n}\n\ninterface IDeployScreenAdditionalProps {\n    screenType: \"Export\" | \"Deploy\";\n    platformSelection: IPlatformSelection;\n}\n\ninterface IDisabledOptions {\n    index: number\n    cause: string;\n}\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'publishDialog',\n  props: {\n    screenType: null,\n    platformSelection: null\n  },\n  emits: [\"close\"],\n  setup(__props: any, { emit }) {\n\nconst props = __props as {\n    screenType: \"Export\" | \"Deploy\";\n    platformSelection: IPlatformSelection;\n};\n\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\nconst backofficeUseCase = container.resolve<IBackofficeUseCase>(IBackofficeUseCase);\nconst applicationUseCase = container.resolve<IApplicationUseCase>(IApplicationUseCase);\n\n\n\nconst items = ref<Array<ITableData>>([]);\nconst validations = ref<boolean>(true);\nconst selectedTarget = ref<string>(\"\");\nconst disabledOptions = ref<Array<IDisabledOptions>>();\nconst publishTargets = ref<Array<string>>();\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\nconst startScreen = ref<IModel>();\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>>();\nconst dependencyErrorStr = ref<string>('');\nconst currentApp = computed(() => viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\n\n\nonMounted(async () => {\n    await Promise.all([\n        executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, { }).then(res => modelHistories.value = res),\n        executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, { }).then(res => importedModuleVersions.value = res)\n    ])\n    initDependencies();\n    handleItems();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n    validations.value = validate();\n})\n\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \"module\" && e.allChildChecked).length);\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == \"module\" && !e.allChildChecked && e.anyChildChecked).length);\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != \"module\" && e.checked).length);\nconst totalRootLevelCount = computed(() => items.value.length);\nconst saveButtonDisable = computed(() => (props.screenType == \"Deploy\" && props.platformSelection.web && selectedTarget.value == \"\") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == \"Export\" && !validateStartScreen()) || !validateDependencies());\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true \n        : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0  ? false : undefined));\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\nconst isAllDependenciesOK = computed(validateDependencies)\nconst isStartScreenOK = computed(validateStartScreen)\n\nfunction validate() {\n    let result = true;\n    const modules = items.value.filter(e => e.type == \"module\" && e.anyChildChecked);\n    const appLayerItems = items.value.filter(e => e.type == \"qjson\" && e.checked);\n\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => item.isRootPage);\n    if(!startScreen.value)\n        return false;\n\n    if (props.screenType == \"Deploy\") {\n        if (modules.length > 0)\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == \"entityDesigner\" && f.checked)).length <= 0\n\n        let isApplicationWillDeploy = appLayerItems.length > 0;\n        if (isApplicationWillDeploy) {\n            result = appLayerItems\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\n        }\n    }\n\n    return result;\n}\n\nfunction validateDependencies() {\n    const checkMap = new Map<string, boolean>();\n    items.value.forEach(item => {\n        if(item.type == 'module' && item.children && item.children.length > 0)\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\n        else\n            checkMap.set(item.id, item.checked == true)\n    })\n\n    const mustBeCheckedMap = new Map<string, Array<string>>();\n    dependencyMap.value?.forEach((deps, id) => {\n        if(!checkMap.get(id)) \n            return;\n\n        deps.dependedTo.forEach(dependedId => {\n            if(checkMap.get(dependedId))\n                return;\n\n            if(mustBeCheckedMap.has(id)){\n                const vals = mustBeCheckedMap.get(id)!\n                vals.push(dependedId)\n                mustBeCheckedMap.set(id, vals)\n            }else {\n                mustBeCheckedMap.set(id, [dependedId])\n            }\n            \n        });\n    })\n\n    //set deps error text\n    const [firstItemID] = mustBeCheckedMap.keys();\n    if(firstItemID) {\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(', ') : '';\n        dependencyErrorStr.value =`Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\n    }\n\n    return mustBeCheckedMap.size == 0\n}\n\nfunction validateStartScreen() {\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\n}\n\nfunction findItem (ID: string) {\n    for(const item of items.value){\n        if(item.type != 'module' && item.id == ID)\n            return item;\n        if(item.type == 'module' && item.children && item.children.length> 0 ){\n            const f = item.children.find(e => e.id == ID)\n            if(f) return f\n        }\n    }\n}\n\nfunction initDependencies() {\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>();\n    const depMap = new Map<string, Array<string>>();\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path) => {\n            if (item.objectType != \"model\") { return; }\n\n            const isImportedModule = item.parent.objectType == \"module\" && isModuleImported(item.parent);\n            \n            let version: string | undefined;\n            if(!isImportedModule){\n                const maxVersion = getItemMaxVersion(item)\n                if(!maxVersion)\n                    return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\n                version = maxVersion;\n            }\n            else {\n                const moduleVersions = importedModuleVersions.value?.get(item.parent.ID)\n                const moduleVersion = (item.parent as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n\n                const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\n                version = importedModuleModel?.version\n            }\n\n            const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\n\n            depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\n    });\n\n    \n    depMap.forEach((dependedTo, modelId) => {\n        const dependedBy = Array<string>();\n        depMap.forEach((dependencies, depModelId) => {\n            if (dependencies.some(depId => depId == modelId))\n                dependedBy.push(depModelId)\n        })\n        map.set(modelId, {dependedBy, dependedTo});\n    })\n    dependencyMap.value = map;\n}\n\nfunction isModelDepended(item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\n    if(!deps) return false;\n\n    return deps.some(dep => items.value.some(item => {\n        if(item.type == 'module' && item.anyChildChecked){\n            return item.children?.some(child => child.checked && child.id == dep)\n        }\n        return item.id == dep && item.checked\n    }));\n}\n\nasync function handleItems() {\n    // - modules and module items\n    items.value = viewModel.studio.items\n        .filter((item) => item.objectType == \"module\" && item.children.length > 0)\n        .map((item) => {\n            const isImportedModule = isModuleImported(item as IModule);\n            const moduleVersion = (item as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n            const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\n            const tableData: ITableData = {\n                id: item.ID,\n                collapsed: true,\n                name: item.name,\n                type: \"module\",\n                imported: isImportedModule,\n                version: moduleVersion,\n                children: (item as IModule).children\n                    .filter((child) => child.objectType == \"model\")\n                    .map(child => child as IModel)\n                    .map(child => {\n                        const childModel: ITableData = {id: child.ID,parentId: item.ID,name: child.name,type: (child as IModel).modelType}\n                        if(!isImportedModule || child.isUnmodifiable){\n                            const maxVersion = getItemMaxVersion(child)                         \n                            return {\n                                ...childModel,\n                                checked: maxVersion ? true : child.isUnmodifiable,\n                                disabled: maxVersion ? false : !child.isUnmodifiable,\n                                version: child.isUnmodifiable ? 'latest' : maxVersion,\n                            } as ITableData\n                        }\n                        \n                        const importedModulesModel = relatedModelHistories?.find(e => e.modelID == child.ID)\n                        return {...childModel, checked: true,disabled: false, version: importedModulesModel?.version } as ITableData\n                    })\n            }\n            handleParentCheckedStatus(tableData);\n            return tableData;\n        });\n\n    // - App Settings\n    const appSettings = viewModel.studio.items.find(e => e.name == 'App Settings')!\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\n    appSettings && items.value.push({\n        id: appSettings.ID,\n        name: appSettings.name,\n        checked: true,\n        disabled: false,\n        type: (appSettings as IModel).modelType,\n        version: !maxVersion ? 'latest' : maxVersion\n    });\n\n    // - application items\n    viewModel.studio.items\n        .filter((item) => item.objectType == \"model\" && item.modelType != \"appSettings\" && item.usageType != \"appSettings\" && item.usageType != \"appAssetList\")\n        .map(item => item as IModel)\n        .forEach(item => {\n            const maxVersion = getItemMaxVersion(item)\n            items.value.push({\n                    id: item.ID,\n                    name: item.name,\n                    checked: maxVersion ? true : item.isUnmodifiable,\n                    disabled: maxVersion ? false : !item.isUnmodifiable,\n                    type: item.modelType,\n                    version: item.isUnmodifiable ? 'latest' : maxVersion,\n                });\n        });\n        \n    // - UI Settings\n    const uiSettingsID = CryptoHelper.CreateGuid();\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == \"model\" && item.usageType == \"appSettings\") as Array<IModel>;\n    const uiSettings: ITableData = {\n        id: uiSettingsID,\n        collapsed: true,\n        name: \"UI Settings\",\n        type: \"module\",\n        imported: false,\n        children: uiSettingsModels.map(settings => {\n            const maxVersion = getItemMaxVersion(settings)\n            return {\n                id: settings.ID,\n                parentId: uiSettingsID,\n                name: settings.name,\n                type: settings.modelType,\n                checked: maxVersion != undefined,\n                usageType: settings?.usageType,\n                disabled: !maxVersion,\n                version: maxVersion,\n            }\n        }) as Array<ITableData>,\n    };\n    handleParentCheckedStatus(uiSettings);\n\n    // - Styled Components\n    const uiAssetID = CryptoHelper.CreateGuid();\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == \"model\" && item.usageType == \"appAssetList\") as Array<IModel>;\n    const uiAssetList: ITableData = {\n        id: uiAssetID,\n        collapsed: true,\n        name: \"Styled Components\",\n        type: \"module\",\n        imported: false,\n        anyChildChecked: true,\n        allChildChecked: true,\n        children: appAssetList.map((asset) => ({\n            id: asset.ID,\n            parentId: uiAssetID,\n            name: asset.name,\n            type: asset.modelType,\n            checked: true,\n            usageType: asset?.usageType,\n        })) as Array<ITableData>,\n    };\n    handleParentCheckedStatus(uiAssetList);\n\n    items.value.unshift(uiAssetList);\n    items.value.unshift(uiSettings);\n}\n\nfunction getItemMaxVersion(item: IModel): string | undefined {\n    if (!modelHistories.value?.has(item.ID))\n        return undefined;\n\n    const versions = modelHistories.value.get(item.ID);\n    if (!versions)\n        return undefined;\n\n    const findMaxVersion = (versions: Array<string>) => {\n        const versionNumbers = versions.map(v => {\n            const parts: Array<string> = v.split(\".\");\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\n        })\n\n        versionNumbers.sort((a, b) => b - a);\n\n        const maxVersion = versionNumbers[0];\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\n    }\n\n    return findMaxVersion(versions.map(e => e.version!));\n\n}\nfunction checkMaxVersionOfAllItems() {\n    let isThereVersion: boolean = false;\n    items.value.forEach(item => {\n        if(item.type == \"module\") {\n            item.children?.forEach(child => {\n                if(child.version) {\n                    isThereVersion = true;\n                }\n                \n            })\n        }\n        else {\n            if(item.version) {\n                isThereVersion = true;\n            }\n        }\n    })\n    return isThereVersion;\n}\nfunction handleModuleCountCheckboxEvent(value: boolean) {\n    items.value.filter(e => !e.disabled).forEach((item) => {\n        item.checked = value;\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\n        if (allItemsCheckable) item.allChildChecked = value;\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\n    });\n\n    validations.value = validate();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n}\n\nfunction handleCollapse(item: ITableData) {\n    item.collapsed = !item.collapsed;\n}\n\nfunction checkAllDependents(item: ITableData) {\n    if(item.disabled || item.checked) return;\n\n    item.checked = true\n    item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!);\n\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\n    if(!deps) return;\n\n    deps.forEach(dep => {\n        items.value.forEach(item => {\n            if(item.type == 'module' && !item.allChildChecked){\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\n                willCheckItem && checkAllDependents(willCheckItem)\n                handleParentCheckedStatus(item)\n                return;\n            }\n\n            if(!item.checked && item.id == dep) {\n                checkAllDependents(item)\n                item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\n            }\n        })\n    });\n}\n\nfunction handleItemCheckEvent(item: ITableData) {\n    if(item.disabled || isModelDepended(item) || item.name == 'App Settings')\n        return;\n\n    if(item.type != \"module\") {\n        if(item.checked){\n            item.checked = false;\n            item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\n        } else {\n            checkAllDependents(item)\n        }\n    } else {\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\n            if (item.anyChildChecked) {\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\n                item.checked = false;\n                handleParentCheckedStatus(item);\n            } else {\n                item.children.forEach(checkAllDependents);\n                item.checked = true;\n            }\n        }\n        else {\n            item.checked = !item.checked;\n            item.allChildChecked = false;\n        }\n    }\n\n    validations.value = validate();\n    props.screenType == \"Deploy\" && syncPublishTargets();\n}\n\nfunction handleParentCheckedStatus(item: ITableData) {\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\n}\n\nfunction syncPublishTargets() {\n    publishTargets.value = []; disabledOptions.value = [];\n\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\n    if (!targets)\n        return;\n\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\n    if (!isSelectAnyItem) {\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\n        const disabledOptionList = Array<IDisabledOptions>();\n        for (let i = 0; i < publishTargets.value.length; i++) {\n            disabledOptionList.push({ index: i, cause: \"You need to include items to publish.\" })\n        }\n        disabledOptions.value = disabledOptionList;\n        return;\n    }\n\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\n\n    const disabledOptionList = Array<IDisabledOptions>();\n    for (let i = 0; i < sortedTargets.length; i++) {\n        const cause = sortedTargets[i].cause;\n        if (cause) disabledOptionList.push({ index: i, cause })\n    }\n    disabledOptions.value = disabledOptionList;\n    publishTargets.value = sortedTargets.map(e => e.optionName);\n\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : \"\";\n}\n\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\n    const list = Array<{ optionName: string, cause?: string }>();\n\n    Object.keys(targets).forEach(e => {\n        const key = e as keyof IOrganizationCloud;\n        const value = targets[key];\n        const optionName = cloudTargetMap(key)!;\n        if (!value)\n            return list.push({ optionName, cause: \"You are not authorized to publish to this target.\" });\n\n\n        switch (key) {\n            case \"azure\":\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\n                    if (!items || items.length == 0) { return status; }\n                    for (const item of items) {\n                        if (item.checked || item.anyChildChecked) {\n                            if (item.type == \"module\") {\n                                status = traverseSelectedItems(status, item.children);\n                            }\n                            if (item.type == \"entityDesigner\" || item.type == \"bpmn\" || item.type == \"process\") {\n                                status = false;\n                                break;\n                            }\n                        }\n\n                    }\n                    return status;\n                }\n\n                const status = traverseSelectedItems(true, items.value);\n                if (!status)\n                    return list.push({ optionName, cause: \"Entity and process models cannot be published to this target.\" });\n                break;\n            case \"plateauGCP\":\n                const modulesHasNotAnEDModel =  items.value.filter(e => e.name != \"UI Settings\").find(e => e.type == \"module\" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == \"bpmn\" || c.type == \"process\")) && !e.children?.some(c => c.type == \"entityDesigner\" && c.checked))\n                if (modulesHasNotAnEDModel)\n                    return list.push({optionName, cause: `This target not available. Selected module '${modulesHasNotAnEDModel.name}' has not any Data Model.`})\n                break;\n        }\n\n        list.push({ optionName });\n    })\n\n    return list;\n}\n\nfunction updateDependencyMap(newVersion: string, item: ITableData) { \n    const deps = dependencyMap.value?.get(item.id);\n    dependencyMap.value?.set(item.id, {\n        dependedBy: deps?.dependedBy || Array<string>(), \n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\n    })\n}\n\nfunction versionDialog(item: ITableData) {\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\n    const hasAnyVersion = modelHistories.value?.has(item.id);\n    const options = { clickedNode, cb: (version: string) => { \n        item.version = version;\n        updateDependencyMap(version, item);\n    } } as any;\n\n    if (hasAnyVersion) {\n        options.versions = modelHistories.value?.get(item.id)\n    }\n    dialog.showDialog(\n        defineAsyncComponent(() => import(\"../../application/modelVersionDialog.vue\")),\n        { closable: true, title: \"Change Version\", width: \"1080px\", maxHeight: \"500px\", overflow: \"auto\" }, options\n    );\n}\n\n\nfunction moduleVersionDialog(item: ITableData) {\n    dialog.showDialog(\n        defineAsyncComponent(() => import(\"../../application/moduleVersionDialog.vue\")),\n        { closable: true, title: \"Change Version\", width: \"1080px\", maxHeight: \"500px\", overflow: \"auto\" },\n        { module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => { \n            item.version = moduleVersion.version;\n            item.children?.forEach(child => {\n                const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\n                child.version = modulesModel?.version\n                updateDependencyMap(modulesModel?.version!, child);\n            })\n        }}\n    );\n}\n\nfunction close() {\n    emit(\"close\");\n}\n\nasync function save() {\n    executor.execute(\n        async () => {\n            const initAsGroup = async () => {\n                const groupID = CryptoHelper.CreateGuid();\n                await initHistory(groupID);\n                await packJob(groupID);\n                return groupID;\n            }\n\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\n\n            switch (props.screenType) {\n                case \"Export\":\n                    if(isFlowBackend) {\n                        const deployItems = await createAzureDeployItems();\n                        await packJobsUseCase.createPackJobs([{\n                            appID: viewModel.studio.appId,\n                            exportType: \"qui\",\n                            selectionData: deployItems\n                        }]);\n                        break;\n                    }\n\n                    const groupID = await initAsGroup();\n                    await createExportJob(groupID);\n                    break;\n                case \"Deploy\":\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\n                        case \"plateauGCP\":\n                            const groupID = await initAsGroup();\n                            await createDeployJob(groupID);\n                            break;\n                        case \"azure\":\n                            const deployItems = await createAzureDeployItems();\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\n                            break;\n                    }\n            }\n            const userMobileUsage = viewModel.user?.mobileUsage;\n            const appMobileUsage = currentApp.value?.mobileUsage;\n            if(props.platformSelection.mobile && (!userMobileUsage?.isMobilePublished || !appMobileUsage?.isMobilePublished)) {\n                backofficeUseCase.updateUserMobileUsage({...userMobileUsage, isMobilePublished: true});\n                applicationUseCase.updateApplication({ID: currentApp.value?.ID, mobileUsage: {...appMobileUsage, isMobilePublished: true}, updateReason: \"backofficeUpdate\"})\n                \n            }\n            emit(\"close\");\n        },\n        { loading: true });\n}\n\nasync function createAzureDeployItems() {\n    const deployItems: Array<IExportItem> = [];\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\n        if (item.objectType != \"model\") { return; }\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\n        if (!items || items.length == 0) { return; }\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\n            if (item.type == \"module\") {\n                traverseSelectedItems(item.children);\n                return;\n            }\n\n            const itemMap = itemIdObj[item.id];\n\n            const deployItem: IExportItem = {\n                id: item.id,\n                name: jobUtils.getFileFullname(itemMap.item),\n                path: itemMap.path,\n                type: jobUtils.getItemType(itemMap.item),\n                ver: item.version || \"latest\",\n                isRootPage: itemMap.item.isRootPage,\n                modulePrefix: itemMap.prefix,\n                ownerType: 'application',\n                ownerName: viewModel.studio.appName,\n                size: itemMap.item.size,\n                createDate: itemMap.item.createDate,\n            };\n            deployItems.push(deployItem)\n        });\n    };\n\n    traverseSelectedItems(items.value);\n\n    return deployItems;\n}\n\nasync function initHistory(groupID: string) {\n    return qcloudApi.initPublishHistory({\n        appID: viewModel.studio.appId,\n        ID: groupID,\n        isMultiStep: true,\n        type: props.screenType == \"Deploy\" ? \"publish\" : \"download\",\n        cloudProvider: props.screenType == \"Deploy\" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\n        platform: props.platformSelection\n    });\n}\n\nasync function packJob(groupID: string) {\n    let exportItemMap = new Map<string, Array<IExportItem>>();\n    const appName = viewModel.studio.appName;\n\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\n        if (item.objectType != \"model\") { return; }\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const createExportObject = (tableItem: ITableData) => {\n        const item = itemIdObj[tableItem.id].item;\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == item.modelType);\n        const retVal: IExportItem = {\n            id: tableItem.id,\n            ver: tableItem.version!,\n            type: jobUtils.getItemType(item),\n            path: itemIdObj[tableItem.id].path,\n            modulePrefix: itemIdObj[tableItem.id].prefix,\n            name: jobUtils.getFileFullname(item),\n            ownerType: isAppItem ? 'application' : (item.parent.objectType as \"module\" | \"application\"),\n            ownerName: isAppItem ? appName : item.parent.name,\n        };\n        return retVal;\n    }\n\n    const addToExportItem = (key: string, obj: IExportItem) => {\n        key = obj.ownerType == 'module' ? `mdl-${key}` : key; // for same named module and app\n        let items = exportItemMap.get(key);\n        if(items && items.length > 0){\n            items.push(obj);\n            exportItemMap.set(key, items);\n        } else\n            exportItemMap.set(key, [obj]);\n    }\n\n    items.value.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\n        if (asset.type == 'module') {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                const obj = createExportObject(child);\n                if (obj.type == \"entityDesigner\")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n\n                const useSeperateModule = obj.type == 'bpmn' || obj.type == 'entityDesigner' || obj.type == 'process';\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\n            });\n        } else {\n            const obj = createExportObject(asset);\n            if (asset.type == 'qjson'){\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == \"model\" && i.modelType == \"qjson\" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\n                obj.isRootPage = isRootPage ? true : undefined;\n            }\n            addToExportItem(appName, obj);\n        }\n    })\n\n    let jobs = Array<ICreateExportJobParam>();\n    exportItemMap.forEach((v, k) => {\n        jobs.push({\n            appID: viewModel.studio.appId,\n            exportType: \"qui\", //(props.platformSelection.mobile && !props.platformSelection.web) ? \"model\":  \"qui\"\n            selectionData: v,\n            cause: props.screenType == 'Export' ? 'download': \"publish\",\n            layer: 0,\n            groupID: groupID,\n            platformSelection: props.platformSelection\n        })\n    })\n    \n    await packJobsUseCase.createPackJobs(jobs);\n}\n\nasync function createExportJob(groupID: string) {\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\n        appID: viewModel.studio.appId,\n        exportType: \"qui\",\n        selectionData: [],\n        layer: 1,\n        groupID: groupID\n    });\n}\n\nasync function createDeployJob(groupID: string) {\n    //1-(n) L1- deployJob(build)\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\n        .then(jobs => jobs.jobs.map(e => {\n            const jobData = e.jobData as IExportJobData;\n            return {\n                ownerName: jobData.items[0].ownerName,\n                jobID: e.jobID,\n                type: jobData.items[0].ownerType,\n                mainDir: getDeployableArchiveRoot(jobData)\n            }\n        }));\n\n    if (!packages || packages.length <= 0)\n        return;\n\n    let buildJobs = Array<ICreateDeployJobParam>();\n    packages.forEach(pack => {\n        buildJobs.push({\n            appID: viewModel.studio.appId,\n            type: \"build\",\n            package: {\n                type: pack.type as DeployType,\n                name: pack.ownerName!,\n                mainDir: pack.mainDir,\n                zip: `${pack.jobID}.zip`,\n            },\n            layer: 1,\n            groupID: groupID\n        })\n    })\n\n    await deployJobsUseCase.createBuildJobs(buildJobs);\n\n    //2-(1) L2- deployJob(deployment)\n    let jobParam: ICreateDeployJobParam = {\n        appID: viewModel.studio.appId,\n        type: \"deployment\",\n        deployConfig: {\n            process: {\n                configModelIDs: getProcessConfigList(),\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == \"bpmn\"))\n            }\n        },\n        layer: 2,\n        groupID: groupID,\n        platformSelection: props.platformSelection\n    }\n\n    await deployJobsUseCase.startDeploymentJob(jobParam);\n}\n\nfunction getProcessConfigList() {\n    let processConfigList = Array<IProcessConfigModelItem>();\n    items.value.forEach((asset) => {\n        if (asset.type == \"module\" && asset.anyChildChecked && asset.children) {\n            const usingService = asset.children.find(c => c.type == \"entityDesigner\");\n            if (!usingService)\n                return;\n\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\n            asset.children.forEach(child => {\n                if (child.checked && child.type == \"process\") {\n                    processConfigList.push({\n                        moduleName: serviceName,\n                        model: {\n                            id: child.id,\n                            name: child.name,\n                            version: child.version!\n                        }\n                    })\n                }\n            })\n        }\n    })\n    return processConfigList;\n}\n\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\n    if (jobData.items[0].ownerType == \"module\") {\n        let edModel = jobData.items.find(e => e.type == \"entityDesigner\");\n        if (!edModel)\n            throw new Error(\"!!! this module cannot deploy. Because its have not a service\");\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\n    }\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\n}\n\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\n    const map: Record<keyof IOrganizationCloud, string> = { azure: \"Public Cloud\", plateauGCP: \"Plateau Platform Playground\" };\n    if (pureVal) {\n        return Object.keys(map).find(e => {\n            if (map[e as keyof IOrganizationCloud] === name) {\n                return true;\n            }\n        })\n    } else {\n        let key = Object.keys(map).includes(name);\n        if (!key)\n            return;\n        return map[name as keyof IOrganizationCloud];\n    }\n}\n\nfunction onTargetSelect(value: string) {\n    selectedTarget.value = value\n}\n\nconst isModuleImported = (item: IModule) => {\n    const hasAVersion = item.relatedApplications.find(e => e.applicationID == viewModel.studio.appId)?.importedVersion;\n    if(item.mainOwner != viewModel.studio.appId && item.relatedApplications.at(0)?.applicationID != viewModel.studio.appId && hasAVersion)\n        return true;\n    return false;\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", null, [\n      _createVNode(CheckboxComp, {\n        class: _normalizeClass(['modules-selected-checkbox', props.screenType == 'Deploy' ? 'deploy' : '']),\n        minus: _unref(mainCheckboxState) == false,\n        check: _unref(mainCheckboxState) == true,\n        onClick: _cache[0] || (_cache[0] = ($event: any) => (handleModuleCountCheckboxEvent(_unref(mainCheckboxState) == undefined)))\n      }, null, 8 /* PROPS */, [\"class\", \"minus\", \"check\"]),\n      _createElementVNode(\"div\", {\n        class: _normalizeClass(['modules-selected-text', props.screenType == 'Deploy' ? 'deploy' : ''])\n      }, [\n        _createElementVNode(\"span\", _hoisted_2, _toDisplayString(_unref(allChildCheckedModulesCount) + _unref(anyChildCheckedModulesCount) + _unref(checkedRootLevelModelsCount)), 1 /* TEXT */),\n        _createTextVNode(\" of \"),\n        _createElementVNode(\"span\", _hoisted_3, _toDisplayString(_unref(totalRootLevelCount)), 1 /* TEXT */),\n        _createTextVNode(\" items selected \")\n      ], 2 /* CLASS */)\n    ]),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass(['modules-datatable', props.screenType == 'Deploy' ? 'deploy' : ''])\n    }, [\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(items.value, (item) => {\n        return (_openBlock(), _createElementBlock(\"div\", null, [\n          (item?.type == 'module')\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [\n                _createElementVNode(\"div\", _hoisted_5, [\n                  (!item.imported)\n                    ? (_openBlock(), _createElementBlock(\"i\", {\n                        key: 0,\n                        class: _normalizeClass('mdi mdi-menu' + (item.collapsed ? '-right' : '-down') + ' chevron' + (!item.children || item.children.length == 0 ? ' disabled': '')),\n                        onClick: ($event: any) => (handleCollapse(item))\n                      }, null, 10 /* CLASS, PROPS */, _hoisted_6))\n                    : _createCommentVNode(\"v-if\", true),\n                  _createVNode(CheckboxComp, {\n                    class: \"module-checkbox\",\n                    check: item.allChildChecked,\n                    minus: !item.allChildChecked && item.anyChildChecked,\n                    disabled: item.disabled,\n                    onClick: ($event: any) => (handleItemCheckEvent(item))\n                  }, null, 8 /* PROPS */, [\"check\", \"minus\", \"disabled\", \"onClick\"]),\n                  (item.imported)\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_7))\n                    : _createCommentVNode(\"v-if\", true),\n                  _createElementVNode(\"span\", {\n                    class: _normalizeClass(['module-name', item.imported ? ` imported` : (item.disabled ? ' disabled': '')])\n                  }, _toDisplayString(item.name), 3 /* TEXT, CLASS */),\n                  (item.imported)\n                    ? (_openBlock(), _createElementBlock(\"div\", {\n                        key: 2,\n                        class: \"version-text\",\n                        onClick: ($event: any) => (moduleVersionDialog(item))\n                      }, [\n                        _createTextVNode(_toDisplayString(item.version ? item.version : 'No version') + \" \", 1 /* TEXT */),\n                        _hoisted_9\n                      ], 8 /* PROPS */, _hoisted_8))\n                    : _createCommentVNode(\"v-if\", true)\n                ]),\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item?.children, (child) => {\n                  return _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_10, [\n                    _createVNode(CheckboxComp, {\n                      class: \"model-checkbox\",\n                      check: child.checked,\n                      disabled: child.disabled,\n                      onClick: ($event: any) => (handleItemCheckEvent(child))\n                    }, null, 8 /* PROPS */, [\"check\", \"disabled\", \"onClick\"]),\n                    (child.type != 'module')\n                      ? (_openBlock(), _createElementBlock(\"i\", {\n                          key: 0,\n                          class: _normalizeClass('model-icon ' + _unref(ModelContants).getModelVisualInfo(child.type, undefined).icon),\n                          style: _normalizeStyle({ color: _unref(ModelContants).getModelVisualInfo(child.type, undefined).color })\n                        }, null, 6 /* CLASS, STYLE */))\n                      : _createCommentVNode(\"v-if\", true),\n                    _createElementVNode(\"span\", {\n                      class: _normalizeClass(['model-name', child.disabled ? ' disabled' : ''])\n                    }, _toDisplayString(child.name), 3 /* TEXT, CLASS */),\n                    (!child.usageType || child.usageType == 'appSettings')\n                      ? (_openBlock(), _createElementBlock(\"div\", {\n                          key: 1,\n                          class: _normalizeClass(['version-text', child.disabled ? 'disabled' : '']),\n                          onClick: ($event: any) => (versionDialog(child))\n                        }, [\n                          _createTextVNode(_toDisplayString(child.version ? child.version : 'No version') + \" \", 1 /* TEXT */),\n                          (!child.usageType || child.usageType == 'appSettings')\n                            ? (_openBlock(), _createElementBlock(\"i\", {\n                                key: 0,\n                                class: _normalizeClass(['mdi mdi-pencil-outline version-icon', child.disabled ? 'disabled' : ''])\n                              }, null, 2 /* CLASS */))\n                            : _createCommentVNode(\"v-if\", true)\n                        ], 10 /* CLASS, PROPS */, _hoisted_11))\n                      : _createCommentVNode(\"v-if\", true),\n                    (child.disabled && !child.version)\n                      ? (_openBlock(), _createElementBlock(\"span\", _hoisted_12, [\n                          _createTextVNode(\"No version available for publishing. \"),\n                          _hoisted_13,\n                          _createTextVNode(\" on this item and choose the \"),\n                          _hoisted_14,\n                          _createTextVNode(\" option. \")\n                        ]))\n                      : _createCommentVNode(\"v-if\", true)\n                  ], 512 /* NEED_PATCH */)), [\n                    [_vShow, !item.imported && !item.collapsed]\n                  ])\n                }), 256 /* UNKEYED_FRAGMENT */))\n              ]))\n            : (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [\n                _createElementVNode(\"div\", _hoisted_16, [\n                  _createVNode(CheckboxComp, {\n                    class: \"module-checkbox\",\n                    check: item?.checked,\n                    disabled: item.disabled,\n                    onClick: ($event: any) => (handleItemCheckEvent(item))\n                  }, null, 8 /* PROPS */, [\"check\", \"disabled\", \"onClick\"]),\n                  (item?.type == 'qjson')\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_17))\n                    : (item?.type == 'yaml')\n                      ? (_openBlock(), _createElementBlock(\"i\", _hoisted_18))\n                      : _createCommentVNode(\"v-if\", true),\n                  (item?.type == 'js')\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_19))\n                    : _createCommentVNode(\"v-if\", true),\n                  (item?.type == 'css')\n                    ? (_openBlock(), _createElementBlock(\"i\", _hoisted_20))\n                    : (item?.type == 'process')\n                      ? (_openBlock(), _createElementBlock(\"i\", _hoisted_21))\n                      : (item?.type == 'bpmn')\n                        ? (_openBlock(), _createElementBlock(\"i\", _hoisted_22))\n                        : (item?.type == 'entityDesigner')\n                          ? (_openBlock(), _createElementBlock(\"i\", _hoisted_23))\n                          : (item?.type == 'flow')\n                            ? (_openBlock(), _createElementBlock(\"i\", _hoisted_24))\n                            : (item.type == 'namedComponent')\n                              ? (_openBlock(), _createElementBlock(\"i\", _hoisted_25))\n                              : (item.type == 'appSettings')\n                                ? (_openBlock(), _createElementBlock(\"i\", _hoisted_26))\n                                : _createCommentVNode(\"v-if\", true),\n                  _createElementVNode(\"span\", _hoisted_27, [\n                    _createTextVNode(_toDisplayString(item?.name) + \" \", 1 /* TEXT */),\n                    (startScreen.value?.ID == item.id)\n                      ? (_openBlock(), _createElementBlock(\"span\", _hoisted_28, _hoisted_31))\n                      : _createCommentVNode(\"v-if\", true)\n                  ]),\n                  (!item.usageType)\n                    ? (_openBlock(), _createElementBlock(\"span\", {\n                        key: 10,\n                        class: _normalizeClass(['version-text', item.disabled ? 'disabled' : '']),\n                        onClick: ($event: any) => (versionDialog(item))\n                      }, [\n                        _createTextVNode(_toDisplayString(item.version ? item.version : 'No version') + \" \", 1 /* TEXT */),\n                        (!item.usageType)\n                          ? (_openBlock(), _createElementBlock(\"i\", {\n                              key: 0,\n                              class: _normalizeClass(['mdi mdi-pencil-outline version-icon', item.disabled ? 'disabled' : ''])\n                            }, null, 2 /* CLASS */))\n                          : _createCommentVNode(\"v-if\", true)\n                      ], 10 /* CLASS, PROPS */, _hoisted_32))\n                    : _createCommentVNode(\"v-if\", true),\n                  (item.disabled && !item.version)\n                    ? (_openBlock(), _createElementBlock(\"span\", _hoisted_33, [\n                        _createTextVNode(\"No version available for publishing. \"),\n                        _hoisted_34,\n                        _createTextVNode(\" on this item and choose the \"),\n                        _hoisted_35,\n                        _createTextVNode(\" option. \")\n                      ]))\n                    : _createCommentVNode(\"v-if\", true)\n                ])\n              ]))\n        ]))\n      }), 256 /* UNKEYED_FRAGMENT */))\n    ], 2 /* CLASS */),\n    (props.screenType == 'Deploy')\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_36, [\n          _hoisted_37,\n          _createVNode(CustomSelect, {\n            options: publishTargets.value,\n            onInput: onTargetSelect,\n            selectedOption: selectedTarget.value,\n            default: selectedTarget.value,\n            disabledOptions: disabledOptions.value,\n            selectedClass: \"selected-environment\",\n            placeholder: \"Select the publish environment of your application\",\n            class: \"select-environment\"\n          }, null, 8 /* PROPS */, [\"options\", \"selectedOption\", \"default\", \"disabledOptions\"])\n        ]))\n      : _createCommentVNode(\"v-if\", true),\n    _createCommentVNode(\"         <div v-if=\\\"props.screenType == 'Deploy' && !props.platformSelection.web && props.platformSelection.mobile\\\"\\n            class=\\\"mobile-publish-text\\\">\\n            <i class=\\\"mdi mdi-information\\\"></i>\\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\\n        </div> \"),\n    _createElementVNode(\"div\", {\n      class: _normalizeClass(['footer', props.screenType == 'Deploy' ? 'deploy' : 'export'])\n    }, [\n      _createElementVNode(\"div\", {\n        class: _normalizeClass(['cancel-button', props.screenType == 'Deploy' ? 'deploy' : '']),\n        onClick: close\n      }, \"Cancel\", 2 /* CLASS */),\n      (props.screenType == 'Export')\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 0,\n            class: _normalizeClass((_unref(saveButtonDisable) ? ' button-disable' : '')),\n            onClick: _cache[1] || (_cache[1] = ($event: any) => (!_unref(saveButtonDisable) && save()))\n          }, [\n            _hoisted_38,\n            (!_unref(isThereVersion))\n              ? (_openBlock(), _createElementBlock(\"span\", _hoisted_39, \"There are no items ready to publish. At least one of your items must be ready to publish.\"))\n              : (!_unref(isStartScreenOK))\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_40, \"You need to include your start screen.\"))\n                : (!_unref(isAllDependenciesOK))\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_41, _toDisplayString(dependencyErrorStr.value), 1 /* TEXT */))\n                  : _createCommentVNode(\"v-if\", true)\n          ], 2 /* CLASS */))\n        : _createCommentVNode(\"v-if\", true),\n      (props.screenType == 'Deploy')\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 1,\n            class: _normalizeClass([(_unref(saveButtonDisable) ? ' button-disable' : '')]),\n            onClick: _cache[2] || (_cache[2] = ($event: any) => (!_unref(saveButtonDisable) && save()))\n          }, [\n            _hoisted_42,\n            (!_unref(isStartScreenOK))\n              ? (_openBlock(), _createElementBlock(\"span\", _hoisted_43, \"You need to include your start screen.\"))\n              : (!selectedTarget.value)\n                ? (_openBlock(), _createElementBlock(\"span\", _hoisted_44, \"You need to select a publish environment.\"))\n                : (!_unref(isThereVersion))\n                  ? (_openBlock(), _createElementBlock(\"span\", _hoisted_45, \"There are no items ready to publish. At least one of your items must be ready to publish.\"))\n                  : (!_unref(isAllDependenciesOK))\n                    ? (_openBlock(), _createElementBlock(\"span\", _hoisted_46, _toDisplayString(dependencyErrorStr.value), 1 /* TEXT */))\n                    : _createCommentVNode(\"v-if\", true)\n          ], 2 /* CLASS */))\n        : _createCommentVNode(\"v-if\", true)\n    ], 2 /* CLASS */)\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=0&id=898671a4&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=0&id=898671a4&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=1&id=898671a4&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./publishDialog.vue?vue&type=style&index=1&id=898671a4&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./publishDialog.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./publishDialog.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./publishDialog.vue?vue&type=style&index=0&id=898671a4&scoped=true&lang=css\"\nimport \"./publishDialog.vue?vue&type=style&index=1&id=898671a4&lang=css\"\n\nimport exportComponent from \"/home/runner/work/studio/studio/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-898671a4\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","GetRandomWord","base","length","Math","random","toString","substring","CreateGuid","map","join","CryptoHelper","guidCounter","purify","str","replace","toLowerCase","getPlateauEnvironmentName","envPrefix","appName","Error","endsWith","PlateauHelper","getQuiPackageNameFromAppName","getApplicationUINameFromQuiPkg","quiPackageName","getApplicationHostNamePrefix","getServiceNameFromModel","modelName","typeSafety","EditorConsts","quick","modelKeys","self","flow","design","runtime","flowEntity","single","cssJsTsYaml","color","icon","jpegJpgPngSvgGif","modelVisuals","qjson","additionals","qjsonType","css","js","ts","yaml","entityDesigner","bpmn","process","namedComponent","step","jpeg","jpg","png","svg","gif","woff","woff2","ttf","lottie","appSettings","placeholder","json","ModelContants","getModelVisualInfo","modelType","modelAdditionals","retVal","DEPENDED_IMAGE_KEYS","APP_ITEM_CONTENT_TYPES","UISettingsType","alert","pipeline","loading","settings","localProxy","contSvc","compList","globalLocalization","assetList","IApplicationUseCase","Symbol","for","IBackofficeUseCase","ICreateExportJob","IDeployJobs","IJobUtils","IListMultiModelVersions","IListMultiModuleVersions","IPackJobs","_withScopeId","n","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","key","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_","_hoisted_10","_hoisted_11","_hoisted_12","style","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","__name","props","screenType","platformSelection","emits","setup","__props","emit","viewModel","resolve","IViewModel","viewModelManager","IViewModelManager","dialog","IDialog","executor","IUseCaseExecutor","deployJobsUseCase","qcloudApi","IQCloudApi","packJobsUseCase","jobUtils","backofficeUseCase","applicationUseCase","items","validations","selectedTarget","disabledOptions","publishTargets","modelHistories","importedModuleVersions","startScreen","dependencyMap","dependencyErrorStr","currentApp","apps","find","app","ID","studio","appId","async","Promise","all","executeUseCase","then","res","value","Map","depMap","flatMapItems","item","path","objectType","version","parent","isModuleImported","moduleVersions","get","moduleVersion","relatedApplications","applicationID","importedVersion","importedModuleModel","filter","e","flatMap","relatedModelHistories","modelID","maxVersion","getItemMaxVersion","set","dependentModels","modelId","Array","historyItem","forEach","dependedTo","dependedBy","dependencies","depModelId","some","depId","initDependencies","children","isImportedModule","undefined","tableData","collapsed","name","type","imported","child","childModel","parentId","isUnmodifiable","checked","disabled","importedModulesModel","handleParentCheckedStatus","usageType","uiSettingsID","uiSettingsModels","uiSettings","uiAssetID","appAssetList","uiAssetList","anyChildChecked","allChildChecked","asset","unshift","handleItems","syncPublishTargets","validate","allChildCheckedModulesCount","anyChildCheckedModulesCount","checkedRootLevelModelsCount","totalRootLevelCount","saveButtonDisable","web","validateStartScreen","validateDependencies","mainCheckboxState","isThereVersion","checkMaxVersionOfAllItems","isAllDependenciesOK","isStartScreenOK","result","modules","appLayerItems","isRootPage","f","findIndex","checkMap","mustBeCheckedMap","deps","dependedId","has","vals","firstItemID","keys","firstItemDeps","firstItemDepStr","findItem","size","versions","versionNumbers","v","parts","split","parseInt","sort","a","b","floor","findMaxVersion","checkAllDependents","i","dep","willCheckItem","handleItemCheckEvent","isModelDepended","c","targets","user","selectedOrganization","actions","publish","Object","entries","cloudTargetMap","disabledOptionList","index","cause","checkedPublishTargets","list","optionName","traverseSelectedItems","status","modulesHasNotAnEDModel","checkAndSetDisabledCauses","sortedTargets","updateDependencyMap","newVersion","versionDialog","options","clickedNode","state","text","cb","showDialog","closable","title","width","maxHeight","overflow","close","save","execute","initAsGroup","groupID","initPublishHistory","appID","isMultiStep","cloudProvider","platform","initHistory","exportItemMap","itemIdObj","prefix","createExportObject","tableItem","isAppItem","ver","getItemType","modulePrefix","getFileFullname","ownerType","ownerName","addToExportItem","obj","entityGenerationDomain","useSeperateModule","jobs","k","exportType","selectionData","layer","createPackJobs","packJob","isFlowBackend","applications","deployItems","createAzureDeployItems","createExportJob","packages","getExportJobsByGroupId","jobData","jobID","mainDir","getDeployableArchiveRoot","buildJobs","pack","package","zip","createBuildJobs","jobParam","deployConfig","configModelIDs","getProcessConfigList","enabled","startDeploymentJob","createDeployJob","createAppDeployJob","userMobileUsage","mobileUsage","appMobileUsage","mobile","isMobilePublished","updateUserMobileUsage","updateApplication","updateReason","itemMap","deployItem","createDate","processConfigList","usingService","serviceName","moduleName","model","edModel","pureVal","azure","plateauGCP","includes","onTargetSelect","hasAVersion","mainOwner","at","_ctx","_cache","minus","check","onClick","$event","modulesModel","onInput","selectedOption","default","selectedClass","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals"],"sourceRoot":""}
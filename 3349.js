"use strict";(this.webpackChunkqcloud_shell=this.webpackChunkqcloud_shell||[]).push([[3349],{33163:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(34663),i=n.n(o),l=n(7638),s=n.n(l)()(i());s.push([e.id,"\nul[data-v-f9d9e2ee] {\n  list-style-type: none;\n}\n.new-module-text .mdi[data-v-f9d9e2ee] {\n  font-size: 24px;\n  margin-right: 10px;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AAuHA;EACE,qBAAqB;AACvB;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { ITreeItem, ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IMoveUseCase } from \'../../../../domain/useCase/IMoveUseCase\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n  id: string;\n  name: string;\n  description?: string;\n  type: "module" | "model";\n  prefix?: string;\n  treeItems: Array<ITreeItem>;\n}\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst props = defineProps<IMoveItemInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\nfunction move(targetFolderPath: Array<String>, targetFolderId: String) {\n  const moveUseCase = container.resolve<IMoveUseCase>(IMoveUseCase);\n  const updatedPath: Array<String> = [];\n  updatedPath.push(...targetFolderPath, targetFolderId);\n        \n  executor.execute(async () => {\n    const selectedItemId = props.id;\n    let selectedItem = modelItems.find(item => item.ID == selectedItemId)\n    if(selectedItem && selectedItem.modelType == "placeholder") {\n      moveUseCase.moveFolder(selectedItem, updatedPath, selectedItem.ID);\n    }\n    else if(selectedItem) {\n      moveUseCase.moveModel(selectedItem, updatedPath, selectedItem.ID);\n    }\n    else return;\n    emit("close");\n  }, { loading: true });\n}\nlet actions: { path: Array<String>; icon: string; label: string; indent: number; id: String }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet treeItems = viewModel.studio.items;\nconst modelItems = treeItems.filter(item => item.objectType === "model") as IModel[];\nconst moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\nconsole.log("ooops", treeItems)\n\n\n\nfunction getSortedItems(modelItems: IModel[]) {\n  modelItems.sort((a, b) => {\n    let aPath = a.path ?? [];\n    let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n      return aPath.length - bPath.length;\n    }\n\n    return 0;\n  });\n\n  function getChildren(parentId: string) {\n    return modelItems.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n  }\n\n  function sortItems(parentId: string) {\n    const result: IModel[] = [];\n\n    const directChildren = getChildren(parentId);\n    for (const child of directChildren) {\n      result.push(child);\n      result.push(...sortItems(child.ID));\n    }\n\n    return result;\n  }\n\n  return modelItems.filter(item => item.path ? item.path.length === 0 : true)\n    .reduce<IModel[]>((acc, rootItem) => {\n      acc.push(rootItem);\n      acc.push(...sortItems(rootItem.ID));\n      return acc;\n    }, []);\n}\nconsole.log("ooops1", getSortedItems(modelItems))\nconst sortedItems = getSortedItems(modelItems);\n\nfor (let modelItem of sortedItems) {\n  if (modelItem.modelType == "placeholder") {\n    let indentCalculated = modelItem.path ? (modelItem.path.length * 20 + 20) : 20;\n    actions.push({ path: modelItem.path ?? [], icon: "mdi mdi-folder-open", label: modelItem.name, indent: indentCalculated, id: modelItem.ID })\n  }\n}\nfor (let moduleItem of moduleItems) {\n  actions.push({ path: moduleItem.path ?? [], icon: "mdi mdi-puzzle", label: moduleItem.name, indent: 20, id: moduleItem.ID })\n}\n\n<\/script> \n\n<template>\n  <div class="moveDiv">\n    <div id="content-area" class="popover__content">\n      <div style="height: 100%" class="errorDiv">\n        <ul style="padding-left: 0px; margin-bottom: 0px">\n          <li v-for="action in actions" :key="action.label" @click="move(action.path, action.id)" style="padding-top: 1px"\n            :style="{ \'padding-left\': action.indent + \'px\' }">\n            <div class="createLi">\n              <p class="new-module-text">\n                <i :class="action.icon" style="margin-right: 10px;"></i>{{ action.label }}\n              </p>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<style scoped>\nul {\n  list-style-type: none;\n}\n\n.new-module-text .mdi {\n  font-size: 24px;\n  margin-right: 10px;\n}\n</style>\n\n\n \n\n<style scoped>\n.new-module-text {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n\n.createLi {\n  cursor: pointer;\n}\n\n.moveDiv {\n  margin-top: 5px;\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n}\n</style>'],sourceRoot:""}]);const r=s},55961:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(34663),i=n.n(o),l=n(7638),s=n.n(l)()(i());s.push([e.id,'\n.new-module-text[data-v-f9d9e2ee] {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n.createLi[data-v-f9d9e2ee] {\n  cursor: pointer;\n}\n.moveDiv[data-v-f9d9e2ee] {\n  margin-top: 5px;\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n}\n',"",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AAqIA;EACE,SAAS;EACT,cAAc;EACd,gBAAgB;EAChB,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,qBAAqB;AACvB;AAEA;EACE,eAAe;AACjB;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,mBAAmB;AACrB",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { ITreeItem, ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IMoveUseCase } from \'../../../../domain/useCase/IMoveUseCase\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n  id: string;\n  name: string;\n  description?: string;\n  type: "module" | "model";\n  prefix?: string;\n  treeItems: Array<ITreeItem>;\n}\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst props = defineProps<IMoveItemInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\nfunction move(targetFolderPath: Array<String>, targetFolderId: String) {\n  const moveUseCase = container.resolve<IMoveUseCase>(IMoveUseCase);\n  const updatedPath: Array<String> = [];\n  updatedPath.push(...targetFolderPath, targetFolderId);\n        \n  executor.execute(async () => {\n    const selectedItemId = props.id;\n    let selectedItem = modelItems.find(item => item.ID == selectedItemId)\n    if(selectedItem && selectedItem.modelType == "placeholder") {\n      moveUseCase.moveFolder(selectedItem, updatedPath, selectedItem.ID);\n    }\n    else if(selectedItem) {\n      moveUseCase.moveModel(selectedItem, updatedPath, selectedItem.ID);\n    }\n    else return;\n    emit("close");\n  }, { loading: true });\n}\nlet actions: { path: Array<String>; icon: string; label: string; indent: number; id: String }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet treeItems = viewModel.studio.items;\nconst modelItems = treeItems.filter(item => item.objectType === "model") as IModel[];\nconst moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\nconsole.log("ooops", treeItems)\n\n\n\nfunction getSortedItems(modelItems: IModel[]) {\n  modelItems.sort((a, b) => {\n    let aPath = a.path ?? [];\n    let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n      return aPath.length - bPath.length;\n    }\n\n    return 0;\n  });\n\n  function getChildren(parentId: string) {\n    return modelItems.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n  }\n\n  function sortItems(parentId: string) {\n    const result: IModel[] = [];\n\n    const directChildren = getChildren(parentId);\n    for (const child of directChildren) {\n      result.push(child);\n      result.push(...sortItems(child.ID));\n    }\n\n    return result;\n  }\n\n  return modelItems.filter(item => item.path ? item.path.length === 0 : true)\n    .reduce<IModel[]>((acc, rootItem) => {\n      acc.push(rootItem);\n      acc.push(...sortItems(rootItem.ID));\n      return acc;\n    }, []);\n}\nconsole.log("ooops1", getSortedItems(modelItems))\nconst sortedItems = getSortedItems(modelItems);\n\nfor (let modelItem of sortedItems) {\n  if (modelItem.modelType == "placeholder") {\n    let indentCalculated = modelItem.path ? (modelItem.path.length * 20 + 20) : 20;\n    actions.push({ path: modelItem.path ?? [], icon: "mdi mdi-folder-open", label: modelItem.name, indent: indentCalculated, id: modelItem.ID })\n  }\n}\nfor (let moduleItem of moduleItems) {\n  actions.push({ path: moduleItem.path ?? [], icon: "mdi mdi-puzzle", label: moduleItem.name, indent: 20, id: moduleItem.ID })\n}\n\n<\/script> \n\n<template>\n  <div class="moveDiv">\n    <div id="content-area" class="popover__content">\n      <div style="height: 100%" class="errorDiv">\n        <ul style="padding-left: 0px; margin-bottom: 0px">\n          <li v-for="action in actions" :key="action.label" @click="move(action.path, action.id)" style="padding-top: 1px"\n            :style="{ \'padding-left\': action.indent + \'px\' }">\n            <div class="createLi">\n              <p class="new-module-text">\n                <i :class="action.icon" style="margin-right: 10px;"></i>{{ action.label }}\n              </p>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<style scoped>\nul {\n  list-style-type: none;\n}\n\n.new-module-text .mdi {\n  font-size: 24px;\n  margin-right: 10px;\n}\n</style>\n\n\n \n\n<style scoped>\n.new-module-text {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n\n.createLi {\n  cursor: pointer;\n}\n\n.moveDiv {\n  margin-top: 5px;\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n}\n</style>'],sourceRoot:""}]);const r=s},3349:(e,t,n)=>{n.r(t),n.d(t,{default:()=>_});var o=n(71093),i=n(73843),l=n(66190),s=n(5627),r=n(64288),a=n(83487),d=n(88613);const m={class:"moveDiv"},p={id:"content-area",class:"popover__content"},c={style:{height:"100%"},class:"errorDiv"},I={style:{"padding-left":"0px","margin-bottom":"0px"}},u=["onClick"],h={class:"createLi"},g={class:"new-module-text"},f=(0,o.aZ)({__name:"moveItem",props:{id:null,name:null,description:null,type:null,prefix:null,treeItems:null},emits:["close"],setup(e,{emit:t}){var n,f;const v=e,A=s.nC.resolve(a.y),y=s.nC.resolve(d.J);let C=[];C.push({path:[],icon:"mdi mdi-vector-polyline",label:y.studio.appName,indent:0,id:y.studio.appId});let x=y.studio.items;const M=x.filter((e=>"model"===e.objectType)),b=x.filter((e=>"module"===e.objectType));function w(e){function t(n){const o=[],i=function(t){return e.filter((e=>!!e.path&&e.path[e.path.length-1]===t.toString()||!!e.parent&&e.parent.ID==t))}(n);for(const e of i)o.push(e),o.push(...t(e.ID));return o}return e.sort(((e,t)=>{var n,o;let i=null!==(n=e.path)&&void 0!==n?n:[],l=null!==(o=t.path)&&void 0!==o?o:[];return i.length!==l.length?i.length-l.length:0})),e.filter((e=>!e.path||0===e.path.length)).reduce(((e,n)=>(e.push(n),e.push(...t(n.ID)),e)),[])}console.log("ooops",x),console.log("ooops1",w(M));const D=w(M);for(let e of D)if("placeholder"==e.modelType){let t=e.path?20*e.path.length+20:20;C.push({path:null!==(n=e.path)&&void 0!==n?n:[],icon:"mdi mdi-folder-open",label:e.name,indent:t,id:e.ID})}for(let e of b)C.push({path:null!==(f=e.path)&&void 0!==f?f:[],icon:"mdi mdi-puzzle",label:e.name,indent:20,id:e.ID});return(e,n)=>((0,o.wg)(),(0,o.iD)("div",m,[(0,o._)("div",p,[(0,o._)("div",c,[(0,o._)("ul",I,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)((0,i.SU)(C),(e=>((0,o.wg)(),(0,o.iD)("li",{key:e.label,onClick:n=>function(e,n){const o=s.nC.resolve(r.E),i=[];i.push(...e,n),A.execute((async()=>{const e=v.id;let n=M.find((t=>t.ID==e));if(n&&"placeholder"==n.modelType)o.moveFolder(n,i,n.ID);else{if(!n)return;o.moveModel(n,i,n.ID)}t("close")}),{loading:!0})}(e.path,e.id),style:(0,l.normalizeStyle)([{"padding-top":"1px"},{"padding-left":e.indent+"px"}])},[(0,o._)("div",h,[(0,o._)("p",g,[(0,o._)("i",{class:(0,l.normalizeClass)(e.icon),style:{"margin-right":"10px"}},null,2),(0,o.Uk)((0,l.toDisplayString)(e.label),1)])])],12,u)))),128))])])])]))}});var v=n(17450),A=n.n(v),y=n(29530),C=n.n(y),x=n(16199),M=n.n(x),b=n(40458),w=n.n(b),D=n(62916),E=n.n(D),P=n(92165),B=n.n(P),T=n(33163),S={};S.styleTagTransform=B(),S.setAttributes=w(),S.insert=M().bind(null,"head"),S.domAPI=C(),S.insertStyleElement=E(),A()(T.Z,S),T.Z&&T.Z.locals&&T.Z.locals;var U=n(55961),k={};k.styleTagTransform=B(),k.setAttributes=w(),k.insert=M().bind(null,"head"),k.domAPI=C(),k.insertStyleElement=E(),A()(U.Z,k),U.Z&&U.Z.locals&&U.Z.locals;const _=(0,n(32525).Z)(f,[["__scopeId","data-v-f9d9e2ee"]])}}]);
//# sourceMappingURL=3349.js.map
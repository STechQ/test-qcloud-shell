{"version":3,"file":"9721.js","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/chatbot.vue?8b4b","webpack://qcloud_shell/./src/images/profile-image-dark-in-menu.svg","webpack://qcloud_shell/./src/common/promiseHelper.ts","webpack://qcloud_shell/./src/domain/core/diContainer.ts","webpack://qcloud_shell/./src/domain/infrastructure/IQCloudApi.ts","webpack://qcloud_shell/./src/domain/presentation/IDialog.ts","webpack://qcloud_shell/./src/domain/presentation/IRouter.ts","webpack://qcloud_shell/./src/domain/useCase/IAuthenticationUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IUseCaseExecutor.ts","webpack://qcloud_shell/./src/domain/viewModel/IViewModel.ts","webpack://qcloud_shell/./src/images/chatbotLoading.svg","webpack://qcloud_shell/./src/images/cleaning.svg","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/chatbot.vue?173f","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/chatbot.vue?3f9a","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/chatbot.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.resize-overlay[data-v-7f532546] {\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100vh;\\n        background: transparent;\\n        cursor: nwse-resize;\\n        z-index: 9999;\\n}\\n.chatbot-icon-container[data-v-7f532546] {\\n        width: 56px;\\n        height: 56px;\\n        border-radius: 50%;\\n        background-color: #4F537B;\\n        border: none;\\n        display: flex;\\n        justify-content: center;\\n}\\n.chat-icons[data-v-7f532546] {\\n        font-size: 22px;\\n        margin-right: 6px;\\n}\\n.chat-messages[data-v-7f532546] {\\n        overflow-y: auto;\\n        width: 100%;\\n        margin-bottom: 12px;\\n}\\n.chat-reset-icon[data-v-7f532546] {\\n        width: 30px;\\n        height: 30px;\\n        margin-right: 3px;\\n}\\n.chatbot-container[data-v-7f532546] {\\n        position: absolute;\\n        bottom: 30px;\\n        right: 50px;\\n        z-index: 9998;\\n}\\n.chatbot-icon[data-v-7f532546] {\\n        font-size: 33px;\\n        cursor: pointer;\\n        color: #eeeeee;\\n}\\n.chatbot-message .chat-icons[data-v-7f532546] {\\n        color: #151233;\\n}\\n.chatbot-message .message-content[data-v-7f532546] {\\n        background-color: #eeeeee;\\n        padding: 20px 25px 20px 25px;\\n        position: relative;\\n        border-radius: 15px;\\n}\\n.chatbot-resize-icon[data-v-7f532546] {\\n        font-size: 24px;\\n        transform: rotate(180deg);\\n        margin-left: 6px;\\n}\\n.chatbot-resize-icon[data-v-7f532546]:hover {\\n        cursor: nwse-resize;\\n}\\n.feedback-box[data-v-7f532546] {\\n        display: flex;\\n        background-color: #f0f0f0;\\n        border-radius: 10px;\\n        padding: 6px;\\n        transition: opacity 0.3s;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n        justify-content: center;\\n        align-items: center;\\n}\\n.feedback-button[data-v-7f532546] {\\n        border: none;\\n        background-color: transparent;\\n        font-size: 14px;\\n        cursor: pointer;\\n        margin-right: 5px;\\n}\\n.feedback-button[data-v-7f532546]:hover {\\n        background-color: #e3e3e3;\\n        border-radius: 6px;\\n}\\n.feedback-container[data-v-7f532546] {\\n        position: absolute;\\n        bottom: -27px;\\n        right: 14px;\\n        display: flex;\\n        align-items: center;\\n}\\n.follow-up-questions[data-v-7f532546] {\\n        display: flex;\\n        justify-content: end;\\n        flex-wrap: wrap;\\n        margin-top: 10px;\\n}\\n.icon-group[data-v-7f532546] {\\n        display: flex;\\n        justify-content: flex-end;\\n}\\n.input-area-container[data-v-7f532546] {\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n}\\n.input-field-with-limit[data-v-7f532546] {\\n        position: relative;\\n        display: flex;\\n        align-items: center;\\n}\\n.input-field-container[data-v-7f532546] {\\n        width: 100%;\\n        border-radius: 8px;\\n        background-color: #eeeeee;\\n        border: 1px solid #ccc;\\n}\\n.input-bottom[data-v-7f532546] {\\n        display: flex;\\n        align-items: center;\\n        justify-content: end;\\n        height: 20px;\\n}\\n.input-field[data-v-7f532546] {\\n        box-sizing: border-box;\\n        padding: 5px 6px 22px 10px;\\n        border-radius: 8px;\\n        background-color: #eeeeee;\\n        border: none;\\n        outline: none;\\n        width: 100%;\\n        height: auto;\\n        min-height: 80px;\\n        font-size: 14px;\\n        resize: none; \\n        word-wrap: break-word;\\n}\\n.input-field[data-v-7f532546]::-webkit-resizer {\\n       display: none;\\n}\\n.character-limit[data-v-7f532546] {\\n        font-size: 13px;\\n        color: #777;\\n        padding-bottom: 6px;\\n        width: 100px; \\n        text-align: right;\\n}\\n.send-icon[data-v-7f532546] {\\n        margin: 0px 5px 5px 5px;\\n        cursor: pointer;\\n        color: #777;\\n        font-size: 25px;\\n}\\n.send-icon[data-v-7f532546]:hover {\\n        color: #989AC1;\\n}\\n.link-button[data-v-7f532546] {\\n        display: inline-block;\\n        margin-right: 8px;\\n        margin-bottom: 8px;\\n        padding: 6px 12px;\\n        overflow: hidden;\\n        background-color: #989AC1;\\n        color: #FFFFFF;\\n        border-radius: 4px;\\n        text-decoration: none;\\n        cursor: pointer;\\n}\\n.loading-image[data-v-7f532546] {\\n        width: 50px;\\n        height: 50px;\\n}\\n.loading-text[data-v-7f532546] {\\n        color: #ccc;\\n        font-size: 12px;\\n}\\n.markdown-content[data-v-7f532546] {\\n        font-family: Segoe WPC,Segoe UI,sans-serif;\\n        font-size: 15px;\\n}\\n.menu-buttons[data-v-7f532546] {\\n        width: 20px;\\n        height: 20px;\\n        cursor: pointer;\\n        border: none;\\n        background: transparent;\\n        font-size: 20px;\\n        outline: none;\\n        margin-bottom: 15px;\\n}\\n.menu-icons[data-v-7f532546]:hover {\\n        color: #9f2601;\\n}\\n.message-content[data-v-7f532546] {\\n        display: inline-block;\\n        border-radius: 15px;\\n        max-width: 80%;\\n        min-width: 10%;\\n        margin-bottom: 30px;\\n        word-wrap: break-word;\\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\\n}\\n.message-links[data-v-7f532546] {\\n        display: flex;\\n        flex-wrap: wrap;\\n        margin-top: 40px;\\n        width: 100%;\\n}\\n.message-loading[data-v-7f532546] {\\n        width: 100%;\\n        height: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: center;\\n}\\n.question-button[data-v-7f532546] {\\n        background-color: white;\\n        color: #4F537B;\\n        border: 1px solid #4F537B;\\n        padding: 6px 12px;\\n        font-size: 14px;\\n        border-radius: 5px;\\n        margin: 5px;\\n        cursor: pointer;\\n        font-family: Segoe WPC,Segoe UI,sans-serif;\\n}\\n.question-button[data-v-7f532546]:hover {\\n        background-color: #989AC1;\\n        color: white;\\n}\\n.reset-button[data-v-7f532546] {\\n        cursor: pointer;\\n        border-radius: 50%;\\n        border: none;\\n        background-color: #4F537B;\\n        font-size: 20px;\\n        outline: none;\\n        margin-right: 10px;\\n        padding: 5px;\\n}\\n.reset-button[data-v-7f532546]:hover {\\n        background-color: #151233;\\n}\\n.response-text[data-v-7f532546] {\\n        font-family: Segoe WPC, Segoe UI, sans-serif;\\n        font-size: 15px;\\n}\\n.top-menu[data-v-7f532546] {\\n        display: flex;\\n        justify-content: space-between;\\n        align-items: center;\\n        width: 100%;\\n        padding-right: 14px;\\n}\\n.user-message .chat-icons[data-v-7f532546] {\\n        color: white;\\n}\\n.user-message .message-content[data-v-7f532546] {\\n        background-color: #4F537B;\\n        color: white;\\n        padding: 12px;\\n        border-radius: 15px;\\n        font-family: Segoe WPC, Segoe UI, sans-serif;\\n}\\n.user-message[data-v-7f532546] {\\n        display: flex;\\n        justify-content: flex-end;\\n        margin-top: 12px;\\n        margin-bottom: 12px;\\n}\\n.chat-window-container[data-v-7f532546] {\\n        position: fixed;\\n        bottom: 100px;\\n        right: 50px;\\n        width: 500px;\\n        height: 700px;\\n        border-radius: 5px;\\n        background-color: white;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n}\\n.chat-window[data-v-7f532546] {\\n        height: calc(100% - 44px);\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: space-between;\\n        padding: 20px 20px 6px 20px;\\n}\\n.chatbot-message[data-v-7f532546] {\\n        display: flex;\\n        align-items: end;\\n}\\n.icon-group[data-v-7f532546] {\\n        display: flex;\\n        justify-content: flex-end;\\n}\\n.input-field-container[data-v-7f532546] {\\n        width: 100%;\\n}\\n.message-links[data-v-7f532546] {\\n        display: flex;\\n        flex-wrap: wrap;\\n        margin-top: 40px;\\n        width: 100%;\\n}\\n.message-content[data-v-7f532546] {\\n        display: inline-block;\\n        border-radius: 15px;\\n        max-width: 80%;\\n        min-width: 10%;\\n        margin-bottom: 30px;\\n        word-wrap: break-word;\\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\\n}\\n\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/chatbot.vue\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"chatbot-container\\\">\\n        <div v-if=\\\"resizingOverlay\\\" class=\\\"resize-overlay\\\"></div>\\n        <button @click=\\\"toggleChat\\\" class=\\\"chatbot-icon-container\\\"><i class=\\\"mdi mdi-robot chatbot-icon\\\"></i></button>\\n        <div v-if=\\\"showChat\\\" class=\\\"chat-window-container\\\" ref=\\\"chatWindowContainerRef\\\">\\n            <div class=\\\"top-menu\\\">\\n                <i class=\\\"mdi mdi-resize-bottom-right chatbot-resize-icon\\\" @mousedown=\\\"startResize\\\"></i>\\n                <div class=\\\"icon-group\\\">\\n                    <button class=\\\"menu-buttons\\\" @click=\\\"toggleChat\\\"><i class=\\\"mdi mdi-window-close menu-icons\\\"></i></button>\\n                </div>\\n            </div>\\n            <div class=\\\"chat-window\\\">\\n                <div class=\\\"chat-messages\\\" ref=\\\"chatWindowRef\\\">\\n                    <div v-for=\\\"message in chatMessages\\\" :key=\\\"message.id\\\" :class=\\\"getMessageClass(message)\\\">\\n                        <!-- <i v-if=\\\"isChatbotResponse(message) && !isLoadingChatbotResponse(message)\\\" class=\\\"mdi mdi-robot-happy-outline chat-icons\\\"></i> -->\\n                        <div class=\\\"message-content\\\" @mouseenter=\\\"handleMouseEnter(message)\\\" @mouseleave=\\\"handleMouseLeave(message)\\\">\\n                            <!-- <i v-if=\\\"isChatbotResponse(message) && !isLoadingChatbotResponse(message)\\\" class=\\\"mdi mdi-robot-happy-outline chat-icons\\\"></i>\\n                            <i v-if=\\\"!isChatbotResponse(message)\\\" class=\\\"mdi mdi-account-circle chat-icons\\\"></i> -->\\n                            <div v-if=\\\"isChatbotResponse(message)\\\" :key=\\\"message.id\\\" class=\\\"markdown-content response-text\\\" v-html=\\\"convertToMarkdown(message.content)\\\"></div>\\n                            <div v-else>{{ message.content }}</div>\\n                            <div v-if=\\\"message.id === 0 && isChatbotResponse(message)\\\">\\n                                <hr style=\\\"margin: 20px 0; border-color: #ccc;\\\">\\n                                <div class=\\\"follow-up-questions\\\">\\n                                    <button\\n                                        v-for=\\\"(question, index) in selectedQuestions\\\"\\n                                        :key=\\\"index\\\"\\n                                        @click=\\\"handleQuestionClick(question)\\\"\\n                                        class=\\\"question-button\\\"\\n                                    >\\n                                        {{ question }}\\n                                    </button>\\n                                </div>\\n                            </div>\\n                            <div v-if=\\\"isChatbotResponse(message) && loadingStates[message.id]\\\" class=\\\"message-loading\\\">\\n                                <img class=\\\"loading-image\\\" src=\\\"../../../../images/chatbotLoading.svg\\\" alt=\\\"studio-logo\\\" />\\n                                <p class=\\\"loading-text\\\">Searching documentation. This may take a second!</p>\\n                            </div>\\n                            <div v-if=\\\"isChatbotResponse(message) && message.links\\\" class=\\\"message-links\\\">\\n                                <div style=\\\"width: 100%;\\\">\\n                                    <p class=\\\"response-text\\\">View More About:</p>\\n                                </div>\\n                                <a v-for=\\\"(link, index) in message.links\\\" :key=\\\"index\\\" :href=\\\"link.linkUrl\\\" target=\\\"_blank\\\" class=\\\"link-button response-text\\\"><i class=\\\"mdi mdi-link-variant chat-icons\\\" style=\\\"margin-right: 5px; color: white; font-size: 18px;\\\"></i>{{ link.pageName }}</a>\\n                            </div>\\n                            <div v-if=\\\"isChatbotResponse(message) && message.followUpQuestions && message.followUpQuestions.length > 0\\\">\\n                                <hr style=\\\"margin: 20px 0; border-color: #ccc;\\\">\\n                                <div class=\\\"follow-up-questions\\\">\\n                                    <button\\n                                        v-for=\\\"question in message.followUpQuestions\\\"\\n                                        :key=\\\"question\\\"\\n                                        @click=\\\"handleQuestionClick(question)\\\"\\n                                        class=\\\"question-button\\\"\\n                                    >\\n                                        {{ question }}\\n                                    </button>\\n                                </div>\\n                            </div>\\n                            <div v-if=\\\"isChatbotResponse(message) && message.showFeedBack && !isLoadingChatbotResponse(message)\\\" class=\\\"feedback-container\\\">\\n                                <!-- <div style=\\\"font-size: 10px; font-family: 'Roboto'; margin-right: 4px; margin-top: 4px;\\\">Was this helpful?</div> -->\\n                                <div class=\\\"feedback-box\\\">\\n                                    <button class=\\\"feedback-button\\\" @click=\\\"submitFeedback(true)\\\"><i class=\\\"mdi mdi-thumb-up\\\"></i></button>\\n                                    <div style=\\\"background-color: #c1c1c1; width: 1px; height: 16px; margin-right: 6px;\\\"></div>\\n                                    <button class=\\\"feedback-button\\\" @click=\\\"submitFeedback(false)\\\"><i class=\\\"mdi mdi-thumb-down\\\"></i></button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"input-area-container\\\">\\n                    <button class=\\\"reset-button\\\" @click=\\\"clearChat\\\"><img class=\\\"chat-reset-icon\\\" src=\\\"../../../../images/cleaning.svg\\\" alt=\\\"reset-chat\\\" /></button>\\n                    <div class=\\\"input-field-container\\\">\\n                        <textarea\\n                            v-model=\\\"newMessage\\\"\\n                            @keyup.enter=\\\"sendMessage\\\"\\n                            type=\\\"text\\\"\\n                            placeholder=\\\"Ask me about Plateau Studio...\\\"\\n                            class=\\\"input-field\\\"\\n                            :maxlength=\\\"1000\\\"\\n                            rows=\\\"1\\\"\\n                        />\\n                        <div class=\\\"input-bottom\\\">\\n                            <div class=\\\"character-limit\\\">{{ newMessage.length }}/1000</div>\\n                            <i class=\\\"mdi mdi-send send-icon\\\" @click=\\\"sendMessage\\\"></i>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n</template>\\n  \\n<script setup lang=\\\"ts\\\">\\nimport { ref, onMounted, reactive, nextTick } from \\\"vue\\\";\\nimport { container } from \\\"../../../../domain/core/diContainer\\\";\\nimport { IViewModel } from \\\"../../../../domain/viewModel/IViewModel\\\";\\nimport MarkdownIt from \\\"markdown-it\\\";\\nimport { IQCloudApi } from \\\"../../../../domain/infrastructure/IQCloudApi\\\";\\n\\n\\n    const viewModel = container.resolve<IViewModel>(IViewModel);\\n    const qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\n    const user = viewModel.user!;\\n    const chatWindowRef = ref<HTMLElement | null>(null);\\n    const chatWindowContainerRef = ref<HTMLElement | null>(null);\\n    const placeholder = ref(\\\"\\\");\\n    const showChat = ref(false);\\n    const newMessage = ref(\\\"\\\");\\n    const showFeedBackBox = ref(false);\\n    const selectedQuestions: Array<string> = [];\\n    const resizingOverlay = ref(false);\\n\\n    const placeholderQuestions: Array<string> = [\\n        \\\"How can I route to another page?\\\",\\n        \\\"How can I export my project?\\\",\\n        \\\"What is Live Preview and Publish used for in Studio?\\\",\\n    ];  \\n\\n    const selectRandomQuestions = () => {\\n        selectedQuestions.length = 0;\\n        const shuffledQuestions = placeholderQuestions.slice();\\n        for (let i = 0; i < 3; i++) {\\n            const randomIndex = Math.floor(Math.random() * shuffledQuestions.length);\\n            selectedQuestions.push(shuffledQuestions.splice(randomIndex, 1)[0]);\\n        }\\n    };\\n\\n    //If followUpQuestions has < 3 elements, it will display all otherwise it will randomly select 3 elements\\n    const getRandomFollowUpQuestions = (questionsArray: Array<string>, count: number) => {\\n        const shuffledQuestions = questionsArray.slice();\\n        for (let i = shuffledQuestions.length - 1; i > 0; i--) {\\n            const j = Math.floor(Math.random() * (i + 1));\\n            [shuffledQuestions[i], shuffledQuestions[j]] = [shuffledQuestions[j], shuffledQuestions[i]]; \\n        }\\n        return shuffledQuestions.slice(0, Math.min(count, shuffledQuestions.length)); \\n    };\\n\\n    \\n    let loadingStates: Record<number, boolean> = {};\\n\\n    const ROLE_USER = \\\"USER\\\";\\n    const ROLE_AI = \\\"AI\\\";\\n    type Role = \\\"USER\\\" | \\\"AI\\\";\\n\\n    interface ChatMessage {\\n        id: number,\\n        content: string,\\n        role: Role,\\n        links?: Array<{ pageName: string, linkUrl:string }>,\\n        showFeedBack: boolean,\\n        followUpQuestions?: Array<string>,\\n    }\\n\\n    interface ChatMessagesArray extends Array<ChatMessage> {};\\n\\n\\n    const chatMessages: ChatMessagesArray  = reactive([\\n        { id: 0, content: `Hey ${user.name}! What's on your mind?`, role: ROLE_AI, showFeedBack: false },\\n    ]);\\n\\n\\n    onMounted(() => {\\n        scrollToBottom();\\n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\\n        placeholder.value = randomQuestion;\\n        selectRandomQuestions();\\n    });\\n\\n    const scrollToBottom = () => {\\n        const chatWindow = chatWindowRef.value;\\n        if (chatWindow) {\\n            chatWindow.scrollTop = chatWindow.scrollHeight - chatWindow.clientHeight;\\n        }\\n    };\\n\\n\\n    const toggleChat = () => {\\n        showChat.value = !showChat.value;\\n    };\\n\\n    const handleQuestionClick = (question: string) => {\\n        newMessage.value = question;\\n        sendMessage();\\n    };\\n\\n    const sendMessage = async () => {\\n\\n        if (newMessage.value.trim() === \\\"\\\") return;\\n         \\n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\\n        placeholder.value = randomQuestion;\\n\\n        const userQuestion: ChatMessage = {\\n            id: chatMessages.length + 1,\\n            content: newMessage.value,\\n            role: ROLE_USER,\\n            showFeedBack: false\\n        };\\n\\n        chatMessages.push(userQuestion);\\n        let chatHistory = [...chatMessages]; \\n        newMessage.value = \\\"\\\";\\n\\n        let newId = chatMessages.length + 1;\\n        const chatbotResponse: ChatMessage = {\\n            id: newId,\\n            content: \\\"\\\",\\n            role: ROLE_AI, \\n            showFeedBack: false\\n        };\\n        chatMessages.push(chatbotResponse);\\n\\n        loadingStates[chatbotResponse.id] = true;\\n\\n        nextTick(() => {\\n            scrollToBottom();\\n        });\\n \\n        const question = userQuestion.content;\\n        let response = await qcloudApi.getchatbotresponse(question, chatHistory);\\n        \\n        let chatBotResponse = response ? response.responseText : \\\"Unable to answer your question at this time. Try to ask again!\\\";\\n        \\n        let lastMessage = chatMessages.find(msg => msg.id === newId);\\n        lastMessage!.content = chatBotResponse;\\n        loadingStates[chatbotResponse.id] = false;\\n\\n        let verifiedUrls: Array<string> = response?.verifiedUrls;\\n        if (verifiedUrls && verifiedUrls.length > 0) {\\n            let finalUrlObj = verifiedUrls.map(url => {\\n                let docName = url.substring(url.lastIndexOf(\\\"/\\\") + 1).replace(/-/g,\\\" \\\");\\n                let modifiedDocName = docName.replace(/\\\\b\\\\w/g, l => l.toUpperCase());\\n                return {pageName: modifiedDocName, linkUrl: url};\\n            });\\n            chatbotResponse.links = finalUrlObj;\\n        }\\n\\n        let followUpQuestions: Array<string> = response.followUpQuestions; \\n        if (followUpQuestions && followUpQuestions.length > 0) { \\n            chatbotResponse.followUpQuestions = getRandomFollowUpQuestions(followUpQuestions, 3); \\n        }\\n\\n        nextTick(() => {\\n            scrollToBottom();\\n        });\\n\\n    };\\n\\n    const isChatbotResponse = (message: ChatMessage) => {\\n        return message.role === ROLE_AI;\\n    };\\n\\n    const clearChat = () => {\\n        chatMessages.splice(1, chatMessages.length);\\n    };\\n\\n    let resizing = false;\\n    let initialX = 0;\\n    let initialY = 0;\\n    let initialWidth = 900;\\n    let initialHeight = 700;\\n\\n    const startResize = (event: MouseEvent) => {\\n        resizingOverlay.value = true;\\n        event.stopPropagation();\\n        event.preventDefault();\\n        resizing = true;\\n        initialX = event.clientX;\\n        initialY = event.clientY;\\n        initialWidth = chatWindowContainerRef.value?.offsetWidth || 0;\\n        initialHeight = chatWindowContainerRef.value?.offsetHeight || 0;\\n        document.body.style.cursor = \\\"nwse-resize\\\";\\n        document.body.style.userSelect = \\\"none\\\";\\n        document.addEventListener(\\\"mousemove\\\", handleResize);\\n        document.addEventListener(\\\"mouseup\\\", stopResize);\\n    };\\n\\n    const handleResize = (event: MouseEvent) => {\\n        if (resizing) {\\n            event.stopPropagation();\\n            event.preventDefault();\\n            const newWidth = initialWidth + (initialX - event.clientX );\\n            const newHeight = initialHeight + (initialY - event.clientY);\\n            const chatWindow = chatWindowContainerRef.value;\\n            if (chatWindow) {\\n                chatWindow.style.width = `${Math.max(500, newWidth)}px`;\\n                chatWindow.style.height = `${Math.max(700, newHeight)}px`;\\n                const feedbackIconsVisible = chatMessages.some(message => isChatbotResponse(message) && message.showFeedBack);\\n                if (!feedbackIconsVisible) {\\n                    scrollToBottom();\\n                }\\n            }\\n        }\\n    };\\n\\n    const stopResize = () => {\\n        resizingOverlay.value = false;\\n        resizing = false;\\n        document.body.style.cursor = \\\"auto\\\";\\n        document.body.style.userSelect = \\\"auto\\\";\\n        document.removeEventListener(\\\"mousemove\\\", handleResize);\\n        document.removeEventListener(\\\"mouseup\\\", stopResize);\\n    };\\n\\n\\n    const isLoadingChatbotResponse = (message: ChatMessage) => {\\n        return isChatbotResponse(message) && loadingStates[message.id];\\n    };\\n\\n    const getMessageClass = (message: ChatMessage) => {\\n        return message.role === ROLE_USER ? 'user-message' : 'chatbot-message';\\n    };\\n\\n    \\n    const markdown = new MarkdownIt();\\n    const convertToMarkdown = (markdownText: string) => {\\n        let markdownResponse = markdown.render(markdownText);\\n        markdownResponse = markdownResponse.replace(/<code>/g, \\\"<code style='color:#ee4f54; font-weight: bold;'>\\\");\\n        return markdownResponse;\\n    };\\n\\n\\n    const submitFeedback = (isPositive: boolean) => {\\n        // Logic to handle feedback submission\\n        showFeedBackBox.value = false;\\n    };\\n\\n    const handleMouseEnter = (message: ChatMessage) => {\\n        if (isChatbotResponse(message)) {\\n            message.showFeedBack = true;\\n        }\\n    };\\n\\n    const handleMouseLeave = (message: ChatMessage) => {\\n        if (isChatbotResponse(message)) {\\n            message.showFeedBack = false;\\n        }\\n    };\\n\\n</script>\\n\\n\\n<style scoped>\\n    .resize-overlay {\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100vh;\\n        background: transparent;\\n        cursor: nwse-resize;\\n        z-index: 9999;\\n    }\\n\\n    .chatbot-icon-container {\\n        width: 56px;\\n        height: 56px;\\n        border-radius: 50%;\\n        background-color: #4F537B;\\n        border: none;\\n        display: flex;\\n        justify-content: center;\\n    }\\n\\n    .chat-icons {\\n        font-size: 22px;\\n        margin-right: 6px;\\n    }\\n\\n    .chat-messages {\\n        overflow-y: auto;\\n        width: 100%;\\n        margin-bottom: 12px;\\n    }\\n\\n    .chat-reset-icon {\\n        width: 30px;\\n        height: 30px;\\n        margin-right: 3px;\\n    }\\n\\n    .chatbot-container {\\n        position: absolute;\\n        bottom: 30px;\\n        right: 50px;\\n        z-index: 9998;\\n    }\\n\\n    .chatbot-icon {\\n        font-size: 33px;\\n        cursor: pointer;\\n        color: #eeeeee;\\n    }\\n\\n    .chatbot-message .chat-icons {\\n        color: #151233;\\n    }\\n\\n    .chatbot-message .message-content {\\n        background-color: #eeeeee;\\n        padding: 20px 25px 20px 25px;\\n        position: relative;\\n        border-radius: 15px;\\n    }\\n\\n    .chatbot-resize-icon {\\n        font-size: 24px;\\n        transform: rotate(180deg);\\n        margin-left: 6px;\\n    }\\n\\n    .chatbot-resize-icon:hover {\\n        cursor: nwse-resize;\\n    }\\n\\n    .feedback-box {\\n        display: flex;\\n        background-color: #f0f0f0;\\n        border-radius: 10px;\\n        padding: 6px;\\n        transition: opacity 0.3s;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    .feedback-button {\\n        border: none;\\n        background-color: transparent;\\n        font-size: 14px;\\n        cursor: pointer;\\n        margin-right: 5px;\\n    }\\n\\n    .feedback-button:hover {\\n        background-color: #e3e3e3;\\n        border-radius: 6px;\\n    }\\n\\n    .feedback-container {\\n        position: absolute;\\n        bottom: -27px;\\n        right: 14px;\\n        display: flex;\\n        align-items: center;\\n    }\\n\\n    .follow-up-questions {\\n        display: flex;\\n        justify-content: end;\\n        flex-wrap: wrap;\\n        margin-top: 10px;\\n    }\\n\\n    .icon-group {\\n        display: flex;\\n        justify-content: flex-end;\\n    }\\n\\n    .input-area-container {\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    .input-field-with-limit {\\n        position: relative;\\n        display: flex;\\n        align-items: center;\\n    }\\n\\n\\n    .input-field-container {\\n        width: 100%;\\n        border-radius: 8px;\\n        background-color: #eeeeee;\\n        border: 1px solid #ccc;\\n    }\\n\\n    .input-bottom {\\n        display: flex;\\n        align-items: center;\\n        justify-content: end;\\n        height: 20px;\\n    }\\n\\n    .input-field {\\n        box-sizing: border-box;\\n        padding: 5px 6px 22px 10px;\\n        border-radius: 8px;\\n        background-color: #eeeeee;\\n        border: none;\\n        outline: none;\\n        width: 100%;\\n        height: auto;\\n        min-height: 80px;\\n        font-size: 14px;\\n        resize: none; \\n        word-wrap: break-word; \\n    }\\n\\n    .input-field::-webkit-resizer {\\n       display: none;\\n    }\\n\\n    .character-limit {\\n        font-size: 13px;\\n        color: #777;\\n        padding-bottom: 6px;\\n        width: 100px; \\n        text-align: right;\\n    }\\n\\n    .send-icon {\\n        margin: 0px 5px 5px 5px;\\n        cursor: pointer;\\n        color: #777;\\n        font-size: 25px;\\n    }\\n\\n    .send-icon:hover {\\n        color: #989AC1;\\n    }\\n\\n    .link-button {\\n        display: inline-block;\\n        margin-right: 8px;\\n        margin-bottom: 8px;\\n        padding: 6px 12px;\\n        overflow: hidden;\\n        background-color: #989AC1;\\n        color: #FFFFFF;\\n        border-radius: 4px;\\n        text-decoration: none;\\n        cursor: pointer;\\n    }\\n\\n    .loading-image {\\n        width: 50px;\\n        height: 50px;\\n    }\\n\\n    .loading-text {\\n        color: #ccc;\\n        font-size: 12px;\\n    }\\n\\n    .markdown-content {\\n        font-family: Segoe WPC,Segoe UI,sans-serif;\\n        font-size: 15px;\\n    }\\n\\n    .menu-buttons {\\n        width: 20px;\\n        height: 20px;\\n        cursor: pointer;\\n        border: none;\\n        background: transparent;\\n        font-size: 20px;\\n        outline: none;\\n        margin-bottom: 15px;\\n    }\\n\\n    .menu-icons:hover {\\n        color: #9f2601;\\n    }\\n\\n    .message-content {\\n        display: inline-block;\\n        border-radius: 15px;\\n        max-width: 80%;\\n        min-width: 10%;\\n        margin-bottom: 30px;\\n        word-wrap: break-word;\\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\\n    }\\n\\n    .message-links {\\n        display: flex;\\n        flex-wrap: wrap;\\n        margin-top: 40px;\\n        width: 100%;\\n    }\\n\\n    .message-loading {\\n        width: 100%;\\n        height: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    .question-button {\\n        background-color: white;\\n        color: #4F537B;\\n        border: 1px solid #4F537B;\\n        padding: 6px 12px;\\n        font-size: 14px;\\n        border-radius: 5px;\\n        margin: 5px;\\n        cursor: pointer;\\n        font-family: Segoe WPC,Segoe UI,sans-serif;\\n    }\\n\\n    .question-button:hover {\\n        background-color: #989AC1;\\n        color: white;\\n    }\\n\\n    .reset-button {\\n        cursor: pointer;\\n        border-radius: 50%;\\n        border: none;\\n        background-color: #4F537B;\\n        font-size: 20px;\\n        outline: none;\\n        margin-right: 10px;\\n        padding: 5px;\\n    }\\n\\n    .reset-button:hover {\\n        background-color: #151233;\\n    }\\n\\n    .response-text {\\n        font-family: Segoe WPC, Segoe UI, sans-serif;\\n        font-size: 15px;\\n    }\\n\\n    .top-menu {\\n        display: flex;\\n        justify-content: space-between;\\n        align-items: center;\\n        width: 100%;\\n        padding-right: 14px;\\n    }\\n\\n    .user-message .chat-icons {\\n        color: white;\\n    }\\n\\n    .user-message .message-content {\\n        background-color: #4F537B;\\n        color: white;\\n        padding: 12px;\\n        border-radius: 15px;\\n        font-family: Segoe WPC, Segoe UI, sans-serif;\\n    }\\n\\n    .user-message {\\n        display: flex;\\n        justify-content: flex-end;\\n        margin-top: 12px;\\n        margin-bottom: 12px;\\n    }\\n\\n    .chat-window-container {\\n        position: fixed;\\n        bottom: 100px;\\n        right: 50px;\\n        width: 500px;\\n        height: 700px;\\n        border-radius: 5px;\\n        background-color: white;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n    }\\n\\n    .chat-window {\\n        height: calc(100% - 44px);\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: space-between;\\n        padding: 20px 20px 6px 20px;\\n    }\\n\\n    .chatbot-message {\\n        display: flex;\\n        align-items: end;\\n    }\\n\\n    .icon-group {\\n        display: flex;\\n        justify-content: flex-end;\\n    }\\n\\n    .input-field-container {\\n        width: 100%;\\n    }\\n\\n    .message-links {\\n        display: flex;\\n        flex-wrap: wrap;\\n        margin-top: 40px;\\n        width: 100%;\\n    }\\n\\n    .message-content {\\n        display: inline-block;\\n        border-radius: 15px;\\n        max-width: 80%;\\n        min-width: 10%;\\n        margin-bottom: 30px;\\n        word-wrap: break-word;\\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\\n    }\\n\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export default __webpack_public_path__ + \"9a830afdb3af3bb0515b62ea00be093f.svg\";","export interface IPromiseData<T> {\n    promise: Promise<T>;\n    resolver: (value: T | PromiseLike<T>) => void;\n    reject: (reason?: any) => void;\n    startTimer: (timeout: number) => void;\n}\n\n//some platforms have syncronous resolve problem (ex: IOS JavascriptCore)\ndeclare var doNothing: any;\nlet syncResolved = false as boolean;\nnew Promise<void>(res => res()).then(() => syncResolved = true);\ntypeof(doNothing) != \"undefined\" && doNothing();\nconst syncResolveProblem = syncResolved === true; // platform has sync resolve problem or not\n\ntype ResolveFunc<T> = (value: T | PromiseLike<T>) => void;\n/**\n * @param timeout timeout time in ms, undefined if infinite\n */\nexport function createPromiseData<T>(timeout?: number, opt: { fixSyncResolve?: boolean } = {}): IPromiseData<T> {\n    const syncResolveFixer = (cb: ResolveFunc<T>) => syncResolveProblem && opt.fixSyncResolve ? (value: T | PromiseLike<T>) => setTimeout(() => cb(value)) : cb;\n    let resolver: ResolveFunc<T> = <any>undefined, reject: (reason?: any) => void = <any>undefined;\n    let timer: number;\n    const startTimer: IPromiseData<T>[\"startTimer\"] = (timeout: number) => {\n        if (timer) { clearTimeout(timer); }\n        timer = setTimeout(() => { reject(new Error(`The operation has timed out. timeoutValue  : ${timeout}`)); }, timeout) as unknown as number;\n    }\n\n    if (timeout) {\n        startTimer(timeout);\n    }\n\n    return {\n        startTimer,\n        promise: new Promise<T>((res, rej) => { resolver = syncResolveFixer(res); reject = rej; }),\n        resolver,\n        reject\n    };\n}","import { container, singleton, inject, injectable } from \"tsyringe\";\nimport { DependencyContainer } from \"tsyringe\";\nimport { createPromiseData } from \"../../common/promiseHelper\";\n\ninterface IDependencyContainer extends DependencyContainer { }; // for vite vs webpack :( remember\n\nfunction sleep() {\n    const prom = createPromiseData<void>();\n    setTimeout(() => { prom.resolver() }, 100);\n    return prom.promise;\n}\n\nexport async function delayWithResolve<TInterface>(dependency: symbol, cb: (dep: TInterface) => void | Promise<void>) {\n    await delayTillResolve([dependency]);\n    const dep = container.resolve<TInterface>(dependency);\n    await cb(dep);\n}\nexport async function delayTillResolve(dependencies: Array<symbol>, cb?: () => void | Promise<void>) {\n    let run = false;\n    while (!run) {\n        try {\n            dependencies.forEach(dependency => container.resolve(dependency));\n            run = true;\n        } catch (err) {\n            await sleep();\n        }\n    }\n    await cb?.();\n}\n\nexport { container, singleton, inject, injectable, IDependencyContainer }","import { ExportType, ICreateDeployJobParam, ICreateExportJobParam, IDeployJobItem, IExportItem, IExportJobDbItem, IExportJobHistoryDbItem, IExportJobHistoryRequest, IGetExportJobsByGroupIDRequest, IInitJobHistoryRequest, IListExportJobsResponse, JobType } from \"../../../../common/qCloudTemp/exporter\";\nimport { ICustomLivePreview, IDefaultLivePreview, ILivePreview, ILivePreviewSettingsRetval } from \"../../../../common/qCloudTemp/livePreview\";\n\nimport { IEditorTypes, IOrganization, IOrganizationFeatures } from \"../../../../common/qCloudTemp/membership\";\nimport { AppSettingsModelKeys, ExtensionType, IModelBody, IModelBodyObject, IModelInfo, IModuleVersion, IOrganizationActions, IQCloudLogItem, ITags, ITenantDefinitions, ModelAdditionals, ModelType, ModuleShareType, ObjectID, UsageType } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IModuleProduct, IModuleProductVer } from \"../../../../common/qCloudTemp/store\";\nimport { IAddFeedbackRequest, IAddFeedbackResponse, IAddOrUpdatePreferencesResponse, IAddTagRequest, IBoGetAzureCredentialsResponse, IBoListApplicationsResponse, IBoListOrganizationUsersResponse, IBoRemoveTagFromOrganizationRequest, IBoRemoveUserFromOrganizationRequest, IBoUpdateOrganizationResponse, ICheckExistenceOfModuleVersionResponse, ICreateOrganizationResponse, IDeleteInvitationRequest, IGetChatBotResponse, IGetMainStatisticInfoResponse, IGetModelInformationsRequest, IGetModelResponse, IGetModuleRequest, IGetModuleResponse, IGetOrganizationInfoResponse, IGetOrganizationUsersRequest, IGetOrganizationUsersResponse, IGetPreferencesResponse, IGetProfileResponse, IGetUserInfoResponse, IInvitationRequest, IListInvitationsResponse, IListOrganizationsResponse, IListUserOrganizationsResponse, IListUsersResponse, IRelaseModuleRequest, IRemoveUserFromOrganizationRequest, ISignInResponse, IUpdateApplicationRequest, IUpdateInvitationRequest, IUpdateModelResponse, IUpdateProfileResponse, IUpdateTagRequest, IUpdateUserInfoResponse } from \"../../../../common/qCloudTemp/symDtoObjects\";\n\nimport { ITemplateInfo, TemplateType } from '../../../../common/qCloudTemp/template';\nimport { IApplication, IExportJobArtifactInfoItem, IExportJobItem, IExportJobStepItem, IExportViewItem, IFolder, ILoggedInUser, IModel, IModelHistoryInfo, IModule, ITreeviewItem, ModelHistoryType } from \"../model/models\";\n\n\nexport interface IGetModelHistoryResponse extends IGetModelResponse {\n    modelID: string;\n    historyType: string;\n    ownerItem: string;\n    version: string\n}\nexport interface IlistExportJobStepLogsResponse {\n    logs: Array<string>;\n}\nexport interface IDublicateModelResponse {\n    modelInfo: IModelInfo;\n    modelBody: Array<IModelBody>;\n}\n\nexport interface IUpdateLivePreviewRequest {\n    links?: ICustomLivePreview[\"links\"];\n    deepLinkParam?: ICustomLivePreview[\"deepLinkParam\"];\n    models?: ICustomLivePreview[\"models\"];\n    expiryDate?: ICustomLivePreview[\"expiryDate\"];\n    password?: ICustomLivePreview[\"password\"];\n    selected?: ICustomLivePreview[\"selected\"];\n}\n\nexport interface ICreateLivePreviewRequest {\n    appID: string;\n    type: ILivePreview[\"type\"];\n    links?: ICustomLivePreview[\"links\"];\n    deepLinkParam?: ICustomLivePreview[\"deepLinkParam\"];\n    models?: ICustomLivePreview[\"models\"];\n    expiryDate?: ICustomLivePreview[\"expiryDate\"];\n    password?: ICustomLivePreview[\"password\"];\n    selected: ICustomLivePreview[\"selected\"];\n}\n\nexport interface ICreateModelFromTemplateParam {\n    name: string;\n    parentObjectId: string;\n    modelInfoID: string;\n    modelType: ModelType;\n    modelAdditionals: ModelAdditionals;\n    version?: string\n}\n\nexport interface IListModelsRequest {\n    applicationID: string;\n    getModelBodies?: boolean;\n    usageType?: UsageType;\n}\n\nexport interface ICreateUserRequest { \n    name: string;\n    mailAddress: string;\n    password: string;\n}\n\nexport interface IUpdateModelParams { \n    name?: string,\n    model?: Array<IModelBodyObject>,\n    checkin?: boolean,\n    release?: boolean,\n    publish?: boolean,\n    shortComment?: string,\n    comment?: string,\n    parentObject?: IApplication | IModule | IFolder,\n    modelType?: ModelType,\n    modelAdditionals?: ModelAdditionals,\n    ownerUser?: ILoggedInUser\n    appID?: string;\n    version?: string,\n    isUnmodifiable?: boolean,\n}\n\nexport interface IUpdateUserInfo {\n    createOrgLimit: number; \n}\nexport interface IUpdateOrganization {\n    accountType?: \"premium\" | \"beta\";\n    createAppLimit: number;\n    actions: IOrganizationActions;\n    applications: IEditorTypes;\n    environmentPrefix: string;\n    features: IOrganizationFeatures;\n    tags: Array<ITags['ID']>;\n}\n// export interface IUpdateApplicationRequestParams {\n//     name?: string;\n//     description?: string;\n//     logo?: string;\n//     color?: string;\n//     ownerUser?: ILoggedInUser;\n//     deployParameters?: IAppDeployParameters;\n//     shortID24?: string;\n//     exportSettings?: IApplicationExportSettings;\n// }\n\nexport interface IQCloudApi {\n    signIn(invitationId?: string): Promise<ISignInResponse>;\n    signOut(): Promise<void>;\n    getProfile(): Promise<IGetProfileResponse>;\n    updateProfile(properties: { name: string, lastName: string, role: string, }): Promise<IUpdateProfileResponse>;\n    getPreferences(): Promise<IGetPreferencesResponse>;\n    updatePreferences(preferences: { emailConsent: boolean; }): Promise<IAddOrUpdatePreferencesResponse>\n    listUserOrganizations(): Promise<Array<IListUserOrganizationsResponse>>;\n    getOrganization(organizationId: IOrganization[\"id\"]): Promise<IOrganization>;\n    listUserInvitations(): Promise<IListInvitationsResponse>;\n    createOrganization(name: IOrganization[\"name\"]): Promise<ICreateOrganizationResponse>;\n\n\n\n    createModel(params: { name: string, parentObject: IApplication | IModule | IFolder, modelBody: Array<IModelBodyObject> | undefined, modelType: ModelType, extension?: ExtensionType, modelAdditionals?: ModelAdditionals, usageType?: UsageType, key?: AppSettingsModelKeys, appID?: string, version?: string }): PromiseLike<IModel>;\n    createModule(name: string, options: { description?: string; prefix?: string; applicationID?: string }): Promise<IModule>;\n    createApplication(params: { name: string, description?: string, logo?: string, color?: string}): PromiseLike<{ application: IApplication, organization: IOrganization }>;\n    createLog(logItem: IQCloudLogItem): Promise<{ ID: string; }>;\n    getModelInfo(ID: string, params?: { checkoutControl?: boolean; createCheckout?: boolean; isGetCheckoutUserInfo?: boolean }): Promise<IGetModelResponse>;\n    getModel(ID: string, params?: { checkoutControl?: boolean, createCheckout?: boolean, retrieveBody?: boolean, isGetCheckoutUserInfo?:boolean, version?: string, isUnmodifiable?: boolean }): Promise<IGetModelResponse>;\n    getModelBody(ID: string): Promise<{ ID: string, model: IGetModelResponse[\"model\"] }>;\n    updateModel(ID: string, params: IUpdateModelParams): Promise<IUpdateModelResponse>; // don't use directly -> modelUseCase.updatemodel()\n    updateModule(ID: string, params: { name?: string, description?: string, prefix?: string, ownerUser?: ILoggedInUser, mainOwner?: ObjectID, shareType?: ModuleShareType }): PromiseLike<{ module: IModule }>;\n    updateFolder(ID: string, params: { name: string }): Promise<void>;\n    updateApplication(ID: string, params: IUpdateApplicationRequest): PromiseLike<{ app: IApplication }>;\n    deleteModel(ID: string, appID: string | undefined, options?: { addHistory?: boolean }): PromiseLike<void>;\n    deleteModule(ID: string, appID: string | undefined, options?: { addHistory?: boolean }): PromiseLike<void>;\n    deleteFolder(ID: string, appID: string | undefined, options?: { addHistory?: boolean }): PromiseLike<void>;\n    addDeleteApplicationJob(ID: string, addHistory?: boolean): PromiseLike<void>;\n    duplicateModel(sourceModel: IModel, name: string, appID: string | undefined): Promise<IModel>;\n    listApplications(getDetails?: boolean): PromiseLike<Array<IApplication>>;\n    listModules(applicationID?: string): Promise<Array<IModule>>;\n    listModuleVersions(moduleID: string): Promise<Array<IModuleVersion>>;\n    listMultiModuleVersions(moduleIDs: Array<string>): Promise<IModuleVersion[]>;\n    listModels(options: IListModelsRequest): Promise<Array<IGetModelResponse>>;\n    getLPSettings(appID: string): Promise<Record<AppSettingsModelKeys, ILivePreviewSettingsRetval>>;\n    listModuleChildItems(module: IModule): Promise<Array<IModel>>;\n    listModelBodies(modelIDs: Array<string>): Promise<Array<IModelBody>>;\n    getApplicationDetails(appID: string): PromiseLike<IApplication[\"details\"]>;\n    getApplication(appID: string): Promise<IApplication>;\n    getExportTypes(): Promise<Array<{ name: ExportType; text: string; }>>;\n    getchatbotresponse(userQuestion: string, chatHistory: Record<string, any>): Promise<IGetChatBotResponse>;\n    getExportSelectionData(applicationID: string, exportType: ExportType): Promise<Array<IExportViewItem>>;\n    listModelHistories(modelID: string, historyType?: ModelHistoryType | undefined): Promise<IModelHistoryInfo[]>;\n    listMultiModelHistories(modelIDs: Array<string>, historyType?: ModelHistoryType | undefined): Promise<IModelHistoryInfo[]>;\n    getModelHistory(historyID: string): Promise<IGetModelHistoryResponse>;\n    createExportJob(appID: string, exportType: ExportType, exportItems: Array<IExportItem>, groupID?: string, layer?: number): Promise<IExportJobItem>;\n    createDeployJobs(deployJobs: Array<IDeployJobItem>, isGroup: boolean): Promise<void>;\n    createBuildJobs(jobs: Array<ICreateDeployJobParam>): Promise<Array<IExportJobDbItem>>;\n    addDeletePlateauEnvJob(appID: string): Promise<void>;\n    startDeploymentJob(param: ICreateDeployJobParam): Promise<IExportJobDbItem>;\n    createPackJobs(jobs: Array<ICreateExportJobParam>): Promise<Array<IExportJobDbItem>>;\n    getExportJobsByGroupId(req: IGetExportJobsByGroupIDRequest): Promise<IListExportJobsResponse>;\n    listExportJobs(jobType: JobType, options?: { appID?: string }): Promise<Array<IExportJobItem>>;\n    initPublishHistory(request: IInitJobHistoryRequest): Promise<IExportJobHistoryDbItem>;\n    listApplicationJobHistory(request: IExportJobHistoryRequest): Promise<Array<IExportJobHistoryDbItem>>;\n    listExportJobSteps(ID: string, isMultiStep?: boolean): Promise<Array<IExportJobStepItem>>;\n    listExportJobStepLogs(stepID: string): Promise<IlistExportJobStepLogsResponse>;\n    listExportJobArtifacts(ID: string): Promise<Array<IExportJobArtifactInfoItem>>;\n    listTreeviewItems(applicationID: string): Promise<Array<ITreeviewItem>>;\n    // attachModuletoApplication(appID: string, moduleID: string): Promise<void>;\n    attachModuletoApplication(appID: string, moduleID: string, version?: string): Promise<string | void>\n    detachModuleFromApplication(appID: string, moduleID: string, version?: string): Promise<void>;\n    getApplicationUISettings(applicationID?: string): Promise<Array<ITenantDefinitions>>;\n    getApplicationDeploySettings(applicationID: string): Promise<ITenantDefinitions[]>;\n    getTenantDefinition(ID: string): Promise<ITenantDefinitions>;\n    setRootScreen(ID: string): Promise<void>;\n    putModuleInStore(objectID: string): Promise<{ product: IModuleProduct; productVer: IModuleProductVer }>;\n    createLivePreview(options?: ICreateLivePreviewRequest): Promise<ILivePreview>;\n    updateLivePreview(ID: string, options?: IUpdateLivePreviewRequest): PromiseLike<void>;\n    updateSelectedLivePreview(appID: string): PromiseLike<void>;\n    getLivePreviewInfo(appID: string, options?: { selected?: boolean; type?: ILivePreview[\"type\"]; }): Promise<ICustomLivePreview | IDefaultLivePreview>;\n    listLivePreviewInfo(appID: string): Promise<Array<ICustomLivePreview | IDefaultLivePreview>>;\n    listTemplateInfos(type?: TemplateType): Promise<Array<ITemplateInfo>>;\n    createModelFromTemplate(params: {modelInfoID: ITemplateInfo[\"ID\"], modelType: ModelType, name: string, parentObject: IApplication | IModule | IFolder, modelAdditionals?: ModelAdditionals, version?: string }): Promise<IModel>;\n\n    createInvitation(request: IInvitationRequest): Promise<void>;\n    listOrganizationUsers(request: IGetOrganizationUsersRequest): Promise<IGetOrganizationUsersResponse>;\n    listOrganizationInvitations(): Promise<IListInvitationsResponse>;\n    deleteInvitation(request: IDeleteInvitationRequest): Promise<void>;\n    removeUserFromOrganization(request: IRemoveUserFromOrganizationRequest): Promise<void>;\n    updateInvitation(request: IUpdateInvitationRequest): Promise<void>;\n\n    createFeedback(request: IAddFeedbackRequest): Promise<IAddFeedbackResponse>;\n    releaseModule(request: IRelaseModuleRequest): Promise<IModuleVersion>;\n    getModule(request: IGetModuleRequest): Promise<IGetModuleResponse>;\n    getModelInformations(request: IGetModelInformationsRequest): Promise<Array<IModelInfo>>;\n    checkExistenceOfModuleVersion(request: {moduleID: string; versionToCheck: string}): Promise<ICheckExistenceOfModuleVersionResponse>;\n    addDeleteOrganizationJob(organizationId: string, organizationName: string): Promise<void>;\n\n    // BACK OFFICE\n    getMainStatisticInfo(): Promise<IGetMainStatisticInfoResponse>;\n    getUserInfo(userId: string): Promise<IGetUserInfoResponse>;\n    getOrganizationInfo(organizationId: string): Promise<IGetOrganizationInfoResponse>;\n    listUsers(): Promise<IListUsersResponse>;\n    listOrganizations(): Promise<IListOrganizationsResponse>;\n    updateUserInfo(userId: string, properties: IUpdateUserInfo): Promise<IUpdateUserInfoResponse>;\n    bo_removeUserFromOrganization(properties: IBoRemoveUserFromOrganizationRequest): Promise<void>;\n    bo_listOrganizationUsers(organizationId: string): Promise<IBoListOrganizationUsersResponse>;\n    bo_listOrganizationApps(organizationId: string): Promise<IBoListApplicationsResponse>;\n    bo_addDeleteOrganizationJob(organizationId: string, organizationName: string): Promise<void>;\n    bo_updateOrganization(organizationId: string, properties: IUpdateOrganization): Promise<IBoUpdateOrganizationResponse>;\n    bo_getAzureCredentials(): Promise<IBoGetAzureCredentialsResponse>;\n    bo_deleteUser(userId: string): Promise<void>;\n    //tags\n    bo_addtag(request: IAddTagRequest): Promise<ITags>;\n    bo_deletetag(tagId: string): Promise<void>;\n    bo_listtag(): Promise<Array<ITags>>;\n    bo_gettag(tagId: string): Promise<ITags>;\n    bo_updatetag(request: IUpdateTagRequest): Promise<void>;\n    bo_getOrganizationsByTag(tagId: string): Promise<Array<IOrganization>>;\n    bo_removeTagFromOrganization(properties: IBoRemoveTagFromOrganizationRequest): Promise<void>\n\n}\n\nexport const IQCloudApi = Symbol.for(\"IQCloudApi\");","\nexport interface IDialogOptions {\n    title?: string;\n    image?: { src: string, width?: string, height?: string; };\n    closable?: boolean;\n    type?: \"warning\";   \n    //  | \"info\" | \"success\" | \"confirm\" ilave olarak diğer typelar konuşulup eklenmeli\n    width?: string;\n    height?: string;\n    maxHeight?:string;\n    overflow?: string;\n    closeCb?: (reason: \"close\" | \"outclick\" | \"component\") => void;\n    noBlockShadow?: boolean;\n    closeOnOutClick?: boolean;\n    customStyle? : {\n        closeIcon?: string;\n    }\n}\n\n\n\n\nexport interface IDialog {\n    showDialog<ComponentParams>(component: object, options?: IDialogOptions, parameters?: ComponentParams): string;\n    closeDialog(id: string): void;\n    closeAllDialogs(): void;\n}\nexport const IDialog = Symbol.for(\"IDialog\");","export interface IRouter {\n    push(to: string | { path: string, params?: Record<string, any> }): Promise<void>;\n    back(): void;\n    getRouteParams<T extends Record<string, string | Array<string>>>(): T;\n    isBackOrForward(): boolean;\n    isRouteNoAuth(): boolean;\n}\n\nexport const IRouter = Symbol.for(\"IRouter\");\nexport interface IRouteDefinition {\n    noAuth?: boolean\n}\nexport function routeDefinition(definition: IRouteDefinition) {\n    // Nothing to do, this is for extract-routes\n}\nexport interface IRouteOptions {\n    transfer?: string;\n}\nexport function routeOptions(options: IRouteOptions) {\n    // Nothing to do, this is for extract-routes\n}","export interface ISignInParam {\n    invitationId?: string;\n}\n\nexport interface IAuthenticationUseCase {\n    signIn(param: ISignInParam): Promise<void>;\n    signOut(): Promise<void>;\n}\nexport const IAuthenticationUseCase = Symbol.for(\"IAuthenticationUseCase\");","import { UnpromisedReturn } from \"../../common/extendedTypes\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IExecuteOptions {\n    loading: boolean;\n    loadingInfo?: { title: string, text: string };\n}\nexport interface IUseCaseExecutor {\n    executeUseCase<TUseCase extends IUseCase<UnpromisedReturn<TUseCase[\"execute\"]>, any>>(useCaseInjectionToken: symbol, ...params: Parameters<TUseCase[\"execute\"]>): Promise<UnpromisedReturn<TUseCase[\"execute\"]>>;\n    execute<T>(callback: () => Promise<T>, options: IExecuteOptions): Promise<T | undefined>;\n    wrap(cb: () => Promise<void>, options: IExecuteOptions): () => Promise<void>;\n    resolveUseCase<TUseCase extends object>(useCaseInjectionToken: symbol): Promise<TUseCase>;\n}\nexport const IUseCaseExecutor = Symbol.for(\"IUseCaseExecutor\");","import { IApplication, IExportJobItem, IFolder, IModel, IModule, ILoggedInUser } from \"../model/models\";\nimport { ITopMenuButton } from \"../model/ui/ITopMenuButton\";\nimport { INavItem } from \"../model/ui/INavItem\";\nimport { IMainStatisticInfo } from \"../../../../common/qCloudTemp/backoffice\";\nimport { IUser_SUSI } from \"../../../../common/qCloudTemp/authentication\";\nimport { IOrganization } from \"../../../../common/qCloudTemp/membership\";\nimport { ITags } from \"../../../../common/qCloudTemp/quickCloud\";\n\nexport interface IViewModel {\n    user?: ILoggedInUser;\n    apps: Array<IApplication>;\n    studio: {\n        appId: string;\n        appName: string;\n        items: Array<IModel | IModule | IFolder>;\n        openItems?: Array<IModel>;\n        currentItem?: IModel;\n        tabOrder?: Array<string>;\n        dnsEndpoint?: string;\n        webPublishDate?: string;\n        mobilePublishDate?: string;\n        webPublishedBy?: string;\n        mobilePublishedBy?: string;\n        publishId?: string;\n        livePreview?: {\n            relayClients: { clients: Array<{ clientID: string, name: string }> }\n        }\n        filters: {\n            text?: string;\n            ui: boolean;\n            process: boolean;\n            entity: boolean;\n            image: boolean;\n            setting: boolean;\n        },\n        ui?: {\n            navItems?: Array<INavItem>;\n            sidebar: {\n                component?: object;\n                componentPath?: string;\n                left: number;\n            };\n        };\n        topMenu?: {\n            additionalButtons?: Array<ITopMenuButton>;\n            dynamicButtons?: Array<ITopMenuButton>;\n        };\n    };\n    exportJobs?: Array<IExportJobItem>;\n    backoffice?: {\n        ui?: {\n            breadcrumb?: Array<string>;\n        }\n        dashboard?: {\n            mainStatistics: IMainStatisticInfo;\n        };\n        users?: Array<IUser_SUSI>;\n        organizations?: Array<IOrganization>;\n        tags?: Array<ITags>\n    };\n}\nexport const IViewModel = Symbol.for(\"IViewModel\");\n","export default __webpack_public_path__ + \"8e3140858d798a5c4e899c42aac2966a.svg\";","export default __webpack_public_path__ + \"ad1469ad2976b2272072ffc332e11a9d.svg\";","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, unref as _unref, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\nimport _imports_0 from '../../../../images/chatbotLoading.svg'\nimport _imports_1 from '../../../../images/cleaning.svg'\n\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-7f532546\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"chatbot-container\" }\nconst _hoisted_2 = {\n  key: 0,\n  class: \"resize-overlay\"\n}\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-robot chatbot-icon\" }, null, -1 /* HOISTED */))\nconst _hoisted_4 = [\n  _hoisted_3\n]\nconst _hoisted_5 = { class: \"top-menu\" }\nconst _hoisted_6 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-window-close menu-icons\" }, null, -1 /* HOISTED */))\nconst _hoisted_7 = [\n  _hoisted_6\n]\nconst _hoisted_8 = { class: \"chat-window\" }\nconst _hoisted_9 = [\"onMouseenter\", \"onMouseleave\"]\nconst _hoisted_10 = [\"innerHTML\"]\nconst _hoisted_11 = { key: 1 }\nconst _hoisted_12 = { key: 2 }\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", { style: {\"margin\":\"20px 0\",\"border-color\":\"#ccc\"} }, null, -1 /* HOISTED */))\nconst _hoisted_14 = { class: \"follow-up-questions\" }\nconst _hoisted_15 = [\"onClick\"]\nconst _hoisted_16 = {\n  key: 3,\n  class: \"message-loading\"\n}\nconst _hoisted_17 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"loading-image\",\n  src: _imports_0,\n  alt: \"studio-logo\"\n}, null, -1 /* HOISTED */))\nconst _hoisted_18 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", { class: \"loading-text\" }, \"Searching documentation. This may take a second!\", -1 /* HOISTED */))\nconst _hoisted_19 = [\n  _hoisted_17,\n  _hoisted_18\n]\nconst _hoisted_20 = {\n  key: 4,\n  class: \"message-links\"\n}\nconst _hoisted_21 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { style: {\"width\":\"100%\"} }, [\n  /*#__PURE__*/_createElementVNode(\"p\", { class: \"response-text\" }, \"View More About:\")\n], -1 /* HOISTED */))\nconst _hoisted_22 = [\"href\"]\nconst _hoisted_23 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"mdi mdi-link-variant chat-icons\",\n  style: {\"margin-right\":\"5px\",\"color\":\"white\",\"font-size\":\"18px\"}\n}, null, -1 /* HOISTED */))\nconst _hoisted_24 = { key: 5 }\nconst _hoisted_25 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", { style: {\"margin\":\"20px 0\",\"border-color\":\"#ccc\"} }, null, -1 /* HOISTED */))\nconst _hoisted_26 = { class: \"follow-up-questions\" }\nconst _hoisted_27 = [\"onClick\"]\nconst _hoisted_28 = {\n  key: 6,\n  class: \"feedback-container\"\n}\nconst _hoisted_29 = { class: \"feedback-box\" }\nconst _hoisted_30 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-thumb-up\" }, null, -1 /* HOISTED */))\nconst _hoisted_31 = [\n  _hoisted_30\n]\nconst _hoisted_32 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { style: {\"background-color\":\"#c1c1c1\",\"width\":\"1px\",\"height\":\"16px\",\"margin-right\":\"6px\"} }, null, -1 /* HOISTED */))\nconst _hoisted_33 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-thumb-down\" }, null, -1 /* HOISTED */))\nconst _hoisted_34 = [\n  _hoisted_33\n]\nconst _hoisted_35 = { class: \"input-area-container\" }\nconst _hoisted_36 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"chat-reset-icon\",\n  src: _imports_1,\n  alt: \"reset-chat\"\n}, null, -1 /* HOISTED */))\nconst _hoisted_37 = [\n  _hoisted_36\n]\nconst _hoisted_38 = { class: \"input-field-container\" }\nconst _hoisted_39 = [\"onKeyup\"]\nconst _hoisted_40 = { class: \"input-bottom\" }\nconst _hoisted_41 = { class: \"character-limit\" }\n\nimport { ref, onMounted, reactive, nextTick } from \"vue\";\nimport { container } from \"../../../../domain/core/diContainer\";\nimport { IViewModel } from \"../../../../domain/viewModel/IViewModel\";\nimport MarkdownIt from \"markdown-it\";\nimport { IQCloudApi } from \"../../../../domain/infrastructure/IQCloudApi\";\n\n\n    type Role = \"USER\" | \"AI\";\n\n    interface ChatMessage {\n        id: number,\n        content: string,\n        role: Role,\n        links?: Array<{ pageName: string, linkUrl:string }>,\n        showFeedBack: boolean,\n        followUpQuestions?: Array<string>,\n    }\n\n    interface ChatMessagesArray extends Array<ChatMessage> {}\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'chatbot',\n  setup(__props) {\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\n    const qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\n    const user = viewModel.user!;\n    const chatWindowRef = ref<HTMLElement | null>(null);\n    const chatWindowContainerRef = ref<HTMLElement | null>(null);\n    const placeholder = ref(\"\");\n    const showChat = ref(false);\n    const newMessage = ref(\"\");\n    const showFeedBackBox = ref(false);\n    const selectedQuestions: Array<string> = [];\n    const resizingOverlay = ref(false);\n\n    const placeholderQuestions: Array<string> = [\n        \"How can I route to another page?\",\n        \"How can I export my project?\",\n        \"What is Live Preview and Publish used for in Studio?\",\n    ];  \n\n    const selectRandomQuestions = () => {\n        selectedQuestions.length = 0;\n        const shuffledQuestions = placeholderQuestions.slice();\n        for (let i = 0; i < 3; i++) {\n            const randomIndex = Math.floor(Math.random() * shuffledQuestions.length);\n            selectedQuestions.push(shuffledQuestions.splice(randomIndex, 1)[0]);\n        }\n    };\n\n    //If followUpQuestions has < 3 elements, it will display all otherwise it will randomly select 3 elements\n    const getRandomFollowUpQuestions = (questionsArray: Array<string>, count: number) => {\n        const shuffledQuestions = questionsArray.slice();\n        for (let i = shuffledQuestions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [shuffledQuestions[i], shuffledQuestions[j]] = [shuffledQuestions[j], shuffledQuestions[i]]; \n        }\n        return shuffledQuestions.slice(0, Math.min(count, shuffledQuestions.length)); \n    };\n\n    \n    let loadingStates: Record<number, boolean> = {};\n\n    const ROLE_USER = \"USER\";\n    const ROLE_AI = \"AI\";\n    ;\n\n\n    const chatMessages: ChatMessagesArray  = reactive([\n        { id: 0, content: `Hey ${user.name}! What's on your mind?`, role: ROLE_AI, showFeedBack: false },\n    ]);\n\n\n    onMounted(() => {\n        scrollToBottom();\n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\n        placeholder.value = randomQuestion;\n        selectRandomQuestions();\n    });\n\n    const scrollToBottom = () => {\n        const chatWindow = chatWindowRef.value;\n        if (chatWindow) {\n            chatWindow.scrollTop = chatWindow.scrollHeight - chatWindow.clientHeight;\n        }\n    };\n\n\n    const toggleChat = () => {\n        showChat.value = !showChat.value;\n    };\n\n    const handleQuestionClick = (question: string) => {\n        newMessage.value = question;\n        sendMessage();\n    };\n\n    const sendMessage = async () => {\n\n        if (newMessage.value.trim() === \"\") return;\n         \n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\n        placeholder.value = randomQuestion;\n\n        const userQuestion: ChatMessage = {\n            id: chatMessages.length + 1,\n            content: newMessage.value,\n            role: ROLE_USER,\n            showFeedBack: false\n        };\n\n        chatMessages.push(userQuestion);\n        let chatHistory = [...chatMessages]; \n        newMessage.value = \"\";\n\n        let newId = chatMessages.length + 1;\n        const chatbotResponse: ChatMessage = {\n            id: newId,\n            content: \"\",\n            role: ROLE_AI, \n            showFeedBack: false\n        };\n        chatMessages.push(chatbotResponse);\n\n        loadingStates[chatbotResponse.id] = true;\n\n        nextTick(() => {\n            scrollToBottom();\n        });\n \n        const question = userQuestion.content;\n        let response = await qcloudApi.getchatbotresponse(question, chatHistory);\n        \n        let chatBotResponse = response ? response.responseText : \"Unable to answer your question at this time. Try to ask again!\";\n        \n        let lastMessage = chatMessages.find(msg => msg.id === newId);\n        lastMessage!.content = chatBotResponse;\n        loadingStates[chatbotResponse.id] = false;\n\n        let verifiedUrls: Array<string> = response?.verifiedUrls;\n        if (verifiedUrls && verifiedUrls.length > 0) {\n            let finalUrlObj = verifiedUrls.map(url => {\n                let docName = url.substring(url.lastIndexOf(\"/\") + 1).replace(/-/g,\" \");\n                let modifiedDocName = docName.replace(/\\b\\w/g, l => l.toUpperCase());\n                return {pageName: modifiedDocName, linkUrl: url};\n            });\n            chatbotResponse.links = finalUrlObj;\n        }\n\n        let followUpQuestions: Array<string> = response.followUpQuestions; \n        if (followUpQuestions && followUpQuestions.length > 0) { \n            chatbotResponse.followUpQuestions = getRandomFollowUpQuestions(followUpQuestions, 3); \n        }\n\n        nextTick(() => {\n            scrollToBottom();\n        });\n\n    };\n\n    const isChatbotResponse = (message: ChatMessage) => {\n        return message.role === ROLE_AI;\n    };\n\n    const clearChat = () => {\n        chatMessages.splice(1, chatMessages.length);\n    };\n\n    let resizing = false;\n    let initialX = 0;\n    let initialY = 0;\n    let initialWidth = 900;\n    let initialHeight = 700;\n\n    const startResize = (event: MouseEvent) => {\n        resizingOverlay.value = true;\n        event.stopPropagation();\n        event.preventDefault();\n        resizing = true;\n        initialX = event.clientX;\n        initialY = event.clientY;\n        initialWidth = chatWindowContainerRef.value?.offsetWidth || 0;\n        initialHeight = chatWindowContainerRef.value?.offsetHeight || 0;\n        document.body.style.cursor = \"nwse-resize\";\n        document.body.style.userSelect = \"none\";\n        document.addEventListener(\"mousemove\", handleResize);\n        document.addEventListener(\"mouseup\", stopResize);\n    };\n\n    const handleResize = (event: MouseEvent) => {\n        if (resizing) {\n            event.stopPropagation();\n            event.preventDefault();\n            const newWidth = initialWidth + (initialX - event.clientX );\n            const newHeight = initialHeight + (initialY - event.clientY);\n            const chatWindow = chatWindowContainerRef.value;\n            if (chatWindow) {\n                chatWindow.style.width = `${Math.max(500, newWidth)}px`;\n                chatWindow.style.height = `${Math.max(700, newHeight)}px`;\n                const feedbackIconsVisible = chatMessages.some(message => isChatbotResponse(message) && message.showFeedBack);\n                if (!feedbackIconsVisible) {\n                    scrollToBottom();\n                }\n            }\n        }\n    };\n\n    const stopResize = () => {\n        resizingOverlay.value = false;\n        resizing = false;\n        document.body.style.cursor = \"auto\";\n        document.body.style.userSelect = \"auto\";\n        document.removeEventListener(\"mousemove\", handleResize);\n        document.removeEventListener(\"mouseup\", stopResize);\n    };\n\n\n    const isLoadingChatbotResponse = (message: ChatMessage) => {\n        return isChatbotResponse(message) && loadingStates[message.id];\n    };\n\n    const getMessageClass = (message: ChatMessage) => {\n        return message.role === ROLE_USER ? 'user-message' : 'chatbot-message';\n    };\n\n    \n    const markdown = new MarkdownIt();\n    const convertToMarkdown = (markdownText: string) => {\n        let markdownResponse = markdown.render(markdownText);\n        markdownResponse = markdownResponse.replace(/<code>/g, \"<code style='color:#ee4f54; font-weight: bold;'>\");\n        return markdownResponse;\n    };\n\n\n    const submitFeedback = (isPositive: boolean) => {\n        // Logic to handle feedback submission\n        showFeedBackBox.value = false;\n    };\n\n    const handleMouseEnter = (message: ChatMessage) => {\n        if (isChatbotResponse(message)) {\n            message.showFeedBack = true;\n        }\n    };\n\n    const handleMouseLeave = (message: ChatMessage) => {\n        if (isChatbotResponse(message)) {\n            message.showFeedBack = false;\n        }\n    };\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    (resizingOverlay.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2))\n      : _createCommentVNode(\"v-if\", true),\n    _createElementVNode(\"button\", {\n      onClick: toggleChat,\n      class: \"chatbot-icon-container\"\n    }, _hoisted_4),\n    (showChat.value)\n      ? (_openBlock(), _createElementBlock(\"div\", {\n          key: 1,\n          class: \"chat-window-container\",\n          ref_key: \"chatWindowContainerRef\",\n          ref: chatWindowContainerRef\n        }, [\n          _createElementVNode(\"div\", _hoisted_5, [\n            _createElementVNode(\"i\", {\n              class: \"mdi mdi-resize-bottom-right chatbot-resize-icon\",\n              onMousedown: startResize\n            }, null, 32 /* HYDRATE_EVENTS */),\n            _createElementVNode(\"div\", { class: \"icon-group\" }, [\n              _createElementVNode(\"button\", {\n                class: \"menu-buttons\",\n                onClick: toggleChat\n              }, _hoisted_7)\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_8, [\n            _createElementVNode(\"div\", {\n              class: \"chat-messages\",\n              ref_key: \"chatWindowRef\",\n              ref: chatWindowRef\n            }, [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(chatMessages, (message) => {\n                return (_openBlock(), _createElementBlock(\"div\", {\n                  key: message.id,\n                  class: _normalizeClass(getMessageClass(message))\n                }, [\n                  _createCommentVNode(\" <i v-if=\\\"isChatbotResponse(message) && !isLoadingChatbotResponse(message)\\\" class=\\\"mdi mdi-robot-happy-outline chat-icons\\\"></i> \"),\n                  _createElementVNode(\"div\", {\n                    class: \"message-content\",\n                    onMouseenter: ($event: any) => (handleMouseEnter(message)),\n                    onMouseleave: ($event: any) => (handleMouseLeave(message))\n                  }, [\n                    _createCommentVNode(\" <i v-if=\\\"isChatbotResponse(message) && !isLoadingChatbotResponse(message)\\\" class=\\\"mdi mdi-robot-happy-outline chat-icons\\\"></i>\\n                            <i v-if=\\\"!isChatbotResponse(message)\\\" class=\\\"mdi mdi-account-circle chat-icons\\\"></i> \"),\n                    (isChatbotResponse(message))\n                      ? (_openBlock(), _createElementBlock(\"div\", {\n                          key: message.id,\n                          class: \"markdown-content response-text\",\n                          innerHTML: convertToMarkdown(message.content)\n                        }, null, 8 /* PROPS */, _hoisted_10))\n                      : (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _toDisplayString(message.content), 1 /* TEXT */)),\n                    (message.id === 0 && isChatbotResponse(message))\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [\n                          _hoisted_13,\n                          _createElementVNode(\"div\", _hoisted_14, [\n                            (_openBlock(), _createElementBlock(_Fragment, null, _renderList(selectedQuestions, (question, index) => {\n                              return _createElementVNode(\"button\", {\n                                key: index,\n                                onClick: ($event: any) => (handleQuestionClick(question)),\n                                class: \"question-button\"\n                              }, _toDisplayString(question), 9 /* TEXT, PROPS */, _hoisted_15)\n                            }), 64 /* STABLE_FRAGMENT */))\n                          ])\n                        ]))\n                      : _createCommentVNode(\"v-if\", true),\n                    (isChatbotResponse(message) && _unref(loadingStates)[message.id])\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, _hoisted_19))\n                      : _createCommentVNode(\"v-if\", true),\n                    (isChatbotResponse(message) && message.links)\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [\n                          _hoisted_21,\n                          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.links, (link, index) => {\n                            return (_openBlock(), _createElementBlock(\"a\", {\n                              key: index,\n                              href: link.linkUrl,\n                              target: \"_blank\",\n                              class: \"link-button response-text\"\n                            }, [\n                              _hoisted_23,\n                              _createTextVNode(_toDisplayString(link.pageName), 1 /* TEXT */)\n                            ], 8 /* PROPS */, _hoisted_22))\n                          }), 128 /* KEYED_FRAGMENT */))\n                        ]))\n                      : _createCommentVNode(\"v-if\", true),\n                    (isChatbotResponse(message) && message.followUpQuestions && message.followUpQuestions.length > 0)\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [\n                          _hoisted_25,\n                          _createElementVNode(\"div\", _hoisted_26, [\n                            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.followUpQuestions, (question) => {\n                              return (_openBlock(), _createElementBlock(\"button\", {\n                                key: question,\n                                onClick: ($event: any) => (handleQuestionClick(question)),\n                                class: \"question-button\"\n                              }, _toDisplayString(question), 9 /* TEXT, PROPS */, _hoisted_27))\n                            }), 128 /* KEYED_FRAGMENT */))\n                          ])\n                        ]))\n                      : _createCommentVNode(\"v-if\", true),\n                    (isChatbotResponse(message) && message.showFeedBack && !isLoadingChatbotResponse(message))\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_28, [\n                          _createCommentVNode(\" <div style=\\\"font-size: 10px; font-family: 'Roboto'; margin-right: 4px; margin-top: 4px;\\\">Was this helpful?</div> \"),\n                          _createElementVNode(\"div\", _hoisted_29, [\n                            _createElementVNode(\"button\", {\n                              class: \"feedback-button\",\n                              onClick: _cache[0] || (_cache[0] = ($event: any) => (submitFeedback(true)))\n                            }, _hoisted_31),\n                            _hoisted_32,\n                            _createElementVNode(\"button\", {\n                              class: \"feedback-button\",\n                              onClick: _cache[1] || (_cache[1] = ($event: any) => (submitFeedback(false)))\n                            }, _hoisted_34)\n                          ])\n                        ]))\n                      : _createCommentVNode(\"v-if\", true)\n                  ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_9)\n                ], 2 /* CLASS */))\n              }), 128 /* KEYED_FRAGMENT */))\n            ], 512 /* NEED_PATCH */),\n            _createElementVNode(\"div\", _hoisted_35, [\n              _createElementVNode(\"button\", {\n                class: \"reset-button\",\n                onClick: clearChat\n              }, _hoisted_37),\n              _createElementVNode(\"div\", _hoisted_38, [\n                _withDirectives(_createElementVNode(\"textarea\", {\n                  \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((newMessage).value = $event)),\n                  onKeyup: _withKeys(sendMessage, [\"enter\"]),\n                  type: \"text\",\n                  placeholder: \"Ask me about Plateau Studio...\",\n                  class: \"input-field\",\n                  maxlength: 1000,\n                  rows: \"1\"\n                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_39), [\n                  [_vModelText, newMessage.value]\n                ]),\n                _createElementVNode(\"div\", _hoisted_40, [\n                  _createElementVNode(\"div\", _hoisted_41, _toDisplayString(newMessage.value.length) + \"/1000\", 1 /* TEXT */),\n                  _createElementVNode(\"i\", {\n                    class: \"mdi mdi-send send-icon\",\n                    onClick: sendMessage\n                  })\n                ])\n              ])\n            ])\n          ])\n        ], 512 /* NEED_PATCH */))\n      : _createCommentVNode(\"v-if\", true)\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./chatbot.vue?vue&type=style&index=0&id=7f532546&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./chatbot.vue?vue&type=style&index=0&id=7f532546&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./chatbot.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./chatbot.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./chatbot.vue?vue&type=style&index=0&id=7f532546&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/studio/studio/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7f532546\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","syncResolved","Promise","res","then","doNothing","syncResolveProblem","createPromiseData","timeout","opt","resolver","reject","timer","startTimer","clearTimeout","setTimeout","Error","promise","rej","cb","fixSyncResolve","value","sleep","prom","async","delayWithResolve","dependency","delayTillResolve","dep","dependencies","run","forEach","err","IQCloudApi","Symbol","for","IDialog","IRouter","routeDefinition","definition","IAuthenticationUseCase","IUseCaseExecutor","IViewModel","_withScopeId","n","_hoisted_1","class","_hoisted_2","key","_hoisted_4","_","_hoisted_5","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","style","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_19","src","alt","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_31","_hoisted_32","_hoisted_34","_hoisted_35","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","__name","setup","__props","viewModel","qcloudApi","user","chatWindowRef","chatWindowContainerRef","placeholder","showChat","newMessage","showFeedBackBox","selectedQuestions","resizingOverlay","placeholderQuestions","loadingStates","ROLE_USER","ROLE_AI","chatMessages","content","name","role","showFeedBack","scrollToBottom","randomQuestion","Math","floor","random","length","shuffledQuestions","slice","i","randomIndex","splice","selectRandomQuestions","chatWindow","scrollTop","scrollHeight","clientHeight","toggleChat","handleQuestionClick","question","sendMessage","trim","userQuestion","chatHistory","newId","chatbotResponse","response","getchatbotresponse","chatBotResponse","responseText","find","msg","verifiedUrls","finalUrlObj","map","url","pageName","substring","lastIndexOf","replace","l","toUpperCase","linkUrl","links","followUpQuestions","questionsArray","count","j","min","getRandomFollowUpQuestions","isChatbotResponse","message","clearChat","resizing","initialX","initialY","initialWidth","initialHeight","startResize","event","stopPropagation","preventDefault","clientX","clientY","offsetWidth","offsetHeight","document","body","cursor","userSelect","addEventListener","handleResize","stopResize","newWidth","newHeight","width","max","height","some","removeEventListener","isLoadingChatbotResponse","getMessageClass","markdown","convertToMarkdown","markdownText","markdownResponse","render","submitFeedback","isPositive","_ctx","_cache","onClick","ref_key","ref","onMousedown","onMouseenter","$event","onMouseleave","innerHTML","index","link","href","target","onKeyup","type","maxlength","rows","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement"],"sourceRoot":""}
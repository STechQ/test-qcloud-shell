"use strict";(self.webpackChunkqcloud_shell=self.webpackChunkqcloud_shell||[]).push([[409],{5516:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(1864),i=t.n(o),r=t(352),a=t.n(r)()(i());a.push([e.id,"\n.deploy-setting-container[data-v-20f9f52c] {\n    padding: 16px 20px 20px 20px;\n    height: 495px;\n    overflow-y: auto;\n}\n.previous-button[data-v-20f9f52c] {\n    width: 68px;\n    height: 32px;\n    border: none;\n    background: #f5f5f500 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    font-family: \"Roboto\";\n    font-weight: bold;\n    color: #607d8b;\n    text-align: center;\n    margin-right: 8px;\n    float: right;\n}\n.save-button[data-v-20f9f52c] {\n    width: 74px;\n    height: 32px;\n    border: none;\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    font-family: \"Roboto\";\n    color: #ffffff;\n    text-align: center;\n    float: right;\n}\n.VueTables__heading[data-v-20f9f52c] {\n    font-family: 'Roboto';\n    font-size: 13px;\n    font-weight: bold;\n    letter-spacing: 0px;\n    color: #616161;\n}\n.title[data-v-20f9f52c] {\n    font-family: 'Roboto';\n    font-size: 20px;\n    font-weight: bold;\n    color: #151233;\n}\n.product-title[data-v-20f9f52c] {\n    font-family: 'Roboto';\n    font-weight: bold;\n    font-size: 14px;\n    color: #151233;\n    margin-left: 6px;\n    margin-top: 20px;\n}\n.product-input-container[data-v-20f9f52c] {\n    position: relative;\n    max-width: max-content;\n}\n.input-container[data-v-20f9f52c] {\n    position: relative;\n    max-width: max-content;\n    margin-left: 20px;\n}\n.icon-container[data-v-20f9f52c] {\n    position: absolute;\n    right: 24px;\n    top: 7px;\n}\ninput[data-v-20f9f52c] {\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #a1a1a1;\n    border-radius: 4px;\n    padding: 5px 0px 6px 12px;\n    font-family: \"Roboto\";\n    font-size: 14px;\n}\ninput[data-v-20f9f52c]:disabled {\n    background-color: rgba(59, 59, 59, 0.3);\n}\n.module-input[data-v-20f9f52c] {\n    width: 154px;\n    height: 30px;\n}\n.product-input[data-v-20f9f52c] {\n    width: 230px;\n    height: 30px;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/deploySettings.vue"],names:[],mappings:";AAmuBA;IACI,4BAA4B;IAC5B,aAAa;IACb,gBAAgB;AACpB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,iDAAiD;IACjD,kBAAkB;IAClB,qBAAqB;IACrB,iBAAiB;IACjB,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,YAAY;AAChB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,+CAA+C;IAC/C,kBAAkB;IAClB,qBAAqB;IACrB,cAAc;IACd,kBAAkB;IAClB,YAAY;AAChB;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,mBAAmB;IACnB,cAAc;AAClB;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,cAAc;AAClB;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,eAAe;IACf,cAAc;IACd,gBAAgB;IAChB,gBAAgB;AACpB;AAEA;IACI,kBAAkB;IAClB,sBAAsB;AAC1B;AAEA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,iBAAiB;AACrB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,QAAQ;AACZ;AAEA;IACI,+CAA+C;IAC/C,yBAAyB;IACzB,kBAAkB;IAClB,yBAAyB;IACzB,qBAAqB;IACrB,eAAe;AACnB;AAEA;IACI,uCAAuC;AAC3C;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;AAEA;IACI,YAAY;IACZ,YAAY;AAChB",sourcesContent:['<script setup lang="ts">\nimport { onBeforeMount, ref } from "vue";\nimport { container } from "../../../../domain/core/diContainer";\nimport { IViewModel } from "../../../../domain/viewModel/IViewModel";\nimport { IModule, IModuleSettingsItem, IApplicationSettingsItem, IModuleDeployParameters } from "../../../../domain/model/models";\nimport { ILocalization } from "../../../../domain/infrastructure/ILocalization";\nimport { IGitProject } from "../../../../domain/infrastructure/IProviderApi";\nimport { IUseCaseExecutor } from "../../../../domain/useCase/IUseCaseExecutor";\nimport { IDebounce } from "../../../../domain/infrastructure/IDebounce";\nimport { IApplicationSettings } from "../../../../domain/useCase/IApplicationSettings";\nimport { INotification } from "../../../../domain/presentation/INotification";\nimport Spinner from "../spinner.vue"\n\nonBeforeMount(() => {\n    fillDatatableRow();\n    setJobName();\n    getGitGroupsFromProvider();\n    getProductsFromProvider();\n});\n\ninterface IProduct {\n    products: Array<IGitProject>;\n    disabled: boolean;\n    loaded: boolean;\n}\n\ninterface IGroup {\n    value: IGitProject;\n    microservicesCache: Array<IGitProject>;\n    requestedBefore: boolean;\n}\n\ninterface IGitGroup {\n    groups: Array<IGroup>;\n    disabled: boolean;\n    loaded: boolean;\n}\n\ninterface IModuleDataTableRow {\n    moduleID: IModule["ID"];\n    moduleName: IModule["name"];\n    gitGroupName: string;\n    gitGroupID: number;\n    microservices: Array<IGitProject>;\n    microservicesDisable: boolean;\n    microserviceLoading: boolean;\n    microserviceName: string;\n    microserviceID: number;\n}\n\ninterface IAppDataTableRow {\n    appID: IModule["ID"];\n    appName: IModule["name"];\n    microservices: Array<IGitProject>;\n    microservicesDisable: boolean;\n    job: string;\n    commitGroup: string;\n    commitServices: Array<IGitProject>;\n    commitServiceDisable: boolean;\n}\n\nconst emit = defineEmits(["close"]);\n\nconst localization = container.resolve<ILocalization>(ILocalization);\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst notification = container.resolve<INotification>(INotification);\nconst appSettingsUseCase = container.resolve<IApplicationSettings>(IApplicationSettings);\nconst debouncer = container.resolve<IDebounce>(IDebounce);\n\nconst gitProducts = ref({ products: [], disabled: false, loaded: false } as IProduct);\nconst gitGroups = ref({ groups: [], disabled: false, loaded: false } as IGitGroup);\nconst currentApp = ref(viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\nconst appSettings = ref({ product: { ID: 0, name: "" }, gitGroup: { ID: 0, name: "" }, microservice: { ID: 0, name: "", loading: false }, job: "", commitGroup: { ID: 0, name: "" }, commitService: { ID: 0, name: "", loading: false } });\nconst modulesDataTableRows = ref(Array<IModuleDataTableRow>());\nconst appDataTableRows = ref(Array<IAppDataTableRow>());\n\nconst modulesAppDatatableColumns = ref(["moduleName", "gitGroup", "service"]);\nconst appDatatableColumns = ref(["appName", "gitGroup", "service", "job", "commitGroup", "commitService"]);\nconst modulesOptionsDataTable = ref({\n    resizableColumns: false,\n    filterable: false,\n    perPage: 3,\n    perPageValues: [],\n    headings: {\n        moduleName: localization.get("moduleName"),\n        gitGroup: localization.get("gitGroup"),\n        microservice: localization.get("service"),\n    },\n    sortable: [],\n    texts: {\n        count: "",\n    },\n});\n\nconst appOptionsDataTable = ref({\n    resizableColumns: false,\n    filterable: false,\n    perPage: 1,\n    perPageValues: [],\n    headings: {\n        appName: localization.get("appName"),\n        gitGroup: localization.get("gitGroup"),\n        microservice: localization.get("service"),\n        job: localization.get("job"),\n        commitGroup: localization.get("commitGroup"),\n        commitService: localization.get("commitService"),\n    },\n    sortable: [],\n    texts: {\n        count: "",\n    },\n});\n\nfunction fillDatatableRow() {\n    modulesDataTableRows.value = viewModel.studio.items\n        .filter((item) => item.objectType === "module")\n        .map<IModuleDataTableRow>((item) => {\n            const module: IModuleDataTableRow = {\n                moduleID: item.ID,\n                moduleName: item.name,\n                gitGroupName: "",\n                gitGroupID: (item as IModule).deployParameters?.gitGroupId || 0,\n                microservices: [],\n                microservicesDisable: true,\n                microserviceLoading: false,\n                microserviceName: "",\n                microserviceID: (item as IModule).deployParameters?.gitServiceRepoId || 0,\n            };\n            return module;\n        });\n    appDataTableRows.value.push({\n        appID: currentApp.value!.ID,\n        appName: currentApp.value!.name,\n        microservices: [],\n        microservicesDisable: true,\n        job: "",\n        commitGroup: "",\n        commitServices: [],\n        commitServiceDisable: true,\n    });\n}\n\nfunction getProductsFromProvider() {\n    appSettingsUseCase\n        .getProjectsOfProduct()\n        .then(res => {\n            gitProducts.value.products = res.data.items;\n            gitProducts.value.loaded = true;\n            gitProducts.value.disabled = false;\n            setSelectedProduct();\n        })\n        .catch(() => {\n            gitProducts.value.loaded = true;\n            gitProducts.value.disabled = true;\n            notification.showNotification({ text: "Error while fetching products", type: "error" });\n        });\n}\n\nfunction setSelectedProduct() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            const currentProduct = gitProducts.value.products.find((product) => currentApp.value!.deployParameters!.gitProductRepoId == product.id);\n            if (currentProduct) {\n                appSettings.value.product = {\n                    name: currentProduct.name,\n                    ID: currentProduct.id,\n                };\n            }\n        }\n    }\n}\n\nfunction setJobName() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            if (currentApp.value.deployParameters.jobName)\n                appSettings.value.job = currentApp.value.deployParameters.jobName\n        }\n    }\n}\n\nasync function getGitGroupsFromProvider() {\n    appSettingsUseCase\n        .getGroupNamesWithId()\n        .then((res) => {\n            res.data.items.forEach((fetchedGroup) =>\n                gitGroups.value.groups.push({\n                    value: fetchedGroup,\n                    microservicesCache: [],\n                    requestedBefore: false,\n                })\n            );\n            gitGroups.value.loaded = true;\n            gitGroups.value.disabled = false;\n            setModulesSelectedGitGroups();\n            setAppSelectedGitGroup();\n        })\n        .catch(() => {\n            gitGroups.value.loaded = true;\n            gitGroups.value.disabled = true;\n\n            notification.showNotification({\n                text: "Error while fetching git groups",\n                type: "error",\n            })\n        }\n        );\n}\n\nfunction setModulesSelectedGitGroups() {\n    modulesDataTableRows.value.forEach((row) => {\n        if (row.gitGroupID !== 0) {\n            const group = gitGroups.value.groups.find((group) => group.value.id == row.gitGroupID);\n            if (group) {\n                row.gitGroupName = group.value.name;\n            } else {\n                row.gitGroupID = 0;\n            }\n        }\n    });\n    setModulesSelectedMicroservices();\n}\n\nfunction setAppSelectedGitGroup() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            const currentGitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.gitGroupId == group.value.id);\n            const currentCommitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.commitGroupId == group.value.id);\n            if (currentGitGroup) {\n                appSettings.value.gitGroup = {\n                    name: currentGitGroup.value.name,\n                    ID: currentGitGroup.value.id,\n                };\n            }\n            if (currentCommitGroup) {\n                appSettings.value.commitGroup = {\n                    name: currentCommitGroup.value.name,\n                    ID: currentCommitGroup.value.id,\n                };\n            }\n\n        }\n    }\n\n    if (appSettings.value.gitGroup.ID !== 0) {\n        const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\n        const commitGroup = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\n        if (group) {\n            appSettings.value.gitGroup.name = group.value.name;\n        } else {\n            appSettings.value.gitGroup.ID = 0;\n        }\n\n        if (commitGroup) {\n            appSettings.value.commitGroup.name = commitGroup.value.name;\n        } else {\n            appSettings.value.commitGroup.ID = 0;\n        }\n    }\n    setAppSelectedMicroservice();\n}\n\nfunction setModulesSelectedMicroservices() {\n    const groupIdList: Array<number> = modulesDataTableRows.value\n        .map((row) => row.gitGroupID)\n        .filter((id, index, self) => id !== 0 && self.indexOf(id) === index);\n\n    groupIdList.forEach((id) => {\n        modulesDataTableRows.value.forEach(row => {\n            if (row.gitGroupID == id) {\n                row.microserviceLoading = true;\n                row.microservicesDisable = false;\n            }\n        })\n        appSettingsUseCase\n            .getProjectsByGroupId(id)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == id);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    modulesDataTableRows.value.forEach((row) => {\n                        if (row.gitGroupID === id) {\n                            row.microservices = data;\n                            row.microserviceLoading = false;\n                            if (row.microservices.length == 0) {\n                                row.microservicesDisable = true;\n                            }\n                            if (row.microserviceID !== 0) {\n                                const microservice = data.find((service) => service.id == row.microserviceID);\n                                if (microservice) {\n                                    row.microserviceName = microservice.name;\n                                    row.microservicesDisable = false;\n                                } else {\n                                    row.microserviceID = 0;\n                                    row.microservicesDisable = true;\n                                }\n                            }\n                        }\n                    });\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: "Error while fetching projects",\n                    type: "error",\n                })\n            );\n    });\n}\n\nfunction setAppSelectedMicroservice() {\n    if (appSettings.value.gitGroup.ID != 0) {\n        appDataTableRows.value[0].microservicesDisable = false;\n        appSettings.value.microservice.loading = true;\n        appSettingsUseCase\n            .getProjectsByGroupId(appSettings.value.gitGroup.ID)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    appDataTableRows.value[0].microservices = data;\n                    appSettings.value.microservice.loading = false;\n                    if (currentApp.value) {\n                        if (currentApp.value.deployParameters) {\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.gitServiceRepoId);\n                            if (microservice) {\n                                appSettings.value.microservice.name = microservice.name;\n                                appSettings.value.microservice.ID = microservice.id;\n                                appDataTableRows.value[0].microservicesDisable = false;\n                            } else {\n                                appSettings.value.microservice.ID = 0;\n                            }\n                        }\n                    }\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: "Error while fetching projects",\n                    type: "error",\n                })\n            );\n    }\n\n    if (appSettings.value.commitGroup.ID != 0) {\n        appDataTableRows.value[0].commitServiceDisable = false;\n        appSettings.value.commitService.loading = true;\n        appSettingsUseCase\n            .getProjectsByGroupId(appSettings.value.commitGroup.ID)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    appDataTableRows.value[0].commitServices = data;\n                    appSettings.value.commitService.loading = false;\n                    if (currentApp.value) {\n                        if (currentApp.value.deployParameters) {\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.commitServiceId);\n                            if (microservice) {\n                                appSettings.value.commitService.name = microservice.name;\n                                appSettings.value.commitService.ID = microservice.id;\n                                appDataTableRows.value[0].commitServiceDisable = false;\n                            } else {\n                                appSettings.value.commitService.ID = 0;\n                            }\n                        }\n                    }\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: "Error while fetching projects",\n                    type: "error",\n                })\n            );\n    }\n}\n\nfunction handleProductSelect() {\n    const product = gitProducts.value.products.find((product) => product.name === appSettings.value.product.name);\n    if (product) {\n        appSettings.value.product.ID = product.id;\n    } else {\n        appSettings.value.product.name = "";\n        appSettings.value.product.ID = 0;\n    }\n}\n\nasync function handleModulesGitGroupInput(selectedRow: IModuleDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.microservicesDisable = true;\n    currentRow.microservices = [];\n    currentRow.microserviceName = "";\n    currentRow.microserviceID = 0;\n\n    if (selectedGitGroup) {\n        currentRow.gitGroupID = selectedGitGroup.value.id;\n        currentRow.gitGroupName = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getModuleMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.microservices = selectedGitGroup.microservicesCache;\n            currentRow.microservicesDisable = !currentRow.microservices.length;\n        }\n    } else {\n        currentRow.gitGroupName = selectedRow.gitGroupName;\n        currentRow.gitGroupID = 0;\n    }\n}\n\nasync function handleAppGitGroupInput(selectedRow: IAppDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    currentRow.microservicesDisable = true;\n    currentRow.microservices = [];\n    appSettings.value.microservice.name = "";\n    appSettings.value.microservice.ID = 0;\n\n    if (selectedGitGroup) {\n        appSettings.value.gitGroup.ID = selectedGitGroup.value.id;\n        appSettings.value.gitGroup.name = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getAppMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.microservices = selectedGitGroup.microservicesCache;\n            currentRow.microservicesDisable = !currentRow.microservices.length;\n        }\n    } else {\n        appSettings.value.gitGroup.ID = 0;\n    }\n}\n\nasync function handleAppCommitGroupInput(selectedRow: IAppDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    currentRow.commitServiceDisable = true;\n    currentRow.commitServices = [];\n    appSettings.value.commitService.name = "";\n    appSettings.value.commitService.ID = 0;\n\n    if (selectedGitGroup) {\n        appSettings.value.commitGroup.ID = selectedGitGroup.value.id;\n        appSettings.value.commitGroup.name = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getAppCommitServicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.commitServices = selectedGitGroup.microservicesCache;\n            currentRow.commitServiceDisable = !currentRow.commitServices.length;\n        }\n    } else {\n        appSettings.value.commitGroup.ID = 0;\n    }\n}\n\nasync function getModuleMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IModuleDataTableRow) {\n    currentRow.microserviceLoading = true;\n    currentRow.microservicesDisable = false;\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.microservices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.microservicesDisable = !currentRow.microservices.length;\n    currentRow.microserviceLoading = false;\n}\n\nasync function getAppMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\n    appSettings.value.microservice.loading = true;\n    currentRow.microservicesDisable = false;\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.microservices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.microservicesDisable = !currentRow.microservices.length;\n    appSettings.value.microservice.loading = false;\n}\n\nasync function getAppCommitServicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\n    appSettings.value.commitService.loading = true;\n    currentRow.commitServiceDisable = false;\n    currentRow.commitServices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.commitServices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.commitServiceDisable = !currentRow.commitServices.length;\n    appSettings.value.commitService.loading = false;\n}\n\nasync function handleModulesGitGroupChange(selectedRow: IModuleDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.gitGroupID = selectedGitGroup?.value?.id || 0;\n    currentRow.gitGroupName = selectedGitGroup?.value?.name || "";\n    if (!currentRow.gitGroupID) {\n        currentRow.microservices = [];\n        currentRow.microservicesDisable = true;\n        currentRow.microserviceName = "";\n        currentRow.microserviceID = 0;\n    }\n}\n\nasync function handleAppGitGroupChange(selectedRow: IAppDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    appSettings.value.gitGroup.ID = selectedGitGroup?.value?.id || 0;\n    appSettings.value.gitGroup.name = selectedGitGroup?.value?.name || "";\n    if (!selectedGitGroup) {\n        currentRow.microservices = [];\n        currentRow.microservicesDisable = true;\n        appSettings.value.microservice.name = "";\n        appSettings.value.microservice.ID = 0;\n    }\n}\n\nasync function handleAppCommitGroupChange(selectedRow: IAppDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    appSettings.value.commitGroup.ID = selectedGitGroup?.value?.id || 0;\n    appSettings.value.commitGroup.name = selectedGitGroup?.value?.name || "";\n    if (!selectedGitGroup) {\n        currentRow.commitServices = [];\n        currentRow.commitServiceDisable = true;\n        appSettings.value.commitService.name = "";\n        appSettings.value.commitService.ID = 0;\n    }\n}\n\n\n\nfunction handleModulesMicroServiceChange(selectedRow: IModuleDataTableRow) {\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === selectedRow.microserviceName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.microserviceName = selectedMicroservice?.name || "";\n    currentRow.microserviceID = selectedMicroservice?.id || 0;\n}\n\nfunction handleAppMicroServiceChange(selectedRow: IAppDataTableRow) {\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === appSettings.value.microservice.name);\n    appSettings.value.microservice.name = selectedMicroservice?.name || "";\n    appSettings.value.microservice.ID = selectedMicroservice?.id || 0;\n}\n\nfunction handleAppCommitServiceChange(selectedRow: IAppDataTableRow) {\n    const selectedMicroservice = selectedRow.commitServices.find((microservice) => microservice.name === appSettings.value.commitService.name);\n    appSettings.value.commitService.name = selectedMicroservice?.name || "";\n    appSettings.value.commitService.ID = selectedMicroservice?.id || 0;\n}\n\nasync function onSave() {\n    if (currentApp.value) {\n        let settings = {};\n        const modulesSettings: Array<IModuleSettingsItem> = modulesDataTableRows.value\n            .filter(\n                (row) =>\n                    row.microserviceID !=\n                    (viewModel.studio.items.find((item) => item.ID == row.moduleID) as IModule).deployParameters?.gitServiceRepoId\n            )\n            .map((row) => ({\n                moduleID: row.moduleID,\n                deployParameters: {\n                    gitGroupId: row.gitGroupID,\n                    gitServiceRepoId: row.microserviceID,\n                },\n            }));\n\n        const applicationSettings: IApplicationSettingsItem = {\n            applicationID: currentApp.value!.ID,\n            deployParameters: {\n                gitProductRepoId: appSettings.value.product.ID,\n                gitGroupId: appSettings.value.gitGroup.ID,\n                gitServiceRepoId: appSettings.value.microservice.ID,\n                jobName: appSettings.value.job,\n                commitGroupId: appSettings.value.commitGroup.ID,\n                commitServiceId: appSettings.value.commitService.ID,\n            },\n        };\n\n        settings = { modulesSettings };\n\n        if (\n            currentApp.value.deployParameters?.gitProductRepoId != appSettings.value.product.ID ||\n            currentApp.value.deployParameters?.gitServiceRepoId != appSettings.value.microservice.ID ||\n            currentApp.value.deployParameters?.commitServiceId != appSettings.value.commitService.ID ||\n            currentApp.value.deployParameters?.jobName != appSettings.value.job\n        ) {\n            settings = { ...settings, applicationSettings };\n        }\n\n        await executor.execute(\n            async () => {\n                await appSettingsUseCase.update(settings);\n            },\n            { loading: true }\n        );\n        emit("close");\n    }\n}\n\n<\/script>\n\n<template>\n    <div class="deploy-setting-container">\n        <div class="title">{{ localization.get("deploySettings_appSettings") }}</div>\n        <label for="product-input" class="product-title">{{ localization.get("product") }}</label>\n        <div class="product-input-container">\n            <input class="product-input" list="products" id="product-input" placeholder="Select Product"\n                v-model="appSettings.product.name" @change="handleProductSelect" :disabled="gitProducts.disabled" />\n            <div class="icon-container" v-if="!gitProducts.loaded">\n                <Spinner />\n            </div>\n        </div>\n        <datalist id="products">\n            <option value="" disabled selected>Select Product for Application</option>\n            <option v-for="product in gitProducts.products">\n                {{ product.name }}\n            </option>\n        </datalist>\n        <v-client-table ref="table" :data="appDataTableRows" :columns="appDatatableColumns"\n            :options="appOptionsDataTable">\n            <template #appName="props">\n                <span>{{ props.row.appName }}</span>\n            </template>\n            <template #gitGroup="props">\n                <div class="input-container">\n                    <input class="module-input" list="app-git-groups" id="app-git-group-input"\n                        placeholder="Select Git Group" v-model="appSettings.gitGroup.name"\n                        @input="handleAppGitGroupInput(props.row)" @change="handleAppGitGroupChange(props.row)"\n                        :disabled="gitGroups.disabled" />\n                    <div class="icon-container" v-if="!gitGroups.loaded">\n                        <Spinner />\n                    </div>\n                </div>\n                <datalist id="app-git-groups">\n                    <option v-for="gitGroup in gitGroups.groups" :value="gitGroup.value.name"></option>\n                </datalist>\n            </template>\n            <template #service="props">\n                <div class="input-container">\n                    <input class="module-input" :list="props.row.appID" id="app-microservice-input"\n                        placeholder="Select Microservice" v-model="appSettings.microservice.name"\n                        @change="handleAppMicroServiceChange(props.row)" :disabled="props.row.microservicesDisable" />\n                    <div class="icon-container" v-if="appSettings.microservice.loading">\n                        <Spinner />\n                    </div>\n                </div>\n\n                <datalist :id="props.row.appID">\n                    <option v-for="microservice in props.row.microservices" :value="microservice.name"></option>\n                </datalist>\n            </template>\n            <template #job="props">\n                <div class="input-container">\n                    <input type="text" class="module-input" id="app-microservice-input" placeholder="Job Name"\n                        v-model="appSettings.job" />\n                </div>\n            </template>\n            <template #commitGroup="props">\n                <div class="input-container">\n                    <input class="module-input" list="app-git-groups" id="app-git-group-input"\n                        placeholder="Select Commit Group" v-model="appSettings.commitGroup.name"\n                        @input="handleAppCommitGroupInput(props.row)" @change="handleAppCommitGroupChange(props.row)"\n                        :disabled="gitGroups.disabled" />\n                    <div class="icon-container" v-if="!gitGroups.loaded">\n                        <Spinner />\n                    </div>\n                </div>\n                <datalist id="app-git-groups">\n                    <option v-for="gitGroup in gitGroups.groups" :value="gitGroup.value.name"></option>\n                </datalist>\n            </template>\n            <template #commitService="props">\n                <div class="input-container">\n                    <input class="module-input" list="commit_service_list" id="app-microservice-input"\n                        placeholder="Select Service" v-model="appSettings.commitService.name"\n                        @change="handleAppCommitServiceChange(props.row)" :disabled="props.row.commitServiceDisable" />\n                    <div class="icon-container" v-if="appSettings.commitService.loading">\n                        <Spinner />\n                    </div>\n                </div>\n\n                <datalist id="commit_service_list">\n                    <option v-for="microservice in props.row.commitServices" :value="microservice.name"></option>\n                </datalist>\n            </template>\n        </v-client-table>\n\n        <div class="title">{{ localization.get("deploySettings_moduleSettings") }}</div>\n        <v-client-table ref="table" :data="modulesDataTableRows" :columns="modulesAppDatatableColumns"\n            :options="modulesOptionsDataTable">\n            <template #moduleName="props">\n                <span>{{ props.row.moduleName }}</span>\n            </template>\n            <template #gitGroup="props">\n                <div class="input-container">\n                    <input class="module-input" list="git-groups" id="git-group-input" placeholder="Select Git Group"\n                        v-model="props.row.gitGroupName" @input="handleModulesGitGroupInput(props.row)"\n                        @change="handleModulesGitGroupChange(props.row)" :disabled="gitGroups.disabled" />\n                    <div class="icon-container" v-if="!gitGroups.loaded">\n                        <Spinner />\n                    </div>\n                </div>\n                <datalist id="git-groups">\n                    <option v-for="gitGroup in gitGroups.groups" :value="gitGroup.value.name"></option>\n                </datalist>\n            </template>\n            <template #service="props">\n                <div class="input-container">\n                    <input class="module-input" :list="props.row.moduleID" id="microservice-input"\n                        placeholder="Select Microservice" v-model="props.row.microserviceName"\n                        @change="handleModulesMicroServiceChange(props.row)"\n                        :disabled="props.row.microservicesDisable" />\n                    <div class="icon-container" v-if="props.row.microserviceLoading">\n                        <Spinner />\n                    </div>\n                </div>\n                <datalist :id="props.row.moduleID">\n                    <option v-for="microservice in props.row.microservices" :value="microservice.name"></option>\n                </datalist>\n            </template>\n        </v-client-table>\n        <hr />\n        <button class="save-button" @click="onSave">{{ localization.get("save") }}</button>\n        <button class="previous-button" data-v-33a93b5b="" @click="() => emit(\'close\')">\n            {{ localization.get("cancel") }}\n        </button>\n    </div>\n</template>\n\n<style scoped>\n.deploy-setting-container {\n    padding: 16px 20px 20px 20px;\n    height: 495px;\n    overflow-y: auto;\n}\n\n.previous-button {\n    width: 68px;\n    height: 32px;\n    border: none;\n    background: #f5f5f500 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    font-family: "Roboto";\n    font-weight: bold;\n    color: #607d8b;\n    text-align: center;\n    margin-right: 8px;\n    float: right;\n}\n\n.save-button {\n    width: 74px;\n    height: 32px;\n    border: none;\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    font-family: "Roboto";\n    color: #ffffff;\n    text-align: center;\n    float: right;\n}\n\n.VueTables__heading {\n    font-family: \'Roboto\';\n    font-size: 13px;\n    font-weight: bold;\n    letter-spacing: 0px;\n    color: #616161;\n}\n\n.title {\n    font-family: \'Roboto\';\n    font-size: 20px;\n    font-weight: bold;\n    color: #151233;\n}\n\n.product-title {\n    font-family: \'Roboto\';\n    font-weight: bold;\n    font-size: 14px;\n    color: #151233;\n    margin-left: 6px;\n    margin-top: 20px;\n}\n\n.product-input-container {\n    position: relative;\n    max-width: max-content;\n}\n\n.input-container {\n    position: relative;\n    max-width: max-content;\n    margin-left: 20px;\n}\n\n.icon-container {\n    position: absolute;\n    right: 24px;\n    top: 7px;\n}\n\ninput {\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #a1a1a1;\n    border-radius: 4px;\n    padding: 5px 0px 6px 12px;\n    font-family: "Roboto";\n    font-size: 14px;\n}\n\ninput:disabled {\n    background-color: rgba(59, 59, 59, 0.3);\n}\n\n.module-input {\n    width: 154px;\n    height: 30px;\n}\n\n.product-input {\n    width: 230px;\n    height: 30px;\n}\n</style>\n<style>\ntable[class="VueTables__table table table-striped table-bordered table-hover"],\ntr,\ntd {\n    border-left: hidden;\n    border-right: hidden;\n    --bs-table-striped-bg: white;\n    padding: 14px 0px 14px 0px !important;\n}\n\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>thead,\nth {\n    border-style: hidden;\n    padding-left: 0px !important;\n    padding-bottom: 4px !important;\n}\n\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>thead>tr>th>span {\n    font-family: \'Roboto\';\n    font-size: 13px;\n    font-weight: bold;\n    color: #616161;\n    padding-left: 20px;\n}\n\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>tbody>tr>td>span {\n    font-family: \'Roboto\';\n    font-size: \'14px\';\n    color: #212121;\n    vertical-align: middle;\n    margin-left: 20px;\n}\n</style>\n'],sourceRoot:""}]);const s=a},750:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(1864),i=t.n(o),r=t(352),a=t.n(r)()(i());a.push([e.id,'\ntable[class="VueTables__table table table-striped table-bordered table-hover"],\ntr,\ntd {\n    border-left: hidden;\n    border-right: hidden;\n    --bs-table-striped-bg: white;\n    padding: 14px 0px 14px 0px !important;\n}\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>thead,\nth {\n    border-style: hidden;\n    padding-left: 0px !important;\n    padding-bottom: 4px !important;\n}\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>thead>tr>th>span {\n    font-family: \'Roboto\';\n    font-size: 13px;\n    font-weight: bold;\n    color: #616161;\n    padding-left: 20px;\n}\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>tbody>tr>td>span {\n    font-family: \'Roboto\';\n    font-size: \'14px\';\n    color: #212121;\n    vertical-align: middle;\n    margin-left: 20px;\n}\n',"",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/deploySettings.vue"],names:[],mappings:";AAo0BA;;;IAGI,mBAAmB;IACnB,oBAAoB;IACpB,4BAA4B;IAC5B,qCAAqC;AACzC;AAEA;;IAEI,oBAAoB;IACpB,4BAA4B;IAC5B,8BAA8B;AAClC;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,cAAc;IACd,sBAAsB;IACtB,iBAAiB;AACrB",sourcesContent:['<script setup lang="ts">\nimport { onBeforeMount, ref } from "vue";\nimport { container } from "../../../../domain/core/diContainer";\nimport { IViewModel } from "../../../../domain/viewModel/IViewModel";\nimport { IModule, IModuleSettingsItem, IApplicationSettingsItem, IModuleDeployParameters } from "../../../../domain/model/models";\nimport { ILocalization } from "../../../../domain/infrastructure/ILocalization";\nimport { IGitProject } from "../../../../domain/infrastructure/IProviderApi";\nimport { IUseCaseExecutor } from "../../../../domain/useCase/IUseCaseExecutor";\nimport { IDebounce } from "../../../../domain/infrastructure/IDebounce";\nimport { IApplicationSettings } from "../../../../domain/useCase/IApplicationSettings";\nimport { INotification } from "../../../../domain/presentation/INotification";\nimport Spinner from "../spinner.vue"\n\nonBeforeMount(() => {\n    fillDatatableRow();\n    setJobName();\n    getGitGroupsFromProvider();\n    getProductsFromProvider();\n});\n\ninterface IProduct {\n    products: Array<IGitProject>;\n    disabled: boolean;\n    loaded: boolean;\n}\n\ninterface IGroup {\n    value: IGitProject;\n    microservicesCache: Array<IGitProject>;\n    requestedBefore: boolean;\n}\n\ninterface IGitGroup {\n    groups: Array<IGroup>;\n    disabled: boolean;\n    loaded: boolean;\n}\n\ninterface IModuleDataTableRow {\n    moduleID: IModule["ID"];\n    moduleName: IModule["name"];\n    gitGroupName: string;\n    gitGroupID: number;\n    microservices: Array<IGitProject>;\n    microservicesDisable: boolean;\n    microserviceLoading: boolean;\n    microserviceName: string;\n    microserviceID: number;\n}\n\ninterface IAppDataTableRow {\n    appID: IModule["ID"];\n    appName: IModule["name"];\n    microservices: Array<IGitProject>;\n    microservicesDisable: boolean;\n    job: string;\n    commitGroup: string;\n    commitServices: Array<IGitProject>;\n    commitServiceDisable: boolean;\n}\n\nconst emit = defineEmits(["close"]);\n\nconst localization = container.resolve<ILocalization>(ILocalization);\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst notification = container.resolve<INotification>(INotification);\nconst appSettingsUseCase = container.resolve<IApplicationSettings>(IApplicationSettings);\nconst debouncer = container.resolve<IDebounce>(IDebounce);\n\nconst gitProducts = ref({ products: [], disabled: false, loaded: false } as IProduct);\nconst gitGroups = ref({ groups: [], disabled: false, loaded: false } as IGitGroup);\nconst currentApp = ref(viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\nconst appSettings = ref({ product: { ID: 0, name: "" }, gitGroup: { ID: 0, name: "" }, microservice: { ID: 0, name: "", loading: false }, job: "", commitGroup: { ID: 0, name: "" }, commitService: { ID: 0, name: "", loading: false } });\nconst modulesDataTableRows = ref(Array<IModuleDataTableRow>());\nconst appDataTableRows = ref(Array<IAppDataTableRow>());\n\nconst modulesAppDatatableColumns = ref(["moduleName", "gitGroup", "service"]);\nconst appDatatableColumns = ref(["appName", "gitGroup", "service", "job", "commitGroup", "commitService"]);\nconst modulesOptionsDataTable = ref({\n    resizableColumns: false,\n    filterable: false,\n    perPage: 3,\n    perPageValues: [],\n    headings: {\n        moduleName: localization.get("moduleName"),\n        gitGroup: localization.get("gitGroup"),\n        microservice: localization.get("service"),\n    },\n    sortable: [],\n    texts: {\n        count: "",\n    },\n});\n\nconst appOptionsDataTable = ref({\n    resizableColumns: false,\n    filterable: false,\n    perPage: 1,\n    perPageValues: [],\n    headings: {\n        appName: localization.get("appName"),\n        gitGroup: localization.get("gitGroup"),\n        microservice: localization.get("service"),\n        job: localization.get("job"),\n        commitGroup: localization.get("commitGroup"),\n        commitService: localization.get("commitService"),\n    },\n    sortable: [],\n    texts: {\n        count: "",\n    },\n});\n\nfunction fillDatatableRow() {\n    modulesDataTableRows.value = viewModel.studio.items\n        .filter((item) => item.objectType === "module")\n        .map<IModuleDataTableRow>((item) => {\n            const module: IModuleDataTableRow = {\n                moduleID: item.ID,\n                moduleName: item.name,\n                gitGroupName: "",\n                gitGroupID: (item as IModule).deployParameters?.gitGroupId || 0,\n                microservices: [],\n                microservicesDisable: true,\n                microserviceLoading: false,\n                microserviceName: "",\n                microserviceID: (item as IModule).deployParameters?.gitServiceRepoId || 0,\n            };\n            return module;\n        });\n    appDataTableRows.value.push({\n        appID: currentApp.value!.ID,\n        appName: currentApp.value!.name,\n        microservices: [],\n        microservicesDisable: true,\n        job: "",\n        commitGroup: "",\n        commitServices: [],\n        commitServiceDisable: true,\n    });\n}\n\nfunction getProductsFromProvider() {\n    appSettingsUseCase\n        .getProjectsOfProduct()\n        .then(res => {\n            gitProducts.value.products = res.data.items;\n            gitProducts.value.loaded = true;\n            gitProducts.value.disabled = false;\n            setSelectedProduct();\n        })\n        .catch(() => {\n            gitProducts.value.loaded = true;\n            gitProducts.value.disabled = true;\n            notification.showNotification({ text: "Error while fetching products", type: "error" });\n        });\n}\n\nfunction setSelectedProduct() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            const currentProduct = gitProducts.value.products.find((product) => currentApp.value!.deployParameters!.gitProductRepoId == product.id);\n            if (currentProduct) {\n                appSettings.value.product = {\n                    name: currentProduct.name,\n                    ID: currentProduct.id,\n                };\n            }\n        }\n    }\n}\n\nfunction setJobName() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            if (currentApp.value.deployParameters.jobName)\n                appSettings.value.job = currentApp.value.deployParameters.jobName\n        }\n    }\n}\n\nasync function getGitGroupsFromProvider() {\n    appSettingsUseCase\n        .getGroupNamesWithId()\n        .then((res) => {\n            res.data.items.forEach((fetchedGroup) =>\n                gitGroups.value.groups.push({\n                    value: fetchedGroup,\n                    microservicesCache: [],\n                    requestedBefore: false,\n                })\n            );\n            gitGroups.value.loaded = true;\n            gitGroups.value.disabled = false;\n            setModulesSelectedGitGroups();\n            setAppSelectedGitGroup();\n        })\n        .catch(() => {\n            gitGroups.value.loaded = true;\n            gitGroups.value.disabled = true;\n\n            notification.showNotification({\n                text: "Error while fetching git groups",\n                type: "error",\n            })\n        }\n        );\n}\n\nfunction setModulesSelectedGitGroups() {\n    modulesDataTableRows.value.forEach((row) => {\n        if (row.gitGroupID !== 0) {\n            const group = gitGroups.value.groups.find((group) => group.value.id == row.gitGroupID);\n            if (group) {\n                row.gitGroupName = group.value.name;\n            } else {\n                row.gitGroupID = 0;\n            }\n        }\n    });\n    setModulesSelectedMicroservices();\n}\n\nfunction setAppSelectedGitGroup() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            const currentGitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.gitGroupId == group.value.id);\n            const currentCommitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.commitGroupId == group.value.id);\n            if (currentGitGroup) {\n                appSettings.value.gitGroup = {\n                    name: currentGitGroup.value.name,\n                    ID: currentGitGroup.value.id,\n                };\n            }\n            if (currentCommitGroup) {\n                appSettings.value.commitGroup = {\n                    name: currentCommitGroup.value.name,\n                    ID: currentCommitGroup.value.id,\n                };\n            }\n\n        }\n    }\n\n    if (appSettings.value.gitGroup.ID !== 0) {\n        const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\n        const commitGroup = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\n        if (group) {\n            appSettings.value.gitGroup.name = group.value.name;\n        } else {\n            appSettings.value.gitGroup.ID = 0;\n        }\n\n        if (commitGroup) {\n            appSettings.value.commitGroup.name = commitGroup.value.name;\n        } else {\n            appSettings.value.commitGroup.ID = 0;\n        }\n    }\n    setAppSelectedMicroservice();\n}\n\nfunction setModulesSelectedMicroservices() {\n    const groupIdList: Array<number> = modulesDataTableRows.value\n        .map((row) => row.gitGroupID)\n        .filter((id, index, self) => id !== 0 && self.indexOf(id) === index);\n\n    groupIdList.forEach((id) => {\n        modulesDataTableRows.value.forEach(row => {\n            if (row.gitGroupID == id) {\n                row.microserviceLoading = true;\n                row.microservicesDisable = false;\n            }\n        })\n        appSettingsUseCase\n            .getProjectsByGroupId(id)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == id);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    modulesDataTableRows.value.forEach((row) => {\n                        if (row.gitGroupID === id) {\n                            row.microservices = data;\n                            row.microserviceLoading = false;\n                            if (row.microservices.length == 0) {\n                                row.microservicesDisable = true;\n                            }\n                            if (row.microserviceID !== 0) {\n                                const microservice = data.find((service) => service.id == row.microserviceID);\n                                if (microservice) {\n                                    row.microserviceName = microservice.name;\n                                    row.microservicesDisable = false;\n                                } else {\n                                    row.microserviceID = 0;\n                                    row.microservicesDisable = true;\n                                }\n                            }\n                        }\n                    });\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: "Error while fetching projects",\n                    type: "error",\n                })\n            );\n    });\n}\n\nfunction setAppSelectedMicroservice() {\n    if (appSettings.value.gitGroup.ID != 0) {\n        appDataTableRows.value[0].microservicesDisable = false;\n        appSettings.value.microservice.loading = true;\n        appSettingsUseCase\n            .getProjectsByGroupId(appSettings.value.gitGroup.ID)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    appDataTableRows.value[0].microservices = data;\n                    appSettings.value.microservice.loading = false;\n                    if (currentApp.value) {\n                        if (currentApp.value.deployParameters) {\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.gitServiceRepoId);\n                            if (microservice) {\n                                appSettings.value.microservice.name = microservice.name;\n                                appSettings.value.microservice.ID = microservice.id;\n                                appDataTableRows.value[0].microservicesDisable = false;\n                            } else {\n                                appSettings.value.microservice.ID = 0;\n                            }\n                        }\n                    }\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: "Error while fetching projects",\n                    type: "error",\n                })\n            );\n    }\n\n    if (appSettings.value.commitGroup.ID != 0) {\n        appDataTableRows.value[0].commitServiceDisable = false;\n        appSettings.value.commitService.loading = true;\n        appSettingsUseCase\n            .getProjectsByGroupId(appSettings.value.commitGroup.ID)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    appDataTableRows.value[0].commitServices = data;\n                    appSettings.value.commitService.loading = false;\n                    if (currentApp.value) {\n                        if (currentApp.value.deployParameters) {\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.commitServiceId);\n                            if (microservice) {\n                                appSettings.value.commitService.name = microservice.name;\n                                appSettings.value.commitService.ID = microservice.id;\n                                appDataTableRows.value[0].commitServiceDisable = false;\n                            } else {\n                                appSettings.value.commitService.ID = 0;\n                            }\n                        }\n                    }\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: "Error while fetching projects",\n                    type: "error",\n                })\n            );\n    }\n}\n\nfunction handleProductSelect() {\n    const product = gitProducts.value.products.find((product) => product.name === appSettings.value.product.name);\n    if (product) {\n        appSettings.value.product.ID = product.id;\n    } else {\n        appSettings.value.product.name = "";\n        appSettings.value.product.ID = 0;\n    }\n}\n\nasync function handleModulesGitGroupInput(selectedRow: IModuleDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.microservicesDisable = true;\n    currentRow.microservices = [];\n    currentRow.microserviceName = "";\n    currentRow.microserviceID = 0;\n\n    if (selectedGitGroup) {\n        currentRow.gitGroupID = selectedGitGroup.value.id;\n        currentRow.gitGroupName = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getModuleMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.microservices = selectedGitGroup.microservicesCache;\n            currentRow.microservicesDisable = !currentRow.microservices.length;\n        }\n    } else {\n        currentRow.gitGroupName = selectedRow.gitGroupName;\n        currentRow.gitGroupID = 0;\n    }\n}\n\nasync function handleAppGitGroupInput(selectedRow: IAppDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    currentRow.microservicesDisable = true;\n    currentRow.microservices = [];\n    appSettings.value.microservice.name = "";\n    appSettings.value.microservice.ID = 0;\n\n    if (selectedGitGroup) {\n        appSettings.value.gitGroup.ID = selectedGitGroup.value.id;\n        appSettings.value.gitGroup.name = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getAppMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.microservices = selectedGitGroup.microservicesCache;\n            currentRow.microservicesDisable = !currentRow.microservices.length;\n        }\n    } else {\n        appSettings.value.gitGroup.ID = 0;\n    }\n}\n\nasync function handleAppCommitGroupInput(selectedRow: IAppDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    currentRow.commitServiceDisable = true;\n    currentRow.commitServices = [];\n    appSettings.value.commitService.name = "";\n    appSettings.value.commitService.ID = 0;\n\n    if (selectedGitGroup) {\n        appSettings.value.commitGroup.ID = selectedGitGroup.value.id;\n        appSettings.value.commitGroup.name = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getAppCommitServicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.commitServices = selectedGitGroup.microservicesCache;\n            currentRow.commitServiceDisable = !currentRow.commitServices.length;\n        }\n    } else {\n        appSettings.value.commitGroup.ID = 0;\n    }\n}\n\nasync function getModuleMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IModuleDataTableRow) {\n    currentRow.microserviceLoading = true;\n    currentRow.microservicesDisable = false;\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.microservices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.microservicesDisable = !currentRow.microservices.length;\n    currentRow.microserviceLoading = false;\n}\n\nasync function getAppMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\n    appSettings.value.microservice.loading = true;\n    currentRow.microservicesDisable = false;\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.microservices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.microservicesDisable = !currentRow.microservices.length;\n    appSettings.value.microservice.loading = false;\n}\n\nasync function getAppCommitServicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\n    appSettings.value.commitService.loading = true;\n    currentRow.commitServiceDisable = false;\n    currentRow.commitServices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.commitServices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.commitServiceDisable = !currentRow.commitServices.length;\n    appSettings.value.commitService.loading = false;\n}\n\nasync function handleModulesGitGroupChange(selectedRow: IModuleDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.gitGroupID = selectedGitGroup?.value?.id || 0;\n    currentRow.gitGroupName = selectedGitGroup?.value?.name || "";\n    if (!currentRow.gitGroupID) {\n        currentRow.microservices = [];\n        currentRow.microservicesDisable = true;\n        currentRow.microserviceName = "";\n        currentRow.microserviceID = 0;\n    }\n}\n\nasync function handleAppGitGroupChange(selectedRow: IAppDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    appSettings.value.gitGroup.ID = selectedGitGroup?.value?.id || 0;\n    appSettings.value.gitGroup.name = selectedGitGroup?.value?.name || "";\n    if (!selectedGitGroup) {\n        currentRow.microservices = [];\n        currentRow.microservicesDisable = true;\n        appSettings.value.microservice.name = "";\n        appSettings.value.microservice.ID = 0;\n    }\n}\n\nasync function handleAppCommitGroupChange(selectedRow: IAppDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    appSettings.value.commitGroup.ID = selectedGitGroup?.value?.id || 0;\n    appSettings.value.commitGroup.name = selectedGitGroup?.value?.name || "";\n    if (!selectedGitGroup) {\n        currentRow.commitServices = [];\n        currentRow.commitServiceDisable = true;\n        appSettings.value.commitService.name = "";\n        appSettings.value.commitService.ID = 0;\n    }\n}\n\n\n\nfunction handleModulesMicroServiceChange(selectedRow: IModuleDataTableRow) {\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === selectedRow.microserviceName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.microserviceName = selectedMicroservice?.name || "";\n    currentRow.microserviceID = selectedMicroservice?.id || 0;\n}\n\nfunction handleAppMicroServiceChange(selectedRow: IAppDataTableRow) {\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === appSettings.value.microservice.name);\n    appSettings.value.microservice.name = selectedMicroservice?.name || "";\n    appSettings.value.microservice.ID = selectedMicroservice?.id || 0;\n}\n\nfunction handleAppCommitServiceChange(selectedRow: IAppDataTableRow) {\n    const selectedMicroservice = selectedRow.commitServices.find((microservice) => microservice.name === appSettings.value.commitService.name);\n    appSettings.value.commitService.name = selectedMicroservice?.name || "";\n    appSettings.value.commitService.ID = selectedMicroservice?.id || 0;\n}\n\nasync function onSave() {\n    if (currentApp.value) {\n        let settings = {};\n        const modulesSettings: Array<IModuleSettingsItem> = modulesDataTableRows.value\n            .filter(\n                (row) =>\n                    row.microserviceID !=\n                    (viewModel.studio.items.find((item) => item.ID == row.moduleID) as IModule).deployParameters?.gitServiceRepoId\n            )\n            .map((row) => ({\n                moduleID: row.moduleID,\n                deployParameters: {\n                    gitGroupId: row.gitGroupID,\n                    gitServiceRepoId: row.microserviceID,\n                },\n            }));\n\n        const applicationSettings: IApplicationSettingsItem = {\n            applicationID: currentApp.value!.ID,\n            deployParameters: {\n                gitProductRepoId: appSettings.value.product.ID,\n                gitGroupId: appSettings.value.gitGroup.ID,\n                gitServiceRepoId: appSettings.value.microservice.ID,\n                jobName: appSettings.value.job,\n                commitGroupId: appSettings.value.commitGroup.ID,\n                commitServiceId: appSettings.value.commitService.ID,\n            },\n        };\n\n        settings = { modulesSettings };\n\n        if (\n            currentApp.value.deployParameters?.gitProductRepoId != appSettings.value.product.ID ||\n            currentApp.value.deployParameters?.gitServiceRepoId != appSettings.value.microservice.ID ||\n            currentApp.value.deployParameters?.commitServiceId != appSettings.value.commitService.ID ||\n            currentApp.value.deployParameters?.jobName != appSettings.value.job\n        ) {\n            settings = { ...settings, applicationSettings };\n        }\n\n        await executor.execute(\n            async () => {\n                await appSettingsUseCase.update(settings);\n            },\n            { loading: true }\n        );\n        emit("close");\n    }\n}\n\n<\/script>\n\n<template>\n    <div class="deploy-setting-container">\n        <div class="title">{{ localization.get("deploySettings_appSettings") }}</div>\n        <label for="product-input" class="product-title">{{ localization.get("product") }}</label>\n        <div class="product-input-container">\n            <input class="product-input" list="products" id="product-input" placeholder="Select Product"\n                v-model="appSettings.product.name" @change="handleProductSelect" :disabled="gitProducts.disabled" />\n            <div class="icon-container" v-if="!gitProducts.loaded">\n                <Spinner />\n            </div>\n        </div>\n        <datalist id="products">\n            <option value="" disabled selected>Select Product for Application</option>\n            <option v-for="product in gitProducts.products">\n                {{ product.name }}\n            </option>\n        </datalist>\n        <v-client-table ref="table" :data="appDataTableRows" :columns="appDatatableColumns"\n            :options="appOptionsDataTable">\n            <template #appName="props">\n                <span>{{ props.row.appName }}</span>\n            </template>\n            <template #gitGroup="props">\n                <div class="input-container">\n                    <input class="module-input" list="app-git-groups" id="app-git-group-input"\n                        placeholder="Select Git Group" v-model="appSettings.gitGroup.name"\n                        @input="handleAppGitGroupInput(props.row)" @change="handleAppGitGroupChange(props.row)"\n                        :disabled="gitGroups.disabled" />\n                    <div class="icon-container" v-if="!gitGroups.loaded">\n                        <Spinner />\n                    </div>\n                </div>\n                <datalist id="app-git-groups">\n                    <option v-for="gitGroup in gitGroups.groups" :value="gitGroup.value.name"></option>\n                </datalist>\n            </template>\n            <template #service="props">\n                <div class="input-container">\n                    <input class="module-input" :list="props.row.appID" id="app-microservice-input"\n                        placeholder="Select Microservice" v-model="appSettings.microservice.name"\n                        @change="handleAppMicroServiceChange(props.row)" :disabled="props.row.microservicesDisable" />\n                    <div class="icon-container" v-if="appSettings.microservice.loading">\n                        <Spinner />\n                    </div>\n                </div>\n\n                <datalist :id="props.row.appID">\n                    <option v-for="microservice in props.row.microservices" :value="microservice.name"></option>\n                </datalist>\n            </template>\n            <template #job="props">\n                <div class="input-container">\n                    <input type="text" class="module-input" id="app-microservice-input" placeholder="Job Name"\n                        v-model="appSettings.job" />\n                </div>\n            </template>\n            <template #commitGroup="props">\n                <div class="input-container">\n                    <input class="module-input" list="app-git-groups" id="app-git-group-input"\n                        placeholder="Select Commit Group" v-model="appSettings.commitGroup.name"\n                        @input="handleAppCommitGroupInput(props.row)" @change="handleAppCommitGroupChange(props.row)"\n                        :disabled="gitGroups.disabled" />\n                    <div class="icon-container" v-if="!gitGroups.loaded">\n                        <Spinner />\n                    </div>\n                </div>\n                <datalist id="app-git-groups">\n                    <option v-for="gitGroup in gitGroups.groups" :value="gitGroup.value.name"></option>\n                </datalist>\n            </template>\n            <template #commitService="props">\n                <div class="input-container">\n                    <input class="module-input" list="commit_service_list" id="app-microservice-input"\n                        placeholder="Select Service" v-model="appSettings.commitService.name"\n                        @change="handleAppCommitServiceChange(props.row)" :disabled="props.row.commitServiceDisable" />\n                    <div class="icon-container" v-if="appSettings.commitService.loading">\n                        <Spinner />\n                    </div>\n                </div>\n\n                <datalist id="commit_service_list">\n                    <option v-for="microservice in props.row.commitServices" :value="microservice.name"></option>\n                </datalist>\n            </template>\n        </v-client-table>\n\n        <div class="title">{{ localization.get("deploySettings_moduleSettings") }}</div>\n        <v-client-table ref="table" :data="modulesDataTableRows" :columns="modulesAppDatatableColumns"\n            :options="modulesOptionsDataTable">\n            <template #moduleName="props">\n                <span>{{ props.row.moduleName }}</span>\n            </template>\n            <template #gitGroup="props">\n                <div class="input-container">\n                    <input class="module-input" list="git-groups" id="git-group-input" placeholder="Select Git Group"\n                        v-model="props.row.gitGroupName" @input="handleModulesGitGroupInput(props.row)"\n                        @change="handleModulesGitGroupChange(props.row)" :disabled="gitGroups.disabled" />\n                    <div class="icon-container" v-if="!gitGroups.loaded">\n                        <Spinner />\n                    </div>\n                </div>\n                <datalist id="git-groups">\n                    <option v-for="gitGroup in gitGroups.groups" :value="gitGroup.value.name"></option>\n                </datalist>\n            </template>\n            <template #service="props">\n                <div class="input-container">\n                    <input class="module-input" :list="props.row.moduleID" id="microservice-input"\n                        placeholder="Select Microservice" v-model="props.row.microserviceName"\n                        @change="handleModulesMicroServiceChange(props.row)"\n                        :disabled="props.row.microservicesDisable" />\n                    <div class="icon-container" v-if="props.row.microserviceLoading">\n                        <Spinner />\n                    </div>\n                </div>\n                <datalist :id="props.row.moduleID">\n                    <option v-for="microservice in props.row.microservices" :value="microservice.name"></option>\n                </datalist>\n            </template>\n        </v-client-table>\n        <hr />\n        <button class="save-button" @click="onSave">{{ localization.get("save") }}</button>\n        <button class="previous-button" data-v-33a93b5b="" @click="() => emit(\'close\')">\n            {{ localization.get("cancel") }}\n        </button>\n    </div>\n</template>\n\n<style scoped>\n.deploy-setting-container {\n    padding: 16px 20px 20px 20px;\n    height: 495px;\n    overflow-y: auto;\n}\n\n.previous-button {\n    width: 68px;\n    height: 32px;\n    border: none;\n    background: #f5f5f500 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    font-family: "Roboto";\n    font-weight: bold;\n    color: #607d8b;\n    text-align: center;\n    margin-right: 8px;\n    float: right;\n}\n\n.save-button {\n    width: 74px;\n    height: 32px;\n    border: none;\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    font-family: "Roboto";\n    color: #ffffff;\n    text-align: center;\n    float: right;\n}\n\n.VueTables__heading {\n    font-family: \'Roboto\';\n    font-size: 13px;\n    font-weight: bold;\n    letter-spacing: 0px;\n    color: #616161;\n}\n\n.title {\n    font-family: \'Roboto\';\n    font-size: 20px;\n    font-weight: bold;\n    color: #151233;\n}\n\n.product-title {\n    font-family: \'Roboto\';\n    font-weight: bold;\n    font-size: 14px;\n    color: #151233;\n    margin-left: 6px;\n    margin-top: 20px;\n}\n\n.product-input-container {\n    position: relative;\n    max-width: max-content;\n}\n\n.input-container {\n    position: relative;\n    max-width: max-content;\n    margin-left: 20px;\n}\n\n.icon-container {\n    position: absolute;\n    right: 24px;\n    top: 7px;\n}\n\ninput {\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #a1a1a1;\n    border-radius: 4px;\n    padding: 5px 0px 6px 12px;\n    font-family: "Roboto";\n    font-size: 14px;\n}\n\ninput:disabled {\n    background-color: rgba(59, 59, 59, 0.3);\n}\n\n.module-input {\n    width: 154px;\n    height: 30px;\n}\n\n.product-input {\n    width: 230px;\n    height: 30px;\n}\n</style>\n<style>\ntable[class="VueTables__table table table-striped table-bordered table-hover"],\ntr,\ntd {\n    border-left: hidden;\n    border-right: hidden;\n    --bs-table-striped-bg: white;\n    padding: 14px 0px 14px 0px !important;\n}\n\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>thead,\nth {\n    border-style: hidden;\n    padding-left: 0px !important;\n    padding-bottom: 4px !important;\n}\n\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>thead>tr>th>span {\n    font-family: \'Roboto\';\n    font-size: 13px;\n    font-weight: bold;\n    color: #616161;\n    padding-left: 20px;\n}\n\ntable[class="VueTables__table table table-striped table-bordered table-hover"]>tbody>tr>td>span {\n    font-family: \'Roboto\';\n    font-size: \'14px\';\n    color: #212121;\n    vertical-align: middle;\n    margin-left: 20px;\n}\n</style>\n'],sourceRoot:""}]);const s=a},1771:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(1864),i=t.n(o),r=t(352),a=t.n(r)()(i());a.push([e.id,'\n@keyframes top-right-and-bottom-left-4c301d40 {\n0%,\n    5% {\n        transform: rotate(-45deg);\n        height: 16px;\n        margin-top: 0px;\n}\n15% {\n        transform: rotate(-90deg);\n        height: 3px;\n        margin-top: 6px;\n}\n25% {\n        transform: rotate(-90deg);\n        height: 0px;\n        margin-top: 6px;\n}\n60%,\n    65% {\n        transform: rotate(-270deg);\n        height: 0px;\n        margin-top: 6px;\n}\n67% {\n        transform: rotate(-250deg);\n        height: 0px;\n        margin-top: 6px;\n}\n80%,\n    100% {\n        height: 16px;\n        margin-top: 0px;\n        transform: rotate(-135deg);\n}\n}\n@keyframes top-left-and-bottom-right-4c301d40 {\n0% {\n        transform: rotate(-45deg);\n}\n15% {\n        transform: rotate(-180deg);\n        width: 0px;\n        margin-left: 6px;\n}\n25% {\n        transform: rotate(-180deg);\n        width: 0px;\n        margin-left: 6px;\n}\n60%,\n    65% {\n        transform: rotate(-360deg);\n        width: 0px;\n        margin-left: 6px;\n}\n67% {\n        transform: rotate(-340deg);\n        width: 0px;\n        margin-left: 6px;\n}\n83% {\n        transform: rotate(-175deg);\n        width: 7px;\n        margin-left: 4px;\n}\n90%,\n    100% {\n        width: 16px;\n        margin-left: 0px;\n        transform: rotate(-135deg);\n}\n}\n.top-right[data-v-4c301d40]::after {\n    content: "";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-right-color: #14adfc;\n    transform: rotate(-45deg);\n}\n.top-right[data-v-4c301d40]::after {\n    animation: top-right-and-bottom-left-4c301d40 3s infinite 0.3s;\n}\n.bottom-right[data-v-4c301d40]::after {\n    content: "";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-bottom-color: #14adfc;\n    transform: rotate(-45deg);\n    margin-top: 0px;\n}\n.bottom-right[data-v-4c301d40]::after {\n    animation: top-left-and-bottom-right-4c301d40 3s infinite 0.3s;\n}\n.top-left[data-v-4c301d40]::after {\n    content: "";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-top-color: #14adfc;\n    transform: rotate(-45deg);\n}\n.top-left[data-v-4c301d40]::after {\n    animation: top-left-and-bottom-right-4c301d40 3s infinite 0.3s;\n}\n.bottom-left[data-v-4c301d40]::after {\n    content: "";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-left-color: #14adfc;\n    transform: rotate(-45deg);\n    margin-top: 0px;\n}\n.bottom-left[data-v-4c301d40]::after {\n    animation: top-right-and-bottom-left-4c301d40 3s infinite 0.3s;\n}\n',"",{version:3,sources:["webpack://./src/presentation/vue3/components/spinner.vue"],names:[],mappings:";AAYA;AACI;;QAEI,yBAAyB;QACzB,YAAY;QACZ,eAAe;AACnB;AACA;QACI,yBAAyB;QACzB,WAAW;QACX,eAAe;AACnB;AACA;QACI,yBAAyB;QACzB,WAAW;QACX,eAAe;AACnB;AACA;;QAEI,0BAA0B;QAC1B,WAAW;QACX,eAAe;AACnB;AACA;QACI,0BAA0B;QAC1B,WAAW;QACX,eAAe;AACnB;AACA;;QAEI,YAAY;QACZ,eAAe;QACf,0BAA0B;AAC9B;AACJ;AAEA;AACI;QACI,yBAAyB;AAC7B;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;;QAEI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;;QAEI,WAAW;QACX,gBAAgB;QAChB,0BAA0B;AAC9B;AACJ;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,2BAA2B;IAC3B,yBAAyB;AAC7B;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,4BAA4B;IAC5B,yBAAyB;IACzB,eAAe;AACnB;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,yBAAyB;IACzB,yBAAyB;AAC7B;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,0BAA0B;IAC1B,yBAAyB;IACzB,eAAe;AACnB;AAEA;IACI,8DAAqD;AACzD",sourcesContent:['<script setup lang="ts"><\/script>\n\n<template>\n    <div style="position: relative">\n        <div class="top-right"></div>\n        <div class="bottom-right"></div>\n        <div class="top-left"></div>\n        <div class="bottom-left"></div>\n    </div>\n</template>\n\n<style scoped>\n@keyframes top-right-and-bottom-left {\n    0%,\n    5% {\n        transform: rotate(-45deg);\n        height: 16px;\n        margin-top: 0px;\n    }\n    15% {\n        transform: rotate(-90deg);\n        height: 3px;\n        margin-top: 6px;\n    }\n    25% {\n        transform: rotate(-90deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    60%,\n    65% {\n        transform: rotate(-270deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    67% {\n        transform: rotate(-250deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    80%,\n    100% {\n        height: 16px;\n        margin-top: 0px;\n        transform: rotate(-135deg);\n    }\n}\n\n@keyframes top-left-and-bottom-right {\n    0% {\n        transform: rotate(-45deg);\n    }\n    15% {\n        transform: rotate(-180deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    25% {\n        transform: rotate(-180deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    60%,\n    65% {\n        transform: rotate(-360deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    67% {\n        transform: rotate(-340deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    83% {\n        transform: rotate(-175deg);\n        width: 7px;\n        margin-left: 4px;\n    }\n    90%,\n    100% {\n        width: 16px;\n        margin-left: 0px;\n        transform: rotate(-135deg);\n    }\n}\n\n.top-right::after {\n    content: "";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-right-color: #14adfc;\n    transform: rotate(-45deg);\n}\n\n.top-right::after {\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\n}\n\n.bottom-right::after {\n    content: "";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-bottom-color: #14adfc;\n    transform: rotate(-45deg);\n    margin-top: 0px;\n}\n\n.bottom-right::after {\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\n}\n\n.top-left::after {\n    content: "";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-top-color: #14adfc;\n    transform: rotate(-45deg);\n}\n\n.top-left::after {\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\n}\n\n.bottom-left::after {\n    content: "";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-left-color: #14adfc;\n    transform: rotate(-45deg);\n    margin-top: 0px;\n}\n\n.bottom-left::after {\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\n}\n</style>\n'],sourceRoot:""}]);const s=a},4409:(e,n,t)=>{t.r(n),t.d(n,{default:()=>Re});var o=t(2068),i=t(9045),r=t(1407),a=t(1705),s=t(3734),c=t(7422),p=t(6595),l=t(664),u=t(8038),d=t(7620),m=t(9166);const v=e=>((0,o.dD)("data-v-4c301d40"),e=e(),(0,o.Cn)(),e),g={style:{position:"relative"}},f=[v((()=>(0,o._)("div",{class:"top-right"},null,-1))),v((()=>(0,o._)("div",{class:"bottom-right"},null,-1))),v((()=>(0,o._)("div",{class:"top-left"},null,-1))),v((()=>(0,o._)("div",{class:"bottom-left"},null,-1)))];var A=t(5701),b=t.n(A),I=t(8236),G=t.n(I),w=t(6080),D=t.n(w),h=t(6850),S=t.n(h),C=t(7182),B=t.n(C),R=t(9213),y=t.n(R),x=t(1771),P={};P.styleTagTransform=y(),P.setAttributes=S(),P.insert=D().bind(null,"head"),P.domAPI=G(),P.insertStyleElement=B(),b()(x.Z,P),x.Z&&x.Z.locals&&x.Z.locals;var M=t(1419);const N={},T=(0,M.Z)(N,[["render",function(e,n){return(0,o.wg)(),(0,o.iD)("div",g,f)}],["__scopeId","data-v-4c301d40"]]),j=e=>((0,o.dD)("data-v-20f9f52c"),e=e(),(0,o.Cn)(),e),_={class:"deploy-setting-container"},z={class:"title"},E={for:"product-input",class:"product-title"},k={class:"product-input-container"},q=["disabled"],U={key:0,class:"icon-container"},V={id:"products"},W=j((()=>(0,o._)("option",{value:"",disabled:"",selected:""},"Select Product for Application",-1))),Y={class:"input-container"},Q=["onInput","onChange","disabled"],L={key:0,class:"icon-container"},Z={id:"app-git-groups"},H=["value"],X={class:"input-container"},O=["list","onChange","disabled"],J={key:0,class:"icon-container"},F=["id"],K=["value"],$={class:"input-container"},ee={class:"input-container"},ne=["onInput","onChange","disabled"],te={key:0,class:"icon-container"},oe={id:"app-git-groups"},ie=["value"],re={class:"input-container"},ae=["onChange","disabled"],se={key:0,class:"icon-container"},ce={id:"commit_service_list"},pe=["value"],le={class:"title"},ue={class:"input-container"},de=["onUpdate:modelValue","onInput","onChange","disabled"],me={key:0,class:"icon-container"},ve={id:"git-groups"},ge=["value"],fe={class:"input-container"},Ae=["list","onUpdate:modelValue","onChange","disabled"],be={key:0,class:"icon-container"},Ie=["id"],Ge=["value"],we=j((()=>(0,o._)("hr",null,null,-1))),De=(0,o.aZ)({__name:"deploySettings",emits:["close"],setup(e,{emit:n}){(0,o.wF)((()=>{h.value=v.studio.items.filter((e=>"module"===e.objectType)).map((e=>{var n,t;return{moduleID:e.ID,moduleName:e.name,gitGroupName:"",gitGroupID:(null===(n=e.deployParameters)||void 0===n?void 0:n.gitGroupId)||0,microservices:[],microservicesDisable:!0,microserviceLoading:!1,microserviceName:"",microserviceID:(null===(t=e.deployParameters)||void 0===t?void 0:t.gitServiceRepoId)||0}})),S.value.push({appID:w.value.ID,appName:w.value.name,microservices:[],microservicesDisable:!0,job:"",commitGroup:"",commitServices:[],commitServiceDisable:!0}),w.value&&w.value.deployParameters&&w.value.deployParameters.jobName&&(D.value.job=w.value.deployParameters.jobName),async function(){A.getGroupNamesWithId().then((e=>{e.data.items.forEach((e=>G.value.groups.push({value:e,microservicesCache:[],requestedBefore:!1}))),G.value.loaded=!0,G.value.disabled=!1,h.value.forEach((e=>{if(0!==e.gitGroupID){const n=G.value.groups.find((n=>n.value.id==e.gitGroupID));n?e.gitGroupName=n.value.name:e.gitGroupID=0}})),h.value.map((e=>e.gitGroupID)).filter(((e,n,t)=>0!==e&&t.indexOf(e)===n)).forEach((e=>{h.value.forEach((n=>{n.gitGroupID==e&&(n.microserviceLoading=!0,n.microservicesDisable=!1)})),A.getProjectsByGroupId(e).then((n=>{let t=n.data.items;const o=G.value.groups.find((n=>n.value.id==e));o&&(o.microservicesCache=t,o.requestedBefore=!0,h.value.forEach((n=>{if(n.gitGroupID===e&&(n.microservices=t,n.microserviceLoading=!1,0==n.microservices.length&&(n.microservicesDisable=!0),0!==n.microserviceID)){const e=t.find((e=>e.id==n.microserviceID));e?(n.microserviceName=e.name,n.microservicesDisable=!1):(n.microserviceID=0,n.microservicesDisable=!0)}})))})).catch((()=>f.showNotification({text:"Error while fetching projects",type:"error"})))})),function(){if(w.value&&w.value.deployParameters){const e=G.value.groups.find((e=>w.value.deployParameters.gitGroupId==e.value.id)),n=G.value.groups.find((e=>w.value.deployParameters.commitGroupId==e.value.id));e&&(D.value.gitGroup={name:e.value.name,ID:e.value.id}),n&&(D.value.commitGroup={name:n.value.name,ID:n.value.id})}if(0!==D.value.gitGroup.ID){const e=G.value.groups.find((e=>e.value.id==D.value.gitGroup.ID)),n=G.value.groups.find((e=>e.value.id==D.value.commitGroup.ID));e?D.value.gitGroup.name=e.value.name:D.value.gitGroup.ID=0,n?D.value.commitGroup.name=n.value.name:D.value.commitGroup.ID=0}0!=D.value.gitGroup.ID&&(S.value[0].microservicesDisable=!1,D.value.microservice.loading=!0,A.getProjectsByGroupId(D.value.gitGroup.ID).then((e=>{let n=e.data.items;const t=G.value.groups.find((e=>e.value.id==D.value.gitGroup.ID));if(t&&(t.microservicesCache=n,t.requestedBefore=!0,S.value[0].microservices=n,D.value.microservice.loading=!1,w.value&&w.value.deployParameters)){const e=n.find((e=>{var n,t;return e.id==(null===(t=null===(n=w.value)||void 0===n?void 0:n.deployParameters)||void 0===t?void 0:t.gitServiceRepoId)}));e?(D.value.microservice.name=e.name,D.value.microservice.ID=e.id,S.value[0].microservicesDisable=!1):D.value.microservice.ID=0}})).catch((()=>f.showNotification({text:"Error while fetching projects",type:"error"})))),0!=D.value.commitGroup.ID&&(S.value[0].commitServiceDisable=!1,D.value.commitService.loading=!0,A.getProjectsByGroupId(D.value.commitGroup.ID).then((e=>{let n=e.data.items;const t=G.value.groups.find((e=>e.value.id==D.value.commitGroup.ID));if(t&&(t.microservicesCache=n,t.requestedBefore=!0,S.value[0].commitServices=n,D.value.commitService.loading=!1,w.value&&w.value.deployParameters)){const e=n.find((e=>{var n,t;return e.id==(null===(t=null===(n=w.value)||void 0===n?void 0:n.deployParameters)||void 0===t?void 0:t.commitServiceId)}));e?(D.value.commitService.name=e.name,D.value.commitService.ID=e.id,S.value[0].commitServiceDisable=!1):D.value.commitService.ID=0}})).catch((()=>f.showNotification({text:"Error while fetching projects",type:"error"}))))}()})).catch((()=>{G.value.loaded=!0,G.value.disabled=!0,f.showNotification({text:"Error while fetching git groups",type:"error"})}))}(),A.getProjectsOfProduct().then((e=>{I.value.products=e.data.items,I.value.loaded=!0,I.value.disabled=!1,function(){if(w.value&&w.value.deployParameters){const e=I.value.products.find((e=>w.value.deployParameters.gitProductRepoId==e.id));e&&(D.value.product={name:e.name,ID:e.id})}}()})).catch((()=>{I.value.loaded=!0,I.value.disabled=!0,f.showNotification({text:"Error while fetching products",type:"error"})}))}));const t=s.nC.resolve(p.w),v=s.nC.resolve(c.J),g=s.nC.resolve(l.y),f=s.nC.resolve(m.L),A=s.nC.resolve(d.R),b=s.nC.resolve(u.P),I=(0,r.iH)({products:[],disabled:!1,loaded:!1}),G=(0,r.iH)({groups:[],disabled:!1,loaded:!1}),w=(0,r.iH)(v.apps.find((e=>e.ID==v.studio.appId))),D=(0,r.iH)({product:{ID:0,name:""},gitGroup:{ID:0,name:""},microservice:{ID:0,name:"",loading:!1},job:"",commitGroup:{ID:0,name:""},commitService:{ID:0,name:"",loading:!1}}),h=(0,r.iH)(Array()),S=(0,r.iH)(Array()),C=(0,r.iH)(["moduleName","gitGroup","service"]),B=(0,r.iH)(["appName","gitGroup","service","job","commitGroup","commitService"]),R=(0,r.iH)({resizableColumns:!1,filterable:!1,perPage:3,perPageValues:[],headings:{moduleName:t.get("moduleName"),gitGroup:t.get("gitGroup"),microservice:t.get("service")},sortable:[],texts:{count:""}}),y=(0,r.iH)({resizableColumns:!1,filterable:!1,perPage:1,perPageValues:[],headings:{appName:t.get("appName"),gitGroup:t.get("gitGroup"),microservice:t.get("service"),job:t.get("job"),commitGroup:t.get("commitGroup"),commitService:t.get("commitService")},sortable:[],texts:{count:""}});function x(){const e=I.value.products.find((e=>e.name===D.value.product.name));e?D.value.product.ID=e.id:(D.value.product.name="",D.value.product.ID=0)}async function P(e,n){n.microserviceLoading=!0,n.microservicesDisable=!1,n.microservices=await A.getProjectsByGroupId(e.value.id).then((e=>e.data.items)),e.microservicesCache=n.microservices,e.requestedBefore=!0,n.microservicesDisable=!n.microservices.length,n.microserviceLoading=!1}async function M(e,n){D.value.microservice.loading=!0,n.microservicesDisable=!1,n.microservices=await A.getProjectsByGroupId(e.value.id).then((e=>e.data.items)),e.microservicesCache=n.microservices,e.requestedBefore=!0,n.microservicesDisable=!n.microservices.length,D.value.microservice.loading=!1}async function N(e,n){D.value.commitService.loading=!0,n.commitServiceDisable=!1,n.commitServices=await A.getProjectsByGroupId(e.value.id).then((e=>e.data.items)),e.microservicesCache=n.commitServices,e.requestedBefore=!0,n.commitServiceDisable=!n.commitServices.length,D.value.commitService.loading=!1}async function j(){var e,t,o,i;if(w.value){let r={};const a=h.value.filter((e=>{var n;return e.microserviceID!=(null===(n=v.studio.items.find((n=>n.ID==e.moduleID)).deployParameters)||void 0===n?void 0:n.gitServiceRepoId)})).map((e=>({moduleID:e.moduleID,deployParameters:{gitGroupId:e.gitGroupID,gitServiceRepoId:e.microserviceID}}))),s={applicationID:w.value.ID,deployParameters:{gitProductRepoId:D.value.product.ID,gitGroupId:D.value.gitGroup.ID,gitServiceRepoId:D.value.microservice.ID,jobName:D.value.job,commitGroupId:D.value.commitGroup.ID,commitServiceId:D.value.commitService.ID}};r={modulesSettings:a},(null===(e=w.value.deployParameters)||void 0===e?void 0:e.gitProductRepoId)==D.value.product.ID&&(null===(t=w.value.deployParameters)||void 0===t?void 0:t.gitServiceRepoId)==D.value.microservice.ID&&(null===(o=w.value.deployParameters)||void 0===o?void 0:o.commitServiceId)==D.value.commitService.ID&&(null===(i=w.value.deployParameters)||void 0===i?void 0:i.jobName)==D.value.job||(r={...r,applicationSettings:s}),await g.execute((async()=>{await A.update(r)}),{loading:!0}),n("close")}}return(e,s)=>{const c=(0,o.up)("v-client-table");return(0,o.wg)(),(0,o.iD)("div",_,[(0,o._)("div",z,(0,i.toDisplayString)((0,r.SU)(t).get("deploySettings_appSettings")),1),(0,o._)("label",E,(0,i.toDisplayString)((0,r.SU)(t).get("product")),1),(0,o._)("div",k,[(0,o.wy)((0,o._)("input",{class:"product-input",list:"products",id:"product-input",placeholder:"Select Product","onUpdate:modelValue":s[0]||(s[0]=e=>D.value.product.name=e),onChange:x,disabled:I.value.disabled},null,40,q),[[a.vModelText,D.value.product.name]]),I.value.loaded?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("div",U,[(0,o.Wm)(T)]))]),(0,o._)("datalist",V,[W,((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(I.value.products,(e=>((0,o.wg)(),(0,o.iD)("option",null,(0,i.toDisplayString)(e.name),1)))),256))]),(0,o.Wm)(c,{ref:"table",data:S.value,columns:B.value,options:y.value},{appName:(0,o.w5)((e=>[(0,o._)("span",null,(0,i.toDisplayString)(e.row.appName),1)])),gitGroup:(0,o.w5)((e=>[(0,o._)("div",Y,[(0,o.wy)((0,o._)("input",{class:"module-input",list:"app-git-groups",id:"app-git-group-input",placeholder:"Select Git Group","onUpdate:modelValue":s[1]||(s[1]=e=>D.value.gitGroup.name=e),onInput:n=>async function(e){b.resetTimer();const n=G.value.groups.find((e=>e.value.name===D.value.gitGroup.name)),t=S.value.find((n=>n.appID==e.appID));t.microservicesDisable=!0,t.microservices=[],D.value.microservice.name="",D.value.microservice.ID=0,n?(D.value.gitGroup.ID=n.value.id,D.value.gitGroup.name=n.value.name,n.requestedBefore?(t.microservices=n.microservicesCache,t.microservicesDisable=!t.microservices.length):b.debounce(M,500,n,t)):D.value.gitGroup.ID=0}(e.row),onChange:n=>async function(e){var n,t;const o=G.value.groups.find((e=>e.value.name===D.value.gitGroup.name)),i=S.value.find((n=>n.appID==e.appID));D.value.gitGroup.ID=(null===(n=null==o?void 0:o.value)||void 0===n?void 0:n.id)||0,D.value.gitGroup.name=(null===(t=null==o?void 0:o.value)||void 0===t?void 0:t.name)||"",o||(i.microservices=[],i.microservicesDisable=!0,D.value.microservice.name="",D.value.microservice.ID=0)}(e.row),disabled:G.value.disabled},null,40,Q),[[a.vModelText,D.value.gitGroup.name]]),G.value.loaded?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("div",L,[(0,o.Wm)(T)]))]),(0,o._)("datalist",Z,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(G.value.groups,(e=>((0,o.wg)(),(0,o.iD)("option",{value:e.value.name},null,8,H)))),256))])])),service:(0,o.w5)((e=>[(0,o._)("div",X,[(0,o.wy)((0,o._)("input",{class:"module-input",list:e.row.appID,id:"app-microservice-input",placeholder:"Select Microservice","onUpdate:modelValue":s[2]||(s[2]=e=>D.value.microservice.name=e),onChange:n=>function(e){const n=e.microservices.find((e=>e.name===D.value.microservice.name));D.value.microservice.name=(null==n?void 0:n.name)||"",D.value.microservice.ID=(null==n?void 0:n.id)||0}(e.row),disabled:e.row.microservicesDisable},null,40,O),[[a.vModelText,D.value.microservice.name]]),D.value.microservice.loading?((0,o.wg)(),(0,o.iD)("div",J,[(0,o.Wm)(T)])):(0,o.kq)("v-if",!0)]),(0,o._)("datalist",{id:e.row.appID},[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(e.row.microservices,(e=>((0,o.wg)(),(0,o.iD)("option",{value:e.name},null,8,K)))),256))],8,F)])),job:(0,o.w5)((e=>[(0,o._)("div",$,[(0,o.wy)((0,o._)("input",{type:"text",class:"module-input",id:"app-microservice-input",placeholder:"Job Name","onUpdate:modelValue":s[3]||(s[3]=e=>D.value.job=e)},null,512),[[a.vModelText,D.value.job]])])])),commitGroup:(0,o.w5)((e=>[(0,o._)("div",ee,[(0,o.wy)((0,o._)("input",{class:"module-input",list:"app-git-groups",id:"app-git-group-input",placeholder:"Select Commit Group","onUpdate:modelValue":s[4]||(s[4]=e=>D.value.commitGroup.name=e),onInput:n=>async function(e){b.resetTimer();const n=G.value.groups.find((e=>e.value.name===D.value.commitGroup.name)),t=S.value.find((n=>n.appID==e.appID));t.commitServiceDisable=!0,t.commitServices=[],D.value.commitService.name="",D.value.commitService.ID=0,n?(D.value.commitGroup.ID=n.value.id,D.value.commitGroup.name=n.value.name,n.requestedBefore?(t.commitServices=n.microservicesCache,t.commitServiceDisable=!t.commitServices.length):b.debounce(N,500,n,t)):D.value.commitGroup.ID=0}(e.row),onChange:n=>async function(e){var n,t;const o=G.value.groups.find((e=>e.value.name===D.value.commitGroup.name)),i=S.value.find((n=>n.appID==e.appID));D.value.commitGroup.ID=(null===(n=null==o?void 0:o.value)||void 0===n?void 0:n.id)||0,D.value.commitGroup.name=(null===(t=null==o?void 0:o.value)||void 0===t?void 0:t.name)||"",o||(i.commitServices=[],i.commitServiceDisable=!0,D.value.commitService.name="",D.value.commitService.ID=0)}(e.row),disabled:G.value.disabled},null,40,ne),[[a.vModelText,D.value.commitGroup.name]]),G.value.loaded?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("div",te,[(0,o.Wm)(T)]))]),(0,o._)("datalist",oe,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(G.value.groups,(e=>((0,o.wg)(),(0,o.iD)("option",{value:e.value.name},null,8,ie)))),256))])])),commitService:(0,o.w5)((e=>[(0,o._)("div",re,[(0,o.wy)((0,o._)("input",{class:"module-input",list:"commit_service_list",id:"app-microservice-input",placeholder:"Select Service","onUpdate:modelValue":s[5]||(s[5]=e=>D.value.commitService.name=e),onChange:n=>function(e){const n=e.commitServices.find((e=>e.name===D.value.commitService.name));D.value.commitService.name=(null==n?void 0:n.name)||"",D.value.commitService.ID=(null==n?void 0:n.id)||0}(e.row),disabled:e.row.commitServiceDisable},null,40,ae),[[a.vModelText,D.value.commitService.name]]),D.value.commitService.loading?((0,o.wg)(),(0,o.iD)("div",se,[(0,o.Wm)(T)])):(0,o.kq)("v-if",!0)]),(0,o._)("datalist",ce,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(e.row.commitServices,(e=>((0,o.wg)(),(0,o.iD)("option",{value:e.name},null,8,pe)))),256))])])),_:1},8,["data","columns","options"]),(0,o._)("div",le,(0,i.toDisplayString)((0,r.SU)(t).get("deploySettings_moduleSettings")),1),(0,o.Wm)(c,{ref:"table",data:h.value,columns:C.value,options:R.value},{moduleName:(0,o.w5)((e=>[(0,o._)("span",null,(0,i.toDisplayString)(e.row.moduleName),1)])),gitGroup:(0,o.w5)((e=>[(0,o._)("div",ue,[(0,o.wy)((0,o._)("input",{class:"module-input",list:"git-groups",id:"git-group-input",placeholder:"Select Git Group","onUpdate:modelValue":n=>e.row.gitGroupName=n,onInput:n=>async function(e){b.resetTimer();const n=G.value.groups.find((n=>n.value.name===e.gitGroupName)),t=h.value.find((n=>n.moduleID==e.moduleID));t.microservicesDisable=!0,t.microservices=[],t.microserviceName="",t.microserviceID=0,n?(t.gitGroupID=n.value.id,t.gitGroupName=n.value.name,n.requestedBefore?(t.microservices=n.microservicesCache,t.microservicesDisable=!t.microservices.length):b.debounce(P,500,n,t)):(t.gitGroupName=e.gitGroupName,t.gitGroupID=0)}(e.row),onChange:n=>async function(e){var n,t;const o=G.value.groups.find((n=>n.value.name===e.gitGroupName)),i=h.value.find((n=>n.moduleID==e.moduleID));i.gitGroupID=(null===(n=null==o?void 0:o.value)||void 0===n?void 0:n.id)||0,i.gitGroupName=(null===(t=null==o?void 0:o.value)||void 0===t?void 0:t.name)||"",i.gitGroupID||(i.microservices=[],i.microservicesDisable=!0,i.microserviceName="",i.microserviceID=0)}(e.row),disabled:G.value.disabled},null,40,de),[[a.vModelText,e.row.gitGroupName]]),G.value.loaded?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("div",me,[(0,o.Wm)(T)]))]),(0,o._)("datalist",ve,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(G.value.groups,(e=>((0,o.wg)(),(0,o.iD)("option",{value:e.value.name},null,8,ge)))),256))])])),service:(0,o.w5)((e=>[(0,o._)("div",fe,[(0,o.wy)((0,o._)("input",{class:"module-input",list:e.row.moduleID,id:"microservice-input",placeholder:"Select Microservice","onUpdate:modelValue":n=>e.row.microserviceName=n,onChange:n=>function(e){const n=e.microservices.find((n=>n.name===e.microserviceName)),t=h.value.find((n=>n.moduleID==e.moduleID));t.microserviceName=(null==n?void 0:n.name)||"",t.microserviceID=(null==n?void 0:n.id)||0}(e.row),disabled:e.row.microservicesDisable},null,40,Ae),[[a.vModelText,e.row.microserviceName]]),e.row.microserviceLoading?((0,o.wg)(),(0,o.iD)("div",be,[(0,o.Wm)(T)])):(0,o.kq)("v-if",!0)]),(0,o._)("datalist",{id:e.row.moduleID},[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(e.row.microservices,(e=>((0,o.wg)(),(0,o.iD)("option",{value:e.name},null,8,Ge)))),256))],8,Ie)])),_:1},8,["data","columns","options"]),we,(0,o._)("button",{class:"save-button",onClick:j},(0,i.toDisplayString)((0,r.SU)(t).get("save")),1),(0,o._)("button",{class:"previous-button","data-v-33a93b5b":"",onClick:s[6]||(s[6]=()=>n("close"))},(0,i.toDisplayString)((0,r.SU)(t).get("cancel")),1)])}}});var he=t(5516),Se={};Se.styleTagTransform=y(),Se.setAttributes=S(),Se.insert=D().bind(null,"head"),Se.domAPI=G(),Se.insertStyleElement=B(),b()(he.Z,Se),he.Z&&he.Z.locals&&he.Z.locals;var Ce=t(750),Be={};Be.styleTagTransform=y(),Be.setAttributes=S(),Be.insert=D().bind(null,"head"),Be.domAPI=G(),Be.insertStyleElement=B(),b()(Ce.Z,Be),Ce.Z&&Ce.Z.locals&&Ce.Z.locals;const Re=(0,M.Z)(De,[["__scopeId","data-v-20f9f52c"]])}}]);
//# sourceMappingURL=409.js.map
{"version":3,"file":"4409.js","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?d4a0","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?370e","webpack://qcloud_shell/./src/presentation/vue3/components/spinner.vue?f78c","webpack://qcloud_shell/./src/presentation/vue3/components/spinner.vue","webpack://qcloud_shell/./src/presentation/vue3/components/spinner.vue?003e","webpack://qcloud_shell/./src/presentation/vue3/components/spinner.vue?404d","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?1e52","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?aef6","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?1c01","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.deploy-setting-container[data-v-20f9f52c] {\\n    padding: 16px 20px 20px 20px;\\n    height: 495px;\\n    overflow-y: auto;\\n}\\n.previous-button[data-v-20f9f52c] {\\n    width: 68px;\\n    height: 32px;\\n    border: none;\\n    background: #f5f5f500 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    font-weight: bold;\\n    color: #607d8b;\\n    text-align: center;\\n    margin-right: 8px;\\n    float: right;\\n}\\n.save-button[data-v-20f9f52c] {\\n    width: 74px;\\n    height: 32px;\\n    border: none;\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    color: #ffffff;\\n    text-align: center;\\n    float: right;\\n}\\n.VueTables__heading[data-v-20f9f52c] {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    letter-spacing: 0px;\\n    color: #616161;\\n}\\n.title[data-v-20f9f52c] {\\n    font-family: 'Roboto';\\n    font-size: 20px;\\n    font-weight: bold;\\n    color: #151233;\\n}\\n.product-title[data-v-20f9f52c] {\\n    font-family: 'Roboto';\\n    font-weight: bold;\\n    font-size: 14px;\\n    color: #151233;\\n    margin-left: 6px;\\n    margin-top: 20px;\\n}\\n.product-input-container[data-v-20f9f52c] {\\n    position: relative;\\n    max-width: max-content;\\n}\\n.input-container[data-v-20f9f52c] {\\n    position: relative;\\n    max-width: max-content;\\n    margin-left: 20px;\\n}\\n.icon-container[data-v-20f9f52c] {\\n    position: absolute;\\n    right: 24px;\\n    top: 7px;\\n}\\ninput[data-v-20f9f52c] {\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #a1a1a1;\\n    border-radius: 4px;\\n    padding: 5px 0px 6px 12px;\\n    font-family: \\\"Roboto\\\";\\n    font-size: 14px;\\n}\\ninput[data-v-20f9f52c]:disabled {\\n    background-color: rgba(59, 59, 59, 0.3);\\n}\\n.module-input[data-v-20f9f52c] {\\n    width: 154px;\\n    height: 30px;\\n}\\n.product-input[data-v-20f9f52c] {\\n    width: 230px;\\n    height: 30px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/deploySettings.vue\"],\"names\":[],\"mappings\":\";AAmuBA;IACI,4BAA4B;IAC5B,aAAa;IACb,gBAAgB;AACpB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,iDAAiD;IACjD,kBAAkB;IAClB,qBAAqB;IACrB,iBAAiB;IACjB,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,YAAY;AAChB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,+CAA+C;IAC/C,kBAAkB;IAClB,qBAAqB;IACrB,cAAc;IACd,kBAAkB;IAClB,YAAY;AAChB;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,mBAAmB;IACnB,cAAc;AAClB;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,cAAc;AAClB;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,eAAe;IACf,cAAc;IACd,gBAAgB;IAChB,gBAAgB;AACpB;AAEA;IACI,kBAAkB;IAClB,sBAAsB;AAC1B;AAEA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,iBAAiB;AACrB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,QAAQ;AACZ;AAEA;IACI,+CAA+C;IAC/C,yBAAyB;IACzB,kBAAkB;IAClB,yBAAyB;IACzB,qBAAqB;IACrB,eAAe;AACnB;AAEA;IACI,uCAAuC;AAC3C;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;AAEA;IACI,YAAY;IACZ,YAAY;AAChB\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\">\\nimport { onBeforeMount, ref } from \\\"vue\\\";\\nimport { container } from \\\"../../../../domain/core/diContainer\\\";\\nimport { IViewModel } from \\\"../../../../domain/viewModel/IViewModel\\\";\\nimport { IModule, IModuleSettingsItem, IApplicationSettingsItem, IModuleDeployParameters } from \\\"../../../../domain/model/models\\\";\\nimport { ILocalization } from \\\"../../../../domain/infrastructure/ILocalization\\\";\\nimport { IGitProject } from \\\"../../../../domain/infrastructure/IProviderApi\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IDebounce } from \\\"../../../../domain/infrastructure/IDebounce\\\";\\nimport { IApplicationSettings } from \\\"../../../../domain/useCase/IApplicationSettings\\\";\\nimport { INotification } from \\\"../../../../domain/presentation/INotification\\\";\\nimport Spinner from \\\"../spinner.vue\\\"\\n\\nonBeforeMount(() => {\\n    fillDatatableRow();\\n    setJobName();\\n    getGitGroupsFromProvider();\\n    getProductsFromProvider();\\n});\\n\\ninterface IProduct {\\n    products: Array<IGitProject>;\\n    disabled: boolean;\\n    loaded: boolean;\\n}\\n\\ninterface IGroup {\\n    value: IGitProject;\\n    microservicesCache: Array<IGitProject>;\\n    requestedBefore: boolean;\\n}\\n\\ninterface IGitGroup {\\n    groups: Array<IGroup>;\\n    disabled: boolean;\\n    loaded: boolean;\\n}\\n\\ninterface IModuleDataTableRow {\\n    moduleID: IModule[\\\"ID\\\"];\\n    moduleName: IModule[\\\"name\\\"];\\n    gitGroupName: string;\\n    gitGroupID: number;\\n    microservices: Array<IGitProject>;\\n    microservicesDisable: boolean;\\n    microserviceLoading: boolean;\\n    microserviceName: string;\\n    microserviceID: number;\\n}\\n\\ninterface IAppDataTableRow {\\n    appID: IModule[\\\"ID\\\"];\\n    appName: IModule[\\\"name\\\"];\\n    microservices: Array<IGitProject>;\\n    microservicesDisable: boolean;\\n    job: string;\\n    commitGroup: string;\\n    commitServices: Array<IGitProject>;\\n    commitServiceDisable: boolean;\\n}\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\n\\nconst localization = container.resolve<ILocalization>(ILocalization);\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst notification = container.resolve<INotification>(INotification);\\nconst appSettingsUseCase = container.resolve<IApplicationSettings>(IApplicationSettings);\\nconst debouncer = container.resolve<IDebounce>(IDebounce);\\n\\nconst gitProducts = ref({ products: [], disabled: false, loaded: false } as IProduct);\\nconst gitGroups = ref({ groups: [], disabled: false, loaded: false } as IGitGroup);\\nconst currentApp = ref(viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\nconst appSettings = ref({ product: { ID: 0, name: \\\"\\\" }, gitGroup: { ID: 0, name: \\\"\\\" }, microservice: { ID: 0, name: \\\"\\\", loading: false }, job: \\\"\\\", commitGroup: { ID: 0, name: \\\"\\\" }, commitService: { ID: 0, name: \\\"\\\", loading: false } });\\nconst modulesDataTableRows = ref(Array<IModuleDataTableRow>());\\nconst appDataTableRows = ref(Array<IAppDataTableRow>());\\n\\nconst modulesAppDatatableColumns = ref([\\\"moduleName\\\", \\\"gitGroup\\\", \\\"service\\\"]);\\nconst appDatatableColumns = ref([\\\"appName\\\", \\\"gitGroup\\\", \\\"service\\\", \\\"job\\\", \\\"commitGroup\\\", \\\"commitService\\\"]);\\nconst modulesOptionsDataTable = ref({\\n    resizableColumns: false,\\n    filterable: false,\\n    perPage: 3,\\n    perPageValues: [],\\n    headings: {\\n        moduleName: localization.get(\\\"moduleName\\\"),\\n        gitGroup: localization.get(\\\"gitGroup\\\"),\\n        microservice: localization.get(\\\"service\\\"),\\n    },\\n    sortable: [],\\n    texts: {\\n        count: \\\"\\\",\\n    },\\n});\\n\\nconst appOptionsDataTable = ref({\\n    resizableColumns: false,\\n    filterable: false,\\n    perPage: 1,\\n    perPageValues: [],\\n    headings: {\\n        appName: localization.get(\\\"appName\\\"),\\n        gitGroup: localization.get(\\\"gitGroup\\\"),\\n        microservice: localization.get(\\\"service\\\"),\\n        job: localization.get(\\\"job\\\"),\\n        commitGroup: localization.get(\\\"commitGroup\\\"),\\n        commitService: localization.get(\\\"commitService\\\"),\\n    },\\n    sortable: [],\\n    texts: {\\n        count: \\\"\\\",\\n    },\\n});\\n\\nfunction fillDatatableRow() {\\n    modulesDataTableRows.value = viewModel.studio.items\\n        .filter((item) => item.objectType === \\\"module\\\")\\n        .map<IModuleDataTableRow>((item) => {\\n            const module: IModuleDataTableRow = {\\n                moduleID: item.ID,\\n                moduleName: item.name,\\n                gitGroupName: \\\"\\\",\\n                gitGroupID: (item as IModule).deployParameters?.gitGroupId || 0,\\n                microservices: [],\\n                microservicesDisable: true,\\n                microserviceLoading: false,\\n                microserviceName: \\\"\\\",\\n                microserviceID: (item as IModule).deployParameters?.gitServiceRepoId || 0,\\n            };\\n            return module;\\n        });\\n    appDataTableRows.value.push({\\n        appID: currentApp.value!.ID,\\n        appName: currentApp.value!.name,\\n        microservices: [],\\n        microservicesDisable: true,\\n        job: \\\"\\\",\\n        commitGroup: \\\"\\\",\\n        commitServices: [],\\n        commitServiceDisable: true,\\n    });\\n}\\n\\nfunction getProductsFromProvider() {\\n    appSettingsUseCase\\n        .getProjectsOfProduct()\\n        .then(res => {\\n            gitProducts.value.products = res.data.items;\\n            gitProducts.value.loaded = true;\\n            gitProducts.value.disabled = false;\\n            setSelectedProduct();\\n        })\\n        .catch(() => {\\n            gitProducts.value.loaded = true;\\n            gitProducts.value.disabled = true;\\n            notification.showNotification({ text: \\\"Error while fetching products\\\", type: \\\"error\\\" });\\n        });\\n}\\n\\nfunction setSelectedProduct() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            const currentProduct = gitProducts.value.products.find((product) => currentApp.value!.deployParameters!.gitProductRepoId == product.id);\\n            if (currentProduct) {\\n                appSettings.value.product = {\\n                    name: currentProduct.name,\\n                    ID: currentProduct.id,\\n                };\\n            }\\n        }\\n    }\\n}\\n\\nfunction setJobName() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            if (currentApp.value.deployParameters.jobName)\\n                appSettings.value.job = currentApp.value.deployParameters.jobName\\n        }\\n    }\\n}\\n\\nasync function getGitGroupsFromProvider() {\\n    appSettingsUseCase\\n        .getGroupNamesWithId()\\n        .then((res) => {\\n            res.data.items.forEach((fetchedGroup) =>\\n                gitGroups.value.groups.push({\\n                    value: fetchedGroup,\\n                    microservicesCache: [],\\n                    requestedBefore: false,\\n                })\\n            );\\n            gitGroups.value.loaded = true;\\n            gitGroups.value.disabled = false;\\n            setModulesSelectedGitGroups();\\n            setAppSelectedGitGroup();\\n        })\\n        .catch(() => {\\n            gitGroups.value.loaded = true;\\n            gitGroups.value.disabled = true;\\n\\n            notification.showNotification({\\n                text: \\\"Error while fetching git groups\\\",\\n                type: \\\"error\\\",\\n            })\\n        }\\n        );\\n}\\n\\nfunction setModulesSelectedGitGroups() {\\n    modulesDataTableRows.value.forEach((row) => {\\n        if (row.gitGroupID !== 0) {\\n            const group = gitGroups.value.groups.find((group) => group.value.id == row.gitGroupID);\\n            if (group) {\\n                row.gitGroupName = group.value.name;\\n            } else {\\n                row.gitGroupID = 0;\\n            }\\n        }\\n    });\\n    setModulesSelectedMicroservices();\\n}\\n\\nfunction setAppSelectedGitGroup() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            const currentGitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.gitGroupId == group.value.id);\\n            const currentCommitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.commitGroupId == group.value.id);\\n            if (currentGitGroup) {\\n                appSettings.value.gitGroup = {\\n                    name: currentGitGroup.value.name,\\n                    ID: currentGitGroup.value.id,\\n                };\\n            }\\n            if (currentCommitGroup) {\\n                appSettings.value.commitGroup = {\\n                    name: currentCommitGroup.value.name,\\n                    ID: currentCommitGroup.value.id,\\n                };\\n            }\\n\\n        }\\n    }\\n\\n    if (appSettings.value.gitGroup.ID !== 0) {\\n        const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\\n        const commitGroup = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\\n        if (group) {\\n            appSettings.value.gitGroup.name = group.value.name;\\n        } else {\\n            appSettings.value.gitGroup.ID = 0;\\n        }\\n\\n        if (commitGroup) {\\n            appSettings.value.commitGroup.name = commitGroup.value.name;\\n        } else {\\n            appSettings.value.commitGroup.ID = 0;\\n        }\\n    }\\n    setAppSelectedMicroservice();\\n}\\n\\nfunction setModulesSelectedMicroservices() {\\n    const groupIdList: Array<number> = modulesDataTableRows.value\\n        .map((row) => row.gitGroupID)\\n        .filter((id, index, self) => id !== 0 && self.indexOf(id) === index);\\n\\n    groupIdList.forEach((id) => {\\n        modulesDataTableRows.value.forEach(row => {\\n            if (row.gitGroupID == id) {\\n                row.microserviceLoading = true;\\n                row.microservicesDisable = false;\\n            }\\n        })\\n        appSettingsUseCase\\n            .getProjectsByGroupId(id)\\n            .then((res) => {\\n                let data = res.data.items;\\n                const group = gitGroups.value.groups.find((group) => group.value.id == id);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    modulesDataTableRows.value.forEach((row) => {\\n                        if (row.gitGroupID === id) {\\n                            row.microservices = data;\\n                            row.microserviceLoading = false;\\n                            if (row.microservices.length == 0) {\\n                                row.microservicesDisable = true;\\n                            }\\n                            if (row.microserviceID !== 0) {\\n                                const microservice = data.find((service) => service.id == row.microserviceID);\\n                                if (microservice) {\\n                                    row.microserviceName = microservice.name;\\n                                    row.microservicesDisable = false;\\n                                } else {\\n                                    row.microserviceID = 0;\\n                                    row.microservicesDisable = true;\\n                                }\\n                            }\\n                        }\\n                    });\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    });\\n}\\n\\nfunction setAppSelectedMicroservice() {\\n    if (appSettings.value.gitGroup.ID != 0) {\\n        appDataTableRows.value[0].microservicesDisable = false;\\n        appSettings.value.microservice.loading = true;\\n        appSettingsUseCase\\n            .getProjectsByGroupId(appSettings.value.gitGroup.ID)\\n            .then((res) => {\\n                let data = res.data.items;\\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    appDataTableRows.value[0].microservices = data;\\n                    appSettings.value.microservice.loading = false;\\n                    if (currentApp.value) {\\n                        if (currentApp.value.deployParameters) {\\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.gitServiceRepoId);\\n                            if (microservice) {\\n                                appSettings.value.microservice.name = microservice.name;\\n                                appSettings.value.microservice.ID = microservice.id;\\n                                appDataTableRows.value[0].microservicesDisable = false;\\n                            } else {\\n                                appSettings.value.microservice.ID = 0;\\n                            }\\n                        }\\n                    }\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    }\\n\\n    if (appSettings.value.commitGroup.ID != 0) {\\n        appDataTableRows.value[0].commitServiceDisable = false;\\n        appSettings.value.commitService.loading = true;\\n        appSettingsUseCase\\n            .getProjectsByGroupId(appSettings.value.commitGroup.ID)\\n            .then((res) => {\\n                let data = res.data.items;\\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    appDataTableRows.value[0].commitServices = data;\\n                    appSettings.value.commitService.loading = false;\\n                    if (currentApp.value) {\\n                        if (currentApp.value.deployParameters) {\\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.commitServiceId);\\n                            if (microservice) {\\n                                appSettings.value.commitService.name = microservice.name;\\n                                appSettings.value.commitService.ID = microservice.id;\\n                                appDataTableRows.value[0].commitServiceDisable = false;\\n                            } else {\\n                                appSettings.value.commitService.ID = 0;\\n                            }\\n                        }\\n                    }\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    }\\n}\\n\\nfunction handleProductSelect() {\\n    const product = gitProducts.value.products.find((product) => product.name === appSettings.value.product.name);\\n    if (product) {\\n        appSettings.value.product.ID = product.id;\\n    } else {\\n        appSettings.value.product.name = \\\"\\\";\\n        appSettings.value.product.ID = 0;\\n    }\\n}\\n\\nasync function handleModulesGitGroupInput(selectedRow: IModuleDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.microservicesDisable = true;\\n    currentRow.microservices = [];\\n    currentRow.microserviceName = \\\"\\\";\\n    currentRow.microserviceID = 0;\\n\\n    if (selectedGitGroup) {\\n        currentRow.gitGroupID = selectedGitGroup.value.id;\\n        currentRow.gitGroupName = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getModuleMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.microservices = selectedGitGroup.microservicesCache;\\n            currentRow.microservicesDisable = !currentRow.microservices.length;\\n        }\\n    } else {\\n        currentRow.gitGroupName = selectedRow.gitGroupName;\\n        currentRow.gitGroupID = 0;\\n    }\\n}\\n\\nasync function handleAppGitGroupInput(selectedRow: IAppDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    currentRow.microservicesDisable = true;\\n    currentRow.microservices = [];\\n    appSettings.value.microservice.name = \\\"\\\";\\n    appSettings.value.microservice.ID = 0;\\n\\n    if (selectedGitGroup) {\\n        appSettings.value.gitGroup.ID = selectedGitGroup.value.id;\\n        appSettings.value.gitGroup.name = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getAppMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.microservices = selectedGitGroup.microservicesCache;\\n            currentRow.microservicesDisable = !currentRow.microservices.length;\\n        }\\n    } else {\\n        appSettings.value.gitGroup.ID = 0;\\n    }\\n}\\n\\nasync function handleAppCommitGroupInput(selectedRow: IAppDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    currentRow.commitServiceDisable = true;\\n    currentRow.commitServices = [];\\n    appSettings.value.commitService.name = \\\"\\\";\\n    appSettings.value.commitService.ID = 0;\\n\\n    if (selectedGitGroup) {\\n        appSettings.value.commitGroup.ID = selectedGitGroup.value.id;\\n        appSettings.value.commitGroup.name = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getAppCommitServicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.commitServices = selectedGitGroup.microservicesCache;\\n            currentRow.commitServiceDisable = !currentRow.commitServices.length;\\n        }\\n    } else {\\n        appSettings.value.commitGroup.ID = 0;\\n    }\\n}\\n\\nasync function getModuleMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IModuleDataTableRow) {\\n    currentRow.microserviceLoading = true;\\n    currentRow.microservicesDisable = false;\\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.microservices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.microservicesDisable = !currentRow.microservices.length;\\n    currentRow.microserviceLoading = false;\\n}\\n\\nasync function getAppMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\\n    appSettings.value.microservice.loading = true;\\n    currentRow.microservicesDisable = false;\\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.microservices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.microservicesDisable = !currentRow.microservices.length;\\n    appSettings.value.microservice.loading = false;\\n}\\n\\nasync function getAppCommitServicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\\n    appSettings.value.commitService.loading = true;\\n    currentRow.commitServiceDisable = false;\\n    currentRow.commitServices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.commitServices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.commitServiceDisable = !currentRow.commitServices.length;\\n    appSettings.value.commitService.loading = false;\\n}\\n\\nasync function handleModulesGitGroupChange(selectedRow: IModuleDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.gitGroupID = selectedGitGroup?.value?.id || 0;\\n    currentRow.gitGroupName = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!currentRow.gitGroupID) {\\n        currentRow.microservices = [];\\n        currentRow.microservicesDisable = true;\\n        currentRow.microserviceName = \\\"\\\";\\n        currentRow.microserviceID = 0;\\n    }\\n}\\n\\nasync function handleAppGitGroupChange(selectedRow: IAppDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    appSettings.value.gitGroup.ID = selectedGitGroup?.value?.id || 0;\\n    appSettings.value.gitGroup.name = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!selectedGitGroup) {\\n        currentRow.microservices = [];\\n        currentRow.microservicesDisable = true;\\n        appSettings.value.microservice.name = \\\"\\\";\\n        appSettings.value.microservice.ID = 0;\\n    }\\n}\\n\\nasync function handleAppCommitGroupChange(selectedRow: IAppDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    appSettings.value.commitGroup.ID = selectedGitGroup?.value?.id || 0;\\n    appSettings.value.commitGroup.name = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!selectedGitGroup) {\\n        currentRow.commitServices = [];\\n        currentRow.commitServiceDisable = true;\\n        appSettings.value.commitService.name = \\\"\\\";\\n        appSettings.value.commitService.ID = 0;\\n    }\\n}\\n\\n\\n\\nfunction handleModulesMicroServiceChange(selectedRow: IModuleDataTableRow) {\\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === selectedRow.microserviceName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.microserviceName = selectedMicroservice?.name || \\\"\\\";\\n    currentRow.microserviceID = selectedMicroservice?.id || 0;\\n}\\n\\nfunction handleAppMicroServiceChange(selectedRow: IAppDataTableRow) {\\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === appSettings.value.microservice.name);\\n    appSettings.value.microservice.name = selectedMicroservice?.name || \\\"\\\";\\n    appSettings.value.microservice.ID = selectedMicroservice?.id || 0;\\n}\\n\\nfunction handleAppCommitServiceChange(selectedRow: IAppDataTableRow) {\\n    const selectedMicroservice = selectedRow.commitServices.find((microservice) => microservice.name === appSettings.value.commitService.name);\\n    appSettings.value.commitService.name = selectedMicroservice?.name || \\\"\\\";\\n    appSettings.value.commitService.ID = selectedMicroservice?.id || 0;\\n}\\n\\nasync function onSave() {\\n    if (currentApp.value) {\\n        let settings = {};\\n        const modulesSettings: Array<IModuleSettingsItem> = modulesDataTableRows.value\\n            .filter(\\n                (row) =>\\n                    row.microserviceID !=\\n                    (viewModel.studio.items.find((item) => item.ID == row.moduleID) as IModule).deployParameters?.gitServiceRepoId\\n            )\\n            .map((row) => ({\\n                moduleID: row.moduleID,\\n                deployParameters: {\\n                    gitGroupId: row.gitGroupID,\\n                    gitServiceRepoId: row.microserviceID,\\n                },\\n            }));\\n\\n        const applicationSettings: IApplicationSettingsItem = {\\n            applicationID: currentApp.value!.ID,\\n            deployParameters: {\\n                gitProductRepoId: appSettings.value.product.ID,\\n                gitGroupId: appSettings.value.gitGroup.ID,\\n                gitServiceRepoId: appSettings.value.microservice.ID,\\n                jobName: appSettings.value.job,\\n                commitGroupId: appSettings.value.commitGroup.ID,\\n                commitServiceId: appSettings.value.commitService.ID,\\n            },\\n        };\\n\\n        settings = { modulesSettings };\\n\\n        if (\\n            currentApp.value.deployParameters?.gitProductRepoId != appSettings.value.product.ID ||\\n            currentApp.value.deployParameters?.gitServiceRepoId != appSettings.value.microservice.ID ||\\n            currentApp.value.deployParameters?.commitServiceId != appSettings.value.commitService.ID ||\\n            currentApp.value.deployParameters?.jobName != appSettings.value.job\\n        ) {\\n            settings = { ...settings, applicationSettings };\\n        }\\n\\n        await executor.execute(\\n            async () => {\\n                await appSettingsUseCase.update(settings);\\n            },\\n            { loading: true }\\n        );\\n        emit(\\\"close\\\");\\n    }\\n}\\n\\n</script>\\n\\n<template>\\n    <div class=\\\"deploy-setting-container\\\">\\n        <div class=\\\"title\\\">{{ localization.get(\\\"deploySettings_appSettings\\\") }}</div>\\n        <label for=\\\"product-input\\\" class=\\\"product-title\\\">{{ localization.get(\\\"product\\\") }}</label>\\n        <div class=\\\"product-input-container\\\">\\n            <input class=\\\"product-input\\\" list=\\\"products\\\" id=\\\"product-input\\\" placeholder=\\\"Select Product\\\"\\n                v-model=\\\"appSettings.product.name\\\" @change=\\\"handleProductSelect\\\" :disabled=\\\"gitProducts.disabled\\\" />\\n            <div class=\\\"icon-container\\\" v-if=\\\"!gitProducts.loaded\\\">\\n                <Spinner />\\n            </div>\\n        </div>\\n        <datalist id=\\\"products\\\">\\n            <option value=\\\"\\\" disabled selected>Select Product for Application</option>\\n            <option v-for=\\\"product in gitProducts.products\\\">\\n                {{ product.name }}\\n            </option>\\n        </datalist>\\n        <v-client-table ref=\\\"table\\\" :data=\\\"appDataTableRows\\\" :columns=\\\"appDatatableColumns\\\"\\n            :options=\\\"appOptionsDataTable\\\">\\n            <template #appName=\\\"props\\\">\\n                <span>{{ props.row.appName }}</span>\\n            </template>\\n            <template #gitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" list=\\\"app-git-groups\\\" id=\\\"app-git-group-input\\\"\\n                        placeholder=\\\"Select Git Group\\\" v-model=\\\"appSettings.gitGroup.name\\\"\\n                        @input=\\\"handleAppGitGroupInput(props.row)\\\" @change=\\\"handleAppGitGroupChange(props.row)\\\"\\n                        :disabled=\\\"gitGroups.disabled\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n                <datalist id=\\\"app-git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #service=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" :list=\\\"props.row.appID\\\" id=\\\"app-microservice-input\\\"\\n                        placeholder=\\\"Select Microservice\\\" v-model=\\\"appSettings.microservice.name\\\"\\n                        @change=\\\"handleAppMicroServiceChange(props.row)\\\" :disabled=\\\"props.row.microservicesDisable\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"appSettings.microservice.loading\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n\\n                <datalist :id=\\\"props.row.appID\\\">\\n                    <option v-for=\\\"microservice in props.row.microservices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #job=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input type=\\\"text\\\" class=\\\"module-input\\\" id=\\\"app-microservice-input\\\" placeholder=\\\"Job Name\\\"\\n                        v-model=\\\"appSettings.job\\\" />\\n                </div>\\n            </template>\\n            <template #commitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" list=\\\"app-git-groups\\\" id=\\\"app-git-group-input\\\"\\n                        placeholder=\\\"Select Commit Group\\\" v-model=\\\"appSettings.commitGroup.name\\\"\\n                        @input=\\\"handleAppCommitGroupInput(props.row)\\\" @change=\\\"handleAppCommitGroupChange(props.row)\\\"\\n                        :disabled=\\\"gitGroups.disabled\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n                <datalist id=\\\"app-git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #commitService=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" list=\\\"commit_service_list\\\" id=\\\"app-microservice-input\\\"\\n                        placeholder=\\\"Select Service\\\" v-model=\\\"appSettings.commitService.name\\\"\\n                        @change=\\\"handleAppCommitServiceChange(props.row)\\\" :disabled=\\\"props.row.commitServiceDisable\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"appSettings.commitService.loading\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n\\n                <datalist id=\\\"commit_service_list\\\">\\n                    <option v-for=\\\"microservice in props.row.commitServices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n        </v-client-table>\\n\\n        <div class=\\\"title\\\">{{ localization.get(\\\"deploySettings_moduleSettings\\\") }}</div>\\n        <v-client-table ref=\\\"table\\\" :data=\\\"modulesDataTableRows\\\" :columns=\\\"modulesAppDatatableColumns\\\"\\n            :options=\\\"modulesOptionsDataTable\\\">\\n            <template #moduleName=\\\"props\\\">\\n                <span>{{ props.row.moduleName }}</span>\\n            </template>\\n            <template #gitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" list=\\\"git-groups\\\" id=\\\"git-group-input\\\" placeholder=\\\"Select Git Group\\\"\\n                        v-model=\\\"props.row.gitGroupName\\\" @input=\\\"handleModulesGitGroupInput(props.row)\\\"\\n                        @change=\\\"handleModulesGitGroupChange(props.row)\\\" :disabled=\\\"gitGroups.disabled\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n                <datalist id=\\\"git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #service=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" :list=\\\"props.row.moduleID\\\" id=\\\"microservice-input\\\"\\n                        placeholder=\\\"Select Microservice\\\" v-model=\\\"props.row.microserviceName\\\"\\n                        @change=\\\"handleModulesMicroServiceChange(props.row)\\\"\\n                        :disabled=\\\"props.row.microservicesDisable\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"props.row.microserviceLoading\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n                <datalist :id=\\\"props.row.moduleID\\\">\\n                    <option v-for=\\\"microservice in props.row.microservices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n        </v-client-table>\\n        <hr />\\n        <button class=\\\"save-button\\\" @click=\\\"onSave\\\">{{ localization.get(\\\"save\\\") }}</button>\\n        <button class=\\\"previous-button\\\" data-v-33a93b5b=\\\"\\\" @click=\\\"() => emit('close')\\\">\\n            {{ localization.get(\\\"cancel\\\") }}\\n        </button>\\n    </div>\\n</template>\\n\\n<style scoped>\\n.deploy-setting-container {\\n    padding: 16px 20px 20px 20px;\\n    height: 495px;\\n    overflow-y: auto;\\n}\\n\\n.previous-button {\\n    width: 68px;\\n    height: 32px;\\n    border: none;\\n    background: #f5f5f500 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    font-weight: bold;\\n    color: #607d8b;\\n    text-align: center;\\n    margin-right: 8px;\\n    float: right;\\n}\\n\\n.save-button {\\n    width: 74px;\\n    height: 32px;\\n    border: none;\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    color: #ffffff;\\n    text-align: center;\\n    float: right;\\n}\\n\\n.VueTables__heading {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    letter-spacing: 0px;\\n    color: #616161;\\n}\\n\\n.title {\\n    font-family: 'Roboto';\\n    font-size: 20px;\\n    font-weight: bold;\\n    color: #151233;\\n}\\n\\n.product-title {\\n    font-family: 'Roboto';\\n    font-weight: bold;\\n    font-size: 14px;\\n    color: #151233;\\n    margin-left: 6px;\\n    margin-top: 20px;\\n}\\n\\n.product-input-container {\\n    position: relative;\\n    max-width: max-content;\\n}\\n\\n.input-container {\\n    position: relative;\\n    max-width: max-content;\\n    margin-left: 20px;\\n}\\n\\n.icon-container {\\n    position: absolute;\\n    right: 24px;\\n    top: 7px;\\n}\\n\\ninput {\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #a1a1a1;\\n    border-radius: 4px;\\n    padding: 5px 0px 6px 12px;\\n    font-family: \\\"Roboto\\\";\\n    font-size: 14px;\\n}\\n\\ninput:disabled {\\n    background-color: rgba(59, 59, 59, 0.3);\\n}\\n\\n.module-input {\\n    width: 154px;\\n    height: 30px;\\n}\\n\\n.product-input {\\n    width: 230px;\\n    height: 30px;\\n}\\n</style>\\n<style>\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"],\\ntr,\\ntd {\\n    border-left: hidden;\\n    border-right: hidden;\\n    --bs-table-striped-bg: white;\\n    padding: 14px 0px 14px 0px !important;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>thead,\\nth {\\n    border-style: hidden;\\n    padding-left: 0px !important;\\n    padding-bottom: 4px !important;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>thead>tr>th>span {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    color: #616161;\\n    padding-left: 20px;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>tbody>tr>td>span {\\n    font-family: 'Roboto';\\n    font-size: '14px';\\n    color: #212121;\\n    vertical-align: middle;\\n    margin-left: 20px;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"],\\ntr,\\ntd {\\n    border-left: hidden;\\n    border-right: hidden;\\n    --bs-table-striped-bg: white;\\n    padding: 14px 0px 14px 0px !important;\\n}\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>thead,\\nth {\\n    border-style: hidden;\\n    padding-left: 0px !important;\\n    padding-bottom: 4px !important;\\n}\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>thead>tr>th>span {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    color: #616161;\\n    padding-left: 20px;\\n}\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>tbody>tr>td>span {\\n    font-family: 'Roboto';\\n    font-size: '14px';\\n    color: #212121;\\n    vertical-align: middle;\\n    margin-left: 20px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/deploySettings.vue\"],\"names\":[],\"mappings\":\";AAo0BA;;;IAGI,mBAAmB;IACnB,oBAAoB;IACpB,4BAA4B;IAC5B,qCAAqC;AACzC;AAEA;;IAEI,oBAAoB;IACpB,4BAA4B;IAC5B,8BAA8B;AAClC;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,cAAc;IACd,sBAAsB;IACtB,iBAAiB;AACrB\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\">\\nimport { onBeforeMount, ref } from \\\"vue\\\";\\nimport { container } from \\\"../../../../domain/core/diContainer\\\";\\nimport { IViewModel } from \\\"../../../../domain/viewModel/IViewModel\\\";\\nimport { IModule, IModuleSettingsItem, IApplicationSettingsItem, IModuleDeployParameters } from \\\"../../../../domain/model/models\\\";\\nimport { ILocalization } from \\\"../../../../domain/infrastructure/ILocalization\\\";\\nimport { IGitProject } from \\\"../../../../domain/infrastructure/IProviderApi\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IDebounce } from \\\"../../../../domain/infrastructure/IDebounce\\\";\\nimport { IApplicationSettings } from \\\"../../../../domain/useCase/IApplicationSettings\\\";\\nimport { INotification } from \\\"../../../../domain/presentation/INotification\\\";\\nimport Spinner from \\\"../spinner.vue\\\"\\n\\nonBeforeMount(() => {\\n    fillDatatableRow();\\n    setJobName();\\n    getGitGroupsFromProvider();\\n    getProductsFromProvider();\\n});\\n\\ninterface IProduct {\\n    products: Array<IGitProject>;\\n    disabled: boolean;\\n    loaded: boolean;\\n}\\n\\ninterface IGroup {\\n    value: IGitProject;\\n    microservicesCache: Array<IGitProject>;\\n    requestedBefore: boolean;\\n}\\n\\ninterface IGitGroup {\\n    groups: Array<IGroup>;\\n    disabled: boolean;\\n    loaded: boolean;\\n}\\n\\ninterface IModuleDataTableRow {\\n    moduleID: IModule[\\\"ID\\\"];\\n    moduleName: IModule[\\\"name\\\"];\\n    gitGroupName: string;\\n    gitGroupID: number;\\n    microservices: Array<IGitProject>;\\n    microservicesDisable: boolean;\\n    microserviceLoading: boolean;\\n    microserviceName: string;\\n    microserviceID: number;\\n}\\n\\ninterface IAppDataTableRow {\\n    appID: IModule[\\\"ID\\\"];\\n    appName: IModule[\\\"name\\\"];\\n    microservices: Array<IGitProject>;\\n    microservicesDisable: boolean;\\n    job: string;\\n    commitGroup: string;\\n    commitServices: Array<IGitProject>;\\n    commitServiceDisable: boolean;\\n}\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\n\\nconst localization = container.resolve<ILocalization>(ILocalization);\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst notification = container.resolve<INotification>(INotification);\\nconst appSettingsUseCase = container.resolve<IApplicationSettings>(IApplicationSettings);\\nconst debouncer = container.resolve<IDebounce>(IDebounce);\\n\\nconst gitProducts = ref({ products: [], disabled: false, loaded: false } as IProduct);\\nconst gitGroups = ref({ groups: [], disabled: false, loaded: false } as IGitGroup);\\nconst currentApp = ref(viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\nconst appSettings = ref({ product: { ID: 0, name: \\\"\\\" }, gitGroup: { ID: 0, name: \\\"\\\" }, microservice: { ID: 0, name: \\\"\\\", loading: false }, job: \\\"\\\", commitGroup: { ID: 0, name: \\\"\\\" }, commitService: { ID: 0, name: \\\"\\\", loading: false } });\\nconst modulesDataTableRows = ref(Array<IModuleDataTableRow>());\\nconst appDataTableRows = ref(Array<IAppDataTableRow>());\\n\\nconst modulesAppDatatableColumns = ref([\\\"moduleName\\\", \\\"gitGroup\\\", \\\"service\\\"]);\\nconst appDatatableColumns = ref([\\\"appName\\\", \\\"gitGroup\\\", \\\"service\\\", \\\"job\\\", \\\"commitGroup\\\", \\\"commitService\\\"]);\\nconst modulesOptionsDataTable = ref({\\n    resizableColumns: false,\\n    filterable: false,\\n    perPage: 3,\\n    perPageValues: [],\\n    headings: {\\n        moduleName: localization.get(\\\"moduleName\\\"),\\n        gitGroup: localization.get(\\\"gitGroup\\\"),\\n        microservice: localization.get(\\\"service\\\"),\\n    },\\n    sortable: [],\\n    texts: {\\n        count: \\\"\\\",\\n    },\\n});\\n\\nconst appOptionsDataTable = ref({\\n    resizableColumns: false,\\n    filterable: false,\\n    perPage: 1,\\n    perPageValues: [],\\n    headings: {\\n        appName: localization.get(\\\"appName\\\"),\\n        gitGroup: localization.get(\\\"gitGroup\\\"),\\n        microservice: localization.get(\\\"service\\\"),\\n        job: localization.get(\\\"job\\\"),\\n        commitGroup: localization.get(\\\"commitGroup\\\"),\\n        commitService: localization.get(\\\"commitService\\\"),\\n    },\\n    sortable: [],\\n    texts: {\\n        count: \\\"\\\",\\n    },\\n});\\n\\nfunction fillDatatableRow() {\\n    modulesDataTableRows.value = viewModel.studio.items\\n        .filter((item) => item.objectType === \\\"module\\\")\\n        .map<IModuleDataTableRow>((item) => {\\n            const module: IModuleDataTableRow = {\\n                moduleID: item.ID,\\n                moduleName: item.name,\\n                gitGroupName: \\\"\\\",\\n                gitGroupID: (item as IModule).deployParameters?.gitGroupId || 0,\\n                microservices: [],\\n                microservicesDisable: true,\\n                microserviceLoading: false,\\n                microserviceName: \\\"\\\",\\n                microserviceID: (item as IModule).deployParameters?.gitServiceRepoId || 0,\\n            };\\n            return module;\\n        });\\n    appDataTableRows.value.push({\\n        appID: currentApp.value!.ID,\\n        appName: currentApp.value!.name,\\n        microservices: [],\\n        microservicesDisable: true,\\n        job: \\\"\\\",\\n        commitGroup: \\\"\\\",\\n        commitServices: [],\\n        commitServiceDisable: true,\\n    });\\n}\\n\\nfunction getProductsFromProvider() {\\n    appSettingsUseCase\\n        .getProjectsOfProduct()\\n        .then(res => {\\n            gitProducts.value.products = res.data.items;\\n            gitProducts.value.loaded = true;\\n            gitProducts.value.disabled = false;\\n            setSelectedProduct();\\n        })\\n        .catch(() => {\\n            gitProducts.value.loaded = true;\\n            gitProducts.value.disabled = true;\\n            notification.showNotification({ text: \\\"Error while fetching products\\\", type: \\\"error\\\" });\\n        });\\n}\\n\\nfunction setSelectedProduct() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            const currentProduct = gitProducts.value.products.find((product) => currentApp.value!.deployParameters!.gitProductRepoId == product.id);\\n            if (currentProduct) {\\n                appSettings.value.product = {\\n                    name: currentProduct.name,\\n                    ID: currentProduct.id,\\n                };\\n            }\\n        }\\n    }\\n}\\n\\nfunction setJobName() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            if (currentApp.value.deployParameters.jobName)\\n                appSettings.value.job = currentApp.value.deployParameters.jobName\\n        }\\n    }\\n}\\n\\nasync function getGitGroupsFromProvider() {\\n    appSettingsUseCase\\n        .getGroupNamesWithId()\\n        .then((res) => {\\n            res.data.items.forEach((fetchedGroup) =>\\n                gitGroups.value.groups.push({\\n                    value: fetchedGroup,\\n                    microservicesCache: [],\\n                    requestedBefore: false,\\n                })\\n            );\\n            gitGroups.value.loaded = true;\\n            gitGroups.value.disabled = false;\\n            setModulesSelectedGitGroups();\\n            setAppSelectedGitGroup();\\n        })\\n        .catch(() => {\\n            gitGroups.value.loaded = true;\\n            gitGroups.value.disabled = true;\\n\\n            notification.showNotification({\\n                text: \\\"Error while fetching git groups\\\",\\n                type: \\\"error\\\",\\n            })\\n        }\\n        );\\n}\\n\\nfunction setModulesSelectedGitGroups() {\\n    modulesDataTableRows.value.forEach((row) => {\\n        if (row.gitGroupID !== 0) {\\n            const group = gitGroups.value.groups.find((group) => group.value.id == row.gitGroupID);\\n            if (group) {\\n                row.gitGroupName = group.value.name;\\n            } else {\\n                row.gitGroupID = 0;\\n            }\\n        }\\n    });\\n    setModulesSelectedMicroservices();\\n}\\n\\nfunction setAppSelectedGitGroup() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            const currentGitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.gitGroupId == group.value.id);\\n            const currentCommitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.commitGroupId == group.value.id);\\n            if (currentGitGroup) {\\n                appSettings.value.gitGroup = {\\n                    name: currentGitGroup.value.name,\\n                    ID: currentGitGroup.value.id,\\n                };\\n            }\\n            if (currentCommitGroup) {\\n                appSettings.value.commitGroup = {\\n                    name: currentCommitGroup.value.name,\\n                    ID: currentCommitGroup.value.id,\\n                };\\n            }\\n\\n        }\\n    }\\n\\n    if (appSettings.value.gitGroup.ID !== 0) {\\n        const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\\n        const commitGroup = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\\n        if (group) {\\n            appSettings.value.gitGroup.name = group.value.name;\\n        } else {\\n            appSettings.value.gitGroup.ID = 0;\\n        }\\n\\n        if (commitGroup) {\\n            appSettings.value.commitGroup.name = commitGroup.value.name;\\n        } else {\\n            appSettings.value.commitGroup.ID = 0;\\n        }\\n    }\\n    setAppSelectedMicroservice();\\n}\\n\\nfunction setModulesSelectedMicroservices() {\\n    const groupIdList: Array<number> = modulesDataTableRows.value\\n        .map((row) => row.gitGroupID)\\n        .filter((id, index, self) => id !== 0 && self.indexOf(id) === index);\\n\\n    groupIdList.forEach((id) => {\\n        modulesDataTableRows.value.forEach(row => {\\n            if (row.gitGroupID == id) {\\n                row.microserviceLoading = true;\\n                row.microservicesDisable = false;\\n            }\\n        })\\n        appSettingsUseCase\\n            .getProjectsByGroupId(id)\\n            .then((res) => {\\n                let data = res.data.items;\\n                const group = gitGroups.value.groups.find((group) => group.value.id == id);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    modulesDataTableRows.value.forEach((row) => {\\n                        if (row.gitGroupID === id) {\\n                            row.microservices = data;\\n                            row.microserviceLoading = false;\\n                            if (row.microservices.length == 0) {\\n                                row.microservicesDisable = true;\\n                            }\\n                            if (row.microserviceID !== 0) {\\n                                const microservice = data.find((service) => service.id == row.microserviceID);\\n                                if (microservice) {\\n                                    row.microserviceName = microservice.name;\\n                                    row.microservicesDisable = false;\\n                                } else {\\n                                    row.microserviceID = 0;\\n                                    row.microservicesDisable = true;\\n                                }\\n                            }\\n                        }\\n                    });\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    });\\n}\\n\\nfunction setAppSelectedMicroservice() {\\n    if (appSettings.value.gitGroup.ID != 0) {\\n        appDataTableRows.value[0].microservicesDisable = false;\\n        appSettings.value.microservice.loading = true;\\n        appSettingsUseCase\\n            .getProjectsByGroupId(appSettings.value.gitGroup.ID)\\n            .then((res) => {\\n                let data = res.data.items;\\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    appDataTableRows.value[0].microservices = data;\\n                    appSettings.value.microservice.loading = false;\\n                    if (currentApp.value) {\\n                        if (currentApp.value.deployParameters) {\\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.gitServiceRepoId);\\n                            if (microservice) {\\n                                appSettings.value.microservice.name = microservice.name;\\n                                appSettings.value.microservice.ID = microservice.id;\\n                                appDataTableRows.value[0].microservicesDisable = false;\\n                            } else {\\n                                appSettings.value.microservice.ID = 0;\\n                            }\\n                        }\\n                    }\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    }\\n\\n    if (appSettings.value.commitGroup.ID != 0) {\\n        appDataTableRows.value[0].commitServiceDisable = false;\\n        appSettings.value.commitService.loading = true;\\n        appSettingsUseCase\\n            .getProjectsByGroupId(appSettings.value.commitGroup.ID)\\n            .then((res) => {\\n                let data = res.data.items;\\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    appDataTableRows.value[0].commitServices = data;\\n                    appSettings.value.commitService.loading = false;\\n                    if (currentApp.value) {\\n                        if (currentApp.value.deployParameters) {\\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.commitServiceId);\\n                            if (microservice) {\\n                                appSettings.value.commitService.name = microservice.name;\\n                                appSettings.value.commitService.ID = microservice.id;\\n                                appDataTableRows.value[0].commitServiceDisable = false;\\n                            } else {\\n                                appSettings.value.commitService.ID = 0;\\n                            }\\n                        }\\n                    }\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    }\\n}\\n\\nfunction handleProductSelect() {\\n    const product = gitProducts.value.products.find((product) => product.name === appSettings.value.product.name);\\n    if (product) {\\n        appSettings.value.product.ID = product.id;\\n    } else {\\n        appSettings.value.product.name = \\\"\\\";\\n        appSettings.value.product.ID = 0;\\n    }\\n}\\n\\nasync function handleModulesGitGroupInput(selectedRow: IModuleDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.microservicesDisable = true;\\n    currentRow.microservices = [];\\n    currentRow.microserviceName = \\\"\\\";\\n    currentRow.microserviceID = 0;\\n\\n    if (selectedGitGroup) {\\n        currentRow.gitGroupID = selectedGitGroup.value.id;\\n        currentRow.gitGroupName = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getModuleMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.microservices = selectedGitGroup.microservicesCache;\\n            currentRow.microservicesDisable = !currentRow.microservices.length;\\n        }\\n    } else {\\n        currentRow.gitGroupName = selectedRow.gitGroupName;\\n        currentRow.gitGroupID = 0;\\n    }\\n}\\n\\nasync function handleAppGitGroupInput(selectedRow: IAppDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    currentRow.microservicesDisable = true;\\n    currentRow.microservices = [];\\n    appSettings.value.microservice.name = \\\"\\\";\\n    appSettings.value.microservice.ID = 0;\\n\\n    if (selectedGitGroup) {\\n        appSettings.value.gitGroup.ID = selectedGitGroup.value.id;\\n        appSettings.value.gitGroup.name = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getAppMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.microservices = selectedGitGroup.microservicesCache;\\n            currentRow.microservicesDisable = !currentRow.microservices.length;\\n        }\\n    } else {\\n        appSettings.value.gitGroup.ID = 0;\\n    }\\n}\\n\\nasync function handleAppCommitGroupInput(selectedRow: IAppDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    currentRow.commitServiceDisable = true;\\n    currentRow.commitServices = [];\\n    appSettings.value.commitService.name = \\\"\\\";\\n    appSettings.value.commitService.ID = 0;\\n\\n    if (selectedGitGroup) {\\n        appSettings.value.commitGroup.ID = selectedGitGroup.value.id;\\n        appSettings.value.commitGroup.name = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getAppCommitServicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.commitServices = selectedGitGroup.microservicesCache;\\n            currentRow.commitServiceDisable = !currentRow.commitServices.length;\\n        }\\n    } else {\\n        appSettings.value.commitGroup.ID = 0;\\n    }\\n}\\n\\nasync function getModuleMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IModuleDataTableRow) {\\n    currentRow.microserviceLoading = true;\\n    currentRow.microservicesDisable = false;\\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.microservices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.microservicesDisable = !currentRow.microservices.length;\\n    currentRow.microserviceLoading = false;\\n}\\n\\nasync function getAppMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\\n    appSettings.value.microservice.loading = true;\\n    currentRow.microservicesDisable = false;\\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.microservices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.microservicesDisable = !currentRow.microservices.length;\\n    appSettings.value.microservice.loading = false;\\n}\\n\\nasync function getAppCommitServicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\\n    appSettings.value.commitService.loading = true;\\n    currentRow.commitServiceDisable = false;\\n    currentRow.commitServices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.commitServices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.commitServiceDisable = !currentRow.commitServices.length;\\n    appSettings.value.commitService.loading = false;\\n}\\n\\nasync function handleModulesGitGroupChange(selectedRow: IModuleDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.gitGroupID = selectedGitGroup?.value?.id || 0;\\n    currentRow.gitGroupName = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!currentRow.gitGroupID) {\\n        currentRow.microservices = [];\\n        currentRow.microservicesDisable = true;\\n        currentRow.microserviceName = \\\"\\\";\\n        currentRow.microserviceID = 0;\\n    }\\n}\\n\\nasync function handleAppGitGroupChange(selectedRow: IAppDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    appSettings.value.gitGroup.ID = selectedGitGroup?.value?.id || 0;\\n    appSettings.value.gitGroup.name = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!selectedGitGroup) {\\n        currentRow.microservices = [];\\n        currentRow.microservicesDisable = true;\\n        appSettings.value.microservice.name = \\\"\\\";\\n        appSettings.value.microservice.ID = 0;\\n    }\\n}\\n\\nasync function handleAppCommitGroupChange(selectedRow: IAppDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    appSettings.value.commitGroup.ID = selectedGitGroup?.value?.id || 0;\\n    appSettings.value.commitGroup.name = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!selectedGitGroup) {\\n        currentRow.commitServices = [];\\n        currentRow.commitServiceDisable = true;\\n        appSettings.value.commitService.name = \\\"\\\";\\n        appSettings.value.commitService.ID = 0;\\n    }\\n}\\n\\n\\n\\nfunction handleModulesMicroServiceChange(selectedRow: IModuleDataTableRow) {\\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === selectedRow.microserviceName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.microserviceName = selectedMicroservice?.name || \\\"\\\";\\n    currentRow.microserviceID = selectedMicroservice?.id || 0;\\n}\\n\\nfunction handleAppMicroServiceChange(selectedRow: IAppDataTableRow) {\\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === appSettings.value.microservice.name);\\n    appSettings.value.microservice.name = selectedMicroservice?.name || \\\"\\\";\\n    appSettings.value.microservice.ID = selectedMicroservice?.id || 0;\\n}\\n\\nfunction handleAppCommitServiceChange(selectedRow: IAppDataTableRow) {\\n    const selectedMicroservice = selectedRow.commitServices.find((microservice) => microservice.name === appSettings.value.commitService.name);\\n    appSettings.value.commitService.name = selectedMicroservice?.name || \\\"\\\";\\n    appSettings.value.commitService.ID = selectedMicroservice?.id || 0;\\n}\\n\\nasync function onSave() {\\n    if (currentApp.value) {\\n        let settings = {};\\n        const modulesSettings: Array<IModuleSettingsItem> = modulesDataTableRows.value\\n            .filter(\\n                (row) =>\\n                    row.microserviceID !=\\n                    (viewModel.studio.items.find((item) => item.ID == row.moduleID) as IModule).deployParameters?.gitServiceRepoId\\n            )\\n            .map((row) => ({\\n                moduleID: row.moduleID,\\n                deployParameters: {\\n                    gitGroupId: row.gitGroupID,\\n                    gitServiceRepoId: row.microserviceID,\\n                },\\n            }));\\n\\n        const applicationSettings: IApplicationSettingsItem = {\\n            applicationID: currentApp.value!.ID,\\n            deployParameters: {\\n                gitProductRepoId: appSettings.value.product.ID,\\n                gitGroupId: appSettings.value.gitGroup.ID,\\n                gitServiceRepoId: appSettings.value.microservice.ID,\\n                jobName: appSettings.value.job,\\n                commitGroupId: appSettings.value.commitGroup.ID,\\n                commitServiceId: appSettings.value.commitService.ID,\\n            },\\n        };\\n\\n        settings = { modulesSettings };\\n\\n        if (\\n            currentApp.value.deployParameters?.gitProductRepoId != appSettings.value.product.ID ||\\n            currentApp.value.deployParameters?.gitServiceRepoId != appSettings.value.microservice.ID ||\\n            currentApp.value.deployParameters?.commitServiceId != appSettings.value.commitService.ID ||\\n            currentApp.value.deployParameters?.jobName != appSettings.value.job\\n        ) {\\n            settings = { ...settings, applicationSettings };\\n        }\\n\\n        await executor.execute(\\n            async () => {\\n                await appSettingsUseCase.update(settings);\\n            },\\n            { loading: true }\\n        );\\n        emit(\\\"close\\\");\\n    }\\n}\\n\\n</script>\\n\\n<template>\\n    <div class=\\\"deploy-setting-container\\\">\\n        <div class=\\\"title\\\">{{ localization.get(\\\"deploySettings_appSettings\\\") }}</div>\\n        <label for=\\\"product-input\\\" class=\\\"product-title\\\">{{ localization.get(\\\"product\\\") }}</label>\\n        <div class=\\\"product-input-container\\\">\\n            <input class=\\\"product-input\\\" list=\\\"products\\\" id=\\\"product-input\\\" placeholder=\\\"Select Product\\\"\\n                v-model=\\\"appSettings.product.name\\\" @change=\\\"handleProductSelect\\\" :disabled=\\\"gitProducts.disabled\\\" />\\n            <div class=\\\"icon-container\\\" v-if=\\\"!gitProducts.loaded\\\">\\n                <Spinner />\\n            </div>\\n        </div>\\n        <datalist id=\\\"products\\\">\\n            <option value=\\\"\\\" disabled selected>Select Product for Application</option>\\n            <option v-for=\\\"product in gitProducts.products\\\">\\n                {{ product.name }}\\n            </option>\\n        </datalist>\\n        <v-client-table ref=\\\"table\\\" :data=\\\"appDataTableRows\\\" :columns=\\\"appDatatableColumns\\\"\\n            :options=\\\"appOptionsDataTable\\\">\\n            <template #appName=\\\"props\\\">\\n                <span>{{ props.row.appName }}</span>\\n            </template>\\n            <template #gitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" list=\\\"app-git-groups\\\" id=\\\"app-git-group-input\\\"\\n                        placeholder=\\\"Select Git Group\\\" v-model=\\\"appSettings.gitGroup.name\\\"\\n                        @input=\\\"handleAppGitGroupInput(props.row)\\\" @change=\\\"handleAppGitGroupChange(props.row)\\\"\\n                        :disabled=\\\"gitGroups.disabled\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n                <datalist id=\\\"app-git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #service=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" :list=\\\"props.row.appID\\\" id=\\\"app-microservice-input\\\"\\n                        placeholder=\\\"Select Microservice\\\" v-model=\\\"appSettings.microservice.name\\\"\\n                        @change=\\\"handleAppMicroServiceChange(props.row)\\\" :disabled=\\\"props.row.microservicesDisable\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"appSettings.microservice.loading\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n\\n                <datalist :id=\\\"props.row.appID\\\">\\n                    <option v-for=\\\"microservice in props.row.microservices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #job=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input type=\\\"text\\\" class=\\\"module-input\\\" id=\\\"app-microservice-input\\\" placeholder=\\\"Job Name\\\"\\n                        v-model=\\\"appSettings.job\\\" />\\n                </div>\\n            </template>\\n            <template #commitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" list=\\\"app-git-groups\\\" id=\\\"app-git-group-input\\\"\\n                        placeholder=\\\"Select Commit Group\\\" v-model=\\\"appSettings.commitGroup.name\\\"\\n                        @input=\\\"handleAppCommitGroupInput(props.row)\\\" @change=\\\"handleAppCommitGroupChange(props.row)\\\"\\n                        :disabled=\\\"gitGroups.disabled\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n                <datalist id=\\\"app-git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #commitService=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" list=\\\"commit_service_list\\\" id=\\\"app-microservice-input\\\"\\n                        placeholder=\\\"Select Service\\\" v-model=\\\"appSettings.commitService.name\\\"\\n                        @change=\\\"handleAppCommitServiceChange(props.row)\\\" :disabled=\\\"props.row.commitServiceDisable\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"appSettings.commitService.loading\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n\\n                <datalist id=\\\"commit_service_list\\\">\\n                    <option v-for=\\\"microservice in props.row.commitServices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n        </v-client-table>\\n\\n        <div class=\\\"title\\\">{{ localization.get(\\\"deploySettings_moduleSettings\\\") }}</div>\\n        <v-client-table ref=\\\"table\\\" :data=\\\"modulesDataTableRows\\\" :columns=\\\"modulesAppDatatableColumns\\\"\\n            :options=\\\"modulesOptionsDataTable\\\">\\n            <template #moduleName=\\\"props\\\">\\n                <span>{{ props.row.moduleName }}</span>\\n            </template>\\n            <template #gitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" list=\\\"git-groups\\\" id=\\\"git-group-input\\\" placeholder=\\\"Select Git Group\\\"\\n                        v-model=\\\"props.row.gitGroupName\\\" @input=\\\"handleModulesGitGroupInput(props.row)\\\"\\n                        @change=\\\"handleModulesGitGroupChange(props.row)\\\" :disabled=\\\"gitGroups.disabled\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n                <datalist id=\\\"git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #service=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input class=\\\"module-input\\\" :list=\\\"props.row.moduleID\\\" id=\\\"microservice-input\\\"\\n                        placeholder=\\\"Select Microservice\\\" v-model=\\\"props.row.microserviceName\\\"\\n                        @change=\\\"handleModulesMicroServiceChange(props.row)\\\"\\n                        :disabled=\\\"props.row.microservicesDisable\\\" />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"props.row.microserviceLoading\\\">\\n                        <Spinner />\\n                    </div>\\n                </div>\\n                <datalist :id=\\\"props.row.moduleID\\\">\\n                    <option v-for=\\\"microservice in props.row.microservices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n        </v-client-table>\\n        <hr />\\n        <button class=\\\"save-button\\\" @click=\\\"onSave\\\">{{ localization.get(\\\"save\\\") }}</button>\\n        <button class=\\\"previous-button\\\" data-v-33a93b5b=\\\"\\\" @click=\\\"() => emit('close')\\\">\\n            {{ localization.get(\\\"cancel\\\") }}\\n        </button>\\n    </div>\\n</template>\\n\\n<style scoped>\\n.deploy-setting-container {\\n    padding: 16px 20px 20px 20px;\\n    height: 495px;\\n    overflow-y: auto;\\n}\\n\\n.previous-button {\\n    width: 68px;\\n    height: 32px;\\n    border: none;\\n    background: #f5f5f500 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    font-weight: bold;\\n    color: #607d8b;\\n    text-align: center;\\n    margin-right: 8px;\\n    float: right;\\n}\\n\\n.save-button {\\n    width: 74px;\\n    height: 32px;\\n    border: none;\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    color: #ffffff;\\n    text-align: center;\\n    float: right;\\n}\\n\\n.VueTables__heading {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    letter-spacing: 0px;\\n    color: #616161;\\n}\\n\\n.title {\\n    font-family: 'Roboto';\\n    font-size: 20px;\\n    font-weight: bold;\\n    color: #151233;\\n}\\n\\n.product-title {\\n    font-family: 'Roboto';\\n    font-weight: bold;\\n    font-size: 14px;\\n    color: #151233;\\n    margin-left: 6px;\\n    margin-top: 20px;\\n}\\n\\n.product-input-container {\\n    position: relative;\\n    max-width: max-content;\\n}\\n\\n.input-container {\\n    position: relative;\\n    max-width: max-content;\\n    margin-left: 20px;\\n}\\n\\n.icon-container {\\n    position: absolute;\\n    right: 24px;\\n    top: 7px;\\n}\\n\\ninput {\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #a1a1a1;\\n    border-radius: 4px;\\n    padding: 5px 0px 6px 12px;\\n    font-family: \\\"Roboto\\\";\\n    font-size: 14px;\\n}\\n\\ninput:disabled {\\n    background-color: rgba(59, 59, 59, 0.3);\\n}\\n\\n.module-input {\\n    width: 154px;\\n    height: 30px;\\n}\\n\\n.product-input {\\n    width: 230px;\\n    height: 30px;\\n}\\n</style>\\n<style>\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"],\\ntr,\\ntd {\\n    border-left: hidden;\\n    border-right: hidden;\\n    --bs-table-striped-bg: white;\\n    padding: 14px 0px 14px 0px !important;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>thead,\\nth {\\n    border-style: hidden;\\n    padding-left: 0px !important;\\n    padding-bottom: 4px !important;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>thead>tr>th>span {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    color: #616161;\\n    padding-left: 20px;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"]>tbody>tr>td>span {\\n    font-family: 'Roboto';\\n    font-size: '14px';\\n    color: #212121;\\n    vertical-align: middle;\\n    margin-left: 20px;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n@keyframes top-right-and-bottom-left-4c301d40 {\\n0%,\\n    5% {\\n        transform: rotate(-45deg);\\n        height: 16px;\\n        margin-top: 0px;\\n}\\n15% {\\n        transform: rotate(-90deg);\\n        height: 3px;\\n        margin-top: 6px;\\n}\\n25% {\\n        transform: rotate(-90deg);\\n        height: 0px;\\n        margin-top: 6px;\\n}\\n60%,\\n    65% {\\n        transform: rotate(-270deg);\\n        height: 0px;\\n        margin-top: 6px;\\n}\\n67% {\\n        transform: rotate(-250deg);\\n        height: 0px;\\n        margin-top: 6px;\\n}\\n80%,\\n    100% {\\n        height: 16px;\\n        margin-top: 0px;\\n        transform: rotate(-135deg);\\n}\\n}\\n@keyframes top-left-and-bottom-right-4c301d40 {\\n0% {\\n        transform: rotate(-45deg);\\n}\\n15% {\\n        transform: rotate(-180deg);\\n        width: 0px;\\n        margin-left: 6px;\\n}\\n25% {\\n        transform: rotate(-180deg);\\n        width: 0px;\\n        margin-left: 6px;\\n}\\n60%,\\n    65% {\\n        transform: rotate(-360deg);\\n        width: 0px;\\n        margin-left: 6px;\\n}\\n67% {\\n        transform: rotate(-340deg);\\n        width: 0px;\\n        margin-left: 6px;\\n}\\n83% {\\n        transform: rotate(-175deg);\\n        width: 7px;\\n        margin-left: 4px;\\n}\\n90%,\\n    100% {\\n        width: 16px;\\n        margin-left: 0px;\\n        transform: rotate(-135deg);\\n}\\n}\\n.top-right[data-v-4c301d40]::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-right-color: #14adfc;\\n    transform: rotate(-45deg);\\n}\\n.top-right[data-v-4c301d40]::after {\\n    animation: top-right-and-bottom-left-4c301d40 3s infinite 0.3s;\\n}\\n.bottom-right[data-v-4c301d40]::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-bottom-color: #14adfc;\\n    transform: rotate(-45deg);\\n    margin-top: 0px;\\n}\\n.bottom-right[data-v-4c301d40]::after {\\n    animation: top-left-and-bottom-right-4c301d40 3s infinite 0.3s;\\n}\\n.top-left[data-v-4c301d40]::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-top-color: #14adfc;\\n    transform: rotate(-45deg);\\n}\\n.top-left[data-v-4c301d40]::after {\\n    animation: top-left-and-bottom-right-4c301d40 3s infinite 0.3s;\\n}\\n.bottom-left[data-v-4c301d40]::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-left-color: #14adfc;\\n    transform: rotate(-45deg);\\n    margin-top: 0px;\\n}\\n.bottom-left[data-v-4c301d40]::after {\\n    animation: top-right-and-bottom-left-4c301d40 3s infinite 0.3s;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/spinner.vue\"],\"names\":[],\"mappings\":\";AAYA;AACI;;QAEI,yBAAyB;QACzB,YAAY;QACZ,eAAe;AACnB;AACA;QACI,yBAAyB;QACzB,WAAW;QACX,eAAe;AACnB;AACA;QACI,yBAAyB;QACzB,WAAW;QACX,eAAe;AACnB;AACA;;QAEI,0BAA0B;QAC1B,WAAW;QACX,eAAe;AACnB;AACA;QACI,0BAA0B;QAC1B,WAAW;QACX,eAAe;AACnB;AACA;;QAEI,YAAY;QACZ,eAAe;QACf,0BAA0B;AAC9B;AACJ;AAEA;AACI;QACI,yBAAyB;AAC7B;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;;QAEI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;;QAEI,WAAW;QACX,gBAAgB;QAChB,0BAA0B;AAC9B;AACJ;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,2BAA2B;IAC3B,yBAAyB;AAC7B;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,4BAA4B;IAC5B,yBAAyB;IACzB,eAAe;AACnB;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,yBAAyB;IACzB,yBAAyB;AAC7B;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,0BAA0B;IAC1B,yBAAyB;IACzB,eAAe;AACnB;AAEA;IACI,8DAAqD;AACzD\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\"></script>\\n\\n<template>\\n    <div style=\\\"position: relative\\\">\\n        <div class=\\\"top-right\\\"></div>\\n        <div class=\\\"bottom-right\\\"></div>\\n        <div class=\\\"top-left\\\"></div>\\n        <div class=\\\"bottom-left\\\"></div>\\n    </div>\\n</template>\\n\\n<style scoped>\\n@keyframes top-right-and-bottom-left {\\n    0%,\\n    5% {\\n        transform: rotate(-45deg);\\n        height: 16px;\\n        margin-top: 0px;\\n    }\\n    15% {\\n        transform: rotate(-90deg);\\n        height: 3px;\\n        margin-top: 6px;\\n    }\\n    25% {\\n        transform: rotate(-90deg);\\n        height: 0px;\\n        margin-top: 6px;\\n    }\\n    60%,\\n    65% {\\n        transform: rotate(-270deg);\\n        height: 0px;\\n        margin-top: 6px;\\n    }\\n    67% {\\n        transform: rotate(-250deg);\\n        height: 0px;\\n        margin-top: 6px;\\n    }\\n    80%,\\n    100% {\\n        height: 16px;\\n        margin-top: 0px;\\n        transform: rotate(-135deg);\\n    }\\n}\\n\\n@keyframes top-left-and-bottom-right {\\n    0% {\\n        transform: rotate(-45deg);\\n    }\\n    15% {\\n        transform: rotate(-180deg);\\n        width: 0px;\\n        margin-left: 6px;\\n    }\\n    25% {\\n        transform: rotate(-180deg);\\n        width: 0px;\\n        margin-left: 6px;\\n    }\\n    60%,\\n    65% {\\n        transform: rotate(-360deg);\\n        width: 0px;\\n        margin-left: 6px;\\n    }\\n    67% {\\n        transform: rotate(-340deg);\\n        width: 0px;\\n        margin-left: 6px;\\n    }\\n    83% {\\n        transform: rotate(-175deg);\\n        width: 7px;\\n        margin-left: 4px;\\n    }\\n    90%,\\n    100% {\\n        width: 16px;\\n        margin-left: 0px;\\n        transform: rotate(-135deg);\\n    }\\n}\\n\\n.top-right::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-right-color: #14adfc;\\n    transform: rotate(-45deg);\\n}\\n\\n.top-right::after {\\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\\n}\\n\\n.bottom-right::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-bottom-color: #14adfc;\\n    transform: rotate(-45deg);\\n    margin-top: 0px;\\n}\\n\\n.bottom-right::after {\\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\\n}\\n\\n.top-left::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-top-color: #14adfc;\\n    transform: rotate(-45deg);\\n}\\n\\n.top-left::after {\\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\\n}\\n\\n.bottom-left::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-left-color: #14adfc;\\n    transform: rotate(-45deg);\\n    margin-top: 0px;\\n}\\n\\n.bottom-left::after {\\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","<script setup lang=\"ts\"></script>\n\n<template>\n    <div style=\"position: relative\">\n        <div class=\"top-right\"></div>\n        <div class=\"bottom-right\"></div>\n        <div class=\"top-left\"></div>\n        <div class=\"bottom-left\"></div>\n    </div>\n</template>\n\n<style scoped>\n@keyframes top-right-and-bottom-left {\n    0%,\n    5% {\n        transform: rotate(-45deg);\n        height: 16px;\n        margin-top: 0px;\n    }\n    15% {\n        transform: rotate(-90deg);\n        height: 3px;\n        margin-top: 6px;\n    }\n    25% {\n        transform: rotate(-90deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    60%,\n    65% {\n        transform: rotate(-270deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    67% {\n        transform: rotate(-250deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    80%,\n    100% {\n        height: 16px;\n        margin-top: 0px;\n        transform: rotate(-135deg);\n    }\n}\n\n@keyframes top-left-and-bottom-right {\n    0% {\n        transform: rotate(-45deg);\n    }\n    15% {\n        transform: rotate(-180deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    25% {\n        transform: rotate(-180deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    60%,\n    65% {\n        transform: rotate(-360deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    67% {\n        transform: rotate(-340deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    83% {\n        transform: rotate(-175deg);\n        width: 7px;\n        margin-left: 4px;\n    }\n    90%,\n    100% {\n        width: 16px;\n        margin-left: 0px;\n        transform: rotate(-135deg);\n    }\n}\n\n.top-right::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-right-color: #14adfc;\n    transform: rotate(-45deg);\n}\n\n.top-right::after {\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\n}\n\n.bottom-right::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-bottom-color: #14adfc;\n    transform: rotate(-45deg);\n    margin-top: 0px;\n}\n\n.bottom-right::after {\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\n}\n\n.top-left::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-top-color: #14adfc;\n    transform: rotate(-45deg);\n}\n\n.top-left::after {\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\n}\n\n.bottom-left::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-left-color: #14adfc;\n    transform: rotate(-45deg);\n    margin-top: 0px;\n}\n\n.bottom-left::after {\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\n}\n</style>\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./spinner.vue?vue&type=style&index=0&id=4c301d40&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./spinner.vue?vue&type=style&index=0&id=4c301d40&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { render } from \"./spinner.vue?vue&type=template&id=4c301d40&scoped=true\"\nconst script = {}\n\nimport \"./spinner.vue?vue&type=style&index=0&id=4c301d40&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/QCloud-Shell/QCloud-Shell/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4c301d40\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, resolveComponent as _resolveComponent, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-20f9f52c\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"deploy-setting-container\" }\nconst _hoisted_2 = { class: \"title\" }\nconst _hoisted_3 = {\n  for: \"product-input\",\n  class: \"product-title\"\n}\nconst _hoisted_4 = { class: \"product-input-container\" }\nconst _hoisted_5 = [\"disabled\"]\nconst _hoisted_6 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_7 = { id: \"products\" }\nconst _hoisted_8 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n}, \"Select Product for Application\", -1 /* HOISTED */))\nconst _hoisted_9 = { class: \"input-container\" }\nconst _hoisted_10 = [\"onInput\", \"onChange\", \"disabled\"]\nconst _hoisted_11 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_12 = { id: \"app-git-groups\" }\nconst _hoisted_13 = [\"value\"]\nconst _hoisted_14 = { class: \"input-container\" }\nconst _hoisted_15 = [\"list\", \"onChange\", \"disabled\"]\nconst _hoisted_16 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_17 = [\"id\"]\nconst _hoisted_18 = [\"value\"]\nconst _hoisted_19 = { class: \"input-container\" }\nconst _hoisted_20 = { class: \"input-container\" }\nconst _hoisted_21 = [\"onInput\", \"onChange\", \"disabled\"]\nconst _hoisted_22 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_23 = { id: \"app-git-groups\" }\nconst _hoisted_24 = [\"value\"]\nconst _hoisted_25 = { class: \"input-container\" }\nconst _hoisted_26 = [\"onChange\", \"disabled\"]\nconst _hoisted_27 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_28 = { id: \"commit_service_list\" }\nconst _hoisted_29 = [\"value\"]\nconst _hoisted_30 = { class: \"title\" }\nconst _hoisted_31 = { class: \"input-container\" }\nconst _hoisted_32 = [\"onUpdate:modelValue\", \"onInput\", \"onChange\", \"disabled\"]\nconst _hoisted_33 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_34 = { id: \"git-groups\" }\nconst _hoisted_35 = [\"value\"]\nconst _hoisted_36 = { class: \"input-container\" }\nconst _hoisted_37 = [\"list\", \"onUpdate:modelValue\", \"onChange\", \"disabled\"]\nconst _hoisted_38 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_39 = [\"id\"]\nconst _hoisted_40 = [\"value\"]\nconst _hoisted_41 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */))\n\nimport { onBeforeMount, ref } from \"vue\";\nimport { container } from \"../../../../domain/core/diContainer\";\nimport { IViewModel } from \"../../../../domain/viewModel/IViewModel\";\nimport { IModule, IModuleSettingsItem, IApplicationSettingsItem, IModuleDeployParameters } from \"../../../../domain/model/models\";\nimport { ILocalization } from \"../../../../domain/infrastructure/ILocalization\";\nimport { IGitProject } from \"../../../../domain/infrastructure/IProviderApi\";\nimport { IUseCaseExecutor } from \"../../../../domain/useCase/IUseCaseExecutor\";\nimport { IDebounce } from \"../../../../domain/infrastructure/IDebounce\";\nimport { IApplicationSettings } from \"../../../../domain/useCase/IApplicationSettings\";\nimport { INotification } from \"../../../../domain/presentation/INotification\";\nimport Spinner from \"../spinner.vue\"\n\ninterface IProduct {\n    products: Array<IGitProject>;\n    disabled: boolean;\n    loaded: boolean;\n}\n\ninterface IGroup {\n    value: IGitProject;\n    microservicesCache: Array<IGitProject>;\n    requestedBefore: boolean;\n}\n\ninterface IGitGroup {\n    groups: Array<IGroup>;\n    disabled: boolean;\n    loaded: boolean;\n}\n\ninterface IModuleDataTableRow {\n    moduleID: IModule[\"ID\"];\n    moduleName: IModule[\"name\"];\n    gitGroupName: string;\n    gitGroupID: number;\n    microservices: Array<IGitProject>;\n    microservicesDisable: boolean;\n    microserviceLoading: boolean;\n    microserviceName: string;\n    microserviceID: number;\n}\n\ninterface IAppDataTableRow {\n    appID: IModule[\"ID\"];\n    appName: IModule[\"name\"];\n    microservices: Array<IGitProject>;\n    microservicesDisable: boolean;\n    job: string;\n    commitGroup: string;\n    commitServices: Array<IGitProject>;\n    commitServiceDisable: boolean;\n}\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'deploySettings',\n  emits: [\"close\"],\n  setup(__props, { emit }) {\n\nonBeforeMount(() => {\n    fillDatatableRow();\n    setJobName();\n    getGitGroupsFromProvider();\n    getProductsFromProvider();\n});\n\n\n\nconst localization = container.resolve<ILocalization>(ILocalization);\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst notification = container.resolve<INotification>(INotification);\nconst appSettingsUseCase = container.resolve<IApplicationSettings>(IApplicationSettings);\nconst debouncer = container.resolve<IDebounce>(IDebounce);\n\nconst gitProducts = ref({ products: [], disabled: false, loaded: false } as IProduct);\nconst gitGroups = ref({ groups: [], disabled: false, loaded: false } as IGitGroup);\nconst currentApp = ref(viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\nconst appSettings = ref({ product: { ID: 0, name: \"\" }, gitGroup: { ID: 0, name: \"\" }, microservice: { ID: 0, name: \"\", loading: false }, job: \"\", commitGroup: { ID: 0, name: \"\" }, commitService: { ID: 0, name: \"\", loading: false } });\nconst modulesDataTableRows = ref(Array<IModuleDataTableRow>());\nconst appDataTableRows = ref(Array<IAppDataTableRow>());\n\nconst modulesAppDatatableColumns = ref([\"moduleName\", \"gitGroup\", \"service\"]);\nconst appDatatableColumns = ref([\"appName\", \"gitGroup\", \"service\", \"job\", \"commitGroup\", \"commitService\"]);\nconst modulesOptionsDataTable = ref({\n    resizableColumns: false,\n    filterable: false,\n    perPage: 3,\n    perPageValues: [],\n    headings: {\n        moduleName: localization.get(\"moduleName\"),\n        gitGroup: localization.get(\"gitGroup\"),\n        microservice: localization.get(\"service\"),\n    },\n    sortable: [],\n    texts: {\n        count: \"\",\n    },\n});\n\nconst appOptionsDataTable = ref({\n    resizableColumns: false,\n    filterable: false,\n    perPage: 1,\n    perPageValues: [],\n    headings: {\n        appName: localization.get(\"appName\"),\n        gitGroup: localization.get(\"gitGroup\"),\n        microservice: localization.get(\"service\"),\n        job: localization.get(\"job\"),\n        commitGroup: localization.get(\"commitGroup\"),\n        commitService: localization.get(\"commitService\"),\n    },\n    sortable: [],\n    texts: {\n        count: \"\",\n    },\n});\n\nfunction fillDatatableRow() {\n    modulesDataTableRows.value = viewModel.studio.items\n        .filter((item) => item.objectType === \"module\")\n        .map<IModuleDataTableRow>((item) => {\n            const module: IModuleDataTableRow = {\n                moduleID: item.ID,\n                moduleName: item.name,\n                gitGroupName: \"\",\n                gitGroupID: (item as IModule).deployParameters?.gitGroupId || 0,\n                microservices: [],\n                microservicesDisable: true,\n                microserviceLoading: false,\n                microserviceName: \"\",\n                microserviceID: (item as IModule).deployParameters?.gitServiceRepoId || 0,\n            };\n            return module;\n        });\n    appDataTableRows.value.push({\n        appID: currentApp.value!.ID,\n        appName: currentApp.value!.name,\n        microservices: [],\n        microservicesDisable: true,\n        job: \"\",\n        commitGroup: \"\",\n        commitServices: [],\n        commitServiceDisable: true,\n    });\n}\n\nfunction getProductsFromProvider() {\n    appSettingsUseCase\n        .getProjectsOfProduct()\n        .then(res => {\n            gitProducts.value.products = res.data.items;\n            gitProducts.value.loaded = true;\n            gitProducts.value.disabled = false;\n            setSelectedProduct();\n        })\n        .catch(() => {\n            gitProducts.value.loaded = true;\n            gitProducts.value.disabled = true;\n            notification.showNotification({ text: \"Error while fetching products\", type: \"error\" });\n        });\n}\n\nfunction setSelectedProduct() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            const currentProduct = gitProducts.value.products.find((product) => currentApp.value!.deployParameters!.gitProductRepoId == product.id);\n            if (currentProduct) {\n                appSettings.value.product = {\n                    name: currentProduct.name,\n                    ID: currentProduct.id,\n                };\n            }\n        }\n    }\n}\n\nfunction setJobName() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            if (currentApp.value.deployParameters.jobName)\n                appSettings.value.job = currentApp.value.deployParameters.jobName\n        }\n    }\n}\n\nasync function getGitGroupsFromProvider() {\n    appSettingsUseCase\n        .getGroupNamesWithId()\n        .then((res) => {\n            res.data.items.forEach((fetchedGroup) =>\n                gitGroups.value.groups.push({\n                    value: fetchedGroup,\n                    microservicesCache: [],\n                    requestedBefore: false,\n                })\n            );\n            gitGroups.value.loaded = true;\n            gitGroups.value.disabled = false;\n            setModulesSelectedGitGroups();\n            setAppSelectedGitGroup();\n        })\n        .catch(() => {\n            gitGroups.value.loaded = true;\n            gitGroups.value.disabled = true;\n\n            notification.showNotification({\n                text: \"Error while fetching git groups\",\n                type: \"error\",\n            })\n        }\n        );\n}\n\nfunction setModulesSelectedGitGroups() {\n    modulesDataTableRows.value.forEach((row) => {\n        if (row.gitGroupID !== 0) {\n            const group = gitGroups.value.groups.find((group) => group.value.id == row.gitGroupID);\n            if (group) {\n                row.gitGroupName = group.value.name;\n            } else {\n                row.gitGroupID = 0;\n            }\n        }\n    });\n    setModulesSelectedMicroservices();\n}\n\nfunction setAppSelectedGitGroup() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            const currentGitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.gitGroupId == group.value.id);\n            const currentCommitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.commitGroupId == group.value.id);\n            if (currentGitGroup) {\n                appSettings.value.gitGroup = {\n                    name: currentGitGroup.value.name,\n                    ID: currentGitGroup.value.id,\n                };\n            }\n            if (currentCommitGroup) {\n                appSettings.value.commitGroup = {\n                    name: currentCommitGroup.value.name,\n                    ID: currentCommitGroup.value.id,\n                };\n            }\n\n        }\n    }\n\n    if (appSettings.value.gitGroup.ID !== 0) {\n        const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\n        const commitGroup = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\n        if (group) {\n            appSettings.value.gitGroup.name = group.value.name;\n        } else {\n            appSettings.value.gitGroup.ID = 0;\n        }\n\n        if (commitGroup) {\n            appSettings.value.commitGroup.name = commitGroup.value.name;\n        } else {\n            appSettings.value.commitGroup.ID = 0;\n        }\n    }\n    setAppSelectedMicroservice();\n}\n\nfunction setModulesSelectedMicroservices() {\n    const groupIdList: Array<number> = modulesDataTableRows.value\n        .map((row) => row.gitGroupID)\n        .filter((id, index, self) => id !== 0 && self.indexOf(id) === index);\n\n    groupIdList.forEach((id) => {\n        modulesDataTableRows.value.forEach(row => {\n            if (row.gitGroupID == id) {\n                row.microserviceLoading = true;\n                row.microservicesDisable = false;\n            }\n        })\n        appSettingsUseCase\n            .getProjectsByGroupId(id)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == id);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    modulesDataTableRows.value.forEach((row) => {\n                        if (row.gitGroupID === id) {\n                            row.microservices = data;\n                            row.microserviceLoading = false;\n                            if (row.microservices.length == 0) {\n                                row.microservicesDisable = true;\n                            }\n                            if (row.microserviceID !== 0) {\n                                const microservice = data.find((service) => service.id == row.microserviceID);\n                                if (microservice) {\n                                    row.microserviceName = microservice.name;\n                                    row.microservicesDisable = false;\n                                } else {\n                                    row.microserviceID = 0;\n                                    row.microservicesDisable = true;\n                                }\n                            }\n                        }\n                    });\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: \"Error while fetching projects\",\n                    type: \"error\",\n                })\n            );\n    });\n}\n\nfunction setAppSelectedMicroservice() {\n    if (appSettings.value.gitGroup.ID != 0) {\n        appDataTableRows.value[0].microservicesDisable = false;\n        appSettings.value.microservice.loading = true;\n        appSettingsUseCase\n            .getProjectsByGroupId(appSettings.value.gitGroup.ID)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    appDataTableRows.value[0].microservices = data;\n                    appSettings.value.microservice.loading = false;\n                    if (currentApp.value) {\n                        if (currentApp.value.deployParameters) {\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.gitServiceRepoId);\n                            if (microservice) {\n                                appSettings.value.microservice.name = microservice.name;\n                                appSettings.value.microservice.ID = microservice.id;\n                                appDataTableRows.value[0].microservicesDisable = false;\n                            } else {\n                                appSettings.value.microservice.ID = 0;\n                            }\n                        }\n                    }\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: \"Error while fetching projects\",\n                    type: \"error\",\n                })\n            );\n    }\n\n    if (appSettings.value.commitGroup.ID != 0) {\n        appDataTableRows.value[0].commitServiceDisable = false;\n        appSettings.value.commitService.loading = true;\n        appSettingsUseCase\n            .getProjectsByGroupId(appSettings.value.commitGroup.ID)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.commitGroup.ID);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    appDataTableRows.value[0].commitServices = data;\n                    appSettings.value.commitService.loading = false;\n                    if (currentApp.value) {\n                        if (currentApp.value.deployParameters) {\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.commitServiceId);\n                            if (microservice) {\n                                appSettings.value.commitService.name = microservice.name;\n                                appSettings.value.commitService.ID = microservice.id;\n                                appDataTableRows.value[0].commitServiceDisable = false;\n                            } else {\n                                appSettings.value.commitService.ID = 0;\n                            }\n                        }\n                    }\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: \"Error while fetching projects\",\n                    type: \"error\",\n                })\n            );\n    }\n}\n\nfunction handleProductSelect() {\n    const product = gitProducts.value.products.find((product) => product.name === appSettings.value.product.name);\n    if (product) {\n        appSettings.value.product.ID = product.id;\n    } else {\n        appSettings.value.product.name = \"\";\n        appSettings.value.product.ID = 0;\n    }\n}\n\nasync function handleModulesGitGroupInput(selectedRow: IModuleDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.microservicesDisable = true;\n    currentRow.microservices = [];\n    currentRow.microserviceName = \"\";\n    currentRow.microserviceID = 0;\n\n    if (selectedGitGroup) {\n        currentRow.gitGroupID = selectedGitGroup.value.id;\n        currentRow.gitGroupName = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getModuleMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.microservices = selectedGitGroup.microservicesCache;\n            currentRow.microservicesDisable = !currentRow.microservices.length;\n        }\n    } else {\n        currentRow.gitGroupName = selectedRow.gitGroupName;\n        currentRow.gitGroupID = 0;\n    }\n}\n\nasync function handleAppGitGroupInput(selectedRow: IAppDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    currentRow.microservicesDisable = true;\n    currentRow.microservices = [];\n    appSettings.value.microservice.name = \"\";\n    appSettings.value.microservice.ID = 0;\n\n    if (selectedGitGroup) {\n        appSettings.value.gitGroup.ID = selectedGitGroup.value.id;\n        appSettings.value.gitGroup.name = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getAppMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.microservices = selectedGitGroup.microservicesCache;\n            currentRow.microservicesDisable = !currentRow.microservices.length;\n        }\n    } else {\n        appSettings.value.gitGroup.ID = 0;\n    }\n}\n\nasync function handleAppCommitGroupInput(selectedRow: IAppDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    currentRow.commitServiceDisable = true;\n    currentRow.commitServices = [];\n    appSettings.value.commitService.name = \"\";\n    appSettings.value.commitService.ID = 0;\n\n    if (selectedGitGroup) {\n        appSettings.value.commitGroup.ID = selectedGitGroup.value.id;\n        appSettings.value.commitGroup.name = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getAppCommitServicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.commitServices = selectedGitGroup.microservicesCache;\n            currentRow.commitServiceDisable = !currentRow.commitServices.length;\n        }\n    } else {\n        appSettings.value.commitGroup.ID = 0;\n    }\n}\n\nasync function getModuleMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IModuleDataTableRow) {\n    currentRow.microserviceLoading = true;\n    currentRow.microservicesDisable = false;\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.microservices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.microservicesDisable = !currentRow.microservices.length;\n    currentRow.microserviceLoading = false;\n}\n\nasync function getAppMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\n    appSettings.value.microservice.loading = true;\n    currentRow.microservicesDisable = false;\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.microservices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.microservicesDisable = !currentRow.microservices.length;\n    appSettings.value.microservice.loading = false;\n}\n\nasync function getAppCommitServicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\n    appSettings.value.commitService.loading = true;\n    currentRow.commitServiceDisable = false;\n    currentRow.commitServices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.commitServices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.commitServiceDisable = !currentRow.commitServices.length;\n    appSettings.value.commitService.loading = false;\n}\n\nasync function handleModulesGitGroupChange(selectedRow: IModuleDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.gitGroupID = selectedGitGroup?.value?.id || 0;\n    currentRow.gitGroupName = selectedGitGroup?.value?.name || \"\";\n    if (!currentRow.gitGroupID) {\n        currentRow.microservices = [];\n        currentRow.microservicesDisable = true;\n        currentRow.microserviceName = \"\";\n        currentRow.microserviceID = 0;\n    }\n}\n\nasync function handleAppGitGroupChange(selectedRow: IAppDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    appSettings.value.gitGroup.ID = selectedGitGroup?.value?.id || 0;\n    appSettings.value.gitGroup.name = selectedGitGroup?.value?.name || \"\";\n    if (!selectedGitGroup) {\n        currentRow.microservices = [];\n        currentRow.microservicesDisable = true;\n        appSettings.value.microservice.name = \"\";\n        appSettings.value.microservice.ID = 0;\n    }\n}\n\nasync function handleAppCommitGroupChange(selectedRow: IAppDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.commitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    appSettings.value.commitGroup.ID = selectedGitGroup?.value?.id || 0;\n    appSettings.value.commitGroup.name = selectedGitGroup?.value?.name || \"\";\n    if (!selectedGitGroup) {\n        currentRow.commitServices = [];\n        currentRow.commitServiceDisable = true;\n        appSettings.value.commitService.name = \"\";\n        appSettings.value.commitService.ID = 0;\n    }\n}\n\n\n\nfunction handleModulesMicroServiceChange(selectedRow: IModuleDataTableRow) {\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === selectedRow.microserviceName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.microserviceName = selectedMicroservice?.name || \"\";\n    currentRow.microserviceID = selectedMicroservice?.id || 0;\n}\n\nfunction handleAppMicroServiceChange(selectedRow: IAppDataTableRow) {\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === appSettings.value.microservice.name);\n    appSettings.value.microservice.name = selectedMicroservice?.name || \"\";\n    appSettings.value.microservice.ID = selectedMicroservice?.id || 0;\n}\n\nfunction handleAppCommitServiceChange(selectedRow: IAppDataTableRow) {\n    const selectedMicroservice = selectedRow.commitServices.find((microservice) => microservice.name === appSettings.value.commitService.name);\n    appSettings.value.commitService.name = selectedMicroservice?.name || \"\";\n    appSettings.value.commitService.ID = selectedMicroservice?.id || 0;\n}\n\nasync function onSave() {\n    if (currentApp.value) {\n        let settings = {};\n        const modulesSettings: Array<IModuleSettingsItem> = modulesDataTableRows.value\n            .filter(\n                (row) =>\n                    row.microserviceID !=\n                    (viewModel.studio.items.find((item) => item.ID == row.moduleID) as IModule).deployParameters?.gitServiceRepoId\n            )\n            .map((row) => ({\n                moduleID: row.moduleID,\n                deployParameters: {\n                    gitGroupId: row.gitGroupID,\n                    gitServiceRepoId: row.microserviceID,\n                },\n            }));\n\n        const applicationSettings: IApplicationSettingsItem = {\n            applicationID: currentApp.value!.ID,\n            deployParameters: {\n                gitProductRepoId: appSettings.value.product.ID,\n                gitGroupId: appSettings.value.gitGroup.ID,\n                gitServiceRepoId: appSettings.value.microservice.ID,\n                jobName: appSettings.value.job,\n                commitGroupId: appSettings.value.commitGroup.ID,\n                commitServiceId: appSettings.value.commitService.ID,\n            },\n        };\n\n        settings = { modulesSettings };\n\n        if (\n            currentApp.value.deployParameters?.gitProductRepoId != appSettings.value.product.ID ||\n            currentApp.value.deployParameters?.gitServiceRepoId != appSettings.value.microservice.ID ||\n            currentApp.value.deployParameters?.commitServiceId != appSettings.value.commitService.ID ||\n            currentApp.value.deployParameters?.jobName != appSettings.value.job\n        ) {\n            settings = { ...settings, applicationSettings };\n        }\n\n        await executor.execute(\n            async () => {\n                await appSettingsUseCase.update(settings);\n            },\n            { loading: true }\n        );\n        emit(\"close\");\n    }\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_v_client_table = _resolveComponent(\"v-client-table\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, _toDisplayString(_unref(localization).get(\"deploySettings_appSettings\")), 1 /* TEXT */),\n    _createElementVNode(\"label\", _hoisted_3, _toDisplayString(_unref(localization).get(\"product\")), 1 /* TEXT */),\n    _createElementVNode(\"div\", _hoisted_4, [\n      _withDirectives(_createElementVNode(\"input\", {\n        class: \"product-input\",\n        list: \"products\",\n        id: \"product-input\",\n        placeholder: \"Select Product\",\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((appSettings.value.product.name) = $event)),\n        onChange: handleProductSelect,\n        disabled: gitProducts.value.disabled\n      }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_5), [\n        [_vModelText, appSettings.value.product.name]\n      ]),\n      (!gitProducts.value.loaded)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [\n            _createVNode(Spinner)\n          ]))\n        : _createCommentVNode(\"v-if\", true)\n    ]),\n    _createElementVNode(\"datalist\", _hoisted_7, [\n      _hoisted_8,\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(gitProducts.value.products, (product) => {\n        return (_openBlock(), _createElementBlock(\"option\", null, _toDisplayString(product.name), 1 /* TEXT */))\n      }), 256 /* UNKEYED_FRAGMENT */))\n    ]),\n    _createVNode(_component_v_client_table, {\n      ref: \"table\",\n      data: appDataTableRows.value,\n      columns: appDatatableColumns.value,\n      options: appOptionsDataTable.value\n    }, {\n      appName: _withCtx((props) => [\n        _createElementVNode(\"span\", null, _toDisplayString(props.row.appName), 1 /* TEXT */)\n      ]),\n      gitGroup: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_9, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: \"app-git-groups\",\n            id: \"app-git-group-input\",\n            placeholder: \"Select Git Group\",\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((appSettings.value.gitGroup.name) = $event)),\n            onInput: ($event: any) => (handleAppGitGroupInput(props.row)),\n            onChange: ($event: any) => (handleAppGitGroupChange(props.row)),\n            disabled: gitGroups.value.disabled\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_10), [\n            [_vModelText, appSettings.value.gitGroup.name]\n          ]),\n          (!gitGroups.value.loaded)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", _hoisted_12, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(gitGroups.value.groups, (gitGroup) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: gitGroup.value.name\n            }, null, 8 /* PROPS */, _hoisted_13))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ])\n      ]),\n      service: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_14, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: props.row.appID,\n            id: \"app-microservice-input\",\n            placeholder: \"Select Microservice\",\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((appSettings.value.microservice.name) = $event)),\n            onChange: ($event: any) => (handleAppMicroServiceChange(props.row)),\n            disabled: props.row.microservicesDisable\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_15), [\n            [_vModelText, appSettings.value.microservice.name]\n          ]),\n          (appSettings.value.microservice.loading)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", {\n          id: props.row.appID\n        }, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(props.row.microservices, (microservice) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: microservice.name\n            }, null, 8 /* PROPS */, _hoisted_18))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ], 8 /* PROPS */, _hoisted_17)\n      ]),\n      job: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_19, [\n          _withDirectives(_createElementVNode(\"input\", {\n            type: \"text\",\n            class: \"module-input\",\n            id: \"app-microservice-input\",\n            placeholder: \"Job Name\",\n            \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((appSettings.value.job) = $event))\n          }, null, 512 /* NEED_PATCH */), [\n            [_vModelText, appSettings.value.job]\n          ])\n        ])\n      ]),\n      commitGroup: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_20, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: \"app-git-groups\",\n            id: \"app-git-group-input\",\n            placeholder: \"Select Commit Group\",\n            \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event: any) => ((appSettings.value.commitGroup.name) = $event)),\n            onInput: ($event: any) => (handleAppCommitGroupInput(props.row)),\n            onChange: ($event: any) => (handleAppCommitGroupChange(props.row)),\n            disabled: gitGroups.value.disabled\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_21), [\n            [_vModelText, appSettings.value.commitGroup.name]\n          ]),\n          (!gitGroups.value.loaded)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", _hoisted_23, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(gitGroups.value.groups, (gitGroup) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: gitGroup.value.name\n            }, null, 8 /* PROPS */, _hoisted_24))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ])\n      ]),\n      commitService: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_25, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: \"commit_service_list\",\n            id: \"app-microservice-input\",\n            placeholder: \"Select Service\",\n            \"onUpdate:modelValue\": _cache[5] || (_cache[5] = ($event: any) => ((appSettings.value.commitService.name) = $event)),\n            onChange: ($event: any) => (handleAppCommitServiceChange(props.row)),\n            disabled: props.row.commitServiceDisable\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_26), [\n            [_vModelText, appSettings.value.commitService.name]\n          ]),\n          (appSettings.value.commitService.loading)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_27, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", _hoisted_28, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(props.row.commitServices, (microservice) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: microservice.name\n            }, null, 8 /* PROPS */, _hoisted_29))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ])\n      ]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\", \"columns\", \"options\"]),\n    _createElementVNode(\"div\", _hoisted_30, _toDisplayString(_unref(localization).get(\"deploySettings_moduleSettings\")), 1 /* TEXT */),\n    _createVNode(_component_v_client_table, {\n      ref: \"table\",\n      data: modulesDataTableRows.value,\n      columns: modulesAppDatatableColumns.value,\n      options: modulesOptionsDataTable.value\n    }, {\n      moduleName: _withCtx((props) => [\n        _createElementVNode(\"span\", null, _toDisplayString(props.row.moduleName), 1 /* TEXT */)\n      ]),\n      gitGroup: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_31, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: \"git-groups\",\n            id: \"git-group-input\",\n            placeholder: \"Select Git Group\",\n            \"onUpdate:modelValue\": ($event: any) => ((props.row.gitGroupName) = $event),\n            onInput: ($event: any) => (handleModulesGitGroupInput(props.row)),\n            onChange: ($event: any) => (handleModulesGitGroupChange(props.row)),\n            disabled: gitGroups.value.disabled\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_32), [\n            [_vModelText, props.row.gitGroupName]\n          ]),\n          (!gitGroups.value.loaded)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_33, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", _hoisted_34, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(gitGroups.value.groups, (gitGroup) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: gitGroup.value.name\n            }, null, 8 /* PROPS */, _hoisted_35))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ])\n      ]),\n      service: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_36, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: props.row.moduleID,\n            id: \"microservice-input\",\n            placeholder: \"Select Microservice\",\n            \"onUpdate:modelValue\": ($event: any) => ((props.row.microserviceName) = $event),\n            onChange: ($event: any) => (handleModulesMicroServiceChange(props.row)),\n            disabled: props.row.microservicesDisable\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_37), [\n            [_vModelText, props.row.microserviceName]\n          ]),\n          (props.row.microserviceLoading)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_38, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", {\n          id: props.row.moduleID\n        }, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(props.row.microservices, (microservice) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: microservice.name\n            }, null, 8 /* PROPS */, _hoisted_40))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ], 8 /* PROPS */, _hoisted_39)\n      ]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\", \"columns\", \"options\"]),\n    _hoisted_41,\n    _createElementVNode(\"button\", {\n      class: \"save-button\",\n      onClick: onSave\n    }, _toDisplayString(_unref(localization).get(\"save\")), 1 /* TEXT */),\n    _createElementVNode(\"button\", {\n      class: \"previous-button\",\n      \"data-v-33a93b5b\": \"\",\n      onClick: _cache[6] || (_cache[6] = () => emit('close'))\n    }, _toDisplayString(_unref(localization).get(\"cancel\")), 1 /* TEXT */)\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./deploySettings.vue?vue&type=style&index=0&id=20f9f52c&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./deploySettings.vue?vue&type=style&index=0&id=20f9f52c&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./deploySettings.vue?vue&type=style&index=1&id=20f9f52c&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./deploySettings.vue?vue&type=style&index=1&id=20f9f52c&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./deploySettings.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./deploySettings.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./deploySettings.vue?vue&type=style&index=0&id=20f9f52c&scoped=true&lang=css\"\nimport \"./deploySettings.vue?vue&type=style&index=1&id=20f9f52c&lang=css\"\n\nimport exportComponent from \"/home/runner/work/QCloud-Shell/QCloud-Shell/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-20f9f52c\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","style","class","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","script","n","for","key","_hoisted_7","_hoisted_8","_","value","disabled","selected","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","__name","emits","setup","__props","emit","modulesDataTableRows","viewModel","studio","items","filter","item","objectType","map","moduleID","ID","moduleName","name","gitGroupName","gitGroupID","deployParameters","gitGroupId","microservices","microservicesDisable","microserviceLoading","microserviceName","microserviceID","gitServiceRepoId","appDataTableRows","appID","currentApp","appName","job","commitGroup","commitServices","commitServiceDisable","jobName","appSettings","async","appSettingsUseCase","getGroupNamesWithId","then","res","data","forEach","fetchedGroup","gitGroups","groups","microservicesCache","requestedBefore","loaded","row","group","find","index","self","indexOf","getProjectsByGroupId","length","microservice","service","catch","notification","showNotification","text","type","currentGitGroup","currentCommitGroup","commitGroupId","gitGroup","loading","commitService","commitServiceId","setAppSelectedGitGroup","getGitGroupsFromProvider","getProjectsOfProduct","gitProducts","products","currentProduct","product","gitProductRepoId","setSelectedProduct","localization","ILocalization","IViewModel","executor","IUseCaseExecutor","INotification","IApplicationSettings","debouncer","IDebounce","apps","app","appId","Array","modulesAppDatatableColumns","appDatatableColumns","modulesOptionsDataTable","resizableColumns","filterable","perPage","perPageValues","headings","get","sortable","texts","count","appOptionsDataTable","handleProductSelect","getModuleMicroservicesByGroupID","selectedGitGroup","currentRow","getAppMicroservicesByGroupID","getAppCommitServicesByGroupID","onSave","settings","modulesSettings","applicationSettings","applicationID","execute","update","_ctx","_cache","_component_v_client_table","list","placeholder","$event","onChange","ref","columns","props","onInput","selectedRow","resetTimer","debounce","selectedMicroservice","onClick"],"sourceRoot":""}
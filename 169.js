"use strict";(this.webpackChunkqcloud_shell=this.webpackChunkqcloud_shell||[]).push([[169],{78162:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(34663),o=t.n(i),a=t(7638),r=t.n(a)()(o());r.push([e.id,"\nul[data-v-1eee829a] {\n    list-style-type: none;\n}\n.new-module-text .mdi[data-v-1eee829a] {\n    font-size: 24px; \n    margin-right: 10px;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AAuJA;IACI,qBAAqB;AACzB;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { IObjectUseCase } from \'../../../../domain/useCase/IObjectUseCase\';\nimport { ITreeItem } from \'../../../../domain/presentation/ITreeView\';\nimport { ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IFileExplorer } from \'../../../../domain/useCase/IFileExplorer\';\nimport { IViewModelManager } from \'../../../../domain/viewModel/IViewModelManager\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n    id: string;\n    name: string;\n    description?: string;\n    type:  "module" | "model";\n    prefix?: string;\n    treeItems: Array<ITreeItem>;\n}\n\nasync function refreshTreeItems(itemId: string, itemPath: Array<String>) {\n  const fileExplorer = await executor.resolveUseCase<IFileExplorer>(IFileExplorer);\n  let item = viewModel.studio.items.find(item => item.ID == props.id);\n  if(!item) return;\n  fileExplorer.removeItem(props.id)\n  fileExplorer.addNewItem(item, itemId);\n  let children = getChildren(props.id);\n  children.forEach(async child => {\n    fileExplorer.removeItem(child.ID)\n    fileExplorer.addNewItem(child, child.path ? child.path[child.path.length - 1].toString() : undefined);\n  });\n}\n\nasync function updateChildrenPaths(itemId: string, itemPath: Array<String>, objectUseCase: IObjectUseCase){\n  let children = getChildren(props.id);  \n  children.forEach(async child => {\n    let updatedPath = updatePath(props.id, child.path ?? [], itemPath);\n    await objectUseCase.updateObject(props.id, {name: props.name, path: updatedPath});\n  });\n}\n\nfunction updatePath(updatedItemId: string, existingItemPath: Array<String>, updatedPath: Array<String>) {\n    const index = existingItemPath.indexOf(updatedItemId);\n    if (index !== -1) {\n        return [...updatedPath, ...existingItemPath.slice(index + 1)];\n    }\n    return existingItemPath;\n}\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst treeview = container.resolve<ITreeView>(ITreeView);\nconst props = defineProps<IMoveItemInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\nfunction move(itemPath: Array<String>, itemId: String) {\nconsole.log("move")\n    executor.execute(async () => {\n        itemPath.push(itemId.toString());\n        const objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\n        await objectUseCase.updateObject(props.id, {name: props.name, path: itemPath});\n        await updateChildrenPaths(itemId.toString(), itemPath, objectUseCase);\n        await refreshTreeItems(itemId.toString(), itemPath);\n        emit("close");\n    }, { loading: true });\n}\nlet actions: { path: Array<String>; icon: string; label: string; indent: number; id: String }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet treeItems = viewModel.studio.items;\nconst modelItems = treeItems.filter(item => item.objectType === "model") as IModel[];\nconst moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\nconsole.log("ooops", treeItems)\n\nmodelItems.sort((a, b) => {\n  let aPath = a.path ?? [];\n  let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n        return aPath.length - bPath.length;\n    }\n    \n    return 0;\n});\n\nfunction getChildren(parentId: string) {\n  return modelItems.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n}\n\nfunction sortItems(parentId: string) {\n  const result :IModel [] = [];\n\n  const directChildren = getChildren(parentId);\n  for (const child of directChildren) {\n    result.push(child);\n    result.push(...sortItems(child.ID));\n  }\n\n  return result;\n}\n\nconst sortedItems = modelItems.filter(item => item.path ? item.path.length === 0 : true)\n  .reduce<IModel[]>((acc, rootItem) => {\n    acc.push(rootItem);\n    acc.push(...sortItems(rootItem.ID));\n    return acc;\n  }, []);\n\n\nconsole.log("ooops1", sortedItems)\n\n\n\n\n\n\nfor (let modelItem of sortedItems) {\n    if (modelItem.modelType == "placeholder") {\n        let indentCalculated = modelItem.path ? (modelItem.path.length * 20 + 20) : 20;\n        actions.push({ path: modelItem.path ?? [], icon: "mdi mdi-folder-open", label: modelItem.name, indent: indentCalculated, id: modelItem.ID })\n    }\n}\nfor (let moduleItem of moduleItems){\n    actions.push({ path: moduleItem.path ?? [], icon: "mdi mdi-puzzle", label: moduleItem.name, indent: 20, id: moduleItem.ID })\n}\n\n<\/script> \n\n<template>\n    <div class="moveDiv">\n        <div id="content-area" class="popover__content">\n            <div style="height: 100%" class="errorDiv">\n                <ul style="padding-left: 0px; margin-bottom: 0px">\n                    <li v-for="action in actions" \n                        :key="action.label" \n                        @click="move(action.path, action.id)" \n                        style="padding-top: 1px" \n                        :style="{ \'padding-left\': action.indent + \'px\' }">\n                        <div class="createLi">\n                            <p class="new-module-text">\n                                <i :class="action.icon" style="margin-right: 10px;"></i>{{ action.label }}\n                            </p>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</template>\n\n\n<style scoped>\nul {\n    list-style-type: none;\n}\n\n.new-module-text .mdi {\n    font-size: 24px; \n    margin-right: 10px; \n}\n</style>\n\n\n \n\n<style scoped>\n.new-module-text {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n\n.createLi {\n  cursor: pointer;\n}\n.moveDiv {\n    margin-top: 5px;\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-bottom: 10px;\n}\n\n</style>'],sourceRoot:""}]);const l=r},34348:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(34663),o=t.n(i),a=t(7638),r=t.n(a)()(o());r.push([e.id,'\n.new-module-text[data-v-1eee829a] {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n.createLi[data-v-1eee829a] {\n  cursor: pointer;\n}\n.moveDiv[data-v-1eee829a] {\n    margin-top: 5px;\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-bottom: 10px;\n}\n\n',"",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AAqKA;EACE,SAAS;EACT,cAAc;EACd,gBAAgB;EAChB,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,qBAAqB;AACvB;AAEA;EACE,eAAe;AACjB;AACA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;AACvB",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { IObjectUseCase } from \'../../../../domain/useCase/IObjectUseCase\';\nimport { ITreeItem } from \'../../../../domain/presentation/ITreeView\';\nimport { ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IFileExplorer } from \'../../../../domain/useCase/IFileExplorer\';\nimport { IViewModelManager } from \'../../../../domain/viewModel/IViewModelManager\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n    id: string;\n    name: string;\n    description?: string;\n    type:  "module" | "model";\n    prefix?: string;\n    treeItems: Array<ITreeItem>;\n}\n\nasync function refreshTreeItems(itemId: string, itemPath: Array<String>) {\n  const fileExplorer = await executor.resolveUseCase<IFileExplorer>(IFileExplorer);\n  let item = viewModel.studio.items.find(item => item.ID == props.id);\n  if(!item) return;\n  fileExplorer.removeItem(props.id)\n  fileExplorer.addNewItem(item, itemId);\n  let children = getChildren(props.id);\n  children.forEach(async child => {\n    fileExplorer.removeItem(child.ID)\n    fileExplorer.addNewItem(child, child.path ? child.path[child.path.length - 1].toString() : undefined);\n  });\n}\n\nasync function updateChildrenPaths(itemId: string, itemPath: Array<String>, objectUseCase: IObjectUseCase){\n  let children = getChildren(props.id);  \n  children.forEach(async child => {\n    let updatedPath = updatePath(props.id, child.path ?? [], itemPath);\n    await objectUseCase.updateObject(props.id, {name: props.name, path: updatedPath});\n  });\n}\n\nfunction updatePath(updatedItemId: string, existingItemPath: Array<String>, updatedPath: Array<String>) {\n    const index = existingItemPath.indexOf(updatedItemId);\n    if (index !== -1) {\n        return [...updatedPath, ...existingItemPath.slice(index + 1)];\n    }\n    return existingItemPath;\n}\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst treeview = container.resolve<ITreeView>(ITreeView);\nconst props = defineProps<IMoveItemInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\nfunction move(itemPath: Array<String>, itemId: String) {\nconsole.log("move")\n    executor.execute(async () => {\n        itemPath.push(itemId.toString());\n        const objectUseCase = container.resolve<IObjectUseCase>(IObjectUseCase);\n        await objectUseCase.updateObject(props.id, {name: props.name, path: itemPath});\n        await updateChildrenPaths(itemId.toString(), itemPath, objectUseCase);\n        await refreshTreeItems(itemId.toString(), itemPath);\n        emit("close");\n    }, { loading: true });\n}\nlet actions: { path: Array<String>; icon: string; label: string; indent: number; id: String }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet treeItems = viewModel.studio.items;\nconst modelItems = treeItems.filter(item => item.objectType === "model") as IModel[];\nconst moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\nconsole.log("ooops", treeItems)\n\nmodelItems.sort((a, b) => {\n  let aPath = a.path ?? [];\n  let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n        return aPath.length - bPath.length;\n    }\n    \n    return 0;\n});\n\nfunction getChildren(parentId: string) {\n  return modelItems.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n}\n\nfunction sortItems(parentId: string) {\n  const result :IModel [] = [];\n\n  const directChildren = getChildren(parentId);\n  for (const child of directChildren) {\n    result.push(child);\n    result.push(...sortItems(child.ID));\n  }\n\n  return result;\n}\n\nconst sortedItems = modelItems.filter(item => item.path ? item.path.length === 0 : true)\n  .reduce<IModel[]>((acc, rootItem) => {\n    acc.push(rootItem);\n    acc.push(...sortItems(rootItem.ID));\n    return acc;\n  }, []);\n\n\nconsole.log("ooops1", sortedItems)\n\n\n\n\n\n\nfor (let modelItem of sortedItems) {\n    if (modelItem.modelType == "placeholder") {\n        let indentCalculated = modelItem.path ? (modelItem.path.length * 20 + 20) : 20;\n        actions.push({ path: modelItem.path ?? [], icon: "mdi mdi-folder-open", label: modelItem.name, indent: indentCalculated, id: modelItem.ID })\n    }\n}\nfor (let moduleItem of moduleItems){\n    actions.push({ path: moduleItem.path ?? [], icon: "mdi mdi-puzzle", label: moduleItem.name, indent: 20, id: moduleItem.ID })\n}\n\n<\/script> \n\n<template>\n    <div class="moveDiv">\n        <div id="content-area" class="popover__content">\n            <div style="height: 100%" class="errorDiv">\n                <ul style="padding-left: 0px; margin-bottom: 0px">\n                    <li v-for="action in actions" \n                        :key="action.label" \n                        @click="move(action.path, action.id)" \n                        style="padding-top: 1px" \n                        :style="{ \'padding-left\': action.indent + \'px\' }">\n                        <div class="createLi">\n                            <p class="new-module-text">\n                                <i :class="action.icon" style="margin-right: 10px;"></i>{{ action.label }}\n                            </p>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</template>\n\n\n<style scoped>\nul {\n    list-style-type: none;\n}\n\n.new-module-text .mdi {\n    font-size: 24px; \n    margin-right: 10px; \n}\n</style>\n\n\n \n\n<style scoped>\n.new-module-text {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  opacity: 1;\n  font-family: "ROBOTO";\n}\n\n.createLi {\n  cursor: pointer;\n}\n.moveDiv {\n    margin-top: 5px;\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-bottom: 10px;\n}\n\n</style>'],sourceRoot:""}]);const l=r},40169:(e,n,t)=>{t.r(n),t.d(n,{default:()=>k});var i=t(71093),o=t(73843),a=t(66190),r=t(5627),l=t(83487),s=t(88613),d=t(29633),m=t(32130),p=t(3329),c=t(54848);const I={class:"moveDiv"},h={id:"content-area",class:"popover__content"},u={style:{height:"100%"},class:"errorDiv"},g={style:{"padding-left":"0px","margin-bottom":"0px"}},f=["onClick"],v={class:"createLi"},x={class:"new-module-text"},C=(0,i.aZ)({__name:"moveItem",props:{id:null,name:null,description:null,type:null,prefix:null,treeItems:null},emits:["close"],setup(e,{emit:n}){var t,C;const y=e;r.nC.resolve(c.B);const A=r.nC.resolve(l.y),w=(r.nC.resolve(m.J),r.nC.resolve(s.J));let b=[];b.push({path:[],icon:"mdi mdi-vector-polyline",label:w.studio.appName,indent:0,id:w.studio.appId});let M=w.studio.items;const P=M.filter((e=>"model"===e.objectType)),E=M.filter((e=>"module"===e.objectType));function S(e){return P.filter((n=>!!n.path&&n.path[n.path.length-1]===e.toString()||!!n.parent&&n.parent.ID==e))}function T(e){const n=[],t=S(e);for(const e of t)n.push(e),n.push(...T(e.ID));return n}console.log("ooops",M),P.sort(((e,n)=>{var t,i;let o=null!==(t=e.path)&&void 0!==t?t:[],a=null!==(i=n.path)&&void 0!==i?i:[];return o.length!==a.length?o.length-a.length:0}));const U=P.filter((e=>!e.path||0===e.path.length)).reduce(((e,n)=>(e.push(n),e.push(...T(n.ID)),e)),[]);console.log("ooops1",U);for(let e of U)if("placeholder"==e.modelType){let n=e.path?20*e.path.length+20:20;b.push({path:null!==(t=e.path)&&void 0!==t?t:[],icon:"mdi mdi-folder-open",label:e.name,indent:n,id:e.ID})}for(let e of E)b.push({path:null!==(C=e.path)&&void 0!==C?C:[],icon:"mdi mdi-puzzle",label:e.name,indent:20,id:e.ID});return(e,t)=>((0,i.wg)(),(0,i.iD)("div",I,[(0,i._)("div",h,[(0,i._)("div",u,[(0,i._)("ul",g,[((0,i.wg)(!0),(0,i.iD)(i.HY,null,(0,i.Ko)((0,o.SU)(b),(e=>((0,i.wg)(),(0,i.iD)("li",{key:e.label,onClick:t=>{return i=e.path,o=e.id,console.log("move"),void A.execute((async()=>{i.push(o.toString());const e=r.nC.resolve(d._);await e.updateObject(y.id,{name:y.name,path:i}),await async function(e,n,t){S(y.id).forEach((async e=>{var i;let o=function(e,n,t){const i=n.indexOf(e);return-1!==i?[...t,...n.slice(i+1)]:n}(y.id,null!==(i=e.path)&&void 0!==i?i:[],n);await t.updateObject(y.id,{name:y.name,path:o})}))}(o.toString(),i,e),await async function(e,n){const t=await A.resolveUseCase(p.g);let i=w.studio.items.find((e=>e.ID==y.id));i&&(t.removeItem(y.id),t.addNewItem(i,e),S(y.id).forEach((async e=>{t.removeItem(e.ID),t.addNewItem(e,e.path?e.path[e.path.length-1].toString():void 0)})))}(o.toString()),n("close")}),{loading:!0});var i,o},style:(0,a.normalizeStyle)([{"padding-top":"1px"},{"padding-left":e.indent+"px"}])},[(0,i._)("div",v,[(0,i._)("p",x,[(0,i._)("i",{class:(0,a.normalizeClass)(e.icon),style:{"margin-right":"10px"}},null,2),(0,i.Uk)((0,a.toDisplayString)(e.label),1)])])],12,f)))),128))])])])]))}});var y=t(17450),A=t.n(y),w=t(29530),b=t.n(w),M=t(16199),P=t.n(M),E=t(40458),S=t.n(E),T=t(62916),U=t.n(T),j=t(92165),D=t.n(j),B=t(78162),O={};O.styleTagTransform=D(),O.setAttributes=S(),O.insert=P().bind(null,"head"),O.domAPI=b(),O.insertStyleElement=U(),A()(B.Z,O),B.Z&&B.Z.locals&&B.Z.locals;var V=t(34348),_={};_.styleTagTransform=D(),_.setAttributes=S(),_.insert=P().bind(null,"head"),_.domAPI=b(),_.insertStyleElement=U(),A()(V.Z,_),V.Z&&V.Z.locals&&V.Z.locals;const k=(0,t(32525).Z)(C,[["__scopeId","data-v-1eee829a"]])}}]);
//# sourceMappingURL=169.js.map
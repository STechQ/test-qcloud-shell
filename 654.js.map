{"version":3,"file":"654.js","mappings":"qHAAA,+BAkBA,OAVkB,EAAAA,cAAd,SAA4BC,EAAcC,GACtC,OAAOC,KAAKC,SAASC,SAASJ,GAAMK,UAAU,EAAGJ,EAAS,IAMhD,EAAAK,WAAd,sBACI,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAI,SAAAN,GAAU,SAAKF,cAAc,GAAIE,MAASO,KAAK,QAAWC,EAAaC,YAAe,OAAYN,SAAS,KAf3H,EAAAM,YAAc,EAiBjC,EAlBA,GAAa,IAAAD,G,iCCWN,MAAME,EAAUC,OAAOC,IAAI,Y,iCCS3B,MAAMC,EAAiBF,OAAOC,IAAI","sources":["webpack://qcloud_shell/./node_modules/@stechquick/algae/src/helpers/cryptoHelper.ts","webpack://qcloud_shell/./src/domain/infrastructure/IConfig.ts","webpack://qcloud_shell/./src/domain/infrastructure/IFormValidator.ts"],"sourcesContent":["export class CryptoHelper {\n    private static guidCounter = 0;\n\n    /**\n     * \n     * @param base number layout (number of distinct digits) (10'luk sayı düzeni, 16'lık sayı düzeni)\n     * @param length length of word. Max value: 16\n     */\n    public static GetRandomWord(base: number, length: number) {\n        return Math.random().toString(base).substring(2, length + 2);\n    }\n\n    /**\n     * Ex: be945482-jf10-40d1-a50d-rzxa2c41fdcu\n     */\n    public static CreateGuid() {\n        return [8, 4, 4, 4, 6].map(length => this.GetRandomWord(36, length)).join(\"-\") + ((++CryptoHelper.guidCounter) % 2150000000).toString(36);\n    }\n}","import { ISettings } from \"../model/ISettings\";\nimport * as environmentData from \"../../environment\";\nexport interface IConfig {\n    readonly basePath: string;\n    readonly urlOrigin: string;\n\n    getValue<TKey extends keyof ISettings>(key: TKey): Readonly<ISettings[TKey]>;\n    getVersion(): string;\n    getPresentationLayer(): typeof environmentData[\"presentationLayer\"];\n    getEnvironmentName(): string;\n}\nexport const IConfig = Symbol.for(\"IConfig\");","export interface IFormValidatorOptions {\n    maxLength?: number;\n    minLength?: number;\n    minAndMaxLength?: { min: number; max: number; };\n    email?: boolean;\n    availableCharacters?: boolean;\n    nonSpaceCharacter?: boolean;\n    customRegex?: { regex: RegExp; message: string; };\n}\n\nexport interface IFormValidatorResponseItem {\n    key: keyof IFormValidatorOptions;\n    message: string;\n    isValid: boolean;\n}\n\nexport interface IFormValidator {\n    validate(value: string, options: IFormValidatorOptions): Array<IFormValidatorResponseItem>;\n}\n\nexport const IFormValidator = Symbol.for(\"IFormValidator\");"],"names":["GetRandomWord","base","length","Math","random","toString","substring","CreateGuid","map","join","CryptoHelper","guidCounter","IConfig","Symbol","for","IFormValidator"],"sourceRoot":""}
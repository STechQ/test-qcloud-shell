"use strict";(this.webpackChunkqcloud_shell=this.webpackChunkqcloud_shell||[]).push([[3813],{82205:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(34663),i=n.n(o),s=n(7638),r=n.n(s)()(i());r.push([e.id,'\n*[data-v-19d8364a]{\n  font-family: "Roboto";\n}\nul[data-v-19d8364a] {\n  list-style-type: none;\n}\n.move-to-target .mdi[data-v-19d8364a] {\n  font-size: 24px;\n  margin-right: 10px;\n}\n',"",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AAyIA;EACE,qBAAqB;AACvB;AACA;EACE,qBAAqB;AACvB;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { ITreeItem, ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IMoveUseCase } from \'../../../../domain/useCase/IMoveUseCase\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n  id: string;\n  name: string;\n  description?: string;\n  type: "module" | "model";\n  prefix?: string;\n  treeItems: Array<ITreeItem>;\n}\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst props = defineProps<IMoveItemInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\n\nlet actions: { path: Array<String>; icon: string; label: string; indent: number; id: String }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet items = viewModel.studio.items;\nconst selectedItem = items.find(item => item.ID == props.id)! as IModel; \n// const moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\nconsole.log("ooops", items)\n\nfunction move(targetFolderPath: Array<String>, targetFolderId: String) {\n  if(isMoveable(targetFolderPath, targetFolderId, selectedItem )) {\n    const moveUseCase = container.resolve<IMoveUseCase>(IMoveUseCase);\n    const updatedPath: Array<String> = [];\n    updatedPath.push(...targetFolderPath, targetFolderId);\n          \n    executor.execute(async () => {\n      const selectedItemId = props.id;\n      let selectedItem = items.find(item => item.ID == selectedItemId)\n      if(selectedItem && selectedItem.objectType == "model") {\n        if(selectedItem.modelType == "placeholder") {\n          moveUseCase.moveFolder(selectedItem, updatedPath, selectedItem.ID);\n        }\n        else {\n          moveUseCase.moveModel(selectedItem, updatedPath, selectedItem.ID);\n        }\n      }\n      else return;\n    }, { loading: true });\n    emit("close");\n\n  }\n  \n}\nfunction isMoveable(targetFolderPath: Array<String>, targetFolderId: String, selectedItem: IModel) {\n  if((selectedItem.path && selectedItem.path[selectedItem.path.length - 1] == targetFolderId) ) {\n    return false;\n  }\n  else if(selectedItem.ID == targetFolderId) {\n    return false;\n  }\n  else if(targetFolderPath.includes(selectedItem.ID)) {\n    return false;\n  }\n  else \n    return true;\n}\nfunction getSortedItems(items: Array<IModel | IModule>) {\n  items.sort((a, b) => {\n    let aPath = a.path ?? [];\n    let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n      return aPath.length - bPath.length;\n    }\n\n    return 0;\n  });\n\n  function getChildren(parentId: string) {\n    return items.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n  }\n\n  function sortItems(parentId: string) {\n    const result: Array<IModel | IModule> = [];\n\n    const directChildren = getChildren(parentId);\n    for (const child of directChildren) {\n      result.push(child);\n      result.push(...sortItems(child.ID));\n    }\n\n    return result;\n  }\n\n  return items.filter(item => item.path ? item.path.length === 0 : true)\n    .reduce<Array<IModel | IModule>>((acc, rootItem) => {\n      acc.push(rootItem);\n      acc.push(...sortItems(rootItem.ID));\n      return acc;\n    }, []);\n}\nconsole.log("ooops1", getSortedItems(items))\nconst sortedItems = getSortedItems(items);\n\nfor (let sortedItem of sortedItems) {\n    if(sortedItem.objectType == "model") {\n      if (sortedItem.modelType == "placeholder") {\n        let indentCalculated = sortedItem.path ? (sortedItem.path.length * 20 + 20) : 20;\n        actions.push({ path: sortedItem.path ?? [], icon: "mdi mdi-folder-open", label: sortedItem.name, indent: indentCalculated, id: sortedItem.ID })\n      }\n    }\n    else if(sortedItem.objectType == "module") {\n      actions.push({ path: sortedItem.path ?? [], icon: "mdi mdi-puzzle", label: sortedItem.name, indent: 20, id: sortedItem.ID })\n    }\n}\n\n<\/script> \n\n<template>\n  <div>\n    <div id="content-area" class="popover__content">\n      <div style="height: 100%" class="errorDiv">\n        <ul style="padding-left: 0px; margin-bottom: 0px; padding-top: 5px; padding-bottom: 10px;">\n          <li v-for="action in actions" :key="action.label" class="move-to-item" :class="isMoveable(action.path, action.id, selectedItem) ? \'\' : \'item-disabled\'" @click="move(action.path, action.id)"\n            :style="{ \'padding-left\': (action.indent + 20) + \'px\' }">\n            <div class="move-to-target">\n              <i :class="action.icon" style="margin-right: 10px;"></i><span>{{ action.label }}</span>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<style scoped>\n*{\n  font-family: "Roboto";\n}\nul {\n  list-style-type: none;\n}\n\n.move-to-target .mdi {\n  font-size: 24px;\n  margin-right: 10px;\n}\n</style>\n\n\n \n\n<style scoped>\n.move-to-target {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n\n.createLi {\n  cursor: pointer;\n}\n\n.move-to-item {\n  padding-top: 1px;\n  padding-right: 20px;\n}\n.move-to-item:not(.item-disabled):hover {\n  background: #D5D5D5;\n}\n.item-disabled {\n  opacity: 0.5;\n}\n</style>'],sourceRoot:""}]);const l=r},24219:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(34663),i=n.n(o),s=n(7638),r=n.n(s)()(i());r.push([e.id,"\n.move-to-target[data-v-19d8364a] {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n.createLi[data-v-19d8364a] {\n  cursor: pointer;\n}\n.move-to-item[data-v-19d8364a] {\n  padding-top: 1px;\n  padding-right: 20px;\n}\n.move-to-item[data-v-19d8364a]:not(.item-disabled):hover {\n  background: #D5D5D5;\n}\n.item-disabled[data-v-19d8364a] {\n  opacity: 0.5;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/moveItem.vue"],names:[],mappings:";AA0JA;EACE,SAAS;EACT,cAAc;EACd,gBAAgB;EAChB,eAAe;EACf,mBAAmB;EACnB,eAAe;EACf,aAAa;EACb,mBAAmB;AACrB;AAEA;EACE,eAAe;AACjB;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,YAAY;AACd",sourcesContent:['<script setup lang="ts">\nimport { container } from \'../../../../domain/core/diContainer\';\nimport { IModel, IModule } from \'../../../../domain/model/models\';\nimport { IMoveItemProps } from \'../../../../domain/presentation/dialogs/IMoveItemProps\';\nimport { ITreeItem, ITreeView } from \'../../../../domain/presentation/ITreeView\';\nimport { IMoveUseCase } from \'../../../../domain/useCase/IMoveUseCase\';\nimport { IUseCaseExecutor } from \'../../../../domain/useCase/IUseCaseExecutor\';\nimport { IViewModel } from \'../../../../domain/viewModel/IViewModel\';\n\ninterface IMoveItemInline extends IMoveItemProps {\n  id: string;\n  name: string;\n  description?: string;\n  type: "module" | "model";\n  prefix?: string;\n  treeItems: Array<ITreeItem>;\n}\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst props = defineProps<IMoveItemInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst emit = defineEmits(["close"]);\n\nlet actions: { path: Array<String>; icon: string; label: string; indent: number; id: String }[] = []\nactions.push({ path: [], icon: "mdi mdi-vector-polyline", label: viewModel.studio.appName, indent: 0, id: viewModel.studio.appId })\nlet items = viewModel.studio.items;\nconst selectedItem = items.find(item => item.ID == props.id)! as IModel; \n// const moduleItems = treeItems.filter(item => item.objectType === "module") as IModule[];\n\nconsole.log("ooops", items)\n\nfunction move(targetFolderPath: Array<String>, targetFolderId: String) {\n  if(isMoveable(targetFolderPath, targetFolderId, selectedItem )) {\n    const moveUseCase = container.resolve<IMoveUseCase>(IMoveUseCase);\n    const updatedPath: Array<String> = [];\n    updatedPath.push(...targetFolderPath, targetFolderId);\n          \n    executor.execute(async () => {\n      const selectedItemId = props.id;\n      let selectedItem = items.find(item => item.ID == selectedItemId)\n      if(selectedItem && selectedItem.objectType == "model") {\n        if(selectedItem.modelType == "placeholder") {\n          moveUseCase.moveFolder(selectedItem, updatedPath, selectedItem.ID);\n        }\n        else {\n          moveUseCase.moveModel(selectedItem, updatedPath, selectedItem.ID);\n        }\n      }\n      else return;\n    }, { loading: true });\n    emit("close");\n\n  }\n  \n}\nfunction isMoveable(targetFolderPath: Array<String>, targetFolderId: String, selectedItem: IModel) {\n  if((selectedItem.path && selectedItem.path[selectedItem.path.length - 1] == targetFolderId) ) {\n    return false;\n  }\n  else if(selectedItem.ID == targetFolderId) {\n    return false;\n  }\n  else if(targetFolderPath.includes(selectedItem.ID)) {\n    return false;\n  }\n  else \n    return true;\n}\nfunction getSortedItems(items: Array<IModel | IModule>) {\n  items.sort((a, b) => {\n    let aPath = a.path ?? [];\n    let bPath = b.path ?? [];\n    if (aPath.length !== bPath.length) {\n      return aPath.length - bPath.length;\n    }\n\n    return 0;\n  });\n\n  function getChildren(parentId: string) {\n    return items.filter(item => (item.path ? item.path[item.path.length - 1] === parentId.toString() : false) || (item.parent ? item.parent.ID == parentId : false));\n  }\n\n  function sortItems(parentId: string) {\n    const result: Array<IModel | IModule> = [];\n\n    const directChildren = getChildren(parentId);\n    for (const child of directChildren) {\n      result.push(child);\n      result.push(...sortItems(child.ID));\n    }\n\n    return result;\n  }\n\n  return items.filter(item => item.path ? item.path.length === 0 : true)\n    .reduce<Array<IModel | IModule>>((acc, rootItem) => {\n      acc.push(rootItem);\n      acc.push(...sortItems(rootItem.ID));\n      return acc;\n    }, []);\n}\nconsole.log("ooops1", getSortedItems(items))\nconst sortedItems = getSortedItems(items);\n\nfor (let sortedItem of sortedItems) {\n    if(sortedItem.objectType == "model") {\n      if (sortedItem.modelType == "placeholder") {\n        let indentCalculated = sortedItem.path ? (sortedItem.path.length * 20 + 20) : 20;\n        actions.push({ path: sortedItem.path ?? [], icon: "mdi mdi-folder-open", label: sortedItem.name, indent: indentCalculated, id: sortedItem.ID })\n      }\n    }\n    else if(sortedItem.objectType == "module") {\n      actions.push({ path: sortedItem.path ?? [], icon: "mdi mdi-puzzle", label: sortedItem.name, indent: 20, id: sortedItem.ID })\n    }\n}\n\n<\/script> \n\n<template>\n  <div>\n    <div id="content-area" class="popover__content">\n      <div style="height: 100%" class="errorDiv">\n        <ul style="padding-left: 0px; margin-bottom: 0px; padding-top: 5px; padding-bottom: 10px;">\n          <li v-for="action in actions" :key="action.label" class="move-to-item" :class="isMoveable(action.path, action.id, selectedItem) ? \'\' : \'item-disabled\'" @click="move(action.path, action.id)"\n            :style="{ \'padding-left\': (action.indent + 20) + \'px\' }">\n            <div class="move-to-target">\n              <i :class="action.icon" style="margin-right: 10px;"></i><span>{{ action.label }}</span>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<style scoped>\n*{\n  font-family: "Roboto";\n}\nul {\n  list-style-type: none;\n}\n\n.move-to-target .mdi {\n  font-size: 24px;\n  margin-right: 10px;\n}\n</style>\n\n\n \n\n<style scoped>\n.move-to-target {\n  margin: 0;\n  color: #151233;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: 0px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n\n.createLi {\n  cursor: pointer;\n}\n\n.move-to-item {\n  padding-top: 1px;\n  padding-right: 20px;\n}\n.move-to-item:not(.item-disabled):hover {\n  background: #D5D5D5;\n}\n.item-disabled {\n  opacity: 0.5;\n}\n</style>'],sourceRoot:""}]);const l=r},3813:(e,t,n)=>{n.r(t),n.d(t,{default:()=>F});var o=n(71093),i=n(73843),s=n(66190),r=n(5627),l=n(64288),a=n(83487),d=n(88613);const m={id:"content-area",class:"popover__content"},p={style:{height:"100%"},class:"errorDiv"},c={style:{"padding-left":"0px","margin-bottom":"0px","padding-top":"5px","padding-bottom":"10px"}},I=["onClick"],u={class:"move-to-target"},h=(0,o.aZ)({__name:"moveItem",props:{id:null,name:null,description:null,type:null,prefix:null,treeItems:null},emits:["close"],setup(e,{emit:t}){var n,h;const g=e,v=r.nC.resolve(a.y),f=r.nC.resolve(d.J);let A=[];A.push({path:[],icon:"mdi mdi-vector-polyline",label:f.studio.appName,indent:0,id:f.studio.appId});let y=f.studio.items;const C=y.find((e=>e.ID==g.id));function b(e,t,n){return!(n.path&&n.path[n.path.length-1]==t||n.ID==t||e.includes(n.ID))}function M(e){function t(n){const o=[],i=function(t){return e.filter((e=>!!e.path&&e.path[e.path.length-1]===t.toString()||!!e.parent&&e.parent.ID==t))}(n);for(const e of i)o.push(e),o.push(...t(e.ID));return o}return e.sort(((e,t)=>{var n,o;let i=null!==(n=e.path)&&void 0!==n?n:[],s=null!==(o=t.path)&&void 0!==o?o:[];return i.length!==s.length?i.length-s.length:0})),e.filter((e=>!e.path||0===e.path.length)).reduce(((e,n)=>(e.push(n),e.push(...t(n.ID)),e)),[])}console.log("ooops",y),console.log("ooops1",M(y));const x=M(y);for(let e of x)if("model"==e.objectType){if("placeholder"==e.modelType){let t=e.path?20*e.path.length+20:20;A.push({path:null!==(n=e.path)&&void 0!==n?n:[],icon:"mdi mdi-folder-open",label:e.name,indent:t,id:e.ID})}}else"module"==e.objectType&&A.push({path:null!==(h=e.path)&&void 0!==h?h:[],icon:"mdi mdi-puzzle",label:e.name,indent:20,id:e.ID});return(e,n)=>((0,o.wg)(),(0,o.iD)("div",null,[(0,o._)("div",m,[(0,o._)("div",p,[(0,o._)("ul",c,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)((0,i.SU)(A),(e=>((0,o.wg)(),(0,o.iD)("li",{key:e.label,class:(0,s.normalizeClass)(["move-to-item",b(e.path,e.id,(0,i.SU)(C))?"":"item-disabled"]),onClick:n=>function(e,n){if(b(e,n,C)){const o=r.nC.resolve(l.E),i=[];i.push(...e,n),v.execute((async()=>{const e=g.id;let t=y.find((t=>t.ID==e));t&&"model"==t.objectType&&("placeholder"==t.modelType?o.moveFolder(t,i,t.ID):o.moveModel(t,i,t.ID))}),{loading:!0}),t("close")}}(e.path,e.id),style:(0,s.normalizeStyle)({"padding-left":e.indent+20+"px"})},[(0,o._)("div",u,[(0,o._)("i",{class:(0,s.normalizeClass)(e.icon),style:{"margin-right":"10px"}},null,2),(0,o._)("span",null,(0,s.toDisplayString)(e.label),1)])],14,I)))),128))])])])]))}});var g=n(17450),v=n.n(g),f=n(29530),A=n.n(f),y=n(16199),C=n.n(y),b=n(40458),M=n.n(b),x=n(62916),D=n.n(x),E=n(92165),P=n.n(E),w=n(82205),S={};S.styleTagTransform=P(),S.setAttributes=M(),S.insert=C().bind(null,"head"),S.domAPI=A(),S.insertStyleElement=D(),v()(w.Z,S),w.Z&&w.Z.locals&&w.Z.locals;var T=n(24219),B={};B.styleTagTransform=P(),B.setAttributes=M(),B.insert=C().bind(null,"head"),B.domAPI=A(),B.insertStyleElement=D(),v()(T.Z,B),T.Z&&T.Z.locals&&T.Z.locals;const F=(0,n(32525).Z)(h,[["__scopeId","data-v-19d8364a"]])}}]);
//# sourceMappingURL=3813.js.map
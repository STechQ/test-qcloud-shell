{"version":3,"file":"1885.js?ver=0.0.300_1708349406276","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/announcementsBar.vue?1e08","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/chatbot.vue?6a4d","webpack://qcloud_shell/./src/images/profile-image-dark-in-menu.svg","webpack://qcloud_shell/./src/common/promiseHelper.ts","webpack://qcloud_shell/./src/domain/core/diContainer.ts","webpack://qcloud_shell/./src/domain/infrastructure/IQCloudApi.ts","webpack://qcloud_shell/./src/domain/presentation/IDialog.ts","webpack://qcloud_shell/./src/domain/presentation/IRouter.ts","webpack://qcloud_shell/./src/domain/useCase/IAnnouncementsUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IAuthenticationUseCase.ts","webpack://qcloud_shell/./src/domain/useCase/IUseCaseExecutor.ts","webpack://qcloud_shell/./src/domain/viewModel/IViewModel.ts","webpack://qcloud_shell/./src/presentation/vue3/components/announcementsBar.vue?8c2a","webpack://qcloud_shell/./src/presentation/vue3/components/announcementsBar.vue?ff39","webpack://qcloud_shell/./src/presentation/vue3/components/announcementsBar.vue","webpack://qcloud_shell/./src/images/chatbot-icon.svg","webpack://qcloud_shell/./src/images/chatbot-icon-active.svg","webpack://qcloud_shell/./src/images/chatbotLoading.svg","webpack://qcloud_shell/./src/images/cleaning.svg","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/chatbot.vue?173f","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/chatbot.vue?4806","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/chatbot.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n*[data-v-4d476e11] {\\n    font-family: 'Roboto';\\n}\\n.announcement-div[data-v-4d476e11] {\\n    padding: 6.5px 20px;\\n    background: #FFECB3;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n}\\n.announcement-icon[data-v-4d476e11] {\\n    color: #E9724C;\\n    font-size: 20px;\\n    margin-right: 12px;\\n}\\n.announcement-text[data-v-4d476e11] {\\n    font-size: 16px;\\n    color: #000000;\\n}\\n.close-icon[data-v-4d476e11] {\\n    color: #373737;\\n    font-size: 24px;\\n    margin-left: auto;\\n    cursor: pointer\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/announcementsBar.vue\"],\"names\":[],\"mappings\":\";AAiCA;IACI,qBAAqB;AACzB;AAEA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,WAAW;IACX,aAAa;IACb,mBAAmB;AACvB;AAEA;IACI,cAAc;IACd,eAAe;IACf,kBAAkB;AACtB;AAEA;IACI,eAAe;IACf,cAAc;AAClB;AAEA;IACI,cAAc;IACd,eAAe;IACf,iBAAiB;IACjB;AACJ\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\">\\nimport { computed, onMounted } from \\\"vue\\\";\\nimport { container } from \\\"../../../domain/core/diContainer\\\";\\nimport { IViewModel } from \\\"../../../domain/viewModel/IViewModel\\\";\\nimport { IUseCaseExecutor } from \\\"../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IAnnouncementsUseCase } from \\\"../../../domain/useCase/IAnnouncementsUseCase\\\";\\n\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst announcementsUseCase = container.resolve<IAnnouncementsUseCase>(IAnnouncementsUseCase);\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst headerBarAnnouncements = computed(() => { return viewModel.announcements.filter(i => i.displayType == \\\"headerBar\\\"); });\\n\\nonMounted(async () => {\\n    await executor.execute(async () => {\\n        await announcementsUseCase.displayAnnouncementsIfAvailable();\\n    }, { loading: false });\\n});\\n\\n\\n</script>\\n<template>\\n    <div v-for=\\\"ann in headerBarAnnouncements\\\">\\n        <div v-if=\\\"!ann.isRead\\\" class=\\\"announcement-div\\\">\\n            <i class=\\\"mdi mdi-wrench-clock announcement-icon\\\"></i>\\n            <span class=\\\"announcement-text\\\">{{ ann.text }}</span>\\n            <i class=\\\"mdi mdi-close close-icon\\\" @click=\\\"ann.isRead = true\\\"></i>\\n        </div>\\n    </div>\\n</template>\\n\\n\\n\\n<style scoped>\\n* {\\n    font-family: 'Roboto';\\n}\\n\\n.announcement-div {\\n    padding: 6.5px 20px;\\n    background: #FFECB3;\\n    width: 100%;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.announcement-icon {\\n    color: #E9724C;\\n    font-size: 20px;\\n    margin-right: 12px;\\n}\\n\\n.announcement-text {\\n    font-size: 16px;\\n    color: #000000;\\n}\\n\\n.close-icon {\\n    color: #373737;\\n    font-size: 24px;\\n    margin-left: auto;\\n    cursor: pointer\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.resize-overlay[data-v-372a0576] {\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100vh;\\n        background: transparent;\\n        cursor: nesw-resize;\\n        z-index: 9999;\\n}\\n.chatbot-icon-container[data-v-372a0576] {\\n        width: 40px;\\n        height: 40px;\\n        border-radius: 50%;\\n        border: none;\\n        display: flex;\\n        justify-content: center;\\n        margin-right: 12px;\\n        align-items: center;\\n}\\n.chat-icons[data-v-372a0576] {\\n        font-size: 22px;\\n        margin-right: 6px;\\n}\\n.chat-messages[data-v-372a0576] {\\n        overflow-y: auto;\\n        width: 100%;\\n        margin-bottom: 12px;\\n}\\n.chat-reset-icon[data-v-372a0576] {\\n        width: 30px;\\n        height: 30px;\\n        margin-right: 3px;\\n}\\n.chatbot-container[data-v-372a0576] {\\n        /* position: absolute;\\n        bottom: 30px;\\n        right: 50px;\\n        z-index: 9998; */\\n}\\n.chatbot-icon[data-v-372a0576], \\n    .chatbot-icon-active[data-v-372a0576] {\\n        font-size: 24px;\\n        cursor: pointer;\\n        color: #eeeeee;\\n}\\n.chatbot-message .chat-icons[data-v-372a0576] {\\n        color: #151233;\\n}\\n.chatbot-message .message-content[data-v-372a0576] {\\n        background-color: #eeeeee;\\n        padding: 20px 25px 20px 25px;\\n        position: relative;\\n        border-radius: 15px;\\n        text-align: start;\\n}\\n.chatbot-resize-icon[data-v-372a0576] {\\n        font-size: 24px;\\n        transform: rotate(90deg);\\n        margin-left: 6px;\\n        position: absolute;\\n        bottom: 0;\\n        left: 0;\\n}\\n.chatbot-resize-icon[data-v-372a0576]:hover {\\n        cursor: nesw-resize;\\n}\\n.feedback-box[data-v-372a0576] {\\n        display: flex;\\n        background-color: #f0f0f0;\\n        border-radius: 10px;\\n        padding: 6px;\\n        transition: opacity 0.3s;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n        justify-content: center;\\n        align-items: center;\\n}\\n.feedback-button[data-v-372a0576] {\\n        border: none;\\n        background-color: transparent;\\n        font-size: 14px;\\n        cursor: pointer;\\n        margin-right: 5px;\\n}\\n.feedback-button[data-v-372a0576]:hover {\\n        background-color: #e3e3e3;\\n        border-radius: 6px;\\n}\\n.feedback-container[data-v-372a0576] {\\n        position: absolute;\\n        bottom: -27px;\\n        right: 14px;\\n        display: flex;\\n        align-items: center;\\n}\\n.follow-up-questions[data-v-372a0576] {\\n        display: flex;\\n        justify-content: end;\\n        flex-wrap: wrap;\\n        margin-top: 10px;\\n}\\n.icon-group[data-v-372a0576] {\\n        display: flex;\\n        justify-content: flex-end;\\n}\\n.input-area-container[data-v-372a0576] {\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n}\\n.input-field-with-limit[data-v-372a0576] {\\n        position: relative;\\n        display: flex;\\n        align-items: center;\\n}\\n.input-field-container[data-v-372a0576] {\\n        width: 100%;\\n        border-radius: 8px;\\n        background-color: #eeeeee;\\n        border: 1px solid #ccc;\\n}\\n.input-bottom[data-v-372a0576] {\\n        display: flex;\\n        align-items: center;\\n        justify-content: end;\\n        height: 20px;\\n}\\n.input-field[data-v-372a0576] {\\n        box-sizing: border-box;\\n        padding: 5px 6px 22px 10px;\\n        border-radius: 8px;\\n        background-color: #eeeeee;\\n        border: none;\\n        outline: none;\\n        width: 100%;\\n        height: auto;\\n        min-height: 80px;\\n        font-size: 14px;\\n        resize: none; \\n        word-wrap: break-word;\\n}\\n.input-field[data-v-372a0576]::-webkit-resizer {\\n       display: none;\\n}\\n.character-limit[data-v-372a0576] {\\n        font-size: 13px;\\n        color: #777;\\n        padding-bottom: 6px;\\n        width: 100px; \\n        text-align: right;\\n}\\n.send-icon[data-v-372a0576] {\\n        margin: 0px 5px 5px 5px;\\n        cursor: pointer;\\n        color: #777;\\n        font-size: 25px;\\n}\\n.send-icon[data-v-372a0576]:hover {\\n        color: #989AC1;\\n}\\n.link-button[data-v-372a0576] {\\n        display: inline-block;\\n        margin-right: 8px;\\n        margin-bottom: 8px;\\n        padding: 6px 12px;\\n        overflow: hidden;\\n        background-color: #989AC1;\\n        color: #FFFFFF;\\n        border-radius: 4px;\\n        text-decoration: none;\\n        cursor: pointer;\\n}\\n.loading-image[data-v-372a0576] {\\n        width: 50px;\\n        height: 50px;\\n}\\n.loading-text[data-v-372a0576] {\\n        color: #ccc;\\n        font-size: 12px;\\n}\\n.markdown-content[data-v-372a0576] {\\n        font-family: Segoe WPC,Segoe UI,sans-serif;\\n        font-size: 15px;\\n}\\n.menu-buttons[data-v-372a0576] {\\n        width: 20px;\\n        height: 20px;\\n        cursor: pointer;\\n        border: none;\\n        background: transparent;\\n        font-size: 20px;\\n        outline: none;\\n        margin-bottom: 15px;\\n        margin-right: 12px;\\n}\\n.menu-icons[data-v-372a0576]:hover {\\n        color: #9f2601;\\n}\\n.message-content[data-v-372a0576] {\\n        display: inline-block;\\n        border-radius: 15px;\\n        max-width: 80%;\\n        min-width: 10%;\\n        margin-bottom: 30px;\\n        word-wrap: break-word;\\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\\n}\\n.message-links[data-v-372a0576] {\\n        display: flex;\\n        flex-wrap: wrap;\\n        margin-top: 40px;\\n        width: 100%;\\n}\\n.message-loading[data-v-372a0576] {\\n        width: 100%;\\n        height: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: center;\\n}\\n.question-button[data-v-372a0576] {\\n        background-color: white;\\n        color: #4F537B;\\n        border: 1px solid #4F537B;\\n        padding: 6px 12px;\\n        font-size: 14px;\\n        border-radius: 5px;\\n        margin: 5px;\\n        cursor: pointer;\\n        font-family: Segoe WPC,Segoe UI,sans-serif;\\n}\\n.question-button[data-v-372a0576]:hover {\\n        background-color: #989AC1;\\n        color: white;\\n}\\n.reset-button[data-v-372a0576] {\\n        cursor: pointer;\\n        border-radius: 50%;\\n        border: none;\\n        background-color: #4F537B;\\n        font-size: 20px;\\n        outline: none;\\n        margin-right: 10px;\\n        padding: 5px;\\n}\\n.reset-button[data-v-372a0576]:hover {\\n        background-color: #151233;\\n}\\n.response-text[data-v-372a0576] {\\n        font-family: Segoe WPC, Segoe UI, sans-serif;\\n        font-size: 15px;\\n}\\n.top-menu[data-v-372a0576] {\\n        display: flex;\\n        justify-content: end;\\n        align-items: center;\\n        width: 100%;\\n}\\n.user-message .chat-icons[data-v-372a0576] {\\n        color: white;\\n}\\n.user-message .message-content[data-v-372a0576] {\\n        background-color: #4F537B;\\n        color: white;\\n        padding: 12px;\\n        border-radius: 15px;\\n        position: relative;\\n        font-family: Segoe WPC, Segoe UI, sans-serif;\\n}\\n.user-message[data-v-372a0576] {\\n        display: flex;\\n        justify-content: flex-end;\\n        margin-top: 12px;\\n        margin-bottom: 12px;\\n}\\n.chat-window-container[data-v-372a0576] {\\n        position: fixed;\\n        right: 120px;\\n        width: 500px;\\n        height: 700px;\\n        z-index: 9998;\\n        border-radius: 5px;\\n        background-color: white;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n        margin-top: 10px;\\n}\\n.chat-window[data-v-372a0576] {\\n        height: calc(100% - 44px);\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: space-between;\\n        padding: 20px 20px 6px 20px;\\n}\\n.chatbot-message[data-v-372a0576] {\\n        display: flex;\\n        align-items: end;\\n}\\n.icon-group[data-v-372a0576] {\\n        display: flex;\\n        justify-content: flex-end;\\n}\\n.input-field-container[data-v-372a0576] {\\n        width: 100%;\\n}\\n.message-links[data-v-372a0576] {\\n        display: flex;\\n        flex-wrap: wrap;\\n        margin-top: 40px;\\n        width: 100%;\\n}\\n.message-content[data-v-372a0576] {\\n        display: inline-block;\\n        border-radius: 15px;\\n        max-width: 80%;\\n        min-width: 10%;\\n        margin-bottom: 30px;\\n        word-wrap: break-word;\\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\\n}\\n.copy-box[data-v-372a0576] {\\n        position: absolute;\\n        top: -30px;\\n        right: 1px;\\n        display: flex;\\n        background-color: #f0f0f0;\\n        border-radius: 10px;\\n        padding: 6px;\\n        transition: opacity 0.3s;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n        justify-content: center;\\n        align-items: center;\\n}\\n.copy-button[data-v-372a0576] {\\n        border: none;\\n        background-color: transparent;\\n        outline: none;\\n}\\n.copy-box[data-v-372a0576]:hover {\\n        background-color: #e3e3e3;\\n}\\n\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/chatbot.vue\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"chatbot-container\\\">\\n        <div v-if=\\\"resizingOverlay\\\" class=\\\"resize-overlay\\\"></div>\\n        <button @click=\\\"toggleChat\\\" class=\\\"chatbot-icon-container\\\" :style=\\\"{background: showChat ? '#151233' : '#EEEEEE'}\\\">\\n            <img v-if=\\\"!showChat\\\" class=\\\"chatbot-icon\\\" src=\\\"../../../../images/chatbot-icon.svg\\\"/>\\n            <img v-else class=\\\"chatbot-icon-active\\\" src=\\\"../../../../images/chatbot-icon-active.svg\\\"/>\\n        </button>\\n        <div v-if=\\\"showChat\\\" class=\\\"chat-window-container\\\" ref=\\\"chatWindowContainerRef\\\">\\n            <div class=\\\"top-menu\\\">\\n                <!-- <i class=\\\"mdi mdi-resize-bottom-right chatbot-resize-icon\\\" @mousedown=\\\"startResize\\\"></i> -->\\n                <div class=\\\"icon-group\\\">\\n                    <button class=\\\"menu-buttons\\\" @click=\\\"toggleChat\\\"><i class=\\\"mdi mdi-window-close menu-icons\\\"></i></button>\\n                </div>\\n            </div>\\n            <div class=\\\"chat-window\\\">\\n                <div class=\\\"chat-messages\\\" ref=\\\"chatWindowRef\\\">\\n                    <div v-for=\\\"message in chatMessages\\\" :key=\\\"message.id\\\" :class=\\\"getMessageClass(message)\\\">\\n                        <!-- <i v-if=\\\"isChatbotResponse(message) && !isLoadingChatbotResponse(message)\\\" class=\\\"mdi mdi-robot-happy-outline chat-icons\\\"></i> -->\\n                        <div class=\\\"message-content\\\" @mouseenter=\\\"handleMouseEnter(message)\\\" @mouseleave=\\\"handleMouseLeave(message)\\\">\\n                            <!-- <i v-if=\\\"isChatbotResponse(message) && !isLoadingChatbotResponse(message)\\\" class=\\\"mdi mdi-robot-happy-outline chat-icons\\\"></i>\\n                            <i v-if=\\\"!isChatbotResponse(message)\\\" class=\\\"mdi mdi-account-circle chat-icons\\\"></i> -->\\n                            <div v-if=\\\"isChatbotResponse(message)\\\" :key=\\\"message.id\\\" class=\\\"markdown-content response-text\\\" v-html=\\\"convertToMarkdown(message.content)\\\"></div>\\n                            <div v-else> {{ message.content }} </div>\\n                            <div v-if=\\\"message.id === 0 && isChatbotResponse(message)\\\">\\n                                <hr style=\\\"margin: 20px 0; border-color: #ccc;\\\">\\n                                <div class=\\\"follow-up-questions\\\">\\n                                    <button\\n                                        v-for=\\\"(question, index) in selectedQuestions\\\"\\n                                        :key=\\\"index\\\"\\n                                        @click=\\\"handleQuestionClick(question)\\\"\\n                                        class=\\\"question-button\\\"\\n                                    >\\n                                        {{ question }}\\n                                    </button>\\n                                </div>\\n                            </div>\\n                            <div v-if=\\\"isChatbotResponse(message) && loadingStates[message.id]\\\" class=\\\"message-loading\\\">\\n                                <img class=\\\"loading-image\\\" src=\\\"../../../../images/chatbotLoading.svg\\\" alt=\\\"studio-logo\\\" />\\n                                <p class=\\\"loading-text\\\">Searching documentation. This may take a second!</p>\\n                            </div>\\n                            <div v-if=\\\"isChatbotResponse(message) && message.links\\\" class=\\\"message-links\\\">\\n                                <div style=\\\"width: 100%;\\\">\\n                                    <p class=\\\"response-text\\\">View More About:</p>\\n                                </div>\\n                                <a v-for=\\\"(link, index) in message.links\\\" :key=\\\"index\\\" :href=\\\"link.linkUrl\\\" target=\\\"_blank\\\" class=\\\"link-button response-text\\\"><i class=\\\"mdi mdi-link-variant chat-icons\\\" style=\\\"margin-right: 5px; color: white; font-size: 18px;\\\"></i>{{ link.pageName }}</a>\\n                            </div>\\n                            <div v-if=\\\"isChatbotResponse(message) && message.followUpQuestions && message.followUpQuestions.length > 0\\\">\\n                                <hr style=\\\"margin: 20px 0; border-color: #ccc;\\\">\\n                                <div class=\\\"follow-up-questions\\\">\\n                                    <button\\n                                        v-for=\\\"question in message.followUpQuestions\\\"\\n                                        :key=\\\"question\\\"\\n                                        @click=\\\"handleQuestionClick(question)\\\"\\n                                        class=\\\"question-button\\\"\\n                                    >\\n                                        {{ question }}\\n                                    </button>\\n                                </div>\\n                            </div>\\n                            <div v-if=\\\"isChatbotResponse(message) && message.showFeedBack && !isLoadingChatbotResponse(message)\\\" class=\\\"feedback-container\\\">\\n                                <div class=\\\"feedback-box\\\">\\n                                    <button class=\\\"feedback-button\\\" @click=\\\"submitFeedback(true)\\\"><i class=\\\"mdi mdi-thumb-up\\\"></i></button>\\n                                    <div style=\\\"background-color: #c1c1c1; width: 1px; height: 16px; margin-right: 6px;\\\"></div>\\n                                    <button class=\\\"feedback-button\\\" @click=\\\"submitFeedback(false)\\\"><i class=\\\"mdi mdi-thumb-down\\\"></i></button>\\n                                </div>\\n                            </div>\\n                            <div v-if=\\\"!isChatbotResponse(message) && !isLoadingChatbotResponse(message) && showCopyBox === message.id\\\" @click=\\\"copyToClipboard(message.content)\\\" class=\\\"copy-box\\\">\\n                                    <button class=\\\"copy-button\\\" @click=\\\"submitFeedback(true)\\\"><i class=\\\"mdi mdi-content-copy\\\"></i></button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"input-area-container\\\">\\n                    <button class=\\\"reset-button\\\" @click=\\\"clearChat\\\"><img class=\\\"chat-reset-icon\\\" src=\\\"../../../../images/cleaning.svg\\\" alt=\\\"reset-chat\\\" /></button>\\n                    <div class=\\\"input-field-container\\\">\\n                        <textarea\\n                            v-model=\\\"newMessage\\\"\\n                            @keyup.enter=\\\"sendMessage\\\"\\n                            type=\\\"text\\\"\\n                            placeholder=\\\"Ask me about Plateau Studio...\\\"\\n                            class=\\\"input-field\\\"\\n                            :maxlength=\\\"1000\\\"\\n                            rows=\\\"1\\\"\\n                            :disabled=\\\"isChatbotResponding\\\"\\n                        />\\n                        <div class=\\\"input-bottom\\\">\\n                            <div class=\\\"character-limit\\\">{{ newMessage.length }}/1000</div>\\n                            <i class=\\\"mdi mdi-send send-icon\\\" @click=\\\"sendMessage\\\"></i>\\n                        </div>\\n                    </div>\\n                </div>\\n                <i class=\\\"mdi mdi-resize-bottom-right chatbot-resize-icon\\\" @mousedown=\\\"startResize\\\"></i>\\n            </div>\\n        </div>\\n    </div>\\n\\n</template>\\n  \\n<script setup lang=\\\"ts\\\">\\nimport { ref, onMounted, reactive, nextTick } from \\\"vue\\\";\\nimport { container } from \\\"../../../../domain/core/diContainer\\\";\\nimport { IViewModel } from \\\"../../../../domain/viewModel/IViewModel\\\";\\nimport MarkdownIt from \\\"markdown-it\\\";\\nimport { IQCloudApi } from \\\"../../../../domain/infrastructure/IQCloudApi\\\";\\n\\n\\n    const viewModel = container.resolve<IViewModel>(IViewModel);\\n    const qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\\n    const user = viewModel.user!;\\n    const chatWindowRef = ref<HTMLElement | null>(null);\\n    const chatWindowContainerRef = ref<HTMLElement | null>(null);\\n    const placeholder = ref(\\\"\\\");\\n    const showChat = ref(false);\\n    const newMessage = ref(\\\"\\\");\\n    const showFeedBackBox = ref(false);\\n    const selectedQuestions: Array<string> = [];\\n    const resizingOverlay = ref(false);\\n    const showCopyBox = ref<number | null>(null);\\n    const isChatbotResponding = ref(false);\\n\\n\\n    const placeholderQuestions: Array<string> = [\\n        \\\"How can I route to another page?\\\",\\n        \\\"How can I export my project?\\\",\\n        \\\"What is Live Preview and Publish used for in Studio?\\\",\\n    ];  \\n\\n    const selectRandomQuestions = () => {\\n        selectedQuestions.length = 0;\\n        const shuffledQuestions = placeholderQuestions.slice();\\n        for (let i = 0; i < 3; i++) {\\n            const randomIndex = Math.floor(Math.random() * shuffledQuestions.length);\\n            selectedQuestions.push(shuffledQuestions.splice(randomIndex, 1)[0]);\\n        }\\n    };\\n\\n    //If followUpQuestions has < 3 elements, it will display all otherwise it will randomly select 3 elements\\n    const getRandomFollowUpQuestions = (questionsArray: Array<string>, count: number) => {\\n        const shuffledQuestions = questionsArray.slice();\\n        for (let i = shuffledQuestions.length - 1; i > 0; i--) {\\n            const j = Math.floor(Math.random() * (i + 1));\\n            [shuffledQuestions[i], shuffledQuestions[j]] = [shuffledQuestions[j], shuffledQuestions[i]]; \\n        }\\n        return shuffledQuestions.slice(0, Math.min(count, shuffledQuestions.length)); \\n    };\\n\\n    \\n    let loadingStates: Record<number, boolean> = {};\\n\\n    const ROLE_USER = \\\"USER\\\";\\n    const ROLE_AI = \\\"AI\\\";\\n    type Role = \\\"USER\\\" | \\\"AI\\\";\\n\\n    interface ChatMessage {\\n        id: number,\\n        content: string,\\n        role: Role,\\n        links?: Array<{ pageName: string, linkUrl:string }>,\\n        showFeedBack: boolean,\\n        followUpQuestions?: Array<string>,\\n    }\\n\\n    interface ChatMessagesArray extends Array<ChatMessage> {};\\n\\n\\n    const chatMessages: ChatMessagesArray  = reactive([\\n        { id: 0, content: `Hey ${user.name}! What's on your mind?`, role: ROLE_AI, showFeedBack: false },\\n    ]);\\n\\n\\n    onMounted(() => {\\n        scrollToBottom();\\n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\\n        placeholder.value = randomQuestion;\\n        selectRandomQuestions();\\n    });\\n\\n    const scrollToBottom = () => {\\n        const chatWindow = chatWindowRef.value;\\n        if (chatWindow) {\\n            chatWindow.scrollTop = chatWindow.scrollHeight - chatWindow.clientHeight;\\n        }\\n    };\\n\\n\\n    const toggleChat = () => {\\n        showChat.value = !showChat.value;\\n    };\\n\\n    const handleQuestionClick = (question: string) => {\\n        newMessage.value = question;\\n        sendMessage();\\n    };\\n\\n    const sendMessage = async () => {\\n\\n        if (newMessage.value.trim() === \\\"\\\") return;\\n         \\n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\\n        placeholder.value = randomQuestion;\\n\\n        const userQuestion: ChatMessage = {\\n            id: chatMessages.length + 1,\\n            content: newMessage.value,\\n            role: ROLE_USER,\\n            showFeedBack: false\\n        };\\n\\n        chatMessages.push(userQuestion);\\n        let chatHistory = [...chatMessages]; \\n        newMessage.value = \\\"\\\";\\n\\n        let newId = chatMessages.length + 1;\\n        const chatbotResponse: ChatMessage = {\\n            id: newId,\\n            content: \\\"\\\",\\n            role: ROLE_AI, \\n            showFeedBack: false\\n        };\\n        chatMessages.push(chatbotResponse);\\n\\n        loadingStates[chatbotResponse.id] = true;\\n\\n        nextTick(() => {\\n            scrollToBottom();\\n        });\\n        \\n        isChatbotResponding.value = true;\\n        const question = userQuestion.content;\\n        let response = await qcloudApi.getchatbotresponse(question, chatHistory);\\n        \\n        let chatBotResponse = response ? response.responseText : \\\"Unable to answer your question at this time. Try to ask again!\\\";\\n        \\n        let lastMessage = chatMessages.find(msg => msg.id === newId);\\n        lastMessage!.content = chatBotResponse;\\n        loadingStates[chatbotResponse.id] = false;\\n\\n        let verifiedUrls: Array<string> = response?.verifiedUrls;\\n        if (verifiedUrls && verifiedUrls.length > 0) {\\n            let finalUrlObj = verifiedUrls.map(url => {\\n                let docName = url?.substring(url.lastIndexOf(\\\"/\\\") + 1).replace(/-/g,\\\" \\\");\\n                let modifiedDocName = docName?.replace(/\\\\b\\\\w/g, l => l.toUpperCase());\\n                return {pageName: modifiedDocName, linkUrl: url};\\n            });\\n            chatbotResponse.links = finalUrlObj;\\n        }\\n\\n        let followUpQuestions: Array<string> = response.followUpQuestions; \\n        if (followUpQuestions && followUpQuestions.length > 0) { \\n            chatbotResponse.followUpQuestions = getRandomFollowUpQuestions(followUpQuestions, 3); \\n        }\\n        isChatbotResponding.value = false;\\n        \\n        nextTick(() => {\\n            scrollToBottom();\\n        });\\n\\n    };\\n\\n    const isChatbotResponse = (message: ChatMessage) => {\\n        return message.role === ROLE_AI;\\n    };\\n\\n    const clearChat = () => {\\n        chatMessages.splice(1, chatMessages.length);\\n    };\\n\\n    let resizing = false;\\n    let initialX = 0;\\n    let initialY = 0;\\n    let initialWidth = 900;\\n    let initialHeight = 700;\\n\\n    const startResize = (event: MouseEvent) => {\\n        resizingOverlay.value = true;\\n        event.stopPropagation();\\n        event.preventDefault();\\n        resizing = true;\\n        initialX = event.clientX;\\n        initialY = event.clientY;\\n        initialWidth = chatWindowContainerRef.value?.offsetWidth || 0;\\n        initialHeight = chatWindowContainerRef.value?.offsetHeight || 0;\\n        document.body.style.cursor = \\\"nesw-resize\\\";\\n        document.body.style.userSelect = \\\"none\\\";\\n        document.addEventListener(\\\"mousemove\\\", handleResize);\\n        document.addEventListener(\\\"mouseup\\\", stopResize);\\n    };\\n\\n    const handleResize = (event: MouseEvent) => {\\n        if (resizing) {\\n            event.stopPropagation();\\n            event.preventDefault();\\n            const newWidth = initialWidth + (initialX - event.clientX );\\n            const newHeight = initialHeight + (event.clientY - initialY);\\n            const chatWindow = chatWindowContainerRef.value;\\n            if (chatWindow) {\\n                chatWindow.style.width = `${Math.max(500, newWidth)}px`;\\n                chatWindow.style.height = `${Math.max(700, newHeight)}px`;\\n                const feedbackIconsVisible = chatMessages.some(message => isChatbotResponse(message) && message.showFeedBack);\\n                if (!feedbackIconsVisible) {\\n                    scrollToBottom();\\n                }\\n            }\\n        }\\n    };\\n\\n    const stopResize = () => {\\n        resizingOverlay.value = false;\\n        resizing = false;\\n        document.body.style.cursor = \\\"auto\\\";\\n        document.body.style.userSelect = \\\"auto\\\";\\n        document.removeEventListener(\\\"mousemove\\\", handleResize);\\n        document.removeEventListener(\\\"mouseup\\\", stopResize);\\n    };\\n\\n\\n    const isLoadingChatbotResponse = (message: ChatMessage) => {\\n        return isChatbotResponse(message) && loadingStates[message.id];\\n    };\\n\\n    const getMessageClass = (message: ChatMessage) => {\\n        return message.role === ROLE_USER ? 'user-message' : 'chatbot-message';\\n    };\\n\\n    \\n    const markdown = new MarkdownIt({\\n        html: true,\\n        linkify: true,\\n        typographer: true\\n    });\\n    const convertToMarkdown = (markdownText: string) => {\\n        let markdownResponse = markdown.render(markdownText);\\n        markdownResponse = markdownResponse.replace(/<code>/g, \\\"<code style='color:#ee4f54; font-weight: bold;'>\\\");\\n        return markdownResponse;\\n    };\\n\\n\\n    const submitFeedback = (isPositive: boolean) => {\\n        // Logic to handle feedback submission\\n        showFeedBackBox.value = false;\\n    };\\n\\n    const handleMouseEnter = (message: ChatMessage) => {\\n        if (isChatbotResponse(message)) {\\n            message.showFeedBack = true;\\n            return;\\n        }\\n        showCopyBox.value = message.id;;\\n    };\\n\\n    const handleMouseLeave = (message: ChatMessage) => {\\n        if (isChatbotResponse(message)) {\\n            message.showFeedBack = false;\\n            return;\\n        }\\n        showCopyBox.value = null;\\n    };\\n\\n    const copyToClipboard = (text: string) => { \\n        navigator.clipboard.writeText(text);\\n        showCopyBox.value = null;\\n    }\\n\\n</script>\\n\\n\\n<style scoped>\\n    .resize-overlay {\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100vh;\\n        background: transparent;\\n        cursor: nesw-resize;\\n        z-index: 9999;\\n    }\\n\\n    .chatbot-icon-container {\\n        width: 40px;\\n        height: 40px;\\n        border-radius: 50%;\\n        border: none;\\n        display: flex;\\n        justify-content: center;\\n        margin-right: 12px;\\n        align-items: center;\\n    }\\n\\n    .chat-icons {\\n        font-size: 22px;\\n        margin-right: 6px;\\n    }\\n\\n    .chat-messages {\\n        overflow-y: auto;\\n        width: 100%;\\n        margin-bottom: 12px;\\n    }\\n\\n    .chat-reset-icon {\\n        width: 30px;\\n        height: 30px;\\n        margin-right: 3px;\\n    }\\n\\n    .chatbot-container {\\n        /* position: absolute;\\n        bottom: 30px;\\n        right: 50px;\\n        z-index: 9998; */\\n    }\\n\\n    .chatbot-icon, \\n    .chatbot-icon-active {\\n        font-size: 24px;\\n        cursor: pointer;\\n        color: #eeeeee;\\n    }\\n\\n    .chatbot-message .chat-icons {\\n        color: #151233;\\n    }\\n\\n    .chatbot-message .message-content {\\n        background-color: #eeeeee;\\n        padding: 20px 25px 20px 25px;\\n        position: relative;\\n        border-radius: 15px;\\n        text-align: start;\\n    }\\n\\n    .chatbot-resize-icon {\\n        font-size: 24px;\\n        transform: rotate(90deg);\\n        margin-left: 6px;\\n        position: absolute;\\n        bottom: 0;\\n        left: 0;\\n    }\\n\\n    .chatbot-resize-icon:hover {\\n        cursor: nesw-resize;\\n    }\\n\\n    .feedback-box {\\n        display: flex;\\n        background-color: #f0f0f0;\\n        border-radius: 10px;\\n        padding: 6px;\\n        transition: opacity 0.3s;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    .feedback-button {\\n        border: none;\\n        background-color: transparent;\\n        font-size: 14px;\\n        cursor: pointer;\\n        margin-right: 5px;\\n    }\\n\\n    .feedback-button:hover {\\n        background-color: #e3e3e3;\\n        border-radius: 6px;\\n    }\\n\\n    .feedback-container {\\n        position: absolute;\\n        bottom: -27px;\\n        right: 14px;\\n        display: flex;\\n        align-items: center;\\n    }\\n\\n    .follow-up-questions {\\n        display: flex;\\n        justify-content: end;\\n        flex-wrap: wrap;\\n        margin-top: 10px;\\n    }\\n\\n    .icon-group {\\n        display: flex;\\n        justify-content: flex-end;\\n    }\\n\\n    .input-area-container {\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    .input-field-with-limit {\\n        position: relative;\\n        display: flex;\\n        align-items: center;\\n    }\\n\\n\\n    .input-field-container {\\n        width: 100%;\\n        border-radius: 8px;\\n        background-color: #eeeeee;\\n        border: 1px solid #ccc;\\n    }\\n\\n    .input-bottom {\\n        display: flex;\\n        align-items: center;\\n        justify-content: end;\\n        height: 20px;\\n    }\\n\\n    .input-field {\\n        box-sizing: border-box;\\n        padding: 5px 6px 22px 10px;\\n        border-radius: 8px;\\n        background-color: #eeeeee;\\n        border: none;\\n        outline: none;\\n        width: 100%;\\n        height: auto;\\n        min-height: 80px;\\n        font-size: 14px;\\n        resize: none; \\n        word-wrap: break-word; \\n    }\\n\\n    .input-field::-webkit-resizer {\\n       display: none;\\n    }\\n\\n    .character-limit {\\n        font-size: 13px;\\n        color: #777;\\n        padding-bottom: 6px;\\n        width: 100px; \\n        text-align: right;\\n    }\\n\\n    .send-icon {\\n        margin: 0px 5px 5px 5px;\\n        cursor: pointer;\\n        color: #777;\\n        font-size: 25px;\\n    }\\n\\n    .send-icon:hover {\\n        color: #989AC1;\\n    }\\n\\n    .link-button {\\n        display: inline-block;\\n        margin-right: 8px;\\n        margin-bottom: 8px;\\n        padding: 6px 12px;\\n        overflow: hidden;\\n        background-color: #989AC1;\\n        color: #FFFFFF;\\n        border-radius: 4px;\\n        text-decoration: none;\\n        cursor: pointer;\\n    }\\n\\n    .loading-image {\\n        width: 50px;\\n        height: 50px;\\n    }\\n\\n    .loading-text {\\n        color: #ccc;\\n        font-size: 12px;\\n    }\\n\\n    .markdown-content {\\n        font-family: Segoe WPC,Segoe UI,sans-serif;\\n        font-size: 15px;\\n    }\\n\\n    .menu-buttons {\\n        width: 20px;\\n        height: 20px;\\n        cursor: pointer;\\n        border: none;\\n        background: transparent;\\n        font-size: 20px;\\n        outline: none;\\n        margin-bottom: 15px;\\n        margin-right: 12px;\\n    }\\n\\n    .menu-icons:hover {\\n        color: #9f2601;\\n    }\\n\\n    .message-content {\\n        display: inline-block;\\n        border-radius: 15px;\\n        max-width: 80%;\\n        min-width: 10%;\\n        margin-bottom: 30px;\\n        word-wrap: break-word;\\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\\n    }\\n\\n    .message-links {\\n        display: flex;\\n        flex-wrap: wrap;\\n        margin-top: 40px;\\n        width: 100%;\\n    }\\n\\n    .message-loading {\\n        width: 100%;\\n        height: 100%;\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    .question-button {\\n        background-color: white;\\n        color: #4F537B;\\n        border: 1px solid #4F537B;\\n        padding: 6px 12px;\\n        font-size: 14px;\\n        border-radius: 5px;\\n        margin: 5px;\\n        cursor: pointer;\\n        font-family: Segoe WPC,Segoe UI,sans-serif;\\n    }\\n\\n    .question-button:hover {\\n        background-color: #989AC1;\\n        color: white;\\n    }\\n\\n    .reset-button {\\n        cursor: pointer;\\n        border-radius: 50%;\\n        border: none;\\n        background-color: #4F537B;\\n        font-size: 20px;\\n        outline: none;\\n        margin-right: 10px;\\n        padding: 5px;\\n    }\\n\\n    .reset-button:hover {\\n        background-color: #151233;\\n    }\\n\\n    .response-text {\\n        font-family: Segoe WPC, Segoe UI, sans-serif;\\n        font-size: 15px;\\n    }\\n\\n    .top-menu {\\n        display: flex;\\n        justify-content: end;\\n        align-items: center;\\n        width: 100%;\\n    }\\n\\n    .user-message .chat-icons {\\n        color: white;\\n    }\\n\\n    .user-message .message-content {\\n        background-color: #4F537B;\\n        color: white;\\n        padding: 12px;\\n        border-radius: 15px;\\n        position: relative;\\n        font-family: Segoe WPC, Segoe UI, sans-serif;\\n    }\\n\\n    .user-message {\\n        display: flex;\\n        justify-content: flex-end;\\n        margin-top: 12px;\\n        margin-bottom: 12px;\\n    }\\n\\n    .chat-window-container {\\n        position: fixed;\\n        right: 120px;\\n        width: 500px;\\n        height: 700px;\\n        z-index: 9998;\\n        border-radius: 5px;\\n        background-color: white;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n        margin-top: 10px;\\n    }\\n\\n    .chat-window {\\n        height: calc(100% - 44px);\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: space-between;\\n        padding: 20px 20px 6px 20px;\\n    }\\n\\n    .chatbot-message {\\n        display: flex;\\n        align-items: end;\\n    }\\n\\n    .icon-group {\\n        display: flex;\\n        justify-content: flex-end;\\n    }\\n\\n    .input-field-container {\\n        width: 100%;\\n    }\\n\\n    .message-links {\\n        display: flex;\\n        flex-wrap: wrap;\\n        margin-top: 40px;\\n        width: 100%;\\n    }\\n\\n    .message-content {\\n        display: inline-block;\\n        border-radius: 15px;\\n        max-width: 80%;\\n        min-width: 10%;\\n        margin-bottom: 30px;\\n        word-wrap: break-word;\\n        box-shadow: rgba(0, 0, 0, 0.02) 0px 15px 25px 0px;\\n    }\\n\\n    .copy-box {\\n        position: absolute;\\n        top: -30px;\\n        right: 1px;\\n        display: flex;\\n        background-color: #f0f0f0;\\n        border-radius: 10px;\\n        padding: 6px;\\n        transition: opacity 0.3s;\\n        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    .copy-button {\\n        border: none;\\n        background-color: transparent;\\n        outline: none;\\n    }\\n\\n    .copy-box:hover {\\n        background-color: #e3e3e3;\\n    }\\n\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export default __webpack_public_path__ + \"9a830afdb3af3bb0515b62ea00be093f.svg\";","export interface IPromiseData<T> {\n    promise: Promise<T>;\n    resolver: (value: T | PromiseLike<T>) => void;\n    reject: (reason?: any) => void;\n    startTimer: (timeout: number) => void;\n}\n\n//some platforms have syncronous resolve problem (ex: IOS JavascriptCore)\ndeclare var doNothing: any;\nlet syncResolved = false as boolean;\nnew Promise<void>(res => res()).then(() => syncResolved = true);\ntypeof(doNothing) != \"undefined\" && doNothing();\nconst syncResolveProblem = syncResolved === true; // platform has sync resolve problem or not\n\ntype ResolveFunc<T> = (value: T | PromiseLike<T>) => void;\n/**\n * @param timeout timeout time in ms, undefined if infinite\n */\nexport function createPromiseData<T>(timeout?: number, opt: { fixSyncResolve?: boolean } = {}): IPromiseData<T> {\n    const syncResolveFixer = (cb: ResolveFunc<T>) => syncResolveProblem && opt.fixSyncResolve ? (value: T | PromiseLike<T>) => setTimeout(() => cb(value)) : cb;\n    let resolver: ResolveFunc<T> = <any>undefined, reject: (reason?: any) => void = <any>undefined;\n    let timer: number;\n    const startTimer: IPromiseData<T>[\"startTimer\"] = (timeout: number) => {\n        if (timer) { clearTimeout(timer); }\n        timer = setTimeout(() => { reject(new Error(`The operation has timed out. timeoutValue  : ${timeout}`)); }, timeout) as unknown as number;\n    }\n\n    if (timeout) {\n        startTimer(timeout);\n    }\n\n    return {\n        startTimer,\n        promise: new Promise<T>((res, rej) => { resolver = syncResolveFixer(res); reject = rej; }),\n        resolver,\n        reject\n    };\n}","import { DependencyContainer, container, inject, injectable, singleton } from \"tsyringe\";\nimport { createPromiseData } from \"../../common/promiseHelper\";\n\ninterface IDependencyContainer extends DependencyContainer { }; // for vite vs webpack :( remember\n\nfunction sleep() {\n    const prom = createPromiseData<void>();\n    setTimeout(() => { prom.resolver() }, 100);\n    return prom.promise;\n}\n\nexport async function delayWithResolve<TInterface>(dependency: symbol, cb: (dep: TInterface) => void | Promise<void>) {\n    await delayTillResolve([dependency]);\n    const dep = container.resolve<TInterface>(dependency);\n    await cb(dep);\n}\nexport async function delayTillResolve(dependencies: Array<symbol>, cb?: () => void | Promise<void>) {\n    let run = false;\n    while (!run) {\n        try {\n            dependencies.forEach(dependency => container.resolve(dependency));\n            run = true;\n        } catch (err) {\n            await sleep();\n        }\n    }\n    await cb?.();\n}\n\nexport { IDependencyContainer, container, inject, injectable, singleton };\n","import { ExportType, ICreateDeployJobParam, ICreateExportJobParam, IDeployJobItem, IExportItem, IExportJobDbItem, IExportJobHistoryDbItem, IExportJobHistoryRequest, IGetExportJobsByGroupIDRequest, IInitJobHistoryRequest, IListExportJobsResponse, JobType } from \"../../../../common/qCloudTemp/exporter\";\nimport { ICustomLivePreview, IDefaultLivePreview, ILivePreview, ILivePreviewSettingsRetval } from \"../../../../common/qCloudTemp/livePreview\";\n\nimport { IEditorTypes, IOrganization, IOrganizationFeatures } from \"../../../../common/qCloudTemp/membership\";\nimport { AppSettingsModelKeys, ExtensionType, IModelBody, IModelBodyObject, IModelInfo, IModuleVersion, IOrganizationActions, IOrganizationGroup, IQCloudLogItem, ISDActivities, ITags, ITenantDefinitions, ITreeviewItem, ModelAdditionals, ModelType, ModuleShareType, ObjectID, UsageType } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IModuleProduct, IModuleProductVer } from \"../../../../common/qCloudTemp/store\";\nimport { IAddFeedbackRequest, IAddFeedbackResponse, IAddOrUpdatePreferencesResponse, IAddOrganizationGroupRequest, IAddTagRequest, IAddUserPremiumAccountRequestRequest, IAddUserPremiumAccountRequestResponse, IAddUserStandAloneInfoRequest, IBoAddAnnouncementRequest, IBoAddAnnouncementResponse, IBoDeleteAnnouncementRequest, IBoGetAzureCredentialsResponse, IBoListApplicationsResponse, IBoListOrganizationUsersResponse, IBoRemoveTagFromOrganizationRequest, IBoRemoveUserFromOrganizationRequest, IBoUpdateAnnouncementRequest, IBoUpdateOrganizationResponse, ICheckExistenceOfModuleVersionResponse, ICreateOrganizationResponse, IDeleteInvitationRequest, IGetChatBotResponse, IGetFileSystemModelsResponse, IGetMainStatisticInfoResponse, IGetModelInformationsRequest, IGetModelResponse, IGetModuleRequest, IGetModuleResponse, IGetOrganizaionGroupDetailsRequest, IGetOrganizaionGroupDetailsResponse, IGetOrganizationInfoResponse, IGetOrganizationUsersRequest, IGetOrganizationUsersResponse, IGetPreferencesResponse, IGetProfileResponse, IGetUserInfoResponse, IInvitationRequest, IListInvitationsResponse, IListOrganizationsResponse, IListUserOrganizationsResponse, IListUserRequestsResponse, IListUsersResponse, IRelaseModuleRequest, IRemoveUserFromOrganizationRequest, ISignInResponse, IUpdateApplicationRequest, IUpdateInvitationRequest, IUpdateModelResponse, IUpdateOrganizaionGroupRequest, IUpdateProfileResponse, IUpdateTagRequest, IUpdateUserInfoResponse, IXlsxExportRequest, IBoListAnnouncementsResponseConsumer, IBoAddAnnouncementResponseConsumer, IBoUpdateAnnouncementResponseConsumer, IListAnnouncementsResponseConsumer, IAddModelResponse, IListChildItemsResponse, IUndoCheckoutRequest, IUndoCheckoutResponse, IUpdateOrganizationOwnerRequest, IUpdateMobileUsage, IAddModelFromTemplateResponse, IAddModelRequest, IUpdateModelRequest, IDeleteFolderRequest, IUpdateFolderRequest, IUpdateFolderResponse, IAddModelFromTemplateRequest, IUpdateOrganizaionGroupOwnersRequest, IUpdateJoinOrgGroupRequest, IGetOrganizationGroupReqRequest, IGetOrganizationGroupReqResponse, IGetOrganizaionGroupDetailsByUserTypeResponse, IGetCodeAssistantResponse } from \"../../../../common/qCloudTemp/symDtoObjects\";\n\nimport { ITemplateInfo, TemplateType } from '../../../../common/qCloudTemp/template';\nimport { IApplication, IExportJobArtifactInfoItem, IExportJobItem, IExportJobStepItem, IExportViewItem, ILoggedInUser, IModel, IModelHistoryInfo, IModule, ModelHistoryType } from \"../model/models\";\n\nimport { IModuleBackend } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IStudioRequestRequest, IStudioRequest } from \"../../../../common/qCloudTemp/request\";\nexport interface IGetModelHistoryResponse extends IGetModelResponse {\n    modelID: string;\n    historyType: string;\n    ownerItem: string;\n    version: string\n}\nexport interface IlistExportJobStepLogsResponse {\n    logs: Array<string>;\n}\nexport interface IDublicateModelResponse {\n    modelInfo: IModelInfo;\n    modelBody: Array<IModelBody>;\n}\n\nexport interface IUpdateLivePreviewRequest {\n    links?: ICustomLivePreview[\"links\"];\n    deepLinkParam?: ICustomLivePreview[\"deepLinkParam\"];\n    models?: ICustomLivePreview[\"models\"];\n    expiryDate?: ICustomLivePreview[\"expiryDate\"];\n    password?: ICustomLivePreview[\"password\"];\n    selected?: ICustomLivePreview[\"selected\"];\n}\n\nexport interface ICreateLivePreviewRequest {\n    appID: string;\n    type: ILivePreview[\"type\"];\n    links?: ICustomLivePreview[\"links\"];\n    deepLinkParam?: ICustomLivePreview[\"deepLinkParam\"];\n    models?: ICustomLivePreview[\"models\"];\n    expiryDate?: ICustomLivePreview[\"expiryDate\"];\n    password?: ICustomLivePreview[\"password\"];\n    selected: ICustomLivePreview[\"selected\"];\n}\n\nexport interface ICreateModelFromTemplateParam {\n    name: string;\n    ownerId: string;\n    modelInfoID: string;\n    modelType: ModelType;\n    modelAdditionals: ModelAdditionals;\n    version?: string\n    path: string;\n}\n\nexport interface IListModelsRequest {\n    applicationID: string;\n    getModelBodies?: boolean;\n    usageType?: UsageType;\n}\n\nexport interface ICreateUserRequest {\n    name: string;\n    mailAddress: string;\n    password: string;\n}\n\nexport interface IUpdateModelParams {\n    name?: string,\n    model?: Array<IModelBodyObject>,\n    checkin?: boolean,\n    release?: boolean,\n    publish?: boolean,\n    shortComment?: string,\n    comment?: string,\n    ownerItem?: IApplication | IModule,\n    modelType?: ModelType,\n    modelAdditionals?: ModelAdditionals,\n    ownerUser?: ILoggedInUser\n    appID?: string;\n    version?: string,\n    isUnmodifiable?: boolean,\n    path?: string;\n}\n\nexport interface IUpdateUserInfo {\n    createOrgLimit: number;\n}\nexport interface IUpdateOrganization {\n    accountType?: \"premium\" | \"beta\";\n    createAppLimit: number;\n    actions: IOrganizationActions;\n    applications: IEditorTypes;\n    environmentPrefix: string;\n    features: IOrganizationFeatures;\n    tags: Array<ITags['ID']>;\n    organizationGroupId?: string;\n}\n// export interface IUpdateApplicationRequestParams {\n//     name?: string;\n//     description?: string;\n//     logo?: string;\n//     color?: string;\n//     ownerUser?: ILoggedInUser;\n//     deployParameters?: IAppDeployParameters;\n//     shortID24?: string;\n//     exportSettings?: IApplicationExportSettings;\n// }\n\nexport interface IQCloudApi {\n    signIn(invitationId?: string): Promise<ISignInResponse>;\n    signOut(): Promise<void>;\n    getProfile(): Promise<IGetProfileResponse>;\n    updateProfile(properties: { name: string, lastName: string, role: string, }): Promise<IUpdateProfileResponse>;\n    getPreferences(): Promise<IGetPreferencesResponse>;\n    updatePreferences(preferences: { emailConsent: boolean; }): Promise<IAddOrUpdatePreferencesResponse>\n    listUserOrganizations(): Promise<Array<IListUserOrganizationsResponse>>;\n    getOrganization(organizationId: IOrganization[\"id\"]): Promise<IOrganization>;\n    listUserInvitations(): Promise<IListInvitationsResponse>;\n    createOrganization(name: IOrganization[\"name\"]): Promise<ICreateOrganizationResponse>;\n    listAnnouncements(): Promise<IListAnnouncementsResponseConsumer>;\n\n\n    createModel(request: IAddModelRequest): PromiseLike<IAddModelResponse>;\n    createModule(name: string, options: { description?: string; prefix?: string; applicationID?: string; }): Promise<IModuleBackend>;\n    createApplication(params: { name: string, description?: string, logo?: string, color?: string }): PromiseLike<{ application: IApplication, organization: IOrganization }>;\n    createLog(logItem: IQCloudLogItem): Promise<{ ID: string; }>;\n    getModelInfo(ID: string, params?: { checkoutControl?: boolean; createCheckout?: boolean; isGetCheckoutUserInfo?: boolean }): Promise<IGetModelResponse>;\n    getModel(ID: string, params?: { checkoutControl?: boolean, createCheckout?: boolean, retrieveBody?: boolean, isGetCheckoutUserInfo?: boolean, version?: string, isUnmodifiable?: boolean }): Promise<IGetModelResponse>;\n    // getModelBody(ID: string): Promise<{ ID: string, model: IGetModelResponse[\"model\"] }>;\n    getFileSystemModels(fileSystemIds: Array<string>): Promise<IGetFileSystemModelsResponse>;\n    updateModel(params: IUpdateModelRequest): Promise<IUpdateModelResponse>; // don't use directly -> modelUseCase.updatemodel()\n    updateModule(ID: string, params: { name?: string, description?: string, prefix?: string, ownerUser?: ILoggedInUser, mainOwner?: ObjectID, shareType?: ModuleShareType, applicationID?: string }): PromiseLike<{ module: IModule }>;\n    updateApplication(ID: string, params: IUpdateApplicationRequest): PromiseLike<{ app: IApplication }>;\n    deleteModel(ID: string, appID: string | undefined, options?: { addHistory?: boolean }): PromiseLike<void>;\n    deleteModule(ID: string, appID: string | undefined, options?: { addHistory?: boolean }): PromiseLike<void>;\n    deleteFolder(request: IDeleteFolderRequest): PromiseLike<void>;\n    updateFolder(request: IUpdateFolderRequest): Promise<IUpdateFolderResponse>;\n    addDeleteApplicationJob(ID: string, addHistory?: boolean): PromiseLike<void>;\n    duplicateModel(sourceModel: IModel, name: string, appID: string | undefined): Promise<IModel>;\n    listApplications(getDetails?: boolean): PromiseLike<Array<IApplication>>;\n    listModules(applicationID?: string): Promise<Array<IModule>>;\n    listModuleVersions(moduleID: string): Promise<Array<IModuleVersion>>;\n    listMultiModuleVersions(moduleIDs: Array<string>): Promise<IModuleVersion[]>;\n    listModels(options: IListModelsRequest): Promise<Array<IGetModelResponse>>;\n    getLPSettings(appID: string): Promise<Record<AppSettingsModelKeys, ILivePreviewSettingsRetval>>;\n    listModuleChildItems(module: IModule): Promise<IListChildItemsResponse>;\n    listModelBodies(modelIDs: Array<string>): Promise<Array<IModelBody>>;\n    getApplicationDetails(appID: string): PromiseLike<IApplication[\"details\"]>;\n    getApplication(appID: string): Promise<IApplication>;\n    getExportTypes(): Promise<Array<{ name: ExportType; text: string; }>>;\n    getchatbotresponse(userQuestion: string, chatHistory: Record<string, any>): Promise<IGetChatBotResponse>;\n    getCodeAssistantResponse(monacoEditorValue: string, action: \"refactor\" | \"explain\", metrics: { correlationid: string, requestSource: \"selection\" | \"fullEvent\" }): Promise<IGetCodeAssistantResponse[\"response\"]>;\n    getExportSelectionData(applicationID: string, exportType: ExportType): Promise<Array<IExportViewItem>>;\n    listModelHistories(modelID: string, historyType?: ModelHistoryType | undefined): Promise<IModelHistoryInfo[]>;\n    listMultiModelHistories(modelIDs: Array<string>, historyType?: ModelHistoryType | undefined): Promise<IModelHistoryInfo[]>;\n    getModelHistory(historyID: string): Promise<IGetModelHistoryResponse>;\n    createExportJob(appID: string, exportType: ExportType, exportItems: Array<IExportItem>, groupID?: string, layer?: number): Promise<IExportJobItem>;\n    createDeployJobs(deployJobs: Array<IDeployJobItem>, isGroup: boolean): Promise<void>;\n    createBuildJobs(jobs: Array<ICreateDeployJobParam>): Promise<Array<IExportJobDbItem>>;\n    addDeletePlateauEnvJob(appID: string): Promise<void>;\n    startDeploymentJob(param: ICreateDeployJobParam): Promise<IExportJobDbItem>;\n    createPackJobs(jobs: Array<ICreateExportJobParam>): Promise<Array<IExportJobDbItem>>;\n    getExportJobsByGroupId(req: IGetExportJobsByGroupIDRequest): Promise<IListExportJobsResponse>;\n    listExportJobs(jobType: JobType, options?: { appID?: string }): Promise<Array<IExportJobItem>>;\n    initPublishHistory(request: IInitJobHistoryRequest): Promise<IExportJobHistoryDbItem>;\n    listApplicationJobHistory(request: IExportJobHistoryRequest): Promise<Array<IExportJobHistoryDbItem>>;\n    listExportJobSteps(ID: string, isMultiStep?: boolean): Promise<Array<IExportJobStepItem>>;\n    listExportJobStepLogs(stepID: string): Promise<IlistExportJobStepLogsResponse>;\n    listExportJobArtifacts(ID: string): Promise<Array<IExportJobArtifactInfoItem>>;\n    listTreeviewItems(applicationID: string): Promise<Array<ITreeviewItem>>;\n    // attachModuletoApplication(appID: string, moduleID: string): Promise<void>;\n    attachModuletoApplication(appID: string, moduleID: string, version?: string): Promise<string | void>\n    detachModuleFromApplication(appID: string, moduleID: string, version?: string): Promise<void>;\n    getApplicationUISettings(applicationID?: string): Promise<Array<ITenantDefinitions>>;\n    getApplicationDeploySettings(applicationID: string): Promise<ITenantDefinitions[]>;\n    getTenantDefinition(ID: string): Promise<ITenantDefinitions>;\n    setRootScreen(ID: string): Promise<void>;\n    putModuleInStore(objectID: string): Promise<{ product: IModuleProduct; productVer: IModuleProductVer }>;\n    createLivePreview(options?: ICreateLivePreviewRequest): Promise<ILivePreview>;\n    updateLivePreview(ID: string, options?: IUpdateLivePreviewRequest): PromiseLike<void>;\n    updateSelectedLivePreview(appID: string): PromiseLike<void>;\n    getLivePreviewInfo(appID: string, options?: { selected?: boolean; type?: ILivePreview[\"type\"]; }): Promise<ICustomLivePreview | IDefaultLivePreview>;\n    listLivePreviewInfo(appID: string): Promise<Array<ICustomLivePreview | IDefaultLivePreview>>;\n    listTemplateInfos(type?: TemplateType): Promise<Array<ITemplateInfo>>;\n    createModelFromTemplate(request: IAddModelFromTemplateRequest): Promise<IAddModelFromTemplateResponse>;\n    undoCheckout(request: IUndoCheckoutRequest): Promise<IUndoCheckoutResponse>;\n\n\n    createInvitation(request: IInvitationRequest): Promise<void>;\n    listOrganizationUsers(request: IGetOrganizationUsersRequest): Promise<IGetOrganizationUsersResponse>;\n    listOrganizationInvitations(): Promise<IListInvitationsResponse>;\n    deleteInvitation(request: IDeleteInvitationRequest): Promise<void>;\n    removeUserFromOrganization(request: IRemoveUserFromOrganizationRequest): Promise<void>;\n    updateOrganizationOwner(request: IUpdateOrganizationOwnerRequest): Promise<IOrganization>;\n    updateInvitation(request: IUpdateInvitationRequest): Promise<void>;\n\n    createFeedback(request: IAddFeedbackRequest): Promise<IAddFeedbackResponse>;\n    releaseModule(request: IRelaseModuleRequest): Promise<IModuleVersion>;\n    getModule(request: IGetModuleRequest): Promise<IGetModuleResponse>;\n    getModelInformations(request: IGetModelInformationsRequest): Promise<Array<IModelInfo>>;\n    checkExistenceOfModuleVersion(request: { moduleID: string; versionToCheck: string }): Promise<ICheckExistenceOfModuleVersionResponse>;\n    addDeleteOrganizationJob(organizationId: string, organizationName: string): Promise<void>;\n    addUserStandAloneInfo(request: IAddUserStandAloneInfoRequest): Promise<void>;\n    deleteUserStandAloneInfo(userId: string): Promise<void>;\n    createUserPremiumAccountRequest(request: IAddUserPremiumAccountRequestRequest): Promise<IAddUserPremiumAccountRequestResponse>;\n    updateUserMobileUsage(request: IUpdateMobileUsage): Promise<void>\n    listOrgGroupUsers(): Promise<IListOrganizationsResponse>;\n    getOrganizationGroupDetails(request: IGetOrganizaionGroupDetailsRequest): Promise<IGetOrganizaionGroupDetailsByUserTypeResponse>;\n\n    deleteOrganizationFromGroup(organizationId: string): Promise<void>;\n    getAIResponsiveSuggestions(layoutModel: object, metrics: { correlationid: string, requestid: number }): Promise<object>\n    // BACK OFFICE\n    getMainStatisticInfo(): Promise<IGetMainStatisticInfoResponse>;\n    getUserInfo(userId: string): Promise<IGetUserInfoResponse>;\n    getOrganizationInfo(organizationId: string): Promise<IGetOrganizationInfoResponse>;\n    bo_listUsers(): Promise<IListUsersResponse>;\n    bo_listOrganizations(): Promise<IListOrganizationsResponse>;\n    updateUserInfo(userId: string, properties: IUpdateUserInfo): Promise<IUpdateUserInfoResponse>;\n    bo_removeUserFromOrganization(properties: IBoRemoveUserFromOrganizationRequest): Promise<void>;\n    bo_listOrganizationUsers(organizationId: string): Promise<IBoListOrganizationUsersResponse>;\n    bo_listOrganizationApps(organizationId: string): Promise<IBoListApplicationsResponse>;\n    bo_addDeleteOrganizationJob(organizationId: string, organizationName: string): Promise<void>;\n    bo_updateOrganization(organizationId: string, properties: IUpdateOrganization): Promise<IBoUpdateOrganizationResponse>;\n    bo_updateOrganizationGroupOwners(request: IUpdateOrganizaionGroupOwnersRequest): Promise<void>\n    bo_getAzureCredentials(): Promise<IBoGetAzureCredentialsResponse>;\n    bo_deleteUser(userId: string): Promise<void>;\n    //tags\n    bo_addtag(request: IAddTagRequest): Promise<ITags>;\n    bo_deletetag(tagId: string): Promise<void>;\n    bo_listtag(): Promise<Array<ITags>>;\n    bo_gettag(tagId: string): Promise<ITags>;\n    bo_updatetag(request: IUpdateTagRequest): Promise<void>;\n    bo_getOrganizationsByTag(tagId: string): Promise<Array<IOrganization>>;\n    bo_removeTagFromOrganization(properties: IBoRemoveTagFromOrganizationRequest): Promise<void>\n    // announcement\n    bo_listAnnouncements(): Promise<IBoListAnnouncementsResponseConsumer>;\n    bo_createAnnouncement(request: IBoAddAnnouncementRequest): Promise<IBoAddAnnouncementResponseConsumer>;\n    bo_updateAnnouncement(request: IBoUpdateAnnouncementRequest): Promise<IBoUpdateAnnouncementResponseConsumer>;\n    bo_deleteAnnouncement(request: IBoDeleteAnnouncementRequest): Promise<void>;\n    //organization-group\n    bo_listUserRequests(): Promise<IListUserRequestsResponse>;\n    bo_addOrganizationGroup(properties: IAddOrganizationGroupRequest): Promise<IOrganizationGroup>\n    bo_listOrganizationGroups(): Promise<Array<IOrganizationGroup>>;\n    bo_updateOrganizationGroup(request: IUpdateOrganizaionGroupRequest): Promise<void>;\n    bo_getOrganizationGroupDetails(request: IGetOrganizaionGroupDetailsRequest): Promise<IGetOrganizaionGroupDetailsResponse>\n    bo_deleteOrganizationGroup(organizationGroupId: string): Promise<void>;\n    bo_deleteOrganizationFromGroup(organizationId: string): Promise<void>;\n    sendJoinOrganizationGroupRequest(request: IStudioRequestRequest): Promise<IStudioRequest>;\n    updateJoinOrgGroupRequest(request: IUpdateJoinOrgGroupRequest): Promise<void>;\n    getStudioRequests(request: IGetOrganizationGroupReqRequest): Promise<IGetOrganizationGroupReqResponse[]>\n    //servicedesigner\n    bo_listServiceDesignerActivities(): Promise<Array<ISDActivities>>;\n    bo_xlsxexport(request: IXlsxExportRequest): Promise<any>;\n}\n\nexport const IQCloudApi = Symbol.for(\"IQCloudApi\");","\nexport interface IDialogOptions {\n    title?: string;\n    image?: { src: string, width?: string, height?: string; };\n    closable?: boolean;\n    type?: \"warning\";   \n    //  | \"info\" | \"success\" | \"confirm\" ilave olarak diğer typelar konuşulup eklenmeli\n    width?: string;\n    height?: string;\n    maxHeight?:string;\n    overflow?: string;\n    closeCb?: (reason: \"close\" | \"outclick\" | \"component\") => void;\n    noBlockShadow?: boolean;\n    closeOnOutClick?: boolean;\n    customStyle? : {\n        closeIcon?: string;\n        headerStyle?: string;\n    }\n}\n\n\n\n\nexport interface IDialog {\n    showDialog<ComponentParams>(component: object, options?: IDialogOptions, parameters?: ComponentParams): string;\n    closeDialog(id: string): void;\n    closeAllDialogs(): void;\n}\nexport const IDialog = Symbol.for(\"IDialog\");","export interface IRouter {\n    push(to: string | { path: string, params?: Record<string, any> }): Promise<void>;\n    back(): void;\n    getRouteParams<T extends Record<string, string | Array<string>>>(): T;\n    isBackOrForward(): boolean;\n    isRouteNoAuth(): boolean;\n}\n\nexport const IRouter = Symbol.for(\"IRouter\");\nexport interface IRouteDefinition {\n    noAuth?: boolean\n}\nexport function routeDefinition(definition: IRouteDefinition) {\n    // Nothing to do, this is for extract-routes\n}\nexport interface IRouteOptions {\n    transfer?: string;\n}\nexport function routeOptions(options: IRouteOptions) {\n    // Nothing to do, this is for extract-routes\n}","import { IAnnouncementServiceObj } from \"../../../../common/qCloudTemp/announcement\";\n\nexport interface IAnnouncementUIExtended extends IAnnouncementServiceObj {\n    isRead: boolean;\n}\n\nexport interface IAnnouncementsUseCase {\n    displayAnnouncementsIfAvailable(): Promise<void>;\n}\n\nexport const IAnnouncementsUseCase = Symbol.for(\"IAnnouncementsUseCase\");","export interface ISignInParam {\n    invitationId?: string;\n}\n\nexport interface IAuthenticationUseCase {\n    signIn(param: ISignInParam): Promise<void>;\n    signOut(): Promise<void>;\n}\nexport const IAuthenticationUseCase = Symbol.for(\"IAuthenticationUseCase\");","import { UnpromisedReturn } from \"../../common/extendedTypes\";\nimport { IUseCase } from \"./IUseCase\";\n\nexport interface IExecuteOptions {\n    loading: boolean;\n    loadingInfo?: { title: string, text: string };\n    noContinueInBgBtn?: boolean;\n}\nexport interface IUseCaseExecutor {\n    executeUseCase<TUseCase extends IUseCase<UnpromisedReturn<TUseCase[\"execute\"]>, any>>(useCaseInjectionToken: symbol, ...params: Parameters<TUseCase[\"execute\"]>): Promise<UnpromisedReturn<TUseCase[\"execute\"]>>;\n    execute<T>(callback: () => Promise<T>, options: IExecuteOptions): Promise<T | undefined>;\n    wrap(cb: () => Promise<void>, options: IExecuteOptions): () => Promise<void>;\n    resolveUseCase<TUseCase extends object>(useCaseInjectionToken: symbol): Promise<TUseCase>;\n}\nexport const IUseCaseExecutor = Symbol.for(\"IUseCaseExecutor\");","import { IApplication, IExportJobItem, IModel, IModule, ILoggedInUser } from \"../model/models\";\nimport { ITopMenuButton } from \"../model/ui/ITopMenuButton\";\nimport { INavItem } from \"../model/ui/INavItem\";\nimport { IMainStatisticInfo } from \"../../../../common/qCloudTemp/backoffice\";\nimport { IUser_SUSI } from \"../../../../common/qCloudTemp/authentication\";\nimport { IOrganization } from \"../../../../common/qCloudTemp/membership\";\nimport { IOrganizationGroup, IOrganizationGroupList, ITags } from \"../../../../common/qCloudTemp/quickCloud\";\nimport { IUserRequest } from \"../../../../common/qCloudTemp/userRequest\";\nimport { IOrganizationUIExtended } from \"../useCase/IBackofficeUseCase\";\nimport { IAnnouncementServiceObj } from \"../../../../common/qCloudTemp/announcement\";\nimport { IAnnouncementUIExtended } from \"../useCase/IAnnouncementsUseCase\";\n\nexport interface IViewModel {\n    user?: ILoggedInUser;\n    apps: Array<IApplication>;\n    studio: {\n        appId: string;\n        appName: string;\n        items: Array<IModel | IModule>;\n        openItems?: Array<IModel>;\n        currentItem?: IModel;\n        tabOrder?: Array<string>;\n        dnsEndpoint?: string;\n        webPublishDate?: string;\n        mobilePublishDate?: string;\n        webPublishedBy?: string;\n        mobilePublishedBy?: string;\n        publishId?: string;\n        livePreview?: {\n            relayClients: { clients: Array<{ clientID: string, name: string }> }\n        }\n        filters: {\n            text?: string;\n            ui: boolean;\n            process: boolean;\n            entity: boolean;\n            image: boolean;\n            setting: boolean;\n            placeholder: boolean;\n        },\n        ui?: {\n            navItems?: Array<INavItem>;\n            sidebar: {\n                component?: object;\n                componentPath?: string;\n                left: number;\n            };\n        };\n        topMenu?: {\n            additionalButtons?: Array<ITopMenuButton>;\n            dynamicButtons?: Array<ITopMenuButton>;\n        };\n        export?: {\n            lastUncompiledDate?: Date;\n        },\n        isStatisticsPageSelected?: boolean;\n        isManagePageSelected?: boolean;\n    };\n    exportJobs?: Array<IExportJobItem>;\n    backoffice?: {\n        ui?: {\n            breadcrumb?: Array<string>;\n        }\n        dashboard?: {\n            mainStatistics: IMainStatisticInfo;\n        };\n        users?: Array<IUser_SUSI>;\n        organizations?: Array<IOrganizationUIExtended>;\n        tags?: Array<ITags>;\n        userRequests?: Array<IUserRequest>;\n        organizationGroups?: Array<IOrganizationGroup>;\n        announcements?: Array<IAnnouncementServiceObj>;\n    };\n    announcements: Array<IAnnouncementUIExtended>;\n}\nexport const IViewModel = Symbol.for(\"IViewModel\");\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-4d476e11\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = {\n  key: 0,\n  class: \"announcement-div\"\n}\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-wrench-clock announcement-icon\" }, null, -1 /* HOISTED */))\nconst _hoisted_3 = { class: \"announcement-text\" }\nconst _hoisted_4 = [\"onClick\"]\n\nimport { computed, onMounted } from \"vue\";\nimport { container } from \"../../../domain/core/diContainer\";\nimport { IViewModel } from \"../../../domain/viewModel/IViewModel\";\nimport { IUseCaseExecutor } from \"../../../domain/useCase/IUseCaseExecutor\";\nimport { IAnnouncementsUseCase } from \"../../../domain/useCase/IAnnouncementsUseCase\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'announcementsBar',\n  setup(__props) {\n\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst announcementsUseCase = container.resolve<IAnnouncementsUseCase>(IAnnouncementsUseCase);\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst headerBarAnnouncements = computed(() => { return viewModel.announcements.filter(i => i.displayType == \"headerBar\"); });\n\nonMounted(async () => {\n    await executor.execute(async () => {\n        await announcementsUseCase.displayAnnouncementsIfAvailable();\n    }, { loading: false });\n});\n\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(headerBarAnnouncements), (ann) => {\n    return (_openBlock(), _createElementBlock(\"div\", null, [\n      (!ann.isRead)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n            _hoisted_2,\n            _createElementVNode(\"span\", _hoisted_3, _toDisplayString(ann.text), 1 /* TEXT */),\n            _createElementVNode(\"i\", {\n              class: \"mdi mdi-close close-icon\",\n              onClick: ($event: any) => (ann.isRead = true)\n            }, null, 8 /* PROPS */, _hoisted_4)\n          ]))\n        : _createCommentVNode(\"v-if\", true)\n    ]))\n  }), 256 /* UNKEYED_FRAGMENT */))\n}\n}\n\n})","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./announcementsBar.vue?vue&type=style&index=0&id=4d476e11&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./announcementsBar.vue?vue&type=style&index=0&id=4d476e11&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./announcementsBar.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./announcementsBar.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./announcementsBar.vue?vue&type=style&index=0&id=4d476e11&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/studio/studio/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4d476e11\"]])\n\nexport default __exports__","export default __webpack_public_path__ + \"62b3c965054465f6b8f5c81e22a5e353.svg\";","export default __webpack_public_path__ + \"a932d2875c6ca249ea214d08b68e51bb.svg\";","export default __webpack_public_path__ + \"8e3140858d798a5c4e899c42aac2966a.svg\";","export default __webpack_public_path__ + \"ad1469ad2976b2272072ffc332e11a9d.svg\";","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, unref as _unref, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\nimport _imports_0 from '../../../../images/chatbot-icon.svg'\nimport _imports_1 from '../../../../images/chatbot-icon-active.svg'\nimport _imports_2 from '../../../../images/chatbotLoading.svg'\nimport _imports_3 from '../../../../images/cleaning.svg'\n\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-372a0576\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"chatbot-container\" }\nconst _hoisted_2 = {\n  key: 0,\n  class: \"resize-overlay\"\n}\nconst _hoisted_3 = {\n  key: 0,\n  class: \"chatbot-icon\",\n  src: _imports_0\n}\nconst _hoisted_4 = {\n  key: 1,\n  class: \"chatbot-icon-active\",\n  src: _imports_1\n}\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-window-close menu-icons\" }, null, -1 /* HOISTED */))\nconst _hoisted_6 = [\n  _hoisted_5\n]\nconst _hoisted_7 = { class: \"chat-window\" }\nconst _hoisted_8 = [\"onMouseenter\", \"onMouseleave\"]\nconst _hoisted_9 = [\"innerHTML\"]\nconst _hoisted_10 = { key: 1 }\nconst _hoisted_11 = { key: 2 }\nconst _hoisted_12 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", { style: {\"margin\":\"20px 0\",\"border-color\":\"#ccc\"} }, null, -1 /* HOISTED */))\nconst _hoisted_13 = { class: \"follow-up-questions\" }\nconst _hoisted_14 = [\"onClick\"]\nconst _hoisted_15 = {\n  key: 3,\n  class: \"message-loading\"\n}\nconst _hoisted_16 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"loading-image\",\n  src: _imports_2,\n  alt: \"studio-logo\"\n}, null, -1 /* HOISTED */))\nconst _hoisted_17 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", { class: \"loading-text\" }, \"Searching documentation. This may take a second!\", -1 /* HOISTED */))\nconst _hoisted_18 = [\n  _hoisted_16,\n  _hoisted_17\n]\nconst _hoisted_19 = {\n  key: 4,\n  class: \"message-links\"\n}\nconst _hoisted_20 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { style: {\"width\":\"100%\"} }, [\n  /*#__PURE__*/_createElementVNode(\"p\", { class: \"response-text\" }, \"View More About:\")\n], -1 /* HOISTED */))\nconst _hoisted_21 = [\"href\"]\nconst _hoisted_22 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"mdi mdi-link-variant chat-icons\",\n  style: {\"margin-right\":\"5px\",\"color\":\"white\",\"font-size\":\"18px\"}\n}, null, -1 /* HOISTED */))\nconst _hoisted_23 = { key: 5 }\nconst _hoisted_24 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", { style: {\"margin\":\"20px 0\",\"border-color\":\"#ccc\"} }, null, -1 /* HOISTED */))\nconst _hoisted_25 = { class: \"follow-up-questions\" }\nconst _hoisted_26 = [\"onClick\"]\nconst _hoisted_27 = {\n  key: 6,\n  class: \"feedback-container\"\n}\nconst _hoisted_28 = { class: \"feedback-box\" }\nconst _hoisted_29 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-thumb-up\" }, null, -1 /* HOISTED */))\nconst _hoisted_30 = [\n  _hoisted_29\n]\nconst _hoisted_31 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { style: {\"background-color\":\"#c1c1c1\",\"width\":\"1px\",\"height\":\"16px\",\"margin-right\":\"6px\"} }, null, -1 /* HOISTED */))\nconst _hoisted_32 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-thumb-down\" }, null, -1 /* HOISTED */))\nconst _hoisted_33 = [\n  _hoisted_32\n]\nconst _hoisted_34 = [\"onClick\"]\nconst _hoisted_35 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", { class: \"mdi mdi-content-copy\" }, null, -1 /* HOISTED */))\nconst _hoisted_36 = [\n  _hoisted_35\n]\nconst _hoisted_37 = { class: \"input-area-container\" }\nconst _hoisted_38 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"chat-reset-icon\",\n  src: _imports_3,\n  alt: \"reset-chat\"\n}, null, -1 /* HOISTED */))\nconst _hoisted_39 = [\n  _hoisted_38\n]\nconst _hoisted_40 = { class: \"input-field-container\" }\nconst _hoisted_41 = [\"onKeyup\", \"disabled\"]\nconst _hoisted_42 = { class: \"input-bottom\" }\nconst _hoisted_43 = { class: \"character-limit\" }\n\nimport { ref, onMounted, reactive, nextTick } from \"vue\";\nimport { container } from \"../../../../domain/core/diContainer\";\nimport { IViewModel } from \"../../../../domain/viewModel/IViewModel\";\nimport MarkdownIt from \"markdown-it\";\nimport { IQCloudApi } from \"../../../../domain/infrastructure/IQCloudApi\";\n\n\n    type Role = \"USER\" | \"AI\";\n\n    interface ChatMessage {\n        id: number,\n        content: string,\n        role: Role,\n        links?: Array<{ pageName: string, linkUrl:string }>,\n        showFeedBack: boolean,\n        followUpQuestions?: Array<string>,\n    }\n\n    interface ChatMessagesArray extends Array<ChatMessage> {}\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'chatbot',\n  setup(__props) {\n\nconst viewModel = container.resolve<IViewModel>(IViewModel);\n    const qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\n    const user = viewModel.user!;\n    const chatWindowRef = ref<HTMLElement | null>(null);\n    const chatWindowContainerRef = ref<HTMLElement | null>(null);\n    const placeholder = ref(\"\");\n    const showChat = ref(false);\n    const newMessage = ref(\"\");\n    const showFeedBackBox = ref(false);\n    const selectedQuestions: Array<string> = [];\n    const resizingOverlay = ref(false);\n    const showCopyBox = ref<number | null>(null);\n    const isChatbotResponding = ref(false);\n\n\n    const placeholderQuestions: Array<string> = [\n        \"How can I route to another page?\",\n        \"How can I export my project?\",\n        \"What is Live Preview and Publish used for in Studio?\",\n    ];  \n\n    const selectRandomQuestions = () => {\n        selectedQuestions.length = 0;\n        const shuffledQuestions = placeholderQuestions.slice();\n        for (let i = 0; i < 3; i++) {\n            const randomIndex = Math.floor(Math.random() * shuffledQuestions.length);\n            selectedQuestions.push(shuffledQuestions.splice(randomIndex, 1)[0]);\n        }\n    };\n\n    //If followUpQuestions has < 3 elements, it will display all otherwise it will randomly select 3 elements\n    const getRandomFollowUpQuestions = (questionsArray: Array<string>, count: number) => {\n        const shuffledQuestions = questionsArray.slice();\n        for (let i = shuffledQuestions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [shuffledQuestions[i], shuffledQuestions[j]] = [shuffledQuestions[j], shuffledQuestions[i]]; \n        }\n        return shuffledQuestions.slice(0, Math.min(count, shuffledQuestions.length)); \n    };\n\n    \n    let loadingStates: Record<number, boolean> = {};\n\n    const ROLE_USER = \"USER\";\n    const ROLE_AI = \"AI\";\n    ;\n\n\n    const chatMessages: ChatMessagesArray  = reactive([\n        { id: 0, content: `Hey ${user.name}! What's on your mind?`, role: ROLE_AI, showFeedBack: false },\n    ]);\n\n\n    onMounted(() => {\n        scrollToBottom();\n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\n        placeholder.value = randomQuestion;\n        selectRandomQuestions();\n    });\n\n    const scrollToBottom = () => {\n        const chatWindow = chatWindowRef.value;\n        if (chatWindow) {\n            chatWindow.scrollTop = chatWindow.scrollHeight - chatWindow.clientHeight;\n        }\n    };\n\n\n    const toggleChat = () => {\n        showChat.value = !showChat.value;\n    };\n\n    const handleQuestionClick = (question: string) => {\n        newMessage.value = question;\n        sendMessage();\n    };\n\n    const sendMessage = async () => {\n\n        if (newMessage.value.trim() === \"\") return;\n         \n        const randomQuestion = placeholderQuestions[Math.floor(Math.random() * placeholderQuestions.length)];\n        placeholder.value = randomQuestion;\n\n        const userQuestion: ChatMessage = {\n            id: chatMessages.length + 1,\n            content: newMessage.value,\n            role: ROLE_USER,\n            showFeedBack: false\n        };\n\n        chatMessages.push(userQuestion);\n        let chatHistory = [...chatMessages]; \n        newMessage.value = \"\";\n\n        let newId = chatMessages.length + 1;\n        const chatbotResponse: ChatMessage = {\n            id: newId,\n            content: \"\",\n            role: ROLE_AI, \n            showFeedBack: false\n        };\n        chatMessages.push(chatbotResponse);\n\n        loadingStates[chatbotResponse.id] = true;\n\n        nextTick(() => {\n            scrollToBottom();\n        });\n        \n        isChatbotResponding.value = true;\n        const question = userQuestion.content;\n        let response = await qcloudApi.getchatbotresponse(question, chatHistory);\n        \n        let chatBotResponse = response ? response.responseText : \"Unable to answer your question at this time. Try to ask again!\";\n        \n        let lastMessage = chatMessages.find(msg => msg.id === newId);\n        lastMessage!.content = chatBotResponse;\n        loadingStates[chatbotResponse.id] = false;\n\n        let verifiedUrls: Array<string> = response?.verifiedUrls;\n        if (verifiedUrls && verifiedUrls.length > 0) {\n            let finalUrlObj = verifiedUrls.map(url => {\n                let docName = url?.substring(url.lastIndexOf(\"/\") + 1).replace(/-/g,\" \");\n                let modifiedDocName = docName?.replace(/\\b\\w/g, l => l.toUpperCase());\n                return {pageName: modifiedDocName, linkUrl: url};\n            });\n            chatbotResponse.links = finalUrlObj;\n        }\n\n        let followUpQuestions: Array<string> = response.followUpQuestions; \n        if (followUpQuestions && followUpQuestions.length > 0) { \n            chatbotResponse.followUpQuestions = getRandomFollowUpQuestions(followUpQuestions, 3); \n        }\n        isChatbotResponding.value = false;\n        \n        nextTick(() => {\n            scrollToBottom();\n        });\n\n    };\n\n    const isChatbotResponse = (message: ChatMessage) => {\n        return message.role === ROLE_AI;\n    };\n\n    const clearChat = () => {\n        chatMessages.splice(1, chatMessages.length);\n    };\n\n    let resizing = false;\n    let initialX = 0;\n    let initialY = 0;\n    let initialWidth = 900;\n    let initialHeight = 700;\n\n    const startResize = (event: MouseEvent) => {\n        resizingOverlay.value = true;\n        event.stopPropagation();\n        event.preventDefault();\n        resizing = true;\n        initialX = event.clientX;\n        initialY = event.clientY;\n        initialWidth = chatWindowContainerRef.value?.offsetWidth || 0;\n        initialHeight = chatWindowContainerRef.value?.offsetHeight || 0;\n        document.body.style.cursor = \"nesw-resize\";\n        document.body.style.userSelect = \"none\";\n        document.addEventListener(\"mousemove\", handleResize);\n        document.addEventListener(\"mouseup\", stopResize);\n    };\n\n    const handleResize = (event: MouseEvent) => {\n        if (resizing) {\n            event.stopPropagation();\n            event.preventDefault();\n            const newWidth = initialWidth + (initialX - event.clientX );\n            const newHeight = initialHeight + (event.clientY - initialY);\n            const chatWindow = chatWindowContainerRef.value;\n            if (chatWindow) {\n                chatWindow.style.width = `${Math.max(500, newWidth)}px`;\n                chatWindow.style.height = `${Math.max(700, newHeight)}px`;\n                const feedbackIconsVisible = chatMessages.some(message => isChatbotResponse(message) && message.showFeedBack);\n                if (!feedbackIconsVisible) {\n                    scrollToBottom();\n                }\n            }\n        }\n    };\n\n    const stopResize = () => {\n        resizingOverlay.value = false;\n        resizing = false;\n        document.body.style.cursor = \"auto\";\n        document.body.style.userSelect = \"auto\";\n        document.removeEventListener(\"mousemove\", handleResize);\n        document.removeEventListener(\"mouseup\", stopResize);\n    };\n\n\n    const isLoadingChatbotResponse = (message: ChatMessage) => {\n        return isChatbotResponse(message) && loadingStates[message.id];\n    };\n\n    const getMessageClass = (message: ChatMessage) => {\n        return message.role === ROLE_USER ? 'user-message' : 'chatbot-message';\n    };\n\n    \n    const markdown = new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true\n    });\n    const convertToMarkdown = (markdownText: string) => {\n        let markdownResponse = markdown.render(markdownText);\n        markdownResponse = markdownResponse.replace(/<code>/g, \"<code style='color:#ee4f54; font-weight: bold;'>\");\n        return markdownResponse;\n    };\n\n\n    const submitFeedback = (isPositive: boolean) => {\n        // Logic to handle feedback submission\n        showFeedBackBox.value = false;\n    };\n\n    const handleMouseEnter = (message: ChatMessage) => {\n        if (isChatbotResponse(message)) {\n            message.showFeedBack = true;\n            return;\n        }\n        showCopyBox.value = message.id;;\n    };\n\n    const handleMouseLeave = (message: ChatMessage) => {\n        if (isChatbotResponse(message)) {\n            message.showFeedBack = false;\n            return;\n        }\n        showCopyBox.value = null;\n    };\n\n    const copyToClipboard = (text: string) => { \n        navigator.clipboard.writeText(text);\n        showCopyBox.value = null;\n    }\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    (resizingOverlay.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2))\n      : _createCommentVNode(\"v-if\", true),\n    _createElementVNode(\"button\", {\n      onClick: toggleChat,\n      class: \"chatbot-icon-container\",\n      style: _normalizeStyle({background: showChat.value ? '#151233' : '#EEEEEE'})\n    }, [\n      (!showChat.value)\n        ? (_openBlock(), _createElementBlock(\"img\", _hoisted_3))\n        : (_openBlock(), _createElementBlock(\"img\", _hoisted_4))\n    ], 4 /* STYLE */),\n    (showChat.value)\n      ? (_openBlock(), _createElementBlock(\"div\", {\n          key: 1,\n          class: \"chat-window-container\",\n          ref_key: \"chatWindowContainerRef\",\n          ref: chatWindowContainerRef\n        }, [\n          _createElementVNode(\"div\", { class: \"top-menu\" }, [\n            _createCommentVNode(\" <i class=\\\"mdi mdi-resize-bottom-right chatbot-resize-icon\\\" @mousedown=\\\"startResize\\\"></i> \"),\n            _createElementVNode(\"div\", { class: \"icon-group\" }, [\n              _createElementVNode(\"button\", {\n                class: \"menu-buttons\",\n                onClick: toggleChat\n              }, _hoisted_6)\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_7, [\n            _createElementVNode(\"div\", {\n              class: \"chat-messages\",\n              ref_key: \"chatWindowRef\",\n              ref: chatWindowRef\n            }, [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(chatMessages, (message) => {\n                return (_openBlock(), _createElementBlock(\"div\", {\n                  key: message.id,\n                  class: _normalizeClass(getMessageClass(message))\n                }, [\n                  _createCommentVNode(\" <i v-if=\\\"isChatbotResponse(message) && !isLoadingChatbotResponse(message)\\\" class=\\\"mdi mdi-robot-happy-outline chat-icons\\\"></i> \"),\n                  _createElementVNode(\"div\", {\n                    class: \"message-content\",\n                    onMouseenter: ($event: any) => (handleMouseEnter(message)),\n                    onMouseleave: ($event: any) => (handleMouseLeave(message))\n                  }, [\n                    _createCommentVNode(\" <i v-if=\\\"isChatbotResponse(message) && !isLoadingChatbotResponse(message)\\\" class=\\\"mdi mdi-robot-happy-outline chat-icons\\\"></i>\\n                            <i v-if=\\\"!isChatbotResponse(message)\\\" class=\\\"mdi mdi-account-circle chat-icons\\\"></i> \"),\n                    (isChatbotResponse(message))\n                      ? (_openBlock(), _createElementBlock(\"div\", {\n                          key: message.id,\n                          class: \"markdown-content response-text\",\n                          innerHTML: convertToMarkdown(message.content)\n                        }, null, 8 /* PROPS */, _hoisted_9))\n                      : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, _toDisplayString(message.content), 1 /* TEXT */)),\n                    (message.id === 0 && isChatbotResponse(message))\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [\n                          _hoisted_12,\n                          _createElementVNode(\"div\", _hoisted_13, [\n                            (_openBlock(), _createElementBlock(_Fragment, null, _renderList(selectedQuestions, (question, index) => {\n                              return _createElementVNode(\"button\", {\n                                key: index,\n                                onClick: ($event: any) => (handleQuestionClick(question)),\n                                class: \"question-button\"\n                              }, _toDisplayString(question), 9 /* TEXT, PROPS */, _hoisted_14)\n                            }), 64 /* STABLE_FRAGMENT */))\n                          ])\n                        ]))\n                      : _createCommentVNode(\"v-if\", true),\n                    (isChatbotResponse(message) && _unref(loadingStates)[message.id])\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, _hoisted_18))\n                      : _createCommentVNode(\"v-if\", true),\n                    (isChatbotResponse(message) && message.links)\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [\n                          _hoisted_20,\n                          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.links, (link, index) => {\n                            return (_openBlock(), _createElementBlock(\"a\", {\n                              key: index,\n                              href: link.linkUrl,\n                              target: \"_blank\",\n                              class: \"link-button response-text\"\n                            }, [\n                              _hoisted_22,\n                              _createTextVNode(_toDisplayString(link.pageName), 1 /* TEXT */)\n                            ], 8 /* PROPS */, _hoisted_21))\n                          }), 128 /* KEYED_FRAGMENT */))\n                        ]))\n                      : _createCommentVNode(\"v-if\", true),\n                    (isChatbotResponse(message) && message.followUpQuestions && message.followUpQuestions.length > 0)\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [\n                          _hoisted_24,\n                          _createElementVNode(\"div\", _hoisted_25, [\n                            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.followUpQuestions, (question) => {\n                              return (_openBlock(), _createElementBlock(\"button\", {\n                                key: question,\n                                onClick: ($event: any) => (handleQuestionClick(question)),\n                                class: \"question-button\"\n                              }, _toDisplayString(question), 9 /* TEXT, PROPS */, _hoisted_26))\n                            }), 128 /* KEYED_FRAGMENT */))\n                          ])\n                        ]))\n                      : _createCommentVNode(\"v-if\", true),\n                    (isChatbotResponse(message) && message.showFeedBack && !isLoadingChatbotResponse(message))\n                      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_27, [\n                          _createElementVNode(\"div\", _hoisted_28, [\n                            _createElementVNode(\"button\", {\n                              class: \"feedback-button\",\n                              onClick: _cache[0] || (_cache[0] = ($event: any) => (submitFeedback(true)))\n                            }, _hoisted_30),\n                            _hoisted_31,\n                            _createElementVNode(\"button\", {\n                              class: \"feedback-button\",\n                              onClick: _cache[1] || (_cache[1] = ($event: any) => (submitFeedback(false)))\n                            }, _hoisted_33)\n                          ])\n                        ]))\n                      : _createCommentVNode(\"v-if\", true),\n                    (!isChatbotResponse(message) && !isLoadingChatbotResponse(message) && showCopyBox.value === message.id)\n                      ? (_openBlock(), _createElementBlock(\"div\", {\n                          key: 7,\n                          onClick: ($event: any) => (copyToClipboard(message.content)),\n                          class: \"copy-box\"\n                        }, [\n                          _createElementVNode(\"button\", {\n                            class: \"copy-button\",\n                            onClick: _cache[2] || (_cache[2] = ($event: any) => (submitFeedback(true)))\n                          }, _hoisted_36)\n                        ], 8 /* PROPS */, _hoisted_34))\n                      : _createCommentVNode(\"v-if\", true)\n                  ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_8)\n                ], 2 /* CLASS */))\n              }), 128 /* KEYED_FRAGMENT */))\n            ], 512 /* NEED_PATCH */),\n            _createElementVNode(\"div\", _hoisted_37, [\n              _createElementVNode(\"button\", {\n                class: \"reset-button\",\n                onClick: clearChat\n              }, _hoisted_39),\n              _createElementVNode(\"div\", _hoisted_40, [\n                _withDirectives(_createElementVNode(\"textarea\", {\n                  \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((newMessage).value = $event)),\n                  onKeyup: _withKeys(sendMessage, [\"enter\"]),\n                  type: \"text\",\n                  placeholder: \"Ask me about Plateau Studio...\",\n                  class: \"input-field\",\n                  maxlength: 1000,\n                  rows: \"1\",\n                  disabled: isChatbotResponding.value\n                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_41), [\n                  [_vModelText, newMessage.value]\n                ]),\n                _createElementVNode(\"div\", _hoisted_42, [\n                  _createElementVNode(\"div\", _hoisted_43, _toDisplayString(newMessage.value.length) + \"/1000\", 1 /* TEXT */),\n                  _createElementVNode(\"i\", {\n                    class: \"mdi mdi-send send-icon\",\n                    onClick: sendMessage\n                  })\n                ])\n              ])\n            ]),\n            _createElementVNode(\"i\", {\n              class: \"mdi mdi-resize-bottom-right chatbot-resize-icon\",\n              onMousedown: startResize\n            }, null, 32 /* HYDRATE_EVENTS */)\n          ])\n        ], 512 /* NEED_PATCH */))\n      : _createCommentVNode(\"v-if\", true)\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./chatbot.vue?vue&type=style&index=0&id=372a0576&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./chatbot.vue?vue&type=style&index=0&id=372a0576&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./chatbot.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./chatbot.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./chatbot.vue?vue&type=style&index=0&id=372a0576&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/studio/studio/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-372a0576\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","syncResolved","Promise","res","then","doNothing","syncResolveProblem","createPromiseData","timeout","opt","resolver","reject","timer","startTimer","clearTimeout","setTimeout","Error","promise","rej","cb","fixSyncResolve","value","sleep","prom","async","delayWithResolve","dependency","delayTillResolve","dep","dependencies","run","forEach","err","IQCloudApi","Symbol","for","IDialog","IRouter","routeDefinition","definition","IAnnouncementsUseCase","IAuthenticationUseCase","IUseCaseExecutor","IViewModel","_hoisted_1","key","class","_hoisted_2","n","_withScopeId","_","_hoisted_3","_hoisted_4","__name","setup","__props","executor","announcementsUseCase","viewModel","headerBarAnnouncements","announcements","filter","i","displayType","execute","displayAnnouncementsIfAvailable","loading","_ctx","_cache","ann","isRead","text","onClick","$event","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","src","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","style","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_18","alt","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_30","_hoisted_31","_hoisted_33","_hoisted_34","_hoisted_36","_hoisted_37","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","qcloudApi","user","chatWindowRef","chatWindowContainerRef","placeholder","showChat","newMessage","showFeedBackBox","selectedQuestions","resizingOverlay","showCopyBox","isChatbotResponding","placeholderQuestions","loadingStates","ROLE_USER","ROLE_AI","chatMessages","content","name","role","showFeedBack","scrollToBottom","randomQuestion","Math","floor","random","length","shuffledQuestions","slice","randomIndex","splice","selectRandomQuestions","chatWindow","scrollTop","scrollHeight","clientHeight","toggleChat","handleQuestionClick","question","sendMessage","trim","userQuestion","chatHistory","newId","chatbotResponse","response","getchatbotresponse","chatBotResponse","responseText","find","msg","verifiedUrls","finalUrlObj","map","url","docName","substring","lastIndexOf","replace","pageName","l","toUpperCase","linkUrl","links","followUpQuestions","questionsArray","count","j","min","getRandomFollowUpQuestions","isChatbotResponse","message","clearChat","resizing","initialX","initialY","initialWidth","initialHeight","startResize","event","stopPropagation","preventDefault","clientX","clientY","offsetWidth","offsetHeight","document","body","cursor","userSelect","addEventListener","handleResize","stopResize","newWidth","newHeight","width","max","height","some","removeEventListener","isLoadingChatbotResponse","getMessageClass","markdown","html","linkify","typographer","convertToMarkdown","markdownText","markdownResponse","render","submitFeedback","isPositive","background","ref_key","ref","onMouseenter","onMouseleave","innerHTML","index","link","href","target","navigator","clipboard","writeText","onKeyup","type","maxlength","rows","disabled","onMousedown"],"sourceRoot":""}
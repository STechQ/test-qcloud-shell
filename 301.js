"use strict";(self.webpackChunkqcloud_shell=self.webpackChunkqcloud_shell||[]).push([[301],{813:(e,n,a)=>{a.d(n,{Z:()=>s});var t=a(1864),i=a.n(t),l=a(352),o=a.n(l)()(i());o.push([e.id,'\n.createButtonDiv[data-v-b49cac30] {\n    text-align: end;\n    padding-top: 21px;\n    height: 53px;\n    border-top: 1px solid #e0e0e0;\n    margin-top: 32px;\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-bottom: 16px;\n}\n.createButton[data-v-b49cac30] {\n    background-color: #151233;\n    color: white;\n    border-radius: 4px;\n    border: none;\n    width: 74px;\n    height: 32px;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    font-family: "ROBOTO";\n    letter-spacing: 0.01px;\n    opacity: 1;\n}\n.nameInput[data-v-b49cac30] {\n    width: 100%;\n    border: 1px solid #a1a1a1;\n    border-radius: 4px;\n    height: 40px;\n    opacity: 1;\n    outline: none;\n}\n[data-v-b49cac30]::placeholder {\n    padding-left: 10px;\n    padding-top: 5px;\n    color: #a1a1a1;\n    font-style: normal;\n    font-family: "ROBOTO";\n    letter-spacing: 0px;\n    font-size: 14px;\n    opacity: 1px;\n}\n.nameInputDiv[data-v-b49cac30] {\n    padding-left: 20px;\n    padding-right: 20px;\n    padding-top: 18px;\n}\n.duplicateNoteDiv[data-v-b49cac30] {\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-top: 18px;\n}\n.labelValue[data-v-b49cac30] {\n    color: #151233;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    font-family: "ROBOTO";\n    letter-spacing: 0px;\n    opacity: 1;\n}\n.duplicateText[data-v-b49cac30] {\n    font-weight: bold;\n    font-size: 14px;\n    font-family: "ROBOTO";\n    letter-spacing: 0px;\n    opacity: 1;\n}\n.choose-existing-process-flow-dropdown[data-v-b49cac30] {\n    width: 511px;\n    border: 1px solid #a1a1a1;\n    border-radius: 4px;\n    height: 40px;\n    padding: 8px;\n    font-size: 14px;\n    font-family: "Roboto";\n}\n.choose-existing-process-flow-dropdown-label[data-v-b49cac30] {\n    color: #151233;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 14px;\n    letter-spacing: 0px;\n    opacity: 1;\n    font-family: "Roboto";\n}\n.requiredIcon[data-v-b49cac30] {\n    color: #757575;\n    font-size: 15px;\n}\n',"",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/newItem.vue"],names:[],mappings:";AAqlBA;IACI,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;IAC7B,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;AACvB;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,sBAAsB;IACtB,UAAU;AACd;AAEA;IACI,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;IACZ,UAAU;IACV,aAAa;AACjB;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,cAAc;IACd,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,eAAe;IACf,YAAY;AAChB;AAEA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,iBAAiB;AACrB;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;AACpB;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,mBAAmB;IACnB,UAAU;AACd;AACA;IACI,iBAAiB;IACjB,eAAe;IACf,qBAAqB;IACrB,mBAAmB;IACnB,UAAU;AACd;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,qBAAqB;AACzB;AACA;IACI,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf,mBAAmB;IACnB,UAAU;IACV,qBAAqB;AACzB;AAEA;IACI,cAAc;IACd,eAAe;AACnB",sourcesContent:['<script setup lang="ts">\nimport { onMounted, ref } from "vue";\nimport { container } from "../../../../domain/core/diContainer";\nimport { INewItemProps } from "../../../../domain/presentation/dialogs/INewItemProps";\nimport { IDialog } from "../../../../domain/presentation/IDialog";\nimport { ICreateModel, ICreateModelParam } from "../../../../domain/useCase/ICreateModel";\nimport { ICreateModule } from "../../../../domain/useCase/ICreateModule";\nimport { IUseCaseExecutor } from "../../../../domain/useCase/IUseCaseExecutor";\nimport { IViewModel } from "../../../../domain/viewModel/IViewModel";\nimport { IStudio } from "../../../../domain/useCase/IStudio";\nimport { IModel, IModelBodyObject, IModule } from "../../../../domain/model/models";\nimport { IProcessEditorUtil } from "../../../../domain/useCase/IProcessEditorUtil";\nimport { createError } from "../../../../domain/model/shellError";\nimport IDEInput from "../../components/application/IDEInput.vue";\nimport { IIDEInputDefinitions } from "../../../../domain/presentation/IIDEInputDefinitions";\nimport { CryptoHelper } from "@stechquick/algae/lib/helpers/cryptoHelper";\nimport { IBpmnAdditionals } from \'@stechquick/algae/lib/qCloudTemp/quickCloud\';\n\ninterface INewItemPropsInline extends INewItemProps {\n    parentId: string;\n    parentName: string;\n    parentType: "folder" | "module" | "application";\n    createType: "Screen" | "Process Diagram" | "Entity" | "Process Wizard" | "Module" | "Flow";\n    duplicateFrom?: IModel;\n}\n\ninterface IProcessFlow {\n    type?: "create-new-process-flow" | "choose-existing-process-flow";\n    newProcessFlowName?: string;\n    newProcessFlowNameRenderKey?: string;\n    selectedExistingBpmnFileID?: string;\n    selectedExistingBpmnFileName: string;\n    isNewProcessFlowNameValid: boolean;\n}\n\nconst props = defineProps<INewItemPropsInline>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst studio = container.resolve<IStudio>(IStudio);\nconst processEditorUtil = container.resolve<IProcessEditorUtil>(IProcessEditorUtil);\nconst bpmnFiles = ref();\nif (props.createType == "Process Wizard") {\n    bpmnFiles.value = processEditorUtil.getModelsOfModule(viewModel.studio.items.find((item) => item.ID == props.parentId) as IModule).bpmns\n    .filter(bpmn => (bpmn.additionals as IBpmnAdditionals)?.isAutoGenerated != false && (bpmn.additionals as IBpmnAdditionals)?.isModifiedByUser != true)\n}\nconst emit = defineEmits(["close"]);\n\n// module\nconst isDescValid = ref<boolean>(true);\n\n// entity\nconst isNameValid = ref<boolean>(false);\n\nconst validations = ref<Record<"name" | "description", IIDEInputDefinitions["validations"]>>({\n    name: { minAndMaxLength: { min: 3, max: 40 }, availableCharacters: true, nonSpaceCharacter: true },\n    description: { minAndMaxLength: { min: 3, max: 100 }, availableCharacters: true, nonSpaceCharacter: false },\n});\n\nconst isModule = ref(false);\nconst isFolder = ref(false);\nconst isModel = ref(false);\nconst name = ref("");\nconst description = ref("");\n\nconst isEntity = ref(false);\nconst isScreen = ref(false);\nconst isProcess = ref(false);\nconst isProcessDiagram = ref(false);\nconst isEmptyPage = ref(false);\nconst isQuickComponent = ref(false);\nconst isQuickTemplate = ref(false);\nconst isImportFromFile = ref(false);\nconst isGenerateFromEntity = ref(false);\nconst isFlow = ref(false);\n\nconst createButtonVisibility = ref(true);\n\nconst processFlow = ref({\n    selectedExistingBpmnFileName: "",\n    isNewProcessFlowNameValid: false,\n    newProcessFlowName: "",\n    newProcessFlowNameRenderKey: CryptoHelper.CreateGuid(),\n} as IProcessFlow);\n\nif (props.parentType === "module") {\n    onTypeSelect("model");\n}\nonMounted(() => {\n    debugger;\n    switch (props.createType) {\n        case "Screen":\n            isModule.value = false;\n            isEmptyPage.value = true;\n            isModel.value = true;\n            isScreen.value = true;\n            isEntity.value = isProcessDiagram.value = isProcess.value = isFlow.value = false;\n            createButtonVisibility.value = true;\n            isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false;\n            break;\n        case "Process Diagram":\n            (isProcess.value = false), (isProcessDiagram.value = true), (isEntity.value = isScreen.value = isFlow.value = false);\n            createButtonVisibility.value = true;\n            break;\n        case "Entity":\n            isEntity.value = true;\n            isScreen.value = isProcessDiagram.value = isProcess.value = isFlow.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "Process Wizard":\n            isProcess.value = true;\n            isEntity.value = isProcessDiagram.value = isScreen.value = isFlow.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "Flow":\n            isFlow.value = true;\n            isModule.value = false;\n            isScreen.value = isProcessDiagram.value = isProcess.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "Module":\n            isModule.value = true;\n            isFolder.value = isProcessDiagram.value = isModel.value = false;\n            setAllSubRadiosFalse();\n            createButtonVisibility.value = true;\n            break;\n    }\n});\n\nfunction create() {\n    executor.execute(\n        async () => {\n            if (isModule.value) {\n                await executor.executeUseCase<ICreateModule>(ICreateModule, {\n                    name: name.value,\n                    applicationID: props.parentId,\n                    description: description.value,\n                });\n                emit("close");\n            } else if (isFolder.value) {\n                return;\n            } else if (isModel.value) {\n                let modelBody: Array<IModelBodyObject>;\n                let createObject: ICreateModelParam;\n                if (isEntity.value) {\n                    modelBody = [{ key: "entityDesigner", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "entityDesigner",\n                        modelAdditionals: {},\n                    };\n                } else if (isEmptyPage.value) {\n                    modelBody = [{ key: "qjson", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "qjson",\n                        modelAdditionals: { qjsonType: "qjson" },\n                    };\n                } else if (isQuickComponent.value) {\n                    modelBody = [{ key: "qjson", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "qjson",\n                        modelAdditionals: { qjsonType: "quickComponent" },\n                    };\n                } else if (isQuickTemplate.value) {\n                    modelBody = [{ key: "qjson", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "qjson",\n                        modelAdditionals: { qjsonType: "template" },\n                    };\n                } else if (isImportFromFile.value) {\n                    console.log("isImportFromFile");\n                    return;\n                } else if (isGenerateFromEntity.value) {\n                    console.log("isGenerateFromEntity");\n                    return;\n                } else if (isProcess.value) {\n                    const model = processEditorUtil.getEmptyProcessWizardModel(props.parentName);\n                    switch (processFlow.value.type) {\n                        case "create-new-process-flow":\n                            model.usingExistingBpmnFile = false;\n                            model.selectedExistingBpmnFileID = "";\n                            model.processFlowName = processFlow.value.newProcessFlowName || name.value;\n                            break;\n                        case "choose-existing-process-flow":\n                            model.usingExistingBpmnFile = true;\n                            model.selectedExistingBpmnFileID = processFlow.value.selectedExistingBpmnFileID || "";\n                            break;\n                        default:\n                            break;\n                    }\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelType: "process",\n                        modelBody: [{ key: "process", model }],\n                        modelAdditionals: {},\n                    };\n                } else if (isProcessDiagram.value) {\n                    modelBody = [{ key: "bpmn", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "bpmn",\n                        modelAdditionals: { isAutoGenerated: false, isModifiedByUser: false },\n                    };\n                } else if(isFlow.value){\n                    modelBody = [{ key: "flow", model: "" }];\n                    createObject = {\n                        name: name.value,\n                        parentObjectId: props.parentId,\n                        modelBody,\n                        modelType: "flow",\n                        modelAdditionals: {},\n                    };\n                } else {\n                    throw createError({ message: "unexpected case", type: "technical" });\n                }\n                if (props.duplicateFrom) {\n                    createObject.duplicateFrom = props.duplicateFrom;\n                }\n                const createdModel = await executor.executeUseCase<ICreateModel>(ICreateModel, createObject);\n                await onAfterModelCreated(createdModel);\n                emit("close");\n            }\n        },\n        { loading: true }\n    );\n}\n\nasync function onAfterModelCreated(createdModel: IModel) {\n    await studio.checkout(createdModel);\n    studio.openItem(createdModel);\n}\n// not: listHistories dialog componentı olacak.\n// örnek modelİd = vgvrxgap-ahvp-igjc-h2ft-w33p9q41 asd.qjson\n\n// parentObjectId = objectId\n// this.executor.executeUseCase<ICreateModel>(ICreateModel, { name: "model1", parentObjectId: createdParentObjectId!, modelType: "qjson", modelAdditionals: { qjsonType: "qjson" } });\n\nfunction setAllSubRadiosFalse() {\n    isEntity.value = isScreen.value = false;\n    isEmptyPage.value =\n        isQuickComponent.value =\n        isQuickTemplate.value =\n        isImportFromFile.value =\n        isGenerateFromEntity.value =\n        createButtonVisibility.value =\n            false;\n}\n\nfunction onTypeSelect(\n    type:\n        | "module"\n        | "folder"\n        | "model"\n        | "entity"\n        | "screen"\n        | "process"\n        | "emptyPage"\n        | "quickComponent"\n        | "quickTemplate"\n        | "importFromFile"\n        | "generateFromEntity"\n        | "flow"\n) {\n    switch (type) {\n        case "module":\n            isModule.value = true;\n            isFolder.value = isModel.value = false;\n            setAllSubRadiosFalse();\n            createButtonVisibility.value = true;\n            break;\n        case "folder":\n            isFolder.value = true;\n            isModule.value = isModel.value = false;\n            setAllSubRadiosFalse();\n            break;\n        case "model":\n            isModel.value = true;\n            isModule.value = isFolder.value = false;\n            setAllSubRadiosFalse();\n            break;\n        case "entity":\n            isEntity.value = true;\n            isScreen.value = isProcess.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "flow":\n            isFlow.value = true;\n            isScreen.value = isProcess.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "screen":\n            isModule.value = false;\n            isModel.value = true;\n            isScreen.value = true;\n            isEntity.value = isProcess.value = false;\n            createButtonVisibility.value = false;\n            break;\n        case "process":\n            isProcess.value = true;\n            isEntity.value = isScreen.value = false;\n            createButtonVisibility.value = true;\n            break; // openProcessWizard(); emit("close"); break;\n        case "emptyPage":\n            isEmptyPage.value = true;\n            isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "quickComponent":\n            isQuickComponent.value = true;\n            isEmptyPage.value = isQuickTemplate.value = isImportFromFile.value = isGenerateFromEntity.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "quickTemplate":\n            isQuickTemplate.value = true;\n            isEmptyPage.value = isQuickComponent.value = isImportFromFile.value = isGenerateFromEntity.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "importFromFile":\n            isImportFromFile.value = true;\n            isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isGenerateFromEntity.value = false;\n            createButtonVisibility.value = true;\n            break;\n        case "generateFromEntity":\n            isGenerateFromEntity.value = true;\n            isEmptyPage.value = isQuickComponent.value = isQuickTemplate.value = isImportFromFile.value = false;\n            createButtonVisibility.value = true;\n            break;\n    }\n}\n\nfunction upload(event: Event) {\n    // file = event.target.files[0];\n    // let formData = new FormData();\n    // formData.append(\'file\', file);\n}\n\nfunction handleCreateNewProcessFlow() {\n    switch (processFlow.value.type) {\n        case "create-new-process-flow":\n            processFlow.value.selectedExistingBpmnFileID = "";\n            processFlow.value.selectedExistingBpmnFileName = "";\n            processFlow.value.newProcessFlowNameRenderKey = CryptoHelper.CreateGuid();\n            setNewProcessFlowNameValue(name.value);\n            break;\n        case "choose-existing-process-flow":\n            processFlow.value.isNewProcessFlowNameValid = false;\n            setNewProcessFlowNameValue("");\n            break;\n        default:\n            break;\n    }\n}\n\nfunction setDescValue(desc: string) {\n    description.value = desc;\n}\n\nfunction handleSelectedExistingBpmnFileID($event: any) {\n    let selectedExistingBpmnFile = $event.target[$event.target.selectedIndex];\n    processFlow.value.selectedExistingBpmnFileID = selectedExistingBpmnFile.id;\n}\n\n// general validations methods\nfunction setDescValidationStatus(isValid: boolean) {\n    isDescValid.value = isValid;\n}\nfunction setNameValue(value: string) {\n    name.value = value;\n}\n\nfunction setNewProcessFlowNameValue(value: string) {\n    processFlow.value.newProcessFlowName = value;\n}\nfunction setNameValidationStatus(isValid: boolean) {\n    isNameValid.value = isValid;\n}\n\nfunction setNewProcessFlowNameValidationStatus(isValid: boolean) {\n    processFlow.value.isNewProcessFlowNameValid = isValid;\n}\n\n<\/script>\n\n<template>\n    <div>\n        <div></div>\n\n        \x3c!-- New Module --\x3e\n\n        <div class="nameInputDiv" v-if="isModule">\n            <div>\n                <IDEInput\n                    :isRequired="true"\n                    @getValue="setNameValue"\n                    @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `"\n                    :type="\'text\'"\n                    info-text="Name"\n                    :validations="validations.name"\n                />\n            </div>\n            <div style="margin-top: 15px">\n                <IDEInput\n                    :isRequired="false"\n                    @getValue="setDescValue"\n                    @validateStatus="setDescValidationStatus"\n                    :placeholder="\'Description\'"\n                    :type="\'textarea\'"\n                    info-text="Description"\n                    :validations="validations.description"\n                />\n            </div>\n        </div>\n\n        <div v-if="props.duplicateFrom" class="duplicateNoteDiv">\n            <span class="labelValue"\n                >* This new Item will be duplicated from <span class="duplicateText">{{ props.duplicateFrom.name }} </span></span\n            >\n        </div>\n        \x3c!-- New Entity --\x3e\n        <div class="nameInputDiv" v-if="isEntity">\n            <div>\n                <IDEInput\n                    :isRequired="true"\n                    @getValue="setNameValue"\n                    @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `"\n                    :type="\'text\'"\n                    info-text="Name"\n                    :validations="validations.name"\n                />\n            </div>\n        </div>\n\n        \x3c!-- New Flow --\x3e\n        <div class="nameInputDiv" v-if="isFlow">\n            <div>\n                <IDEInput\n                    :isRequired="true"\n                    @getValue="setNameValue"\n                    @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `"\n                    :type="\'text\'"\n                    info-text="Name"\n                    :validations="validations.name"\n                />\n            </div>\n        </div>\n\n        \x3c!-- New Process --\x3e\n        <div class="nameInputDiv" v-if="isProcess">\n            <div>\n                <IDEInput\n                    :isRequired="true"\n                    @getValue="setNameValue"\n                    @validateStatus="setNameValidationStatus"\n                    :placeholder="`Name`"\n                    :type="\'text\'"\n                    info-text="Process Name"\n                    :validations="validations.name"\n                />\n            </div>\n            <hr />\n            <div>\n                <input\n                    type="radio"\n                    id="create-new-process-flow"\n                    name="create-new-process-flow"\n                    value="create-new-process-flow"\n                    v-model="processFlow.type"\n                    @change="handleCreateNewProcessFlow"\n                />Create New Process Flow (BPMN)\n\n                <div v-if="processFlow.type == \'create-new-process-flow\'">\n                    <IDEInput\n                        :isRequired="true"\n                        @getValue="setNewProcessFlowNameValue"\n                        @validateStatus="setNewProcessFlowNameValidationStatus"\n                        :key="processFlow.newProcessFlowNameRenderKey"\n                        :value="processFlow.newProcessFlowName"\n                        :placeholder="`Name`"\n                        :type="\'text\'"\n                        info-text="Process Flow Name"\n                        :validations="validations.name"\n                    />\n                </div>\n\n                <br />\n\n                <input\n                    type="radio"\n                    id="create-new-process-flow"\n                    name="choose-existing-process-flow"\n                    value="choose-existing-process-flow"\n                    v-model="processFlow.type"\n                    @change="handleCreateNewProcessFlow"\n                />Choose Existing Process Flow (BPMN)\n\n                <div v-if="processFlow.type == \'choose-existing-process-flow\'">\n                    <span class="choose-existing-process-flow-dropdown-label">BPMN File</span\n                    ><i v-if="processFlow.type == \'choose-existing-process-flow\'" class="requiredIcon">*</i>\n                    <select\n                        class="choose-existing-process-flow-dropdown"\n                        name="choose-existing-process-flow"\n                        id="choose-existing-process-flow"\n                        v-model="processFlow.selectedExistingBpmnFileName"\n                        @change="handleSelectedExistingBpmnFileID"\n                        required\n                    >\n                        <option value="" disabled selected>Choose Existing Process Flow (BPMN)</option>\n                        <option v-for="bpmnFile in bpmnFiles" :id="bpmnFile.ID">\n                            {{ bpmnFile.name }}\n                        </option>\n                    </select>\n                </div>\n            </div>\n        </div>\n\n        <div class="nameInputDiv" v-if="isProcessDiagram">\n            <div>\n                <IDEInput\n                    :isRequired="true"\n                    @getValue="setNameValue"\n                    @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `"\n                    :type="\'text\'"\n                    info-text="Name"\n                    :validations="validations.name"\n                />\n            </div>\n        </div>\n\n        <div v-if="isScreen">\n            <div class="nameInputDiv" v-if="isEmptyPage || isQuickComponent || isQuickTemplate">\n                <IDEInput\n                    :isRequired="true"\n                    @getValue="setNameValue"\n                    @validateStatus="setNameValidationStatus"\n                    :placeholder="`Give your ${props.createType} a name `"\n                    :type="\'text\'"\n                    info-text="Name"\n                    :validations="validations.name"\n                />\n            </div>\n            <div class="nameInputDiv" v-if="isImportFromFile">\n                <span class="labelValue">Name</span>\n                <input class="nameInput" v-model="name" :placeholder="`Give your ${props.createType} a name `" />\n                <div>\n                    <input type="file" @change="upload($event)" accept=".qjson" />\n                </div>\n            </div>\n        </div>\n\n        \x3c!-- New Folder --\x3e\n        <div v-if="isFolder"></div>\n\n        <div class="createButtonDiv">\n            <button\n                :style="{\n                    opacity: isProcess\n                        ? !(isNameValid && isDescValid) ||\n                          !(!!processFlow.selectedExistingBpmnFileName.length || processFlow.isNewProcessFlowNameValid)\n                            ? \'0.5\'\n                            : \'\'\n                        : !(isNameValid && isDescValid)\n                        ? \'0.5\'\n                        : \'\',\n                }"\n                class="createButton"\n                @click="create()"\n                :disabled="\n                    isProcess\n                        ? !(isNameValid && isDescValid) ||\n                          !(!!processFlow.selectedExistingBpmnFileName.length || processFlow.isNewProcessFlowNameValid)\n                        : !(isNameValid && isDescValid)\n                "\n            >\n                {{ props.duplicateFrom ? "DUPLICATE" : "CREATE" }}\n            </button>\n        </div>\n    </div>\n</template>\n\n<style scoped>\n.createButtonDiv {\n    text-align: end;\n    padding-top: 21px;\n    height: 53px;\n    border-top: 1px solid #e0e0e0;\n    margin-top: 32px;\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-bottom: 16px;\n}\n\n.createButton {\n    background-color: #151233;\n    color: white;\n    border-radius: 4px;\n    border: none;\n    width: 74px;\n    height: 32px;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 12px;\n    font-family: "ROBOTO";\n    letter-spacing: 0.01px;\n    opacity: 1;\n}\n\n.nameInput {\n    width: 100%;\n    border: 1px solid #a1a1a1;\n    border-radius: 4px;\n    height: 40px;\n    opacity: 1;\n    outline: none;\n}\n\n::placeholder {\n    padding-left: 10px;\n    padding-top: 5px;\n    color: #a1a1a1;\n    font-style: normal;\n    font-family: "ROBOTO";\n    letter-spacing: 0px;\n    font-size: 14px;\n    opacity: 1px;\n}\n\n.nameInputDiv {\n    padding-left: 20px;\n    padding-right: 20px;\n    padding-top: 18px;\n}\n\n.duplicateNoteDiv {\n    margin-left: 20px;\n    margin-right: 20px;\n    margin-top: 18px;\n}\n\n.labelValue {\n    color: #151233;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    font-family: "ROBOTO";\n    letter-spacing: 0px;\n    opacity: 1;\n}\n.duplicateText {\n    font-weight: bold;\n    font-size: 14px;\n    font-family: "ROBOTO";\n    letter-spacing: 0px;\n    opacity: 1;\n}\n\n.choose-existing-process-flow-dropdown {\n    width: 511px;\n    border: 1px solid #a1a1a1;\n    border-radius: 4px;\n    height: 40px;\n    padding: 8px;\n    font-size: 14px;\n    font-family: "Roboto";\n}\n.choose-existing-process-flow-dropdown-label {\n    color: #151233;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 14px;\n    letter-spacing: 0px;\n    opacity: 1;\n    font-family: "Roboto";\n}\n\n.requiredIcon {\n    color: #757575;\n    font-size: 15px;\n}\n</style>\n'],sourceRoot:""}]);const s=o},301:(e,n,a)=>{a.r(n),a.d(n,{default:()=>re});var t=a(2068),i=a(9045),l=a(1705),o=a(1407),s=a(3734),r=a(9388),d=a(2996),c=a(664),u=a(7422),p=a(3900),m=a(7409),v=a(7716),f=a(9969),y=a(1461);const A=e=>((0,t.dD)("data-v-b49cac30"),e=e(),(0,t.Cn)(),e),w=A((()=>(0,t._)("div",null,null,-1))),I={key:0,class:"nameInputDiv"},g={style:{"margin-top":"15px"}},B={key:1,class:"duplicateNoteDiv"},x={class:"labelValue"},F=(0,t.Uk)("* This new Item will be duplicated from "),b={class:"duplicateText"},C={key:2,class:"nameInputDiv"},h={key:3,class:"nameInputDiv"},k={key:4,class:"nameInputDiv"},N=A((()=>(0,t._)("hr",null,null,-1))),E=(0,t.Uk)("Create New Process Flow (BPMN) "),P={key:0},D=A((()=>(0,t._)("br",null,null,-1))),V=(0,t.Uk)("Choose Existing Process Flow (BPMN) "),q={key:1},M=A((()=>(0,t._)("span",{class:"choose-existing-process-flow-dropdown-label"},"BPMN File",-1))),T={key:0,class:"requiredIcon"},j=A((()=>(0,t._)("option",{value:"",disabled:"",selected:""},"Choose Existing Process Flow (BPMN)",-1))),S=["id"],O={key:5,class:"nameInputDiv"},R={key:6},G={key:0,class:"nameInputDiv"},U={key:1,class:"nameInputDiv"},z=A((()=>(0,t._)("span",{class:"labelValue"},"Name",-1))),_=["placeholder"],H={key:7},Z={class:"createButtonDiv"},Q=["disabled"],W=(0,t.aZ)({__name:"newItem",props:{parentId:null,parentName:null,parentType:null,createType:null,duplicateFrom:null},emits:["close"],setup(e,{emit:n}){const a=e,A=s.nC.resolve(u.J),W=s.nC.resolve(c.y),Y=s.nC.resolve(p.c),$=s.nC.resolve(m.s),K=(0,o.iH)();"Process Wizard"==a.createType&&(K.value=$.getModelsOfModule(A.studio.items.find((e=>e.ID==a.parentId))).bpmns.filter((e=>{var n,a;return 0!=(null===(n=e.additionals)||void 0===n?void 0:n.isAutoGenerated)&&1!=(null===(a=e.additionals)||void 0===a?void 0:a.isModifiedByUser)})));const L=(0,o.iH)(!0),X=(0,o.iH)(!1),J=(0,o.iH)({name:{minAndMaxLength:{min:3,max:40},availableCharacters:!0,nonSpaceCharacter:!0},description:{minAndMaxLength:{min:3,max:100},availableCharacters:!0,nonSpaceCharacter:!1}}),ee=(0,o.iH)(!1),ne=(0,o.iH)(!1),ae=(0,o.iH)(!1),te=(0,o.iH)(""),ie=(0,o.iH)(""),le=(0,o.iH)(!1),oe=(0,o.iH)(!1),se=(0,o.iH)(!1),re=(0,o.iH)(!1),de=(0,o.iH)(!1),ce=(0,o.iH)(!1),ue=(0,o.iH)(!1),pe=(0,o.iH)(!1),me=(0,o.iH)(!1),ve=(0,o.iH)(!1),fe=(0,o.iH)(!0),ye=(0,o.iH)({selectedExistingBpmnFileName:"",isNewProcessFlowNameValid:!1,newProcessFlowName:"",newProcessFlowNameRenderKey:y.j.CreateGuid()});function Ae(){le.value=oe.value=!1,de.value=ce.value=ue.value=pe.value=me.value=fe.value=!1}function we(){switch(ye.value.type){case"create-new-process-flow":ye.value.selectedExistingBpmnFileID="",ye.value.selectedExistingBpmnFileName="",ye.value.newProcessFlowNameRenderKey=y.j.CreateGuid(),Fe(te.value);break;case"choose-existing-process-flow":ye.value.isNewProcessFlowNameValid=!1,Fe("")}}function Ie(e){ie.value=e}function ge(e){let n=e.target[e.target.selectedIndex];ye.value.selectedExistingBpmnFileID=n.id}function Be(e){L.value=e}function xe(e){te.value=e}function Fe(e){ye.value.newProcessFlowName=e}function be(e){X.value=e}function Ce(e){ye.value.isNewProcessFlowNameValid=e}return"module"===a.parentType&&(ae.value=!0,ee.value=ne.value=!1,Ae()),(0,t.bv)((()=>{switch(a.createType){case"Screen":ee.value=!1,de.value=!0,ae.value=!0,oe.value=!0,le.value=re.value=se.value=ve.value=!1,fe.value=!0,ce.value=ue.value=pe.value=me.value=!1;break;case"Process Diagram":se.value=!1,re.value=!0,le.value=oe.value=ve.value=!1,fe.value=!0;break;case"Entity":le.value=!0,oe.value=re.value=se.value=ve.value=!1,fe.value=!0;break;case"Process Wizard":se.value=!0,le.value=re.value=oe.value=ve.value=!1,fe.value=!0;break;case"Flow":ve.value=!0,ee.value=!1,oe.value=re.value=se.value=!1,fe.value=!0;break;case"Module":ee.value=!0,ne.value=re.value=ae.value=!1,Ae(),fe.value=!0}})),(e,o)=>((0,t.wg)(),(0,t.iD)("div",null,[w,(0,t.kq)(" New Module "),ee.value?((0,t.wg)(),(0,t.iD)("div",I,[(0,t._)("div",null,[(0,t.Wm)(f.Z,{isRequired:!0,onGetValue:xe,onValidateStatus:be,placeholder:`Give your ${a.createType} a name `,type:"text","info-text":"Name",validations:J.value.name},null,8,["placeholder","validations"])]),(0,t._)("div",g,[(0,t.Wm)(f.Z,{isRequired:!1,onGetValue:Ie,onValidateStatus:Be,placeholder:"Description",type:"textarea","info-text":"Description",validations:J.value.description},null,8,["validations"])])])):(0,t.kq)("v-if",!0),a.duplicateFrom?((0,t.wg)(),(0,t.iD)("div",B,[(0,t._)("span",x,[F,(0,t._)("span",b,(0,i.toDisplayString)(a.duplicateFrom.name),1)])])):(0,t.kq)("v-if",!0),(0,t.kq)(" New Entity "),le.value?((0,t.wg)(),(0,t.iD)("div",C,[(0,t._)("div",null,[(0,t.Wm)(f.Z,{isRequired:!0,onGetValue:xe,onValidateStatus:be,placeholder:`Give your ${a.createType} a name `,type:"text","info-text":"Name",validations:J.value.name},null,8,["placeholder","validations"])])])):(0,t.kq)("v-if",!0),(0,t.kq)(" New Flow "),ve.value?((0,t.wg)(),(0,t.iD)("div",h,[(0,t._)("div",null,[(0,t.Wm)(f.Z,{isRequired:!0,onGetValue:xe,onValidateStatus:be,placeholder:`Give your ${a.createType} a name `,type:"text","info-text":"Name",validations:J.value.name},null,8,["placeholder","validations"])])])):(0,t.kq)("v-if",!0),(0,t.kq)(" New Process "),se.value?((0,t.wg)(),(0,t.iD)("div",k,[(0,t._)("div",null,[(0,t.Wm)(f.Z,{isRequired:!0,onGetValue:xe,onValidateStatus:be,placeholder:"Name",type:"text","info-text":"Process Name",validations:J.value.name},null,8,["validations"])]),N,(0,t._)("div",null,[(0,t.wy)((0,t._)("input",{type:"radio",id:"create-new-process-flow",name:"create-new-process-flow",value:"create-new-process-flow","onUpdate:modelValue":o[0]||(o[0]=e=>ye.value.type=e),onChange:we},null,544),[[l.vModelRadio,ye.value.type]]),E,"create-new-process-flow"==ye.value.type?((0,t.wg)(),(0,t.iD)("div",P,[((0,t.wg)(),(0,t.j4)(f.Z,{isRequired:!0,onGetValue:Fe,onValidateStatus:Ce,key:ye.value.newProcessFlowNameRenderKey,value:ye.value.newProcessFlowName,placeholder:"Name",type:"text","info-text":"Process Flow Name",validations:J.value.name},null,8,["value","validations"]))])):(0,t.kq)("v-if",!0),D,(0,t.wy)((0,t._)("input",{type:"radio",id:"create-new-process-flow",name:"choose-existing-process-flow",value:"choose-existing-process-flow","onUpdate:modelValue":o[1]||(o[1]=e=>ye.value.type=e),onChange:we},null,544),[[l.vModelRadio,ye.value.type]]),V,"choose-existing-process-flow"==ye.value.type?((0,t.wg)(),(0,t.iD)("div",q,[M,"choose-existing-process-flow"==ye.value.type?((0,t.wg)(),(0,t.iD)("i",T,"*")):(0,t.kq)("v-if",!0),(0,t.wy)((0,t._)("select",{class:"choose-existing-process-flow-dropdown",name:"choose-existing-process-flow",id:"choose-existing-process-flow","onUpdate:modelValue":o[2]||(o[2]=e=>ye.value.selectedExistingBpmnFileName=e),onChange:ge,required:""},[j,((0,t.wg)(!0),(0,t.iD)(t.HY,null,(0,t.Ko)(K.value,(e=>((0,t.wg)(),(0,t.iD)("option",{id:e.ID},(0,i.toDisplayString)(e.name),9,S)))),256))],544),[[l.vModelSelect,ye.value.selectedExistingBpmnFileName]])])):(0,t.kq)("v-if",!0)])])):(0,t.kq)("v-if",!0),re.value?((0,t.wg)(),(0,t.iD)("div",O,[(0,t._)("div",null,[(0,t.Wm)(f.Z,{isRequired:!0,onGetValue:xe,onValidateStatus:be,placeholder:`Give your ${a.createType} a name `,type:"text","info-text":"Name",validations:J.value.name},null,8,["placeholder","validations"])])])):(0,t.kq)("v-if",!0),oe.value?((0,t.wg)(),(0,t.iD)("div",R,[de.value||ce.value||ue.value?((0,t.wg)(),(0,t.iD)("div",G,[(0,t.Wm)(f.Z,{isRequired:!0,onGetValue:xe,onValidateStatus:be,placeholder:`Give your ${a.createType} a name `,type:"text","info-text":"Name",validations:J.value.name},null,8,["placeholder","validations"])])):(0,t.kq)("v-if",!0),pe.value?((0,t.wg)(),(0,t.iD)("div",U,[z,(0,t.wy)((0,t._)("input",{class:"nameInput","onUpdate:modelValue":o[3]||(o[3]=e=>te.value=e),placeholder:`Give your ${a.createType} a name `},null,8,_),[[l.vModelText,te.value]]),(0,t._)("div",null,[(0,t._)("input",{type:"file",onChange:o[4]||(o[4]=e=>{}),accept:".qjson"},null,32)])])):(0,t.kq)("v-if",!0)])):(0,t.kq)("v-if",!0),(0,t.kq)(" New Folder "),ne.value?((0,t.wg)(),(0,t.iD)("div",H)):(0,t.kq)("v-if",!0),(0,t._)("div",Z,[(0,t._)("button",{style:(0,i.normalizeStyle)({opacity:se.value?X.value&&L.value&&(ye.value.selectedExistingBpmnFileName.length||ye.value.isNewProcessFlowNameValid)?"":"0.5":X.value&&L.value?"":"0.5"}),class:"createButton",onClick:o[5]||(o[5]=e=>{W.execute((async()=>{if(ee.value)await W.executeUseCase(d.z,{name:te.value,applicationID:a.parentId,description:ie.value}),n("close");else{if(ne.value)return;if(ae.value){let e,t;if(le.value)e=[{key:"entityDesigner",model:""}],t={name:te.value,parentObjectId:a.parentId,modelBody:e,modelType:"entityDesigner",modelAdditionals:{}};else if(de.value)e=[{key:"qjson",model:""}],t={name:te.value,parentObjectId:a.parentId,modelBody:e,modelType:"qjson",modelAdditionals:{qjsonType:"qjson"}};else if(ce.value)e=[{key:"qjson",model:""}],t={name:te.value,parentObjectId:a.parentId,modelBody:e,modelType:"qjson",modelAdditionals:{qjsonType:"quickComponent"}};else if(ue.value)e=[{key:"qjson",model:""}],t={name:te.value,parentObjectId:a.parentId,modelBody:e,modelType:"qjson",modelAdditionals:{qjsonType:"template"}};else{if(pe.value)return void console.log("isImportFromFile");if(me.value)return void console.log("isGenerateFromEntity");if(se.value){const e=$.getEmptyProcessWizardModel(a.parentName);switch(ye.value.type){case"create-new-process-flow":e.usingExistingBpmnFile=!1,e.selectedExistingBpmnFileID="",e.processFlowName=ye.value.newProcessFlowName||te.value;break;case"choose-existing-process-flow":e.usingExistingBpmnFile=!0,e.selectedExistingBpmnFileID=ye.value.selectedExistingBpmnFileID||""}t={name:te.value,parentObjectId:a.parentId,modelType:"process",modelBody:[{key:"process",model:e}],modelAdditionals:{}}}else if(re.value)e=[{key:"bpmn",model:""}],t={name:te.value,parentObjectId:a.parentId,modelBody:e,modelType:"bpmn",modelAdditionals:{isAutoGenerated:!1,isModifiedByUser:!1}};else{if(!ve.value)throw(0,v.Tr)({message:"unexpected case",type:"technical"});e=[{key:"flow",model:""}],t={name:te.value,parentObjectId:a.parentId,modelBody:e,modelType:"flow",modelAdditionals:{}}}}a.duplicateFrom&&(t.duplicateFrom=a.duplicateFrom);const i=await W.executeUseCase(r.E,t);await async function(e){await Y.checkout(e),Y.openItem(e)}(i),n("close")}}}),{loading:!0})}),disabled:se.value?!(X.value&&L.value&&(ye.value.selectedExistingBpmnFileName.length||ye.value.isNewProcessFlowNameValid)):!(X.value&&L.value)},(0,i.toDisplayString)(a.duplicateFrom?"DUPLICATE":"CREATE"),13,Q)])]))}});var Y=a(5701),$=a.n(Y),K=a(8236),L=a.n(K),X=a(6080),J=a.n(X),ee=a(6850),ne=a.n(ee),ae=a(7182),te=a.n(ae),ie=a(9213),le=a.n(ie),oe=a(813),se={};se.styleTagTransform=le(),se.setAttributes=ne(),se.insert=J().bind(null,"head"),se.domAPI=L(),se.insertStyleElement=te(),$()(oe.Z,se),oe.Z&&oe.Z.locals&&oe.Z.locals;const re=(0,a(1419).Z)(W,[["__scopeId","data-v-b49cac30"]])}}]);
//# sourceMappingURL=301.js.map
{"version":3,"file":"458.js","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?1fe2","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?b651","webpack://qcloud_shell/./src/presentation/vue3/components/spinner.vue?bfe9","webpack://qcloud_shell/./src/presentation/vue3/components/spinner.vue","webpack://qcloud_shell/./src/presentation/vue3/components/spinner.vue?e2d0","webpack://qcloud_shell/./src/presentation/vue3/components/spinner.vue?404d","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?1e52","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?c262","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue?1ac8","webpack://qcloud_shell/./src/presentation/vue3/components/dialogs/deploySettings.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.deploy-setting-container[data-v-79436c2f] {\\n    padding: 16px 20px 20px 20px;\\n    height: 495px;\\n    overflow-y: auto;\\n}\\n.previous-button[data-v-79436c2f] {\\n    width: 68px;\\n    height: 32px;\\n    border: none;\\n    background: #f5f5f500 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    font-weight: bold;\\n    color: #607d8b;\\n    text-align: center;\\n    margin-right: 8px;\\n    float: right;\\n}\\n.save-button[data-v-79436c2f] {\\n    width: 74px;\\n    height: 32px;\\n    border: none;\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    color: #ffffff;\\n    text-align: center;\\n    float: right;\\n}\\n.VueTables__heading[data-v-79436c2f] {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    letter-spacing: 0px;\\n    color: #616161;\\n}\\n.title[data-v-79436c2f] {\\n    font-family: 'Roboto';\\n    font-size: 20px;\\n    font-weight: bold;\\n    color: #151233;\\n}\\n.product-title[data-v-79436c2f] {\\n    font-family: 'Roboto';\\n    font-weight: bold;\\n    font-size: 14px;\\n    color: #151233;\\n    margin-left: 6px;\\n    margin-top: 20px;\\n}\\n.product-input-container[data-v-79436c2f] {\\n    position: relative;\\n    max-width: max-content;\\n}\\n.input-container[data-v-79436c2f] {\\n    position: relative;\\n    max-width: max-content;\\n    margin-left: 20px;\\n}\\n.icon-container[data-v-79436c2f] {\\n    position: absolute;\\n    right: 24px;\\n    top: 7px;\\n}\\ninput[data-v-79436c2f] {\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #a1a1a1;\\n    border-radius: 4px;\\n    padding: 5px 0px 6px 12px;\\n    font-family: \\\"Roboto\\\";\\n    font-size: 14px;\\n}\\ninput[data-v-79436c2f]:disabled {\\n    background-color: rgba(59, 59, 59, 0.3);\\n}\\n.module-input[data-v-79436c2f] {\\n    width: 154px;\\n    height: 30px;\\n}\\n.product-input[data-v-79436c2f] {\\n    width: 230px;\\n    height: 30px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/deploySettings.vue\"],\"names\":[],\"mappings\":\";AA2lBA;IACI,4BAA4B;IAC5B,aAAa;IACb,gBAAgB;AACpB;AACA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,iDAAiD;IACjD,kBAAkB;IAClB,qBAAqB;IACrB,iBAAiB;IACjB,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,YAAY;AAChB;AACA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,+CAA+C;IAC/C,kBAAkB;IAClB,qBAAqB;IACrB,cAAc;IACd,kBAAkB;IAClB,YAAY;AAChB;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,mBAAmB;IACnB,cAAc;AAClB;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,cAAc;AAClB;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,eAAe;IACf,cAAc;IACd,gBAAgB;IAChB,gBAAgB;AACpB;AAEA;IACI,kBAAkB;IAClB,sBAAsB;AAC1B;AAEA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,iBAAiB;AACrB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,QAAQ;AACZ;AAEA;IACI,+CAA+C;IAC/C,yBAAyB;IACzB,kBAAkB;IAClB,yBAAyB;IACzB,qBAAqB;IACrB,eAAe;AACnB;AACA;IACI,uCAAuC;AAC3C;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;AAEA;IACI,YAAY;IACZ,YAAY;AAChB\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\">\\nimport { onBeforeMount, ref } from \\\"vue\\\";\\nimport { container } from \\\"tsyringe\\\";\\nimport { IViewModel } from \\\"../../../../domain/viewModel/IViewModel\\\";\\nimport { IModule, IModuleSettingsItem, IApplicationSettingsItem, IModuleDeployParameters } from \\\"../../../../domain/model/models\\\";\\nimport { ILocalization } from \\\"../../../../domain/infrastructure/ILocalization\\\";\\nimport { IGitProject } from \\\"../../../../domain/infrastructure/IProviderApi\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IDebounce } from \\\"../../../../domain/infrastructure/IDebounce\\\";\\nimport { IApplicationSettings } from \\\"../../../../domain/useCase/IApplicationSettings\\\";\\nimport { INotification } from \\\"../../../../domain/presentation/INotification\\\";\\nimport Spinner from \\\"../spinner.vue\\\"\\n\\nonBeforeMount(() => {\\n    fillDatatableRow();\\n    getGitGroupsFromProvider();\\n    getProductsFromProvider();\\n});\\n\\ninterface IProduct {\\n    products: Array<IGitProject>;\\n    disabled: boolean;\\n    loaded: boolean;\\n}\\n\\ninterface IGroup {\\n    value: IGitProject;\\n    microservicesCache: Array<IGitProject>;\\n    requestedBefore: boolean;\\n}\\n\\ninterface IGitGroup {\\n    groups: Array<IGroup>;\\n    disabled: boolean;\\n    loaded: boolean;\\n}\\n\\ninterface IModuleDataTableRow {\\n    moduleID: IModule[\\\"ID\\\"];\\n    moduleName: IModule[\\\"name\\\"];\\n    gitGroupName: string;\\n    gitGroupID: number;\\n    microservices: Array<IGitProject>;\\n    microservicesDisable: boolean;\\n    microserviceLoading: boolean;\\n    microserviceName: string;\\n    microserviceID: number;\\n}\\n\\ninterface IAppDataTableRow {\\n    appID: IModule[\\\"ID\\\"];\\n    appName: IModule[\\\"name\\\"];\\n    microservices: Array<IGitProject>;\\n    microservicesDisable: boolean;\\n}\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\n\\nconst localization = container.resolve<ILocalization>(ILocalization);\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst notification = container.resolve<INotification>(INotification);\\nconst appSettingsUseCase = container.resolve<IApplicationSettings>(IApplicationSettings);\\nconst debouncer = container.resolve<IDebounce>(IDebounce);\\n\\nconst gitProducts = ref({ products: [], disabled: false, loaded: false } as IProduct);\\nconst gitGroups = ref({ groups: [], disabled: false, loaded: false } as IGitGroup);\\nconst currentApp = ref(viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\nconst appSettings = ref({ product: { ID: 0, name: \\\"\\\" }, gitGroup: { ID: 0, name: \\\"\\\" }, microservice: { ID: 0, name: \\\"\\\", loading: false } });\\nconst modulesDataTableRows = ref(Array<IModuleDataTableRow>());\\nconst appDataTableRows = ref(Array<IAppDataTableRow>());\\n\\nconst modulesAppDatatableColumns = ref([\\\"moduleName\\\", \\\"gitGroup\\\", \\\"service\\\"]);\\nconst appAppDatatableColumns = ref([\\\"appName\\\", \\\"gitGroup\\\", \\\"service\\\"]);\\nconst modulesOptionsDataTable = ref({\\n    resizableColumns: false,\\n    filterable: false,\\n    perPage: 3,\\n    perPageValues: [],\\n    headings: {\\n        moduleName: localization.get(\\\"moduleName\\\"),\\n        gitGroup: localization.get(\\\"gitGroup\\\"),\\n        microservice: localization.get(\\\"service\\\"),\\n    },\\n    sortable: [],\\n    texts: {\\n        count: \\\"\\\",\\n    },\\n});\\n\\nconst appOptionsDataTable = ref({\\n    resizableColumns: false,\\n    filterable: false,\\n    perPage: 1,\\n    perPageValues: [],\\n    headings: {\\n        appName: localization.get(\\\"appName\\\"),\\n        gitGroup: localization.get(\\\"gitGroup\\\"),\\n        microservice: localization.get(\\\"service\\\"),\\n    },\\n    sortable: [],\\n    texts: {\\n        count: \\\"\\\",\\n    },\\n});\\n\\nfunction fillDatatableRow() {\\n    modulesDataTableRows.value = viewModel.studio.items\\n        .filter((item) => item.objectType === \\\"module\\\")\\n        .map<IModuleDataTableRow>((item) => {\\n            const module: IModuleDataTableRow = {\\n                moduleID: item.ID,\\n                moduleName: item.name,\\n                gitGroupName: \\\"\\\",\\n                gitGroupID: (item as IModule).deployParameters?.gitGroupId || 0,\\n                microservices: [],\\n                microservicesDisable: true,\\n                microserviceLoading: false,\\n                microserviceName: \\\"\\\",\\n                microserviceID: (item as IModule).deployParameters?.gitServiceRepoId || 0,\\n            };\\n            return module;\\n        });\\n    appDataTableRows.value.push({\\n        appID: currentApp.value!.ID,\\n        appName: currentApp.value!.name,\\n        microservices: [],\\n        microservicesDisable: true,\\n    });\\n}\\n\\nfunction getProductsFromProvider() {\\n    appSettingsUseCase\\n        .getProjectsOfProduct()\\n        .then(res => {\\n            gitProducts.value.products = res.data.items;\\n            gitProducts.value.loaded = true;\\n            gitProducts.value.disabled = false;\\n            setSelectedProduct();\\n        })\\n        .catch(() => {\\n            gitProducts.value.loaded = true;\\n            gitProducts.value.disabled = true;\\n            notification.showNotification({ text: \\\"Error while fetching products\\\", type: \\\"error\\\" });\\n        });\\n}\\n\\nfunction setSelectedProduct() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            const currentProduct = gitProducts.value.products.find((product) => currentApp.value!.deployParameters!.gitProductRepoId == product.id);\\n            if (currentProduct) {\\n                appSettings.value.product = {\\n                    name: currentProduct.name,\\n                    ID: currentProduct.id,\\n                };\\n            }\\n        }\\n    }\\n}\\n\\nasync function getGitGroupsFromProvider() {\\n    appSettingsUseCase\\n        .getGroupNamesWithId()\\n        .then((res) => {\\n            res.data.items.forEach((fetchedGroup) =>\\n                gitGroups.value.groups.push({\\n                    value: fetchedGroup,\\n                    microservicesCache: [],\\n                    requestedBefore: false,\\n                })\\n            );\\n            gitGroups.value.loaded = true;\\n            gitGroups.value.disabled = false;\\n            setModulesSelectedGitGroups();\\n            setAppSelectedGitGroup();\\n        })\\n        .catch(() =>{\\n            gitGroups.value.loaded = true;\\n            gitGroups.value.disabled = true;\\n\\n            notification.showNotification({\\n                text: \\\"Error while fetching git groups\\\",\\n                type: \\\"error\\\",\\n            })\\n        }\\n        );\\n}\\n\\nfunction setModulesSelectedGitGroups() {\\n    modulesDataTableRows.value.forEach((row) => {\\n        if (row.gitGroupID !== 0) {\\n            const group = gitGroups.value.groups.find((group) => group.value.id == row.gitGroupID);\\n            if (group) {\\n                row.gitGroupName = group.value.name;\\n            } else {\\n                row.gitGroupID = 0;\\n            }\\n        }\\n    });\\n    setModulesSelectedMicroservices();\\n}\\n\\nfunction setAppSelectedGitGroup() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            const currentGitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.gitGroupId == group.value.id);\\n            if (currentGitGroup) {\\n                appSettings.value.gitGroup = {\\n                    name: currentGitGroup.value.name,\\n                    ID: currentGitGroup.value.id,\\n                };\\n            }\\n        }\\n    }\\n\\n    if (appSettings.value.gitGroup.ID !== 0) {\\n        const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\\n        if (group) {\\n            appSettings.value.gitGroup.name = group.value.name;\\n        } else {\\n            appSettings.value.gitGroup.ID = 0;\\n        }\\n    }\\n    setAppSelectedMicroservice();\\n}\\n\\nfunction setModulesSelectedMicroservices() {\\n    const groupIdList: Array<number> = modulesDataTableRows.value\\n        .map((row) => row.gitGroupID)\\n        .filter((id, index, self) => id !== 0 && self.indexOf(id) === index);\\n\\n    groupIdList.forEach((id) => {\\n        modulesDataTableRows.value.forEach(row => {\\n            if(row.gitGroupID == id) {\\n                row.microserviceLoading = true;\\n                row.microservicesDisable = false;\\n            }\\n        })\\n        appSettingsUseCase\\n            .getProjectsByGroupId(id)\\n            .then((res) => {\\n                let data = res.data.items;\\n                const group = gitGroups.value.groups.find((group) => group.value.id == id);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    modulesDataTableRows.value.forEach((row) => {\\n                        if (row.gitGroupID === id) {\\n                            row.microservices = data;\\n                            row.microserviceLoading = false;\\n                            if(row.microservices.length == 0) {\\n                                row.microservicesDisable = true;\\n                            }\\n                            if (row.microserviceID !== 0) {\\n                                const microservice = data.find((service) => service.id == row.microserviceID);\\n                                if (microservice) {\\n                                    row.microserviceName = microservice.name;\\n                                    row.microservicesDisable = false;\\n                                } else {\\n                                    row.microserviceID = 0;\\n                                    row.microservicesDisable = true;\\n                                }\\n                            }\\n                        }\\n                    });\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    });\\n}\\n\\nfunction setAppSelectedMicroservice() {\\n    if (appSettings.value.gitGroup.ID != 0) {\\n        appDataTableRows.value[0].microservicesDisable = false;\\n        appSettings.value.microservice.loading = true;\\n        appSettingsUseCase\\n            .getProjectsByGroupId(appSettings.value.gitGroup.ID)\\n            .then((res) => {\\n                let data = res.data.items; \\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    appDataTableRows.value[0].microservices = data;\\n                    appSettings.value.microservice.loading = false;\\n                    if (currentApp.value) {\\n                        if (currentApp.value.deployParameters) {\\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.gitServiceRepoId);\\n                            if (microservice) {\\n                                appSettings.value.microservice.name = microservice.name;\\n                                appSettings.value.microservice.ID = microservice.id;\\n                                appDataTableRows.value[0].microservicesDisable = false;\\n                            } else {\\n                                appSettings.value.microservice.ID = 0;\\n                            }\\n                        }\\n                    }\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    }\\n}\\n\\nfunction handleProductSelect() {\\n    const product = gitProducts.value.products.find((product) => product.name === appSettings.value.product.name);\\n    if (product) {\\n        appSettings.value.product.ID = product.id;\\n    } else {\\n        appSettings.value.product.name = \\\"\\\";\\n        appSettings.value.product.ID = 0;\\n    }\\n}\\n\\nasync function handleModulesGitGroupInput(selectedRow: IModuleDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.microservicesDisable = true;\\n    currentRow.microservices = [];\\n    currentRow.microserviceName = \\\"\\\";\\n    currentRow.microserviceID = 0;\\n\\n    if (selectedGitGroup) {\\n        currentRow.gitGroupID = selectedGitGroup.value.id;\\n        currentRow.gitGroupName = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getModuleMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.microservices = selectedGitGroup.microservicesCache;\\n            currentRow.microservicesDisable = !currentRow.microservices.length;\\n        }\\n    } else {\\n        currentRow.gitGroupName = selectedRow.gitGroupName;\\n        currentRow.gitGroupID = 0;\\n    }\\n}\\n\\nasync function handleAppGitGroupInput(selectedRow: IAppDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    currentRow.microservicesDisable = true;\\n    currentRow.microservices = [];\\n    appSettings.value.microservice.name = \\\"\\\";\\n    appSettings.value.microservice.ID = 0;\\n\\n    if (selectedGitGroup) {\\n        appSettings.value.gitGroup.ID = selectedGitGroup.value.id;\\n        appSettings.value.gitGroup.name = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getAppMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.microservices = selectedGitGroup.microservicesCache;\\n            currentRow.microservicesDisable = !currentRow.microservices.length;\\n        }\\n    } else {\\n        appSettings.value.gitGroup.ID = 0;\\n    }\\n}\\n\\nasync function getModuleMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IModuleDataTableRow) {\\n    currentRow.microserviceLoading = true;\\n    currentRow.microservicesDisable = false;\\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.microservices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.microservicesDisable = !currentRow.microservices.length;\\n    currentRow.microserviceLoading = false;\\n}\\n\\nasync function getAppMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\\n    appSettings.value.microservice.loading = true;\\n    currentRow.microservicesDisable = false;\\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.microservices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.microservicesDisable = !currentRow.microservices.length;\\n    appSettings.value.microservice.loading = false;\\n}\\n\\nasync function handleModulesGitGroupChange(selectedRow: IModuleDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.gitGroupID = selectedGitGroup?.value?.id || 0;\\n    currentRow.gitGroupName = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!currentRow.gitGroupID) {\\n        currentRow.microservices = [];\\n        currentRow.microservicesDisable = true;\\n        currentRow.microserviceName = \\\"\\\";\\n        currentRow.microserviceID = 0;\\n    }\\n}\\n\\nasync function handleAppGitGroupChange(selectedRow: IAppDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    appSettings.value.gitGroup.ID = selectedGitGroup?.value?.id || 0;\\n    appSettings.value.gitGroup.name = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!selectedGitGroup) {\\n        currentRow.microservices = [];\\n        currentRow.microservicesDisable = true;\\n        appSettings.value.microservice.name = \\\"\\\";\\n        appSettings.value.microservice.ID = 0;\\n    }\\n}\\n\\nfunction handleModulesMicroServiceChange(selectedRow: IModuleDataTableRow) {\\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === selectedRow.microserviceName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.microserviceName = selectedMicroservice?.name || \\\"\\\";\\n    currentRow.microserviceID = selectedMicroservice?.id || 0;\\n}\\n\\nfunction handleAppMicroServiceChange(selectedRow: IAppDataTableRow) {\\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === appSettings.value.microservice.name);\\n    appSettings.value.microservice.name = selectedMicroservice?.name || \\\"\\\";\\n    appSettings.value.microservice.ID = selectedMicroservice?.id || 0;\\n}\\n\\nasync function onSave() {\\n    if (currentApp.value) {\\n        let settings = {};\\n        const modulesSettings: Array<IModuleSettingsItem> = modulesDataTableRows.value\\n            .filter(\\n                (row) =>\\n                    row.microserviceID !=\\n                    (viewModel.studio.items.find((item) => item.ID == row.moduleID) as IModule).deployParameters?.gitServiceRepoId\\n            )\\n            .map((row) => ({\\n                moduleID: row.moduleID,\\n                deployParameters: {\\n                    gitGroupId: row.gitGroupID,\\n                    gitServiceRepoId: row.microserviceID,\\n                },\\n            }));\\n\\n        const applicationSettings: IApplicationSettingsItem = {\\n            applicationID: currentApp.value!.ID,\\n            deployParameters: {\\n                gitProductRepoId: appSettings.value.product.ID,\\n                gitGroupId: appSettings.value.gitGroup.ID,\\n                gitServiceRepoId: appSettings.value.microservice.ID,\\n            },\\n        };\\n\\n        settings = { modulesSettings };\\n\\n        if (\\n            currentApp.value.deployParameters?.gitProductRepoId != appSettings.value.product.ID ||\\n            currentApp.value.deployParameters?.gitServiceRepoId != appSettings.value.microservice.ID\\n        ) {\\n            settings = { ...settings, applicationSettings };\\n        }\\n\\n        await executor.execute(\\n            async () => {\\n                await appSettingsUseCase.update(settings);\\n            },\\n            { loading: true }\\n        );\\n        emit(\\\"close\\\");\\n    }\\n}\\n\\n</script>\\n\\n<template>\\n    <div class=\\\"deploy-setting-container\\\">\\n        <div class=\\\"title\\\">{{ localization.get(\\\"deploySettings_appSettings\\\") }}</div>\\n        <label for=\\\"product-input\\\" class=\\\"product-title\\\">{{ localization.get(\\\"product\\\") }}</label>\\n        <div class=\\\"product-input-container\\\">\\n            <input\\n                class=\\\"product-input\\\"\\n                list=\\\"products\\\"\\n                id=\\\"product-input\\\"\\n                placeholder=\\\"Select Product\\\"\\n                v-model=\\\"appSettings.product.name\\\"\\n                @change=\\\"handleProductSelect\\\"\\n                :disabled=\\\"gitProducts.disabled\\\"\\n            />\\n            <div class=\\\"icon-container\\\" v-if=\\\"!gitProducts.loaded\\\">\\n                <Spinner/>\\n            </div>\\n        </div>\\n        <datalist id=\\\"products\\\">\\n            <option value=\\\"\\\" disabled selected>Select Product for Application</option>\\n            <option v-for=\\\"product in gitProducts.products\\\">\\n                {{ product.name }}\\n            </option>\\n        </datalist>\\n        <v-client-table ref=\\\"table\\\" :data=\\\"appDataTableRows\\\" :columns=\\\"appAppDatatableColumns\\\" :options=\\\"appOptionsDataTable\\\">\\n            <template #appName=\\\"props\\\">\\n                <span>{{ props.row.appName }}</span>\\n            </template>\\n            <template #gitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input\\n                        class=\\\"module-input\\\"\\n                        list=\\\"app-git-groups\\\"\\n                        id=\\\"app-git-group-input\\\"\\n                        placeholder=\\\"Select Git Group\\\"\\n                        v-model=\\\"appSettings.gitGroup.name\\\"\\n                        @input=\\\"handleAppGitGroupInput(props.row)\\\"\\n                        @change=\\\"handleAppGitGroupChange(props.row)\\\"\\n                        :disabled=\\\"gitGroups.disabled\\\"\\n                    />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner/>\\n                    </div>\\n                </div>\\n                <datalist id=\\\"app-git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #service=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input\\n                        class=\\\"module-input\\\"\\n                        :list=\\\"props.row.appID\\\"\\n                        id=\\\"app-microservice-input\\\"\\n                        placeholder=\\\"Select Microservice\\\"\\n                        v-model=\\\"appSettings.microservice.name\\\"\\n                        @change=\\\"handleAppMicroServiceChange(props.row)\\\"\\n                        :disabled=\\\"props.row.microservicesDisable\\\"\\n                    />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"appSettings.microservice.loading\\\">\\n                        <Spinner/>\\n                    </div>\\n                </div>\\n\\n                <datalist :id=\\\"props.row.appID\\\">\\n                    <option v-for=\\\"microservice in props.row.microservices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n        </v-client-table>\\n\\n        <div class=\\\"title\\\">{{ localization.get(\\\"deploySettings_moduleSettings\\\") }}</div>\\n        <v-client-table ref=\\\"table\\\" :data=\\\"modulesDataTableRows\\\" :columns=\\\"modulesAppDatatableColumns\\\" :options=\\\"modulesOptionsDataTable\\\">\\n            <template #moduleName=\\\"props\\\">\\n                <span>{{ props.row.moduleName }}</span>\\n            </template>\\n            <template #gitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input\\n                        class=\\\"module-input\\\"\\n                        list=\\\"git-groups\\\"\\n                        id=\\\"git-group-input\\\"\\n                        placeholder=\\\"Select Git Group\\\"\\n                        v-model=\\\"props.row.gitGroupName\\\"\\n                        @input=\\\"handleModulesGitGroupInput(props.row)\\\"\\n                        @change=\\\"handleModulesGitGroupChange(props.row)\\\"\\n                        :disabled=\\\"gitGroups.disabled\\\"\\n                    />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner/>\\n                    </div>\\n                </div>\\n                <datalist id=\\\"git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #service=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input\\n                        class=\\\"module-input\\\"\\n                        :list=\\\"props.row.moduleID\\\"\\n                        id=\\\"microservice-input\\\"\\n                        placeholder=\\\"Select Microservice\\\"\\n                        v-model=\\\"props.row.microserviceName\\\"\\n                        @change=\\\"handleModulesMicroServiceChange(props.row)\\\"\\n                        :disabled=\\\"props.row.microservicesDisable\\\"\\n                    />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"props.row.microserviceLoading\\\">\\n                        <Spinner/>\\n                    </div>\\n                </div>\\n                <datalist :id=\\\"props.row.moduleID\\\">\\n                    <option v-for=\\\"microservice in props.row.microservices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n        </v-client-table>\\n        <hr />\\n        <button class=\\\"save-button\\\" @click=\\\"onSave\\\">{{ localization.get(\\\"save\\\") }}</button>\\n        <button class=\\\"previous-button\\\" data-v-33a93b5b=\\\"\\\" @click=\\\"() => emit('close')\\\">\\n            {{ localization.get(\\\"cancel\\\") }}\\n        </button>\\n    </div>\\n</template>\\n\\n<style scoped>\\n.deploy-setting-container {\\n    padding: 16px 20px 20px 20px;\\n    height: 495px;\\n    overflow-y: auto;\\n}\\n.previous-button {\\n    width: 68px;\\n    height: 32px;\\n    border: none;\\n    background: #f5f5f500 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    font-weight: bold;\\n    color: #607d8b;\\n    text-align: center;\\n    margin-right: 8px;\\n    float: right;\\n}\\n.save-button {\\n    width: 74px;\\n    height: 32px;\\n    border: none;\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    color: #ffffff;\\n    text-align: center;\\n    float: right;\\n}\\n\\n.VueTables__heading {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    letter-spacing: 0px;\\n    color: #616161;\\n}\\n\\n.title {\\n    font-family: 'Roboto';\\n    font-size: 20px;\\n    font-weight: bold;\\n    color: #151233;\\n}\\n\\n.product-title {\\n    font-family: 'Roboto';\\n    font-weight: bold;\\n    font-size: 14px;\\n    color: #151233;\\n    margin-left: 6px;\\n    margin-top: 20px;\\n}\\n\\n.product-input-container {\\n    position: relative;\\n    max-width: max-content;\\n}\\n\\n.input-container {\\n    position: relative;\\n    max-width: max-content;\\n    margin-left: 20px;\\n}\\n\\n.icon-container {\\n    position: absolute;\\n    right: 24px;\\n    top: 7px;\\n}\\n\\ninput {\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #a1a1a1;\\n    border-radius: 4px;\\n    padding: 5px 0px 6px 12px;\\n    font-family: \\\"Roboto\\\";\\n    font-size: 14px;\\n}\\ninput:disabled {\\n    background-color: rgba(59, 59, 59, 0.3);\\n}\\n\\n.module-input {\\n    width: 154px;\\n    height: 30px;\\n}\\n\\n.product-input {\\n    width: 230px;\\n    height: 30px;\\n}\\n</style>\\n<style>\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"],\\ntr,\\ntd {\\n    border-left: hidden;\\n    border-right: hidden;\\n    --bs-table-striped-bg: white;\\n    padding: 14px 0px 14px 0px!important;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > thead,\\nth {\\n    border-style: hidden;\\n    padding-left: 0px !important;\\n    padding-bottom: 4px !important;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > thead > tr > th > span {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    color: #616161;\\n    padding-left: 20px;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > tbody > tr > td > span {\\n    font-family: 'Roboto';\\n    font-size: '14px';\\n    color: #212121;\\n    vertical-align: middle;\\n    margin-left: 20px;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"],\\ntr,\\ntd {\\n    border-left: hidden;\\n    border-right: hidden;\\n    --bs-table-striped-bg: white;\\n    padding: 14px 0px 14px 0px!important;\\n}\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > thead,\\nth {\\n    border-style: hidden;\\n    padding-left: 0px !important;\\n    padding-bottom: 4px !important;\\n}\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > thead > tr > th > span {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    color: #616161;\\n    padding-left: 20px;\\n}\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > tbody > tr > td > span {\\n    font-family: 'Roboto';\\n    font-size: '14px';\\n    color: #212121;\\n    vertical-align: middle;\\n    margin-left: 20px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/dialogs/deploySettings.vue\"],\"names\":[],\"mappings\":\";AAyrBA;;;IAGI,mBAAmB;IACnB,oBAAoB;IACpB,4BAA4B;IAC5B,oCAAoC;AACxC;AAEA;;IAEI,oBAAoB;IACpB,4BAA4B;IAC5B,8BAA8B;AAClC;AAEA;IACI,qBAAqB;IACrB,eAAe;IACf,iBAAiB;IACjB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,cAAc;IACd,sBAAsB;IACtB,iBAAiB;AACrB\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\">\\nimport { onBeforeMount, ref } from \\\"vue\\\";\\nimport { container } from \\\"tsyringe\\\";\\nimport { IViewModel } from \\\"../../../../domain/viewModel/IViewModel\\\";\\nimport { IModule, IModuleSettingsItem, IApplicationSettingsItem, IModuleDeployParameters } from \\\"../../../../domain/model/models\\\";\\nimport { ILocalization } from \\\"../../../../domain/infrastructure/ILocalization\\\";\\nimport { IGitProject } from \\\"../../../../domain/infrastructure/IProviderApi\\\";\\nimport { IUseCaseExecutor } from \\\"../../../../domain/useCase/IUseCaseExecutor\\\";\\nimport { IDebounce } from \\\"../../../../domain/infrastructure/IDebounce\\\";\\nimport { IApplicationSettings } from \\\"../../../../domain/useCase/IApplicationSettings\\\";\\nimport { INotification } from \\\"../../../../domain/presentation/INotification\\\";\\nimport Spinner from \\\"../spinner.vue\\\"\\n\\nonBeforeMount(() => {\\n    fillDatatableRow();\\n    getGitGroupsFromProvider();\\n    getProductsFromProvider();\\n});\\n\\ninterface IProduct {\\n    products: Array<IGitProject>;\\n    disabled: boolean;\\n    loaded: boolean;\\n}\\n\\ninterface IGroup {\\n    value: IGitProject;\\n    microservicesCache: Array<IGitProject>;\\n    requestedBefore: boolean;\\n}\\n\\ninterface IGitGroup {\\n    groups: Array<IGroup>;\\n    disabled: boolean;\\n    loaded: boolean;\\n}\\n\\ninterface IModuleDataTableRow {\\n    moduleID: IModule[\\\"ID\\\"];\\n    moduleName: IModule[\\\"name\\\"];\\n    gitGroupName: string;\\n    gitGroupID: number;\\n    microservices: Array<IGitProject>;\\n    microservicesDisable: boolean;\\n    microserviceLoading: boolean;\\n    microserviceName: string;\\n    microserviceID: number;\\n}\\n\\ninterface IAppDataTableRow {\\n    appID: IModule[\\\"ID\\\"];\\n    appName: IModule[\\\"name\\\"];\\n    microservices: Array<IGitProject>;\\n    microservicesDisable: boolean;\\n}\\n\\nconst emit = defineEmits([\\\"close\\\"]);\\n\\nconst localization = container.resolve<ILocalization>(ILocalization);\\nconst viewModel = container.resolve<IViewModel>(IViewModel);\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst notification = container.resolve<INotification>(INotification);\\nconst appSettingsUseCase = container.resolve<IApplicationSettings>(IApplicationSettings);\\nconst debouncer = container.resolve<IDebounce>(IDebounce);\\n\\nconst gitProducts = ref({ products: [], disabled: false, loaded: false } as IProduct);\\nconst gitGroups = ref({ groups: [], disabled: false, loaded: false } as IGitGroup);\\nconst currentApp = ref(viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\\nconst appSettings = ref({ product: { ID: 0, name: \\\"\\\" }, gitGroup: { ID: 0, name: \\\"\\\" }, microservice: { ID: 0, name: \\\"\\\", loading: false } });\\nconst modulesDataTableRows = ref(Array<IModuleDataTableRow>());\\nconst appDataTableRows = ref(Array<IAppDataTableRow>());\\n\\nconst modulesAppDatatableColumns = ref([\\\"moduleName\\\", \\\"gitGroup\\\", \\\"service\\\"]);\\nconst appAppDatatableColumns = ref([\\\"appName\\\", \\\"gitGroup\\\", \\\"service\\\"]);\\nconst modulesOptionsDataTable = ref({\\n    resizableColumns: false,\\n    filterable: false,\\n    perPage: 3,\\n    perPageValues: [],\\n    headings: {\\n        moduleName: localization.get(\\\"moduleName\\\"),\\n        gitGroup: localization.get(\\\"gitGroup\\\"),\\n        microservice: localization.get(\\\"service\\\"),\\n    },\\n    sortable: [],\\n    texts: {\\n        count: \\\"\\\",\\n    },\\n});\\n\\nconst appOptionsDataTable = ref({\\n    resizableColumns: false,\\n    filterable: false,\\n    perPage: 1,\\n    perPageValues: [],\\n    headings: {\\n        appName: localization.get(\\\"appName\\\"),\\n        gitGroup: localization.get(\\\"gitGroup\\\"),\\n        microservice: localization.get(\\\"service\\\"),\\n    },\\n    sortable: [],\\n    texts: {\\n        count: \\\"\\\",\\n    },\\n});\\n\\nfunction fillDatatableRow() {\\n    modulesDataTableRows.value = viewModel.studio.items\\n        .filter((item) => item.objectType === \\\"module\\\")\\n        .map<IModuleDataTableRow>((item) => {\\n            const module: IModuleDataTableRow = {\\n                moduleID: item.ID,\\n                moduleName: item.name,\\n                gitGroupName: \\\"\\\",\\n                gitGroupID: (item as IModule).deployParameters?.gitGroupId || 0,\\n                microservices: [],\\n                microservicesDisable: true,\\n                microserviceLoading: false,\\n                microserviceName: \\\"\\\",\\n                microserviceID: (item as IModule).deployParameters?.gitServiceRepoId || 0,\\n            };\\n            return module;\\n        });\\n    appDataTableRows.value.push({\\n        appID: currentApp.value!.ID,\\n        appName: currentApp.value!.name,\\n        microservices: [],\\n        microservicesDisable: true,\\n    });\\n}\\n\\nfunction getProductsFromProvider() {\\n    appSettingsUseCase\\n        .getProjectsOfProduct()\\n        .then(res => {\\n            gitProducts.value.products = res.data.items;\\n            gitProducts.value.loaded = true;\\n            gitProducts.value.disabled = false;\\n            setSelectedProduct();\\n        })\\n        .catch(() => {\\n            gitProducts.value.loaded = true;\\n            gitProducts.value.disabled = true;\\n            notification.showNotification({ text: \\\"Error while fetching products\\\", type: \\\"error\\\" });\\n        });\\n}\\n\\nfunction setSelectedProduct() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            const currentProduct = gitProducts.value.products.find((product) => currentApp.value!.deployParameters!.gitProductRepoId == product.id);\\n            if (currentProduct) {\\n                appSettings.value.product = {\\n                    name: currentProduct.name,\\n                    ID: currentProduct.id,\\n                };\\n            }\\n        }\\n    }\\n}\\n\\nasync function getGitGroupsFromProvider() {\\n    appSettingsUseCase\\n        .getGroupNamesWithId()\\n        .then((res) => {\\n            res.data.items.forEach((fetchedGroup) =>\\n                gitGroups.value.groups.push({\\n                    value: fetchedGroup,\\n                    microservicesCache: [],\\n                    requestedBefore: false,\\n                })\\n            );\\n            gitGroups.value.loaded = true;\\n            gitGroups.value.disabled = false;\\n            setModulesSelectedGitGroups();\\n            setAppSelectedGitGroup();\\n        })\\n        .catch(() =>{\\n            gitGroups.value.loaded = true;\\n            gitGroups.value.disabled = true;\\n\\n            notification.showNotification({\\n                text: \\\"Error while fetching git groups\\\",\\n                type: \\\"error\\\",\\n            })\\n        }\\n        );\\n}\\n\\nfunction setModulesSelectedGitGroups() {\\n    modulesDataTableRows.value.forEach((row) => {\\n        if (row.gitGroupID !== 0) {\\n            const group = gitGroups.value.groups.find((group) => group.value.id == row.gitGroupID);\\n            if (group) {\\n                row.gitGroupName = group.value.name;\\n            } else {\\n                row.gitGroupID = 0;\\n            }\\n        }\\n    });\\n    setModulesSelectedMicroservices();\\n}\\n\\nfunction setAppSelectedGitGroup() {\\n    if (currentApp.value) {\\n        if (currentApp.value.deployParameters) {\\n            const currentGitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.gitGroupId == group.value.id);\\n            if (currentGitGroup) {\\n                appSettings.value.gitGroup = {\\n                    name: currentGitGroup.value.name,\\n                    ID: currentGitGroup.value.id,\\n                };\\n            }\\n        }\\n    }\\n\\n    if (appSettings.value.gitGroup.ID !== 0) {\\n        const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\\n        if (group) {\\n            appSettings.value.gitGroup.name = group.value.name;\\n        } else {\\n            appSettings.value.gitGroup.ID = 0;\\n        }\\n    }\\n    setAppSelectedMicroservice();\\n}\\n\\nfunction setModulesSelectedMicroservices() {\\n    const groupIdList: Array<number> = modulesDataTableRows.value\\n        .map((row) => row.gitGroupID)\\n        .filter((id, index, self) => id !== 0 && self.indexOf(id) === index);\\n\\n    groupIdList.forEach((id) => {\\n        modulesDataTableRows.value.forEach(row => {\\n            if(row.gitGroupID == id) {\\n                row.microserviceLoading = true;\\n                row.microservicesDisable = false;\\n            }\\n        })\\n        appSettingsUseCase\\n            .getProjectsByGroupId(id)\\n            .then((res) => {\\n                let data = res.data.items;\\n                const group = gitGroups.value.groups.find((group) => group.value.id == id);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    modulesDataTableRows.value.forEach((row) => {\\n                        if (row.gitGroupID === id) {\\n                            row.microservices = data;\\n                            row.microserviceLoading = false;\\n                            if(row.microservices.length == 0) {\\n                                row.microservicesDisable = true;\\n                            }\\n                            if (row.microserviceID !== 0) {\\n                                const microservice = data.find((service) => service.id == row.microserviceID);\\n                                if (microservice) {\\n                                    row.microserviceName = microservice.name;\\n                                    row.microservicesDisable = false;\\n                                } else {\\n                                    row.microserviceID = 0;\\n                                    row.microservicesDisable = true;\\n                                }\\n                            }\\n                        }\\n                    });\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    });\\n}\\n\\nfunction setAppSelectedMicroservice() {\\n    if (appSettings.value.gitGroup.ID != 0) {\\n        appDataTableRows.value[0].microservicesDisable = false;\\n        appSettings.value.microservice.loading = true;\\n        appSettingsUseCase\\n            .getProjectsByGroupId(appSettings.value.gitGroup.ID)\\n            .then((res) => {\\n                let data = res.data.items; \\n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\\n                if (group) {\\n                    group.microservicesCache = data;\\n                    group.requestedBefore = true;\\n                    appDataTableRows.value[0].microservices = data;\\n                    appSettings.value.microservice.loading = false;\\n                    if (currentApp.value) {\\n                        if (currentApp.value.deployParameters) {\\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.gitServiceRepoId);\\n                            if (microservice) {\\n                                appSettings.value.microservice.name = microservice.name;\\n                                appSettings.value.microservice.ID = microservice.id;\\n                                appDataTableRows.value[0].microservicesDisable = false;\\n                            } else {\\n                                appSettings.value.microservice.ID = 0;\\n                            }\\n                        }\\n                    }\\n                }\\n            })\\n            .catch(() =>\\n                notification.showNotification({\\n                    text: \\\"Error while fetching projects\\\",\\n                    type: \\\"error\\\",\\n                })\\n            );\\n    }\\n}\\n\\nfunction handleProductSelect() {\\n    const product = gitProducts.value.products.find((product) => product.name === appSettings.value.product.name);\\n    if (product) {\\n        appSettings.value.product.ID = product.id;\\n    } else {\\n        appSettings.value.product.name = \\\"\\\";\\n        appSettings.value.product.ID = 0;\\n    }\\n}\\n\\nasync function handleModulesGitGroupInput(selectedRow: IModuleDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.microservicesDisable = true;\\n    currentRow.microservices = [];\\n    currentRow.microserviceName = \\\"\\\";\\n    currentRow.microserviceID = 0;\\n\\n    if (selectedGitGroup) {\\n        currentRow.gitGroupID = selectedGitGroup.value.id;\\n        currentRow.gitGroupName = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getModuleMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.microservices = selectedGitGroup.microservicesCache;\\n            currentRow.microservicesDisable = !currentRow.microservices.length;\\n        }\\n    } else {\\n        currentRow.gitGroupName = selectedRow.gitGroupName;\\n        currentRow.gitGroupID = 0;\\n    }\\n}\\n\\nasync function handleAppGitGroupInput(selectedRow: IAppDataTableRow) {\\n    debouncer.resetTimer();\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    currentRow.microservicesDisable = true;\\n    currentRow.microservices = [];\\n    appSettings.value.microservice.name = \\\"\\\";\\n    appSettings.value.microservice.ID = 0;\\n\\n    if (selectedGitGroup) {\\n        appSettings.value.gitGroup.ID = selectedGitGroup.value.id;\\n        appSettings.value.gitGroup.name = selectedGitGroup.value.name;\\n\\n        if (!selectedGitGroup.requestedBefore) {\\n            debouncer.debounce(getAppMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\\n        } else {\\n            currentRow.microservices = selectedGitGroup.microservicesCache;\\n            currentRow.microservicesDisable = !currentRow.microservices.length;\\n        }\\n    } else {\\n        appSettings.value.gitGroup.ID = 0;\\n    }\\n}\\n\\nasync function getModuleMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IModuleDataTableRow) {\\n    currentRow.microserviceLoading = true;\\n    currentRow.microservicesDisable = false;\\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.microservices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.microservicesDisable = !currentRow.microservices.length;\\n    currentRow.microserviceLoading = false;\\n}\\n\\nasync function getAppMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\\n    appSettings.value.microservice.loading = true;\\n    currentRow.microservicesDisable = false;\\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\\n    selectedGitGroup.microservicesCache = currentRow.microservices;\\n    selectedGitGroup.requestedBefore = true;\\n    currentRow.microservicesDisable = !currentRow.microservices.length;\\n    appSettings.value.microservice.loading = false;\\n}\\n\\nasync function handleModulesGitGroupChange(selectedRow: IModuleDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.gitGroupID = selectedGitGroup?.value?.id || 0;\\n    currentRow.gitGroupName = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!currentRow.gitGroupID) {\\n        currentRow.microservices = [];\\n        currentRow.microservicesDisable = true;\\n        currentRow.microserviceName = \\\"\\\";\\n        currentRow.microserviceID = 0;\\n    }\\n}\\n\\nasync function handleAppGitGroupChange(selectedRow: IAppDataTableRow) {\\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\\n    appSettings.value.gitGroup.ID = selectedGitGroup?.value?.id || 0;\\n    appSettings.value.gitGroup.name = selectedGitGroup?.value?.name || \\\"\\\";\\n    if (!selectedGitGroup) {\\n        currentRow.microservices = [];\\n        currentRow.microservicesDisable = true;\\n        appSettings.value.microservice.name = \\\"\\\";\\n        appSettings.value.microservice.ID = 0;\\n    }\\n}\\n\\nfunction handleModulesMicroServiceChange(selectedRow: IModuleDataTableRow) {\\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === selectedRow.microserviceName);\\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\\n    currentRow.microserviceName = selectedMicroservice?.name || \\\"\\\";\\n    currentRow.microserviceID = selectedMicroservice?.id || 0;\\n}\\n\\nfunction handleAppMicroServiceChange(selectedRow: IAppDataTableRow) {\\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === appSettings.value.microservice.name);\\n    appSettings.value.microservice.name = selectedMicroservice?.name || \\\"\\\";\\n    appSettings.value.microservice.ID = selectedMicroservice?.id || 0;\\n}\\n\\nasync function onSave() {\\n    if (currentApp.value) {\\n        let settings = {};\\n        const modulesSettings: Array<IModuleSettingsItem> = modulesDataTableRows.value\\n            .filter(\\n                (row) =>\\n                    row.microserviceID !=\\n                    (viewModel.studio.items.find((item) => item.ID == row.moduleID) as IModule).deployParameters?.gitServiceRepoId\\n            )\\n            .map((row) => ({\\n                moduleID: row.moduleID,\\n                deployParameters: {\\n                    gitGroupId: row.gitGroupID,\\n                    gitServiceRepoId: row.microserviceID,\\n                },\\n            }));\\n\\n        const applicationSettings: IApplicationSettingsItem = {\\n            applicationID: currentApp.value!.ID,\\n            deployParameters: {\\n                gitProductRepoId: appSettings.value.product.ID,\\n                gitGroupId: appSettings.value.gitGroup.ID,\\n                gitServiceRepoId: appSettings.value.microservice.ID,\\n            },\\n        };\\n\\n        settings = { modulesSettings };\\n\\n        if (\\n            currentApp.value.deployParameters?.gitProductRepoId != appSettings.value.product.ID ||\\n            currentApp.value.deployParameters?.gitServiceRepoId != appSettings.value.microservice.ID\\n        ) {\\n            settings = { ...settings, applicationSettings };\\n        }\\n\\n        await executor.execute(\\n            async () => {\\n                await appSettingsUseCase.update(settings);\\n            },\\n            { loading: true }\\n        );\\n        emit(\\\"close\\\");\\n    }\\n}\\n\\n</script>\\n\\n<template>\\n    <div class=\\\"deploy-setting-container\\\">\\n        <div class=\\\"title\\\">{{ localization.get(\\\"deploySettings_appSettings\\\") }}</div>\\n        <label for=\\\"product-input\\\" class=\\\"product-title\\\">{{ localization.get(\\\"product\\\") }}</label>\\n        <div class=\\\"product-input-container\\\">\\n            <input\\n                class=\\\"product-input\\\"\\n                list=\\\"products\\\"\\n                id=\\\"product-input\\\"\\n                placeholder=\\\"Select Product\\\"\\n                v-model=\\\"appSettings.product.name\\\"\\n                @change=\\\"handleProductSelect\\\"\\n                :disabled=\\\"gitProducts.disabled\\\"\\n            />\\n            <div class=\\\"icon-container\\\" v-if=\\\"!gitProducts.loaded\\\">\\n                <Spinner/>\\n            </div>\\n        </div>\\n        <datalist id=\\\"products\\\">\\n            <option value=\\\"\\\" disabled selected>Select Product for Application</option>\\n            <option v-for=\\\"product in gitProducts.products\\\">\\n                {{ product.name }}\\n            </option>\\n        </datalist>\\n        <v-client-table ref=\\\"table\\\" :data=\\\"appDataTableRows\\\" :columns=\\\"appAppDatatableColumns\\\" :options=\\\"appOptionsDataTable\\\">\\n            <template #appName=\\\"props\\\">\\n                <span>{{ props.row.appName }}</span>\\n            </template>\\n            <template #gitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input\\n                        class=\\\"module-input\\\"\\n                        list=\\\"app-git-groups\\\"\\n                        id=\\\"app-git-group-input\\\"\\n                        placeholder=\\\"Select Git Group\\\"\\n                        v-model=\\\"appSettings.gitGroup.name\\\"\\n                        @input=\\\"handleAppGitGroupInput(props.row)\\\"\\n                        @change=\\\"handleAppGitGroupChange(props.row)\\\"\\n                        :disabled=\\\"gitGroups.disabled\\\"\\n                    />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner/>\\n                    </div>\\n                </div>\\n                <datalist id=\\\"app-git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #service=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input\\n                        class=\\\"module-input\\\"\\n                        :list=\\\"props.row.appID\\\"\\n                        id=\\\"app-microservice-input\\\"\\n                        placeholder=\\\"Select Microservice\\\"\\n                        v-model=\\\"appSettings.microservice.name\\\"\\n                        @change=\\\"handleAppMicroServiceChange(props.row)\\\"\\n                        :disabled=\\\"props.row.microservicesDisable\\\"\\n                    />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"appSettings.microservice.loading\\\">\\n                        <Spinner/>\\n                    </div>\\n                </div>\\n\\n                <datalist :id=\\\"props.row.appID\\\">\\n                    <option v-for=\\\"microservice in props.row.microservices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n        </v-client-table>\\n\\n        <div class=\\\"title\\\">{{ localization.get(\\\"deploySettings_moduleSettings\\\") }}</div>\\n        <v-client-table ref=\\\"table\\\" :data=\\\"modulesDataTableRows\\\" :columns=\\\"modulesAppDatatableColumns\\\" :options=\\\"modulesOptionsDataTable\\\">\\n            <template #moduleName=\\\"props\\\">\\n                <span>{{ props.row.moduleName }}</span>\\n            </template>\\n            <template #gitGroup=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input\\n                        class=\\\"module-input\\\"\\n                        list=\\\"git-groups\\\"\\n                        id=\\\"git-group-input\\\"\\n                        placeholder=\\\"Select Git Group\\\"\\n                        v-model=\\\"props.row.gitGroupName\\\"\\n                        @input=\\\"handleModulesGitGroupInput(props.row)\\\"\\n                        @change=\\\"handleModulesGitGroupChange(props.row)\\\"\\n                        :disabled=\\\"gitGroups.disabled\\\"\\n                    />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"!gitGroups.loaded\\\">\\n                        <Spinner/>\\n                    </div>\\n                </div>\\n                <datalist id=\\\"git-groups\\\">\\n                    <option v-for=\\\"gitGroup in gitGroups.groups\\\" :value=\\\"gitGroup.value.name\\\"></option>\\n                </datalist>\\n            </template>\\n            <template #service=\\\"props\\\">\\n                <div class=\\\"input-container\\\">\\n                    <input\\n                        class=\\\"module-input\\\"\\n                        :list=\\\"props.row.moduleID\\\"\\n                        id=\\\"microservice-input\\\"\\n                        placeholder=\\\"Select Microservice\\\"\\n                        v-model=\\\"props.row.microserviceName\\\"\\n                        @change=\\\"handleModulesMicroServiceChange(props.row)\\\"\\n                        :disabled=\\\"props.row.microservicesDisable\\\"\\n                    />\\n                    <div class=\\\"icon-container\\\" v-if=\\\"props.row.microserviceLoading\\\">\\n                        <Spinner/>\\n                    </div>\\n                </div>\\n                <datalist :id=\\\"props.row.moduleID\\\">\\n                    <option v-for=\\\"microservice in props.row.microservices\\\" :value=\\\"microservice.name\\\"></option>\\n                </datalist>\\n            </template>\\n        </v-client-table>\\n        <hr />\\n        <button class=\\\"save-button\\\" @click=\\\"onSave\\\">{{ localization.get(\\\"save\\\") }}</button>\\n        <button class=\\\"previous-button\\\" data-v-33a93b5b=\\\"\\\" @click=\\\"() => emit('close')\\\">\\n            {{ localization.get(\\\"cancel\\\") }}\\n        </button>\\n    </div>\\n</template>\\n\\n<style scoped>\\n.deploy-setting-container {\\n    padding: 16px 20px 20px 20px;\\n    height: 495px;\\n    overflow-y: auto;\\n}\\n.previous-button {\\n    width: 68px;\\n    height: 32px;\\n    border: none;\\n    background: #f5f5f500 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    font-weight: bold;\\n    color: #607d8b;\\n    text-align: center;\\n    margin-right: 8px;\\n    float: right;\\n}\\n.save-button {\\n    width: 74px;\\n    height: 32px;\\n    border: none;\\n    background: #151233 0% 0% no-repeat padding-box;\\n    border-radius: 4px;\\n    font-family: \\\"Roboto\\\";\\n    color: #ffffff;\\n    text-align: center;\\n    float: right;\\n}\\n\\n.VueTables__heading {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    letter-spacing: 0px;\\n    color: #616161;\\n}\\n\\n.title {\\n    font-family: 'Roboto';\\n    font-size: 20px;\\n    font-weight: bold;\\n    color: #151233;\\n}\\n\\n.product-title {\\n    font-family: 'Roboto';\\n    font-weight: bold;\\n    font-size: 14px;\\n    color: #151233;\\n    margin-left: 6px;\\n    margin-top: 20px;\\n}\\n\\n.product-input-container {\\n    position: relative;\\n    max-width: max-content;\\n}\\n\\n.input-container {\\n    position: relative;\\n    max-width: max-content;\\n    margin-left: 20px;\\n}\\n\\n.icon-container {\\n    position: absolute;\\n    right: 24px;\\n    top: 7px;\\n}\\n\\ninput {\\n    background: #ffffff 0% 0% no-repeat padding-box;\\n    border: 1px solid #a1a1a1;\\n    border-radius: 4px;\\n    padding: 5px 0px 6px 12px;\\n    font-family: \\\"Roboto\\\";\\n    font-size: 14px;\\n}\\ninput:disabled {\\n    background-color: rgba(59, 59, 59, 0.3);\\n}\\n\\n.module-input {\\n    width: 154px;\\n    height: 30px;\\n}\\n\\n.product-input {\\n    width: 230px;\\n    height: 30px;\\n}\\n</style>\\n<style>\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"],\\ntr,\\ntd {\\n    border-left: hidden;\\n    border-right: hidden;\\n    --bs-table-striped-bg: white;\\n    padding: 14px 0px 14px 0px!important;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > thead,\\nth {\\n    border-style: hidden;\\n    padding-left: 0px !important;\\n    padding-bottom: 4px !important;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > thead > tr > th > span {\\n    font-family: 'Roboto';\\n    font-size: 13px;\\n    font-weight: bold;\\n    color: #616161;\\n    padding-left: 20px;\\n}\\n\\ntable[class=\\\"VueTables__table table table-striped table-bordered table-hover\\\"] > tbody > tr > td > span {\\n    font-family: 'Roboto';\\n    font-size: '14px';\\n    color: #212121;\\n    vertical-align: middle;\\n    margin-left: 20px;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n@keyframes top-right-and-bottom-left-6fc7b8b6 {\\n0%,\\n    5% {\\n        transform: rotate(-45deg);\\n        height: 16px;\\n        margin-top: 0px;\\n}\\n15% {\\n        transform: rotate(-90deg);\\n        height: 3px;\\n        margin-top: 6px;\\n}\\n25% {\\n        transform: rotate(-90deg);\\n        height: 0px;\\n        margin-top: 6px;\\n}\\n60%,\\n    65% {\\n        transform: rotate(-270deg);\\n        height: 0px;\\n        margin-top: 6px;\\n}\\n67% {\\n        transform: rotate(-250deg);\\n        height: 0px;\\n        margin-top: 6px;\\n}\\n80%,\\n    100% {\\n        height: 16px;\\n        margin-top: 0px;\\n        transform: rotate(-135deg);\\n}\\n}\\n@keyframes top-left-and-bottom-right-6fc7b8b6 {\\n0% {\\n        transform: rotate(-45deg);\\n}\\n15% {\\n        transform: rotate(-180deg);\\n        width: 0px;\\n        margin-left: 6px;\\n}\\n25% {\\n        transform: rotate(-180deg);\\n        width: 0px;\\n        margin-left: 6px;\\n}\\n60%,\\n    65% {\\n        transform: rotate(-360deg);\\n        width: 0px;\\n        margin-left: 6px;\\n}\\n67% {\\n        transform: rotate(-340deg);\\n        width: 0px;\\n        margin-left: 6px;\\n}\\n83% {\\n        transform: rotate(-175deg);\\n        width: 7px;\\n        margin-left: 4px;\\n}\\n90%, 100% {\\n        width: 16px;\\n        margin-left: 0px;\\n        transform: rotate(-135deg);\\n}\\n}\\n.top-right[data-v-6fc7b8b6]::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-right-color: #14adfc;\\n    transform: rotate(-45deg);\\n}\\n.top-right[data-v-6fc7b8b6]::after {\\n    animation: top-right-and-bottom-left-6fc7b8b6 3s infinite 0.3s;\\n}\\n.bottom-right[data-v-6fc7b8b6]::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-bottom-color: #14adfc;\\n    transform: rotate(-45deg);\\n    margin-top:0px;\\n}\\n.bottom-right[data-v-6fc7b8b6]::after {\\n    animation: top-left-and-bottom-right-6fc7b8b6 3s infinite 0.3s;\\n}\\n.top-left[data-v-6fc7b8b6]::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-top-color: #14adfc;\\n    transform: rotate(-45deg);\\n}\\n.top-left[data-v-6fc7b8b6]::after {\\n    animation: top-left-and-bottom-right-6fc7b8b6 3s infinite 0.3s;\\n}\\n.bottom-left[data-v-6fc7b8b6]::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-left-color: #14adfc;\\n    transform: rotate(-45deg);\\n        margin-top:0px;\\n}\\n.bottom-left[data-v-6fc7b8b6]::after {\\n    animation: top-right-and-bottom-left-6fc7b8b6 3s infinite 0.3s;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/components/spinner.vue\"],\"names\":[],\"mappings\":\";AAYA;AACI;;QAEI,yBAAyB;QACzB,YAAY;QACZ,eAAe;AACnB;AACA;QACI,yBAAyB;QACzB,WAAW;QACX,eAAe;AACnB;AACA;QACI,yBAAyB;QACzB,WAAW;QACX,eAAe;AACnB;AACA;;QAEI,0BAA0B;QAC1B,WAAW;QACX,eAAe;AACnB;AACA;QACI,0BAA0B;QAC1B,WAAW;QACX,eAAe;AACnB;AACA;;QAEI,YAAY;QACZ,eAAe;QACf,0BAA0B;AAC9B;AACJ;AAEA;AACI;QACI,yBAAyB;AAC7B;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;;QAEI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,0BAA0B;QAC1B,UAAU;QACV,gBAAgB;AACpB;AACA;QACI,WAAW;QACX,gBAAgB;QAChB,0BAA0B;AAC9B;AACJ;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,2BAA2B;IAC3B,yBAAyB;AAC7B;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,4BAA4B;IAC5B,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,yBAAyB;IACzB,yBAAyB;AAC7B;AAEA;IACI,8DAAqD;AACzD;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;IACjB,mBAAmB;IACnB,0BAA0B;IAC1B,yBAAyB;QACrB,cAAc;AACtB;AAEA;IACI,8DAAqD;AACzD\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\"></script>\\n\\n<template>\\n<div style=\\\"position:relative\\\">\\n        <div class=\\\"top-right\\\"></div>\\n        <div class=\\\"bottom-right\\\"></div>\\n        <div class=\\\"top-left\\\"></div>\\n        <div class=\\\"bottom-left\\\"></div>\\n        </div>\\n</template>\\n\\n<style scoped>\\n@keyframes top-right-and-bottom-left {\\n    0%,\\n    5% {\\n        transform: rotate(-45deg);\\n        height: 16px;\\n        margin-top: 0px;\\n    }\\n    15% {\\n        transform: rotate(-90deg);\\n        height: 3px;\\n        margin-top: 6px;\\n    }\\n    25% {\\n        transform: rotate(-90deg);\\n        height: 0px;\\n        margin-top: 6px;\\n    }\\n    60%,\\n    65% {\\n        transform: rotate(-270deg);\\n        height: 0px;\\n        margin-top: 6px;\\n    }\\n    67% {\\n        transform: rotate(-250deg);\\n        height: 0px;\\n        margin-top: 6px;\\n    }\\n    80%,\\n    100% {\\n        height: 16px;\\n        margin-top: 0px;\\n        transform: rotate(-135deg);\\n    }\\n}\\n\\n@keyframes top-left-and-bottom-right {\\n    0% {\\n        transform: rotate(-45deg);\\n    }\\n    15% {\\n        transform: rotate(-180deg);\\n        width: 0px;\\n        margin-left: 6px;\\n    }\\n    25% {\\n        transform: rotate(-180deg);\\n        width: 0px;\\n        margin-left: 6px;\\n    }\\n    60%,\\n    65% {\\n        transform: rotate(-360deg);\\n        width: 0px;\\n        margin-left: 6px;\\n    }\\n    67% {\\n        transform: rotate(-340deg);\\n        width: 0px;\\n        margin-left: 6px;\\n    }\\n    83% {\\n        transform: rotate(-175deg);\\n        width: 7px;\\n        margin-left: 4px;\\n    }\\n    90%, 100% {\\n        width: 16px;\\n        margin-left: 0px;\\n        transform: rotate(-135deg);\\n    }\\n}\\n\\n.top-right::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-right-color: #14adfc;\\n    transform: rotate(-45deg);\\n}\\n\\n.top-right::after {\\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\\n}\\n\\n.bottom-right::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-bottom-color: #14adfc;\\n    transform: rotate(-45deg);\\n    margin-top:0px;\\n}\\n\\n.bottom-right::after {\\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\\n}\\n\\n.top-left::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-top-color: #14adfc;\\n    transform: rotate(-45deg);\\n}\\n\\n.top-left::after {\\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\\n}\\n\\n.bottom-left::after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    width: 16px;\\n    height: 16px;\\n    border-radius: 16px;\\n    border-color: transparent;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-left-color: #14adfc;\\n    transform: rotate(-45deg);\\n        margin-top:0px;\\n}\\n\\n.bottom-left::after {\\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","<script setup lang=\"ts\"></script>\n\n<template>\n<div style=\"position:relative\">\n        <div class=\"top-right\"></div>\n        <div class=\"bottom-right\"></div>\n        <div class=\"top-left\"></div>\n        <div class=\"bottom-left\"></div>\n        </div>\n</template>\n\n<style scoped>\n@keyframes top-right-and-bottom-left {\n    0%,\n    5% {\n        transform: rotate(-45deg);\n        height: 16px;\n        margin-top: 0px;\n    }\n    15% {\n        transform: rotate(-90deg);\n        height: 3px;\n        margin-top: 6px;\n    }\n    25% {\n        transform: rotate(-90deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    60%,\n    65% {\n        transform: rotate(-270deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    67% {\n        transform: rotate(-250deg);\n        height: 0px;\n        margin-top: 6px;\n    }\n    80%,\n    100% {\n        height: 16px;\n        margin-top: 0px;\n        transform: rotate(-135deg);\n    }\n}\n\n@keyframes top-left-and-bottom-right {\n    0% {\n        transform: rotate(-45deg);\n    }\n    15% {\n        transform: rotate(-180deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    25% {\n        transform: rotate(-180deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    60%,\n    65% {\n        transform: rotate(-360deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    67% {\n        transform: rotate(-340deg);\n        width: 0px;\n        margin-left: 6px;\n    }\n    83% {\n        transform: rotate(-175deg);\n        width: 7px;\n        margin-left: 4px;\n    }\n    90%, 100% {\n        width: 16px;\n        margin-left: 0px;\n        transform: rotate(-135deg);\n    }\n}\n\n.top-right::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-right-color: #14adfc;\n    transform: rotate(-45deg);\n}\n\n.top-right::after {\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\n}\n\n.bottom-right::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-bottom-color: #14adfc;\n    transform: rotate(-45deg);\n    margin-top:0px;\n}\n\n.bottom-right::after {\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\n}\n\n.top-left::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-top-color: #14adfc;\n    transform: rotate(-45deg);\n}\n\n.top-left::after {\n    animation: top-left-and-bottom-right 3s infinite 0.3s;\n}\n\n.bottom-left::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    border-radius: 16px;\n    border-color: transparent;\n    border-width: 2px;\n    border-style: solid;\n    border-left-color: #14adfc;\n    transform: rotate(-45deg);\n        margin-top:0px;\n}\n\n.bottom-left::after {\n    animation: top-right-and-bottom-left 3s infinite 0.3s;\n}\n</style>\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./spinner.vue?vue&type=style&index=0&id=6fc7b8b6&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./spinner.vue?vue&type=style&index=0&id=6fc7b8b6&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { render } from \"./spinner.vue?vue&type=template&id=6fc7b8b6&scoped=true\"\nconst script = {}\n\nimport \"./spinner.vue?vue&type=style&index=0&id=6fc7b8b6&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/QCloud-Shell/QCloud-Shell/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-6fc7b8b6\"]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, resolveComponent as _resolveComponent, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-79436c2f\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"deploy-setting-container\" }\nconst _hoisted_2 = { class: \"title\" }\nconst _hoisted_3 = {\n  for: \"product-input\",\n  class: \"product-title\"\n}\nconst _hoisted_4 = { class: \"product-input-container\" }\nconst _hoisted_5 = [\"disabled\"]\nconst _hoisted_6 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_7 = { id: \"products\" }\nconst _hoisted_8 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n}, \"Select Product for Application\", -1 /* HOISTED */))\nconst _hoisted_9 = { class: \"input-container\" }\nconst _hoisted_10 = [\"onInput\", \"onChange\", \"disabled\"]\nconst _hoisted_11 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_12 = { id: \"app-git-groups\" }\nconst _hoisted_13 = [\"value\"]\nconst _hoisted_14 = { class: \"input-container\" }\nconst _hoisted_15 = [\"list\", \"onChange\", \"disabled\"]\nconst _hoisted_16 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_17 = [\"id\"]\nconst _hoisted_18 = [\"value\"]\nconst _hoisted_19 = { class: \"title\" }\nconst _hoisted_20 = { class: \"input-container\" }\nconst _hoisted_21 = [\"onUpdate:modelValue\", \"onInput\", \"onChange\", \"disabled\"]\nconst _hoisted_22 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_23 = { id: \"git-groups\" }\nconst _hoisted_24 = [\"value\"]\nconst _hoisted_25 = { class: \"input-container\" }\nconst _hoisted_26 = [\"list\", \"onUpdate:modelValue\", \"onChange\", \"disabled\"]\nconst _hoisted_27 = {\n  key: 0,\n  class: \"icon-container\"\n}\nconst _hoisted_28 = [\"id\"]\nconst _hoisted_29 = [\"value\"]\nconst _hoisted_30 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */))\n\nimport { onBeforeMount, ref } from \"vue\";\nimport { container } from \"tsyringe\";\nimport { IViewModel } from \"../../../../domain/viewModel/IViewModel\";\nimport { IModule, IModuleSettingsItem, IApplicationSettingsItem, IModuleDeployParameters } from \"../../../../domain/model/models\";\nimport { ILocalization } from \"../../../../domain/infrastructure/ILocalization\";\nimport { IGitProject } from \"../../../../domain/infrastructure/IProviderApi\";\nimport { IUseCaseExecutor } from \"../../../../domain/useCase/IUseCaseExecutor\";\nimport { IDebounce } from \"../../../../domain/infrastructure/IDebounce\";\nimport { IApplicationSettings } from \"../../../../domain/useCase/IApplicationSettings\";\nimport { INotification } from \"../../../../domain/presentation/INotification\";\nimport Spinner from \"../spinner.vue\"\n\ninterface IProduct {\n    products: Array<IGitProject>;\n    disabled: boolean;\n    loaded: boolean;\n}\n\ninterface IGroup {\n    value: IGitProject;\n    microservicesCache: Array<IGitProject>;\n    requestedBefore: boolean;\n}\n\ninterface IGitGroup {\n    groups: Array<IGroup>;\n    disabled: boolean;\n    loaded: boolean;\n}\n\ninterface IModuleDataTableRow {\n    moduleID: IModule[\"ID\"];\n    moduleName: IModule[\"name\"];\n    gitGroupName: string;\n    gitGroupID: number;\n    microservices: Array<IGitProject>;\n    microservicesDisable: boolean;\n    microserviceLoading: boolean;\n    microserviceName: string;\n    microserviceID: number;\n}\n\ninterface IAppDataTableRow {\n    appID: IModule[\"ID\"];\n    appName: IModule[\"name\"];\n    microservices: Array<IGitProject>;\n    microservicesDisable: boolean;\n}\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'deploySettings',\n  emits: [\"close\"],\n  setup(__props, { emit }) {\n\nonBeforeMount(() => {\n    fillDatatableRow();\n    getGitGroupsFromProvider();\n    getProductsFromProvider();\n});\n\n\n\nconst localization = container.resolve<ILocalization>(ILocalization);\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst notification = container.resolve<INotification>(INotification);\nconst appSettingsUseCase = container.resolve<IApplicationSettings>(IApplicationSettings);\nconst debouncer = container.resolve<IDebounce>(IDebounce);\n\nconst gitProducts = ref({ products: [], disabled: false, loaded: false } as IProduct);\nconst gitGroups = ref({ groups: [], disabled: false, loaded: false } as IGitGroup);\nconst currentApp = ref(viewModel.apps.find((app) => app.ID == viewModel.studio.appId));\nconst appSettings = ref({ product: { ID: 0, name: \"\" }, gitGroup: { ID: 0, name: \"\" }, microservice: { ID: 0, name: \"\", loading: false } });\nconst modulesDataTableRows = ref(Array<IModuleDataTableRow>());\nconst appDataTableRows = ref(Array<IAppDataTableRow>());\n\nconst modulesAppDatatableColumns = ref([\"moduleName\", \"gitGroup\", \"service\"]);\nconst appAppDatatableColumns = ref([\"appName\", \"gitGroup\", \"service\"]);\nconst modulesOptionsDataTable = ref({\n    resizableColumns: false,\n    filterable: false,\n    perPage: 3,\n    perPageValues: [],\n    headings: {\n        moduleName: localization.get(\"moduleName\"),\n        gitGroup: localization.get(\"gitGroup\"),\n        microservice: localization.get(\"service\"),\n    },\n    sortable: [],\n    texts: {\n        count: \"\",\n    },\n});\n\nconst appOptionsDataTable = ref({\n    resizableColumns: false,\n    filterable: false,\n    perPage: 1,\n    perPageValues: [],\n    headings: {\n        appName: localization.get(\"appName\"),\n        gitGroup: localization.get(\"gitGroup\"),\n        microservice: localization.get(\"service\"),\n    },\n    sortable: [],\n    texts: {\n        count: \"\",\n    },\n});\n\nfunction fillDatatableRow() {\n    modulesDataTableRows.value = viewModel.studio.items\n        .filter((item) => item.objectType === \"module\")\n        .map<IModuleDataTableRow>((item) => {\n            const module: IModuleDataTableRow = {\n                moduleID: item.ID,\n                moduleName: item.name,\n                gitGroupName: \"\",\n                gitGroupID: (item as IModule).deployParameters?.gitGroupId || 0,\n                microservices: [],\n                microservicesDisable: true,\n                microserviceLoading: false,\n                microserviceName: \"\",\n                microserviceID: (item as IModule).deployParameters?.gitServiceRepoId || 0,\n            };\n            return module;\n        });\n    appDataTableRows.value.push({\n        appID: currentApp.value!.ID,\n        appName: currentApp.value!.name,\n        microservices: [],\n        microservicesDisable: true,\n    });\n}\n\nfunction getProductsFromProvider() {\n    appSettingsUseCase\n        .getProjectsOfProduct()\n        .then(res => {\n            gitProducts.value.products = res.data.items;\n            gitProducts.value.loaded = true;\n            gitProducts.value.disabled = false;\n            setSelectedProduct();\n        })\n        .catch(() => {\n            gitProducts.value.loaded = true;\n            gitProducts.value.disabled = true;\n            notification.showNotification({ text: \"Error while fetching products\", type: \"error\" });\n        });\n}\n\nfunction setSelectedProduct() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            const currentProduct = gitProducts.value.products.find((product) => currentApp.value!.deployParameters!.gitProductRepoId == product.id);\n            if (currentProduct) {\n                appSettings.value.product = {\n                    name: currentProduct.name,\n                    ID: currentProduct.id,\n                };\n            }\n        }\n    }\n}\n\nasync function getGitGroupsFromProvider() {\n    appSettingsUseCase\n        .getGroupNamesWithId()\n        .then((res) => {\n            res.data.items.forEach((fetchedGroup) =>\n                gitGroups.value.groups.push({\n                    value: fetchedGroup,\n                    microservicesCache: [],\n                    requestedBefore: false,\n                })\n            );\n            gitGroups.value.loaded = true;\n            gitGroups.value.disabled = false;\n            setModulesSelectedGitGroups();\n            setAppSelectedGitGroup();\n        })\n        .catch(() =>{\n            gitGroups.value.loaded = true;\n            gitGroups.value.disabled = true;\n\n            notification.showNotification({\n                text: \"Error while fetching git groups\",\n                type: \"error\",\n            })\n        }\n        );\n}\n\nfunction setModulesSelectedGitGroups() {\n    modulesDataTableRows.value.forEach((row) => {\n        if (row.gitGroupID !== 0) {\n            const group = gitGroups.value.groups.find((group) => group.value.id == row.gitGroupID);\n            if (group) {\n                row.gitGroupName = group.value.name;\n            } else {\n                row.gitGroupID = 0;\n            }\n        }\n    });\n    setModulesSelectedMicroservices();\n}\n\nfunction setAppSelectedGitGroup() {\n    if (currentApp.value) {\n        if (currentApp.value.deployParameters) {\n            const currentGitGroup = gitGroups.value.groups.find((group) => currentApp.value!.deployParameters!.gitGroupId == group.value.id);\n            if (currentGitGroup) {\n                appSettings.value.gitGroup = {\n                    name: currentGitGroup.value.name,\n                    ID: currentGitGroup.value.id,\n                };\n            }\n        }\n    }\n\n    if (appSettings.value.gitGroup.ID !== 0) {\n        const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\n        if (group) {\n            appSettings.value.gitGroup.name = group.value.name;\n        } else {\n            appSettings.value.gitGroup.ID = 0;\n        }\n    }\n    setAppSelectedMicroservice();\n}\n\nfunction setModulesSelectedMicroservices() {\n    const groupIdList: Array<number> = modulesDataTableRows.value\n        .map((row) => row.gitGroupID)\n        .filter((id, index, self) => id !== 0 && self.indexOf(id) === index);\n\n    groupIdList.forEach((id) => {\n        modulesDataTableRows.value.forEach(row => {\n            if(row.gitGroupID == id) {\n                row.microserviceLoading = true;\n                row.microservicesDisable = false;\n            }\n        })\n        appSettingsUseCase\n            .getProjectsByGroupId(id)\n            .then((res) => {\n                let data = res.data.items;\n                const group = gitGroups.value.groups.find((group) => group.value.id == id);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    modulesDataTableRows.value.forEach((row) => {\n                        if (row.gitGroupID === id) {\n                            row.microservices = data;\n                            row.microserviceLoading = false;\n                            if(row.microservices.length == 0) {\n                                row.microservicesDisable = true;\n                            }\n                            if (row.microserviceID !== 0) {\n                                const microservice = data.find((service) => service.id == row.microserviceID);\n                                if (microservice) {\n                                    row.microserviceName = microservice.name;\n                                    row.microservicesDisable = false;\n                                } else {\n                                    row.microserviceID = 0;\n                                    row.microservicesDisable = true;\n                                }\n                            }\n                        }\n                    });\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: \"Error while fetching projects\",\n                    type: \"error\",\n                })\n            );\n    });\n}\n\nfunction setAppSelectedMicroservice() {\n    if (appSettings.value.gitGroup.ID != 0) {\n        appDataTableRows.value[0].microservicesDisable = false;\n        appSettings.value.microservice.loading = true;\n        appSettingsUseCase\n            .getProjectsByGroupId(appSettings.value.gitGroup.ID)\n            .then((res) => {\n                let data = res.data.items; \n                const group = gitGroups.value.groups.find((group) => group.value.id == appSettings.value.gitGroup.ID);\n                if (group) {\n                    group.microservicesCache = data;\n                    group.requestedBefore = true;\n                    appDataTableRows.value[0].microservices = data;\n                    appSettings.value.microservice.loading = false;\n                    if (currentApp.value) {\n                        if (currentApp.value.deployParameters) {\n                            const microservice = data.find((service) => service.id == currentApp.value?.deployParameters?.gitServiceRepoId);\n                            if (microservice) {\n                                appSettings.value.microservice.name = microservice.name;\n                                appSettings.value.microservice.ID = microservice.id;\n                                appDataTableRows.value[0].microservicesDisable = false;\n                            } else {\n                                appSettings.value.microservice.ID = 0;\n                            }\n                        }\n                    }\n                }\n            })\n            .catch(() =>\n                notification.showNotification({\n                    text: \"Error while fetching projects\",\n                    type: \"error\",\n                })\n            );\n    }\n}\n\nfunction handleProductSelect() {\n    const product = gitProducts.value.products.find((product) => product.name === appSettings.value.product.name);\n    if (product) {\n        appSettings.value.product.ID = product.id;\n    } else {\n        appSettings.value.product.name = \"\";\n        appSettings.value.product.ID = 0;\n    }\n}\n\nasync function handleModulesGitGroupInput(selectedRow: IModuleDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.microservicesDisable = true;\n    currentRow.microservices = [];\n    currentRow.microserviceName = \"\";\n    currentRow.microserviceID = 0;\n\n    if (selectedGitGroup) {\n        currentRow.gitGroupID = selectedGitGroup.value.id;\n        currentRow.gitGroupName = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getModuleMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.microservices = selectedGitGroup.microservicesCache;\n            currentRow.microservicesDisable = !currentRow.microservices.length;\n        }\n    } else {\n        currentRow.gitGroupName = selectedRow.gitGroupName;\n        currentRow.gitGroupID = 0;\n    }\n}\n\nasync function handleAppGitGroupInput(selectedRow: IAppDataTableRow) {\n    debouncer.resetTimer();\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    currentRow.microservicesDisable = true;\n    currentRow.microservices = [];\n    appSettings.value.microservice.name = \"\";\n    appSettings.value.microservice.ID = 0;\n\n    if (selectedGitGroup) {\n        appSettings.value.gitGroup.ID = selectedGitGroup.value.id;\n        appSettings.value.gitGroup.name = selectedGitGroup.value.name;\n\n        if (!selectedGitGroup.requestedBefore) {\n            debouncer.debounce(getAppMicroservicesByGroupID, 500, selectedGitGroup, currentRow);\n        } else {\n            currentRow.microservices = selectedGitGroup.microservicesCache;\n            currentRow.microservicesDisable = !currentRow.microservices.length;\n        }\n    } else {\n        appSettings.value.gitGroup.ID = 0;\n    }\n}\n\nasync function getModuleMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IModuleDataTableRow) {\n    currentRow.microserviceLoading = true;\n    currentRow.microservicesDisable = false;\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.microservices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.microservicesDisable = !currentRow.microservices.length;\n    currentRow.microserviceLoading = false;\n}\n\nasync function getAppMicroservicesByGroupID(selectedGitGroup: IGroup, currentRow: IAppDataTableRow) {\n    appSettings.value.microservice.loading = true;\n    currentRow.microservicesDisable = false;\n    currentRow.microservices = await appSettingsUseCase.getProjectsByGroupId(selectedGitGroup.value.id).then(res => res.data.items);\n    selectedGitGroup.microservicesCache = currentRow.microservices;\n    selectedGitGroup.requestedBefore = true;\n    currentRow.microservicesDisable = !currentRow.microservices.length;\n    appSettings.value.microservice.loading = false;\n}\n\nasync function handleModulesGitGroupChange(selectedRow: IModuleDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === selectedRow.gitGroupName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.gitGroupID = selectedGitGroup?.value?.id || 0;\n    currentRow.gitGroupName = selectedGitGroup?.value?.name || \"\";\n    if (!currentRow.gitGroupID) {\n        currentRow.microservices = [];\n        currentRow.microservicesDisable = true;\n        currentRow.microserviceName = \"\";\n        currentRow.microserviceID = 0;\n    }\n}\n\nasync function handleAppGitGroupChange(selectedRow: IAppDataTableRow) {\n    const selectedGitGroup = gitGroups.value.groups.find((gitGroup) => gitGroup.value.name === appSettings.value.gitGroup.name);\n    const currentRow = appDataTableRows.value.find((row) => row.appID == selectedRow.appID)!;\n    appSettings.value.gitGroup.ID = selectedGitGroup?.value?.id || 0;\n    appSettings.value.gitGroup.name = selectedGitGroup?.value?.name || \"\";\n    if (!selectedGitGroup) {\n        currentRow.microservices = [];\n        currentRow.microservicesDisable = true;\n        appSettings.value.microservice.name = \"\";\n        appSettings.value.microservice.ID = 0;\n    }\n}\n\nfunction handleModulesMicroServiceChange(selectedRow: IModuleDataTableRow) {\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === selectedRow.microserviceName);\n    const currentRow = modulesDataTableRows.value.find((row) => row.moduleID == selectedRow.moduleID)!;\n    currentRow.microserviceName = selectedMicroservice?.name || \"\";\n    currentRow.microserviceID = selectedMicroservice?.id || 0;\n}\n\nfunction handleAppMicroServiceChange(selectedRow: IAppDataTableRow) {\n    const selectedMicroservice = selectedRow.microservices.find((microservice) => microservice.name === appSettings.value.microservice.name);\n    appSettings.value.microservice.name = selectedMicroservice?.name || \"\";\n    appSettings.value.microservice.ID = selectedMicroservice?.id || 0;\n}\n\nasync function onSave() {\n    if (currentApp.value) {\n        let settings = {};\n        const modulesSettings: Array<IModuleSettingsItem> = modulesDataTableRows.value\n            .filter(\n                (row) =>\n                    row.microserviceID !=\n                    (viewModel.studio.items.find((item) => item.ID == row.moduleID) as IModule).deployParameters?.gitServiceRepoId\n            )\n            .map((row) => ({\n                moduleID: row.moduleID,\n                deployParameters: {\n                    gitGroupId: row.gitGroupID,\n                    gitServiceRepoId: row.microserviceID,\n                },\n            }));\n\n        const applicationSettings: IApplicationSettingsItem = {\n            applicationID: currentApp.value!.ID,\n            deployParameters: {\n                gitProductRepoId: appSettings.value.product.ID,\n                gitGroupId: appSettings.value.gitGroup.ID,\n                gitServiceRepoId: appSettings.value.microservice.ID,\n            },\n        };\n\n        settings = { modulesSettings };\n\n        if (\n            currentApp.value.deployParameters?.gitProductRepoId != appSettings.value.product.ID ||\n            currentApp.value.deployParameters?.gitServiceRepoId != appSettings.value.microservice.ID\n        ) {\n            settings = { ...settings, applicationSettings };\n        }\n\n        await executor.execute(\n            async () => {\n                await appSettingsUseCase.update(settings);\n            },\n            { loading: true }\n        );\n        emit(\"close\");\n    }\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_v_client_table = _resolveComponent(\"v-client-table\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, _toDisplayString(_unref(localization).get(\"deploySettings_appSettings\")), 1 /* TEXT */),\n    _createElementVNode(\"label\", _hoisted_3, _toDisplayString(_unref(localization).get(\"product\")), 1 /* TEXT */),\n    _createElementVNode(\"div\", _hoisted_4, [\n      _withDirectives(_createElementVNode(\"input\", {\n        class: \"product-input\",\n        list: \"products\",\n        id: \"product-input\",\n        placeholder: \"Select Product\",\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((appSettings.value.product.name) = $event)),\n        onChange: handleProductSelect,\n        disabled: gitProducts.value.disabled\n      }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_5), [\n        [_vModelText, appSettings.value.product.name]\n      ]),\n      (!gitProducts.value.loaded)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [\n            _createVNode(Spinner)\n          ]))\n        : _createCommentVNode(\"v-if\", true)\n    ]),\n    _createElementVNode(\"datalist\", _hoisted_7, [\n      _hoisted_8,\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(gitProducts.value.products, (product) => {\n        return (_openBlock(), _createElementBlock(\"option\", null, _toDisplayString(product.name), 1 /* TEXT */))\n      }), 256 /* UNKEYED_FRAGMENT */))\n    ]),\n    _createVNode(_component_v_client_table, {\n      ref: \"table\",\n      data: appDataTableRows.value,\n      columns: appAppDatatableColumns.value,\n      options: appOptionsDataTable.value\n    }, {\n      appName: _withCtx((props) => [\n        _createElementVNode(\"span\", null, _toDisplayString(props.row.appName), 1 /* TEXT */)\n      ]),\n      gitGroup: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_9, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: \"app-git-groups\",\n            id: \"app-git-group-input\",\n            placeholder: \"Select Git Group\",\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((appSettings.value.gitGroup.name) = $event)),\n            onInput: ($event: any) => (handleAppGitGroupInput(props.row)),\n            onChange: ($event: any) => (handleAppGitGroupChange(props.row)),\n            disabled: gitGroups.value.disabled\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_10), [\n            [_vModelText, appSettings.value.gitGroup.name]\n          ]),\n          (!gitGroups.value.loaded)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", _hoisted_12, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(gitGroups.value.groups, (gitGroup) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: gitGroup.value.name\n            }, null, 8 /* PROPS */, _hoisted_13))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ])\n      ]),\n      service: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_14, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: props.row.appID,\n            id: \"app-microservice-input\",\n            placeholder: \"Select Microservice\",\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((appSettings.value.microservice.name) = $event)),\n            onChange: ($event: any) => (handleAppMicroServiceChange(props.row)),\n            disabled: props.row.microservicesDisable\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_15), [\n            [_vModelText, appSettings.value.microservice.name]\n          ]),\n          (appSettings.value.microservice.loading)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", {\n          id: props.row.appID\n        }, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(props.row.microservices, (microservice) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: microservice.name\n            }, null, 8 /* PROPS */, _hoisted_18))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ], 8 /* PROPS */, _hoisted_17)\n      ]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\", \"columns\", \"options\"]),\n    _createElementVNode(\"div\", _hoisted_19, _toDisplayString(_unref(localization).get(\"deploySettings_moduleSettings\")), 1 /* TEXT */),\n    _createVNode(_component_v_client_table, {\n      ref: \"table\",\n      data: modulesDataTableRows.value,\n      columns: modulesAppDatatableColumns.value,\n      options: modulesOptionsDataTable.value\n    }, {\n      moduleName: _withCtx((props) => [\n        _createElementVNode(\"span\", null, _toDisplayString(props.row.moduleName), 1 /* TEXT */)\n      ]),\n      gitGroup: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_20, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: \"git-groups\",\n            id: \"git-group-input\",\n            placeholder: \"Select Git Group\",\n            \"onUpdate:modelValue\": ($event: any) => ((props.row.gitGroupName) = $event),\n            onInput: ($event: any) => (handleModulesGitGroupInput(props.row)),\n            onChange: ($event: any) => (handleModulesGitGroupChange(props.row)),\n            disabled: gitGroups.value.disabled\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_21), [\n            [_vModelText, props.row.gitGroupName]\n          ]),\n          (!gitGroups.value.loaded)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", _hoisted_23, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(gitGroups.value.groups, (gitGroup) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: gitGroup.value.name\n            }, null, 8 /* PROPS */, _hoisted_24))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ])\n      ]),\n      service: _withCtx((props) => [\n        _createElementVNode(\"div\", _hoisted_25, [\n          _withDirectives(_createElementVNode(\"input\", {\n            class: \"module-input\",\n            list: props.row.moduleID,\n            id: \"microservice-input\",\n            placeholder: \"Select Microservice\",\n            \"onUpdate:modelValue\": ($event: any) => ((props.row.microserviceName) = $event),\n            onChange: ($event: any) => (handleModulesMicroServiceChange(props.row)),\n            disabled: props.row.microservicesDisable\n          }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_26), [\n            [_vModelText, props.row.microserviceName]\n          ]),\n          (props.row.microserviceLoading)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_27, [\n                _createVNode(Spinner)\n              ]))\n            : _createCommentVNode(\"v-if\", true)\n        ]),\n        _createElementVNode(\"datalist\", {\n          id: props.row.moduleID\n        }, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(props.row.microservices, (microservice) => {\n            return (_openBlock(), _createElementBlock(\"option\", {\n              value: microservice.name\n            }, null, 8 /* PROPS */, _hoisted_29))\n          }), 256 /* UNKEYED_FRAGMENT */))\n        ], 8 /* PROPS */, _hoisted_28)\n      ]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\", \"columns\", \"options\"]),\n    _hoisted_30,\n    _createElementVNode(\"button\", {\n      class: \"save-button\",\n      onClick: onSave\n    }, _toDisplayString(_unref(localization).get(\"save\")), 1 /* TEXT */),\n    _createElementVNode(\"button\", {\n      class: \"previous-button\",\n      \"data-v-33a93b5b\": \"\",\n      onClick: _cache[3] || (_cache[3] = () => emit('close'))\n    }, _toDisplayString(_unref(localization).get(\"cancel\")), 1 /* TEXT */)\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./deploySettings.vue?vue&type=style&index=0&id=79436c2f&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./deploySettings.vue?vue&type=style&index=0&id=79436c2f&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./deploySettings.vue?vue&type=style&index=1&id=79436c2f&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./deploySettings.vue?vue&type=style&index=1&id=79436c2f&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./deploySettings.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./deploySettings.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./deploySettings.vue?vue&type=style&index=0&id=79436c2f&scoped=true&lang=css\"\nimport \"./deploySettings.vue?vue&type=style&index=1&id=79436c2f&lang=css\"\n\nimport exportComponent from \"/home/runner/work/QCloud-Shell/QCloud-Shell/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-79436c2f\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","style","class","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","script","n","for","key","_hoisted_7","_hoisted_8","_","value","disabled","selected","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","__name","emits","setup","__props","emit","modulesDataTableRows","viewModel","studio","items","filter","item","objectType","map","moduleID","ID","moduleName","name","gitGroupName","gitGroupID","deployParameters","gitGroupId","microservices","microservicesDisable","microserviceLoading","microserviceName","microserviceID","gitServiceRepoId","appDataTableRows","appID","currentApp","appName","async","appSettingsUseCase","getGroupNamesWithId","then","res","data","forEach","fetchedGroup","gitGroups","groups","microservicesCache","requestedBefore","loaded","row","group","find","index","self","indexOf","getProjectsByGroupId","length","microservice","service","catch","notification","showNotification","text","type","currentGitGroup","appSettings","gitGroup","loading","setAppSelectedGitGroup","getGitGroupsFromProvider","getProjectsOfProduct","gitProducts","products","currentProduct","product","gitProductRepoId","setSelectedProduct","localization","ILocalization","IViewModel","executor","IUseCaseExecutor","INotification","IApplicationSettings","debouncer","IDebounce","apps","app","appId","Array","modulesAppDatatableColumns","appAppDatatableColumns","modulesOptionsDataTable","resizableColumns","filterable","perPage","perPageValues","headings","get","sortable","texts","count","appOptionsDataTable","handleProductSelect","getModuleMicroservicesByGroupID","selectedGitGroup","currentRow","getAppMicroservicesByGroupID","onSave","settings","modulesSettings","applicationSettings","applicationID","execute","update","_ctx","_cache","_component_v_client_table","list","placeholder","$event","onChange","ref","columns","props","onInput","selectedRow","resetTimer","debounce","selectedMicroservice","onClick"],"sourceRoot":""}
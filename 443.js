"use strict";(this.webpackChunkqcloud_shell=this.webpackChunkqcloud_shell||[]).push([[443],{83175:(e,n,t)=>{t.d(n,{Z:()=>a});var o=t(34663),i=t.n(o),s=t(7638),l=t.n(s)()(i());l.push([e.id,"\n.container[data-v-71db724d] {\n    padding: 32px 20px 20px;\n}\n.settings-container[data-v-71db724d] {\n    position: relative;\n    top: 0px;\n    left: 0px;\n}\n.custom-text[data-v-71db724d] {\n    /* position: absolute; */\n    font-family: 'Roboto';\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 18px;\n    /* left: 24px; */\n    color: #212121;\n}\n\n/* .custom-text.title{\n    top: 92px;\n}\n\n.custom-text.environment{\n    top: 174px;\n} */\n.radio-button[data-v-71db724d] {\n    position: absolute;\n    top: 60px;\n    left: 20px;\n    cursor: pointer;\n}\n.radio-text[data-v-71db724d] {\n    position: absolute;\n    top: 59px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n    user-select: none;\n    cursor: pointer;\n}\n.existing-app-url[data-v-71db724d] {\n    position: absolute;\n    width: 760px;\n    height: 40px;\n    top: 114px;\n    left: 20px;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #bcbcbc;\n    border-radius: 4px;\n    font: normal normal normal 14px/19px Roboto;\n    letter-spacing: 0px;\n    padding: 10px 0px 10px 10px;\n}\n.url-error[data-v-71db724d] {\n    border: 1px solid red;\n}\n.url-disable[data-v-71db724d] {\n    opacity: 0.5;\n}\n.existing-app-url[data-v-71db724d]::placeholder {\n    color: #bcbcbc;\n    user-select: none;\n}\n.modules-selected-checkbox[data-v-71db724d] {\n    cursor: pointer;\n}\n.modules-selected-text[data-v-71db724d] {\n    font: normal normal normal 14px/19px Roboto;\n    color: #757575;\n    margin: 0 0 13px 30px;\n}\n\n/* .modules-selected-text.deploy {\n    top: 257px;\n} */\n.text-number[data-v-71db724d] {\n    font: normal normal bold 14px/19px Roboto;\n    color: #212121;\n}\n.modules-datatable[data-v-71db724d] {\n    width: 760px;\n    height: 288px;\n    border: 1px solid #bcbcbc;\n    overflow-x: hidden;\n    overflow-y: auto;\n    margin-bottom: 20px;\n}\n\n/* .modules-datatable.deploy {\n    top: 286px;\n} */\n.modules-datatable[data-v-71db724d]::-webkit-scrollbar {\n    width: 4px;\n}\n.modules-datatable[data-v-71db724d]::-webkit-scrollbar-thumb {\n    background: #bcbcbc 0% 0% no-repeat padding-box;\n    border-radius: 10px;\n}\n.modules-datatable[data-v-71db724d]::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n.row-container[data-v-71db724d] {\n    width: 100%;\n    height: 36px;\n    position: relative;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #e0e0e0;\n}\n.chevron[data-v-71db724d] {\n    position: absolute;\n    left: 4px;\n    color: #757575;\n    font-size: 24px;\n}\n.chevron.disabled[data-v-71db724d] {\n    pointer-events: none;\n    color: #D5D5D5;\n}\n.module-checkbox[data-v-71db724d] {\n    position: absolute;\n    top: 10px;\n    left: 43px;\n    cursor: pointer;\n}\n.module-name[data-v-71db724d] {\n    position: absolute;\n    top: 9px;\n    left: 69px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n.module-name.imported[data-v-71db724d] {\n    top: 10px;\n    left: 87px;\n}\n.module-name.disabled[data-v-71db724d] {\n    color: #D5D5D5;\n}\n.model-checkbox[data-v-71db724d] {\n    position: absolute;\n    top: 10px;\n    left: 59px;\n    cursor: pointer;\n}\n.model-icon[data-v-71db724d] {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 85px;\n}\n.app-tier-model-icon[data-v-71db724d] {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 69px\n}\n.app-tier-model-name[data-v-71db724d] {\n    position: absolute;\n    top: 10px;\n    left: 87px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n.app-tier-model-name.disabled[data-v-71db724d] {\n    color: #D5D5D5;\n}\n.model-name[data-v-71db724d] {\n    position: absolute;\n    top: 9px;\n    left: 103px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n.model-name.disabled[data-v-71db724d] {\n    color: #D5D5D5;\n}\n.version-text[data-v-71db724d] {\n    margin: 10px 7px 10px auto;\n    display: table;\n    font: normal normal normal 12px/16px Roboto;\n    color: #757575;\n    cursor: pointer;\n    user-select: none;\n}\n.version-text.disabled[data-v-71db724d] {\n    pointer-events: none;\n    cursor: pointer;\n}\n.version-icon[data-v-71db724d] {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #D5D5D5;\n}\n.version-icon.disabled[data-v-71db724d] {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #EEEEEE;\n    pointer-events: none;\n    cursor: pointer;\n}\n.footer[data-v-71db724d] {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: end;\n}\n.footer.deploy[data-v-71db724d] {\n    position: relative;\n    width: 100%;\n}\n.footer.export[data-v-71db724d] {\n    margin-top: 102px;\n}\n.cancel-button[data-v-71db724d] {\n    border-radius: 4px;\n    user-select: none;\n    font-style: normal;\n    font-weight: 500;\n    font-family: \"ROBOTO\";\n    font-size: 15px;\n    color: #757575;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n.save-button[data-v-71db724d] {\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    user-select: none;\n    font-weight: 500;\n    font-size: 15px;\n    color: #ffffff;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n.mobile-publish-text[data-v-71db724d],\n.web-publish-text[data-v-71db724d] {\n    padding: 5px 12px;\n    margin-bottom: 52px;\n    width: 100%;\n    color: #757575;\n    font-size: 14px;\n    background: #F5F5FA;\n    border-radius: 4px;\n    display: flex;\n    align-items: center;\n}\n.mobile-publish-text i[data-v-71db724d],\n.web-publish-text i[data-v-71db724d] {\n    font-size: 24px;\n    color: #151233;\n    margin-right: 4px;\n}\n.save-button.deploy[data-v-71db724d] {\n    padding: 10px 16px;\n}\n.button-disable .save-button[data-v-71db724d] {\n    color: #757575;\n    cursor: default;\n}\n.button-disable .save-button:hover+.button-tooltip[data-v-71db724d],\n.start-screen:hover .button-tooltip[data-v-71db724d],\n.row-container:hover .button-tooltip[data-v-71db724d],\n.publish-info:hover .button-tooltip[data-v-71db724d] {\n    visibility: visible;\n    transition: opacity 0.3s ease-out 1s;\n    opacity: 1;\n}\n.button-tooltip[data-v-71db724d] {\n    visibility: hidden;\n    position: absolute;\n    background: #757575;\n    color: #FFFFFF;\n    font-size: 11px;\n    font-family: 'Roboto';\n    text-align: center;\n    border-radius: 4px;\n    letter-spacing: 0.2px;\n    padding: 6px 8px 6px 8px;\n    top: 56px;\n    left: 63px;\n    opacity: 0;\n}\n.publish-info[data-v-71db724d] {\n    color: #757575;\n    font-size: 20px;\n    margin-left: 10px;\n}\n.qjson-color[data-v-71db724d] {\n    color: #449dd1;\n}\n.yaml-color[data-v-71db724d] {\n    color: #449dd1;\n}\n.namedcomp-color[data-v-71db724d] {\n    color: #212121;\n}\n.app-settings-color[data-v-71db724d] {\n    color: #151233;\n}\n.js-color[data-v-71db724d] {\n    color: #449dd1;\n}\n.css-color[data-v-71db724d] {\n    color: #151233;\n}\n.process-color[data-v-71db724d] {\n    color: #007c77;\n}\n.bpmn-color[data-v-71db724d] {\n    color: #007c77;\n}\n.entity-designer-color[data-v-71db724d] {\n    color: #e9724c;\n}\n.select-environment[data-v-71db724d] {\n    width: 100%;\n    font-size: 15px;\n    height: 40px;\n    line-height: 40px;\n    margin-top: 4px\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue"],names:[],mappings:";AAs/BA;IACI,uBAAuB;AAC3B;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;AACb;AAEA;IACI,wBAAwB;IACxB,qBAAqB;IACrB,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;AAClB;;AAEA;;;;;;GAMG;AAEH;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,2CAA2C;IAC3C,cAAc;IACd,iBAAiB;IACjB,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,UAAU;IACV,+CAA+C;IAC/C,yBAAyB;IACzB,kBAAkB;IAClB,2CAA2C;IAC3C,mBAAmB;IACnB,2BAA2B;AAC/B;AAEA;IACI,qBAAqB;AACzB;AAEA;IACI,YAAY;AAChB;AAEA;IACI,cAAc;IACd,iBAAiB;AACrB;AAEA;IACI,eAAe;AACnB;AAEA;IACI,2CAA2C;IAC3C,cAAc;IACd,qBAAqB;AAEzB;;AAEA;;GAEG;AAEH;IACI,yCAAyC;IACzC,cAAc;AAClB;AAEA;IACI,YAAY;IACZ,aAAa;IACb,yBAAyB;IACzB,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;;GAEG;AAEH;IACI,UAAU;AACd;AAEA;IACI,+CAA+C;IAC/C,mBAAmB;AACvB;AAEA;IACI,gBAAgB;AACpB;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,+CAA+C;IAC/C,yBAAyB;AAC7B;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,eAAe;AACnB;AAEA;IACI,oBAAoB;IACpB,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,UAAU;IACV,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,SAAS;IACT,UAAU;AACd;AACA;IACI,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,UAAU;AACd;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,QAAQ;IACR;AACJ;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,2CAA2C;IAC3C,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,0BAA0B;IAC1B,cAAc;IACd,2CAA2C;IAC3C,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB;AAEA;IACI,oBAAoB;IACpB,eAAe;AACnB;AAEA;IACI,0DAA0D;IAC1D,cAAc;AAClB;AAEA;IACI,0DAA0D;IAC1D,cAAc;IACd,oBAAoB;IACpB,eAAe;AACnB;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,oBAAoB;AACxB;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;AAEA;IACI,iBAAiB;AACrB;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;IAChB,qBAAqB;IACrB,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,eAAe;AACnB;AAIA;IACI,+CAA+C;IAC/C,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,eAAe;AACnB;AAEA;;IAEI,iBAAiB;IACjB,mBAAmB;IACnB,WAAW;IACX,cAAc;IACd,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;AACvB;AAEA;;IAEI,eAAe;IACf,cAAc;IACd,iBAAiB;AACrB;AAEA;IACI,kBAAkB;AACtB;AAEA;IACI,cAAc;IACd,eAAe;AACnB;AAEA;;;;IAII,mBAAmB;IACnB,oCAAoC;IACpC,UAAU;AACd;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,cAAc;IACd,eAAe;IACf,qBAAqB;IACrB,kBAAkB;IAClB,kBAAkB;IAClB,qBAAqB;IACrB,wBAAwB;IACxB,SAAS;IACT,UAAU;IACV,UAAU;AACd;AAEA;IACI,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AACA;IACI,cAAc;AAClB;AACA;IACI,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,cAAc;AAClB;AAEA;IACI,WAAW;IACX,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB;AACJ",sourcesContent:['<template>\n    <div class="container">\n        <div>\n            <CheckboxComp :class="[\'modules-selected-checkbox\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']"\n                :minus="mainCheckboxState == false" :check="mainCheckboxState == true"\n                @click="handleModuleCountCheckboxEvent(mainCheckboxState == undefined)" />\n            <div :class="[\'modules-selected-text\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']">\n                <span class="text-number">{{  allChildCheckedModulesCount + anyChildCheckedModulesCount + checkedRootLevelModelsCount }}</span>\n                of <span class="text-number">{{ totalRootLevelCount }}</span> items selected\n            </div>\n        </div>\n\n        <div :class="[\'modules-datatable\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']">\n            <div v-for="item in items">\n                <div v-if="item?.type == \'module\'">\n                    <div class="row-container">\n                        <i v-if="!item.imported" :class="\'mdi mdi-menu\' + (item.collapsed ? \'-right\' : \'-down\') + \' chevron\' + (!item.children || item.children.length == 0 ? \' disabled\': \'\')"\n                            @click="handleCollapse(item)" />\n                        <CheckboxComp class="module-checkbox" :check="item.allChildChecked"\n                            :minus="!item.allChildChecked && item.anyChildChecked" :disabled="item.disabled"\n                            @click="handleItemCheckEvent(item)" />\n                        <i v-if="item.imported" class="app-tier-model-icon mdi mdi-puzzle" />\n                        <span :class="[\'module-name\', item.imported ? ` imported` : (item.disabled ? \' disabled\': \'\')]">{{ item.name }}</span>\n                        <div v-if="item.imported" class=\'version-text\' @click="moduleVersionDialog(item)">\n                            {{ item.version ? item.version : \'No version\' }}\n                            <i :class="[\'mdi mdi-pencil-outline version-icon\']"></i>\n                        </div>\n                    </div>\n                    <div class="row-container" v-show="!item.imported && !item.collapsed" v-for="child in item?.children">\n                        <CheckboxComp class="model-checkbox" :check="child.checked" :disabled="child.disabled"\n                            @click="handleItemCheckEvent(child)" />\n                        <i v-if="child.type != \'module\'" :class="\'model-icon \' + ModelContants.getModelVisualInfo(child.type, undefined).icon" \n                            :style="{ color: ModelContants.getModelVisualInfo(child.type, undefined).color }" />\n                        \n                        <span :class="[\'model-name\', child.disabled ? \' disabled\' : \'\']">{{ child.name }}</span>\n                        <div v-if="!child.usageType || child.usageType == \'appSettings\'" :class="[\'version-text\', child.disabled ? \'disabled\' : \'\']" @click="versionDialog(child)">\n                            {{ child.version ? child.version : \'No version\' }} <i v-if="!child.usageType || child.usageType == \'appSettings\'" :class="[\'mdi mdi-pencil-outline version-icon\', child.disabled ? \'disabled\' : \'\']"></i>\n                        </div>\n                        <span v-if="child.disabled && !child.version" class="button-tooltip" \n                            style="z-index: 1; width: 300px;">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\n                        </span>\n                    </div>\n                </div>\n                <div v-else>\n                    <div class="row-container">\n                        <CheckboxComp class="module-checkbox" :check="item?.checked" :disabled="item.disabled"\n                            @click="handleItemCheckEvent(item)" />\n                        <i v-if="item?.type == \'qjson\'" class="mdi mdi-palette qjson-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'yaml\'" class="mdi mdi-cog-outline yaml-color app-tier-model-icon" />\n                        <i v-if="item?.type == \'js\'"\n                            class="mdi mdi-cog-outline js-color app-tier-model-icon" />\n                        <i v-if="item?.type == \'css\'"\n                            class="mdi mdi-music-accidental-sharp css-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'process\'" class="mdi mdi-auto-fix process-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'bpmn\'" class="mdi mdi-vector-polyline bpmn-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'entityDesigner\'"\n                            class="mdi mdi-database entity-designer-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'flow\'" class="mdi mdi-step-forward bpmn-color app-tier-model-icon" />\n                        <i v-else-if="item.type == \'namedComponent\'" class="mdi mdi-cube-outline namedcomp-color app-tier-model-icon"></i>\n                        <i v-else-if="item.type == \'appSettings\'" class="mdi mdi-cog app-settings-color app-tier-model-icon"></i>\n                        <span class="app-tier-model-name">{{ item?.name }}\n                            <span class="start-screen" v-if="startScreen?.ID == item.id">\n                                <i class="mdi mdi-home-outline"></i>\n                                <span class="button-tooltip" style="top: -30px; left: 2px; z-index: 1; width: 80px;">Start\n                                    Screen</span>\n                            </span>\n                        </span>\n\n                        <span v-if="!item.usageType" :class="[\'version-text\', item.disabled ? \'disabled\' : \'\']" @click="versionDialog(item)">\n                            {{ item.version ? item.version : \'No version\' }} <i v-if="!item.usageType" :class="[\'mdi mdi-pencil-outline version-icon\', item.disabled ? \'disabled\' : \'\']"></i>\n                        </span>\n                        <span v-if="item.disabled && !item.version" class="button-tooltip"\n                            style="z-index: 1; width: 300px;">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div v-if="props.screenType == \'Deploy\'" style="margin-bottom: 102px">\n            <div style="display: flex; align-items: center;">\n                <span class="custom-text environment"> Publish To </span>\n                <span class="publish-info">\n                    <i class="mdi mdi-information"></i>\n                    <span class="button-tooltip" style="top: 460px; left: 96px; z-index: 1; width: 231px;">Publish To\n                        options may change depending on the module type you choose.</span>\n                </span>\n            </div>\n\n            <CustomSelect :options="publishTargets" @input="onTargetSelect" :selectedOption="selectedTarget"\n                :default="selectedTarget" :disabledOptions="disabledOptions" selectedClass="selected-environment"\n                placeholder="Select the publish environment of your application" class="select-environment">\n            </CustomSelect>\n        </div>\n\x3c!--         <div v-if="props.screenType == \'Deploy\' && !props.platformSelection.web && props.platformSelection.mobile"\n            class="mobile-publish-text">\n            <i class="mdi mdi-information"></i>\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\n        </div> --\x3e\n        <div :class="[\'footer\', props.screenType == \'Deploy\' ? \'deploy\' : \'export\']">\n            <div :class="[\'cancel-button\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']" @click="close">Cancel</div>\n            <div v-if="props.screenType == \'Export\'" :class="(saveButtonDisable ? \' button-disable\' : \'\')" @click="!saveButtonDisable && save()">\n                <span class="save-button ">DOWNLOAD</span>\n                <span v-if="!isThereVersion" class="button-tooltip" \n                    style="top: -80px; left: 626px; z-index: 1; width: 145px;">There are no items ready to publish. At least one of your items must be ready to publish.</span>\n                <span v-else-if="!isStartScreenOK" class="button-tooltip"\n                    style="top: -46px; left: 640px; z-index: 1; width: 120px;">You need to include your start screen.</span>\n                <span v-else-if="!isAllDependenciesOK" class="button-tooltip" \n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">{{ dependencyErrorStr }}</span>\n            </div>\n            <div v-if="props.screenType == \'Deploy\'" :class="[(saveButtonDisable ? \' button-disable\' : \'\')]" @click="!saveButtonDisable && save()">\n                <span class="save-button deploy">PUBLISH</span>\n                <span v-if="!isStartScreenOK" class="button-tooltip"\n                    style="top: -46px; left: 652px; z-index: 1; width: 120px;">You need to include your start screen.</span>\n                <span v-else-if="!selectedTarget" class="button-tooltip"\n                    style="top: -46px; left: 644px; z-index: 1; width: 123px;">You need to select a publish environment.</span>\n                <span v-else-if="!isThereVersion" class="button-tooltip" \n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">There are no items ready to publish. At least one of your items must be ready to publish.</span>\n                <span v-else-if="!isAllDependenciesOK" class="button-tooltip" \n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">{{ dependencyErrorStr }}</span>\n            </div>\n\n        </div>\n    </div>\n</template>\n\n\n<script setup lang="ts">\nimport { CryptoHelper } from "@stechquick/algae/lib/helpers/cryptoHelper";\nimport { PlateauHelper } from "@stechquick/algae/lib/helpers/plateau/plateauHelper";\nimport { computed, defineAsyncComponent, onMounted, ref } from "vue";\nimport { IOrganizationCloud } from "../../../../../../../common/clean/domain/useCases/ICloudProvider";\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem } from "../../../../../../../common/qCloudTemp/exporter";\nimport { ModelContants } from "../../../../../../../common/qCloudTemp/modelContants";\nimport { IQJsonAdditionals, UsageType, APP_ITEM_CONTENT_TYPES } from "../../../../../../../common/qCloudTemp/quickCloud";\nimport { container } from "../../../../../domain/core/diContainer";\nimport { IQCloudApi } from "../../../../../domain/infrastructure/IQCloudApi";\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from "../../../../../domain/model/models";\nimport { IDialog } from "../../../../../domain/presentation/IDialog";\nimport { ICreateExportJob } from "../../../../../domain/useCase/ICreateExportJob";\nimport { IDeployJobs } from "../../../../../domain/useCase/IDeployJobs";\nimport { IJobUtils } from "../../../../../domain/useCase/IJobUtils";\nimport { IListMultiModelVersions } from "../../../../../domain/useCase/IListMultiModelVersions";\nimport { IPackJobs } from "../../../../../domain/useCase/IPackJobs";\nimport { IUseCaseExecutor } from "../../../../../domain/useCase/IUseCaseExecutor";\nimport { IViewModel } from "../../../../../domain/viewModel/IViewModel";\nimport { IViewModelManager } from "../../../../../domain/viewModel/IViewModelManager";\nimport CustomSelect from "../../../components/customSelect.vue";\nimport CheckboxComp from "../../checkboxComp.vue";\nimport { IListMultiModuleVersions } from "../../../../../domain/useCase/IListMultiModuleVersions";\n\ninterface ITableData {\n    id: string;\n    parentId?: string;\n    collapsed?: boolean;\n    anyChildChecked?: boolean;\n    allChildChecked?: boolean;\n    checked?: boolean;\n    name: string;\n    type: IModel["modelType"] | IModule["objectType"];\n    version?: string;\n    disabled?: boolean | true;\n    children?: Array<ITableData>;\n    usageType?: UsageType;\n    imported?: boolean;\n}\n\ninterface IDeployScreenAdditionalProps {\n    screenType: "Export" | "Deploy";\n    platformSelection: IPlatformSelection;\n}\n\ninterface IDisabledOptions {\n    index: number\n    cause: string;\n}\n\nconst props = defineProps<IDeployScreenAdditionalProps>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\nconst emit = defineEmits(["close"]);\nconst items = ref<Array<ITableData>>([]);\nconst validations = ref<boolean>(true);\nconst selectedTarget = ref<string>("");\nconst disabledOptions = ref<Array<IDisabledOptions>>();\nconst publishTargets = ref<Array<string>>();\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\nconst startScreen = ref<IModel>();\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>>();\nconst dependencyErrorStr = ref<string>(\'\');\n\nonMounted(async () => {\n    await Promise.all([\n        executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, { }).then(res => modelHistories.value = res),\n        executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, { }).then(res => importedModuleVersions.value = res)\n    ])\n    initDependencies();\n    handleItems();\n    props.screenType == "Deploy" && syncPublishTargets();\n    validations.value = validate();\n})\n\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == "module" && e.allChildChecked).length);\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == "module" && !e.allChildChecked && e.anyChildChecked).length);\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != "module" && e.checked).length);\nconst totalRootLevelCount = computed(() => items.value.length);\nconst saveButtonDisable = computed(() => (props.screenType == "Deploy" && props.platformSelection.web && selectedTarget.value == "") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == "Export" && !validateStartScreen()) || !validateDependencies());\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true \n        : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0  ? false : undefined));\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\nconst isAllDependenciesOK = computed(validateDependencies)\nconst isStartScreenOK = computed(validateStartScreen)\n\nfunction validate() {\n    let result = true;\n    const modules = items.value.filter(e => e.type == "module" && e.anyChildChecked);\n    const appLayerItems = items.value.filter(e => e.type == "qjson" && e.checked);\n\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => item.isRootPage);\n    if(!startScreen.value)\n        return false;\n\n    if (props.screenType == "Deploy") {\n        if (modules.length > 0)\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == "entityDesigner" && f.checked)).length <= 0\n\n        let isApplicationWillDeploy = appLayerItems.length > 0;\n        if (isApplicationWillDeploy) {\n            result = appLayerItems\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\n        }\n    }\n\n    return result;\n}\n\nfunction validateDependencies() {\n    const checkMap = new Map<string, boolean>();\n    items.value.forEach(item => {\n        if(item.type == \'module\' && item.children && item.children.length > 0)\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\n        else\n            checkMap.set(item.id, item.checked == true)\n    })\n\n    const mustBeCheckedMap = new Map<string, Array<string>>();\n    dependencyMap.value?.forEach((deps, id) => {\n        if(!checkMap.get(id)) \n            return;\n\n        deps.dependedTo.forEach(dependedId => {\n            if(checkMap.get(dependedId))\n                return;\n\n            if(mustBeCheckedMap.has(id)){\n                const vals = mustBeCheckedMap.get(id)!\n                vals.push(dependedId)\n                mustBeCheckedMap.set(id, vals)\n            }else {\n                mustBeCheckedMap.set(id, [dependedId])\n            }\n            \n        });\n    })\n\n    //set deps error text\n    const [firstItemID] = mustBeCheckedMap.keys();\n    if(firstItemID) {\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(\', \') : \'\';\n        dependencyErrorStr.value =`Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\n    }\n\n    return mustBeCheckedMap.size == 0\n}\n\nfunction validateStartScreen() {\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\n}\n\nfunction findItem (ID: string) {\n    for(const item of items.value){\n        if(item.type != \'module\' && item.id == ID)\n            return item;\n        if(item.type == \'module\' && item.children && item.children.length> 0 ){\n            const f = item.children.find(e => e.id == ID)\n            if(f) return f\n        }\n    }\n}\n\nfunction initDependencies() {\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>();\n    const depMap = new Map<string, Array<string>>();\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path) => {\n            if (item.objectType != "model") { return; }\n\n            const isImportedModule = item.parent.objectType == "module" && isModuleImported(item.parent);\n            \n            let version: string | undefined;\n            if(!isImportedModule){\n                const maxVersion = getItemMaxVersion(item)\n                if(!maxVersion)\n                    return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\n                version = maxVersion;\n            }\n            else {\n                const moduleVersions = importedModuleVersions.value?.get(item.parent.ID)\n                const moduleVersion = (item.parent as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n\n                const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\n                version = importedModuleModel?.version\n            }\n\n            const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\n\n            depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\n    });\n\n    \n    depMap.forEach((dependedTo, modelId) => {\n        const dependedBy = Array<string>();\n        depMap.forEach((dependencies, depModelId) => {\n            if (dependencies.some(depId => depId == modelId))\n                dependedBy.push(depModelId)\n        })\n        map.set(modelId, {dependedBy, dependedTo});\n    })\n    dependencyMap.value = map;\n}\n\nfunction isModelDepended(item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\n    if(!deps) return false;\n\n    return deps.some(dep => items.value.some(item => {\n        if(item.type == \'module\' && item.anyChildChecked){\n            return item.children?.some(child => child.checked && child.id == dep)\n        }\n        return item.id == dep && item.checked\n    }));\n}\n\nasync function handleItems() {\n    // - modules and module items\n    items.value = viewModel.studio.items\n        .filter((item) => item.objectType == "module" && item.children.length > 0)\n        .map((item) => {\n            const isImportedModule = isModuleImported(item as IModule);\n            const moduleVersion = (item as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n            const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\n            const tableData: ITableData = {\n                id: item.ID,\n                collapsed: true,\n                name: item.name,\n                type: "module",\n                imported: isImportedModule,\n                version: moduleVersion,\n                children: (item as IModule).children\n                    .filter((child) => child.objectType == "model")\n                    .map(child => child as IModel)\n                    .map(child => {\n                        const childModel: ITableData = {id: child.ID,parentId: item.ID,name: child.name,type: (child as IModel).modelType}\n                        if(!isImportedModule || child.isUnmodifiable){\n                            const maxVersion = getItemMaxVersion(child)                         \n                            return {\n                                ...childModel,\n                                checked: maxVersion ? true : child.isUnmodifiable,\n                                disabled: maxVersion ? false : !child.isUnmodifiable,\n                                version: child.isUnmodifiable ? \'latest\' : maxVersion,\n                            } as ITableData\n                        }\n                        \n                        const importedModulesModel = relatedModelHistories?.find(e => e.modelID == child.ID)\n                        return {...childModel, checked: true,disabled: false, version: importedModulesModel?.version } as ITableData\n                    })\n            }\n            handleParentCheckedStatus(tableData);\n            return tableData;\n        });\n\n    // - App Settings\n    const appSettings = viewModel.studio.items.find(e => e.name == \'App Settings\')!\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\n    appSettings && items.value.push({\n        id: appSettings.ID,\n        name: appSettings.name,\n        checked: true,\n        disabled: false,\n        type: (appSettings as IModel).modelType,\n        version: !maxVersion ? \'latest\' : maxVersion\n    });\n\n    // - application items\n    viewModel.studio.items\n        .filter((item) => item.objectType == "model" && item.modelType != "appSettings" && item.usageType != "appSettings" && item.usageType != "appAssetList")\n        .map(item => item as IModel)\n        .forEach(item => {\n            const maxVersion = getItemMaxVersion(item)\n            items.value.push({\n                    id: item.ID,\n                    name: item.name,\n                    checked: maxVersion ? true : item.isUnmodifiable,\n                    disabled: maxVersion ? false : !item.isUnmodifiable,\n                    type: item.modelType,\n                    version: item.isUnmodifiable ? \'latest\' : maxVersion,\n                });\n        });\n        \n    // - UI Settings\n    const uiSettingsID = CryptoHelper.CreateGuid();\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == "model" && item.usageType == "appSettings") as Array<IModel>;\n    const uiSettings: ITableData = {\n        id: uiSettingsID,\n        collapsed: true,\n        name: "UI Settings",\n        type: "module",\n        imported: false,\n        children: uiSettingsModels.map(settings => {\n            const maxVersion = getItemMaxVersion(settings)\n            return {\n                id: settings.ID,\n                parentId: uiSettingsID,\n                name: settings.name,\n                type: settings.modelType,\n                checked: maxVersion != undefined,\n                usageType: settings?.usageType,\n                disabled: !maxVersion,\n                version: maxVersion,\n            }\n        }) as Array<ITableData>,\n    };\n    handleParentCheckedStatus(uiSettings);\n\n    // - Styled Components\n    const uiAssetID = CryptoHelper.CreateGuid();\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == "model" && item.usageType == "appAssetList") as Array<IModel>;\n    const uiAssetList: ITableData = {\n        id: uiAssetID,\n        collapsed: true,\n        name: "Styled Components",\n        type: "module",\n        imported: false,\n        anyChildChecked: true,\n        allChildChecked: true,\n        children: appAssetList.map((asset) => ({\n            id: asset.ID,\n            parentId: uiAssetID,\n            name: asset.name,\n            type: asset.modelType,\n            checked: true,\n            usageType: asset?.usageType,\n        })) as Array<ITableData>,\n    };\n    handleParentCheckedStatus(uiAssetList);\n\n    items.value.unshift(uiAssetList);\n    items.value.unshift(uiSettings);\n}\n\nfunction getItemMaxVersion(item: IModel): string | undefined {\n    if (!modelHistories.value?.has(item.ID))\n        return undefined;\n\n    const versions = modelHistories.value.get(item.ID);\n    if (!versions)\n        return undefined;\n\n    const findMaxVersion = (versions: Array<string>) => {\n        const versionNumbers = versions.map(v => {\n            const parts: Array<string> = v.split(".");\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\n        })\n\n        versionNumbers.sort((a, b) => b - a);\n\n        const maxVersion = versionNumbers[0];\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\n    }\n\n    return findMaxVersion(versions.map(e => e.version!));\n\n}\nfunction checkMaxVersionOfAllItems() {\n    let isThereVersion: boolean = false;\n    items.value.forEach(item => {\n        if(item.type == "module") {\n            item.children?.forEach(child => {\n                if(child.version) {\n                    isThereVersion = true;\n                }\n                \n            })\n        }\n        else {\n            if(item.version) {\n                isThereVersion = true;\n            }\n        }\n    })\n    return isThereVersion;\n}\nfunction handleModuleCountCheckboxEvent(value: boolean) {\n    items.value.filter(e => !e.disabled).forEach((item) => {\n        item.checked = value;\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\n        if (allItemsCheckable) item.allChildChecked = value;\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\n    });\n\n    validations.value = validate();\n    props.screenType == "Deploy" && syncPublishTargets();\n}\n\nfunction handleCollapse(item: ITableData) {\n    item.collapsed = !item.collapsed;\n}\n\nfunction checkAllDependents(item: ITableData) {\n    if(item.disabled || item.checked) return;\n\n    item.checked = true\n    item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!);\n\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\n    if(!deps) return;\n\n    deps.forEach(dep => {\n        items.value.forEach(item => {\n            if(item.type == \'module\' && !item.allChildChecked){\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\n                willCheckItem && checkAllDependents(willCheckItem)\n                handleParentCheckedStatus(item)\n                return;\n            }\n\n            if(!item.checked && item.id == dep) {\n                checkAllDependents(item)\n                item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\n            }\n        })\n    });\n}\n\nfunction handleItemCheckEvent(item: ITableData) {\n    if(item.disabled || isModelDepended(item) || item.name == \'App Settings\')\n        return;\n\n    if(item.type != "module") {\n        if(item.checked){\n            item.checked = false;\n            item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\n        } else {\n            checkAllDependents(item)\n        }\n    } else {\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\n            if (item.anyChildChecked) {\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\n                item.checked = false;\n                handleParentCheckedStatus(item);\n            } else {\n                item.children.forEach(checkAllDependents);\n                item.checked = true;\n            }\n        }\n        else {\n            item.checked = !item.checked;\n            item.allChildChecked = false;\n        }\n    }\n\n    validations.value = validate();\n    props.screenType == "Deploy" && syncPublishTargets();\n}\n\nfunction handleParentCheckedStatus(item: ITableData) {\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\n}\n\nfunction syncPublishTargets() {\n    publishTargets.value = []; disabledOptions.value = [];\n\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\n    if (!targets)\n        return;\n\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\n    if (!isSelectAnyItem) {\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\n        const disabledOptionList = Array<IDisabledOptions>();\n        for (let i = 0; i < publishTargets.value.length; i++) {\n            disabledOptionList.push({ index: i, cause: "You need to include items to publish." })\n        }\n        disabledOptions.value = disabledOptionList;\n        return;\n    }\n\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\n\n    const disabledOptionList = Array<IDisabledOptions>();\n    for (let i = 0; i < sortedTargets.length; i++) {\n        const cause = sortedTargets[i].cause;\n        if (cause) disabledOptionList.push({ index: i, cause })\n    }\n    disabledOptions.value = disabledOptionList;\n    publishTargets.value = sortedTargets.map(e => e.optionName);\n\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : "";\n}\n\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\n    const list = Array<{ optionName: string, cause?: string }>();\n\n    Object.keys(targets).forEach(e => {\n        const key = e as keyof IOrganizationCloud;\n        const value = targets[key];\n        const optionName = cloudTargetMap(key)!;\n        if (!value)\n            return list.push({ optionName, cause: "You are not authorized to publish to this target." });\n\n\n        switch (key) {\n            case "azure":\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\n                    if (!items || items.length == 0) { return status; }\n                    for (const item of items) {\n                        if (item.checked || item.anyChildChecked) {\n                            if (item.type == "module") {\n                                status = traverseSelectedItems(status, item.children);\n                            }\n                            if (item.type == "entityDesigner" || item.type == "bpmn" || item.type == "process") {\n                                status = false;\n                                break;\n                            }\n                        }\n\n                    }\n                    return status;\n                }\n\n                const status = traverseSelectedItems(true, items.value);\n                if (!status)\n                    return list.push({ optionName, cause: "Entity and process models cannot be published to this target." });\n                break;\n            case "plateauGCP":\n                const modulesHasNotAnEDModel =  items.value.filter(e => e.name != "UI Settings").find(e => e.type == "module" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == "bpmn" || c.type == "process")) && !e.children?.some(c => c.type == "entityDesigner" && c.checked))\n                if (modulesHasNotAnEDModel)\n                    return list.push({optionName, cause: `This target not available. Selected module \'${modulesHasNotAnEDModel.name}\' has not any Data Model.`})\n                break;\n        }\n\n        list.push({ optionName });\n    })\n\n    return list;\n}\n\nfunction updateDependencyMap(newVersion: string, item: ITableData) { \n    const deps = dependencyMap.value?.get(item.id);\n    dependencyMap.value?.set(item.id, {\n        dependedBy: deps?.dependedBy || Array<string>(), \n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\n    })\n}\n\nfunction versionDialog(item: ITableData) {\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\n    const hasAnyVersion = modelHistories.value?.has(item.id);\n    const options = { clickedNode, cb: (version: string) => { \n        item.version = version;\n        updateDependencyMap(version, item);\n    } } as any;\n\n    if (hasAnyVersion) {\n        options.versions = modelHistories.value?.get(item.id)\n    }\n    dialog.showDialog(\n        defineAsyncComponent(() => import("../../application/modelVersionDialog.vue")),\n        { closable: true, title: "Change Version", width: "1080px", maxHeight: "500px", overflow: "auto" }, options\n    );\n}\n\n\nfunction moduleVersionDialog(item: ITableData) {\n    dialog.showDialog(\n        defineAsyncComponent(() => import("../../application/moduleVersionDialog.vue")),\n        { closable: true, title: "Change Version", width: "1080px", maxHeight: "500px", overflow: "auto" },\n        { module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => { \n            item.version = moduleVersion.version;\n            item.children?.forEach(child => {\n                const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\n                child.version = modulesModel?.version\n                updateDependencyMap(modulesModel?.version!, child);\n            })\n        }}\n    );\n}\n\nfunction close() {\n    emit("close");\n}\n\nasync function save() {\n    executor.execute(\n        async () => {\n            const initAsGroup = async () => {\n                const groupID = CryptoHelper.CreateGuid();\n                await initHistory(groupID);\n                await packJob(groupID);\n                return groupID;\n            }\n\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\n\n            switch (props.screenType) {\n                case "Export":\n                    if(isFlowBackend) {\n                        const deployItems = await createAzureDeployItems();\n                        await packJobsUseCase.createPackJobs([{\n                            appID: viewModel.studio.appId,\n                            exportType: "qui",\n                            selectionData: deployItems\n                        }]);\n                        break;\n                    }\n\n                    const groupID = await initAsGroup();\n                    await createExportJob(groupID);\n                    break;\n                case "Deploy":\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\n                        case "plateauGCP":\n                            const groupID = await initAsGroup();\n                            await createDeployJob(groupID);\n                            break;\n                        case "azure":\n                            const deployItems = await createAzureDeployItems();\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\n                            break;\n                    }\n            }\n            emit("close");\n        },\n        { loading: true });\n}\n\nasync function createAzureDeployItems() {\n    const deployItems: Array<IExportItem> = [];\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\n        if (item.objectType != "model") { return; }\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\n        if (!items || items.length == 0) { return; }\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\n            if (item.type == "module") {\n                traverseSelectedItems(item.children);\n                return;\n            }\n\n            const itemMap = itemIdObj[item.id];\n\n            const deployItem: IExportItem = {\n                id: item.id,\n                name: jobUtils.getFileFullname(itemMap.item),\n                path: itemMap.path,\n                type: jobUtils.getItemType(itemMap.item),\n                ver: item.version || "latest",\n                isRootPage: itemMap.item.isRootPage,\n                modulePrefix: itemMap.prefix,\n                ownerType: \'application\',\n                ownerName: viewModel.studio.appName,\n                size: itemMap.item.size,\n                createDate: itemMap.item.createDate,\n            };\n            deployItems.push(deployItem)\n        });\n    };\n\n    traverseSelectedItems(items.value);\n\n    return deployItems;\n}\n\nasync function initHistory(groupID: string) {\n    return qcloudApi.initPublishHistory({\n        appID: viewModel.studio.appId,\n        ID: groupID,\n        isMultiStep: true,\n        type: props.screenType == "Deploy" ? "publish" : "download",\n        cloudProvider: props.screenType == "Deploy" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\n        platform: props.platformSelection\n    });\n}\n\nasync function packJob(groupID: string) {\n    let exportItemMap = new Map<string, Array<IExportItem>>();\n    const appName = viewModel.studio.appName;\n\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\n        if (item.objectType != "model") { return; }\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const createExportObject = (tableItem: ITableData) => {\n        const item = itemIdObj[tableItem.id].item;\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == item.modelType);\n        const retVal: IExportItem = {\n            id: tableItem.id,\n            ver: tableItem.version!,\n            type: jobUtils.getItemType(item),\n            path: itemIdObj[tableItem.id].path,\n            modulePrefix: itemIdObj[tableItem.id].prefix,\n            name: jobUtils.getFileFullname(item),\n            ownerType: isAppItem ? \'application\' : (item.parent.objectType as "module" | "application"),\n            ownerName: isAppItem ? appName : item.parent.name,\n        };\n        return retVal;\n    }\n\n    const addToExportItem = (key: string, obj: IExportItem) => {\n        key = obj.ownerType == \'module\' ? `mdl-${key}` : key; // for same named module and app\n        let items = exportItemMap.get(key);\n        if(items && items.length > 0){\n            items.push(obj);\n            exportItemMap.set(key, items);\n        } else\n            exportItemMap.set(key, [obj]);\n    }\n\n    items.value.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\n        if (asset.type == \'module\') {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                const obj = createExportObject(child);\n                if (obj.type == "entityDesigner")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n\n                const useSeperateModule = obj.type == \'bpmn\' || obj.type == \'entityDesigner\' || obj.type == \'process\';\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\n            });\n        } else {\n            const obj = createExportObject(asset);\n            if (asset.type == \'qjson\'){\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == "model" && i.modelType == "qjson" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\n                obj.isRootPage = isRootPage ? true : undefined;\n            }\n            addToExportItem(appName, obj);\n        }\n    })\n\n    let jobs = Array<ICreateExportJobParam>();\n    exportItemMap.forEach((v, k) => {\n        jobs.push({\n            appID: viewModel.studio.appId,\n            exportType: "qui", //(props.platformSelection.mobile && !props.platformSelection.web) ? "model":  "qui"\n            selectionData: v,\n            cause: props.screenType == \'Export\' ? \'download\': "publish",\n            layer: 0,\n            groupID: groupID,\n            platformSelection: props.platformSelection\n        })\n    })\n    \n    await packJobsUseCase.createPackJobs(jobs);\n}\n\nasync function createExportJob(groupID: string) {\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\n        appID: viewModel.studio.appId,\n        exportType: "qui",\n        selectionData: [],\n        layer: 1,\n        groupID: groupID\n    });\n}\n\nasync function createDeployJob(groupID: string) {\n    //1-(n) L1- deployJob(build)\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\n        .then(jobs => jobs.jobs.map(e => {\n            const jobData = e.jobData as IExportJobData;\n            return {\n                ownerName: jobData.items[0].ownerName,\n                jobID: e.jobID,\n                type: jobData.items[0].ownerType,\n                mainDir: getDeployableArchiveRoot(jobData)\n            }\n        }));\n\n    if (!packages || packages.length <= 0)\n        return;\n\n    let buildJobs = Array<ICreateDeployJobParam>();\n    packages.forEach(pack => {\n        buildJobs.push({\n            appID: viewModel.studio.appId,\n            type: "build",\n            package: {\n                type: pack.type as DeployType,\n                name: pack.ownerName!,\n                mainDir: pack.mainDir,\n                zip: `${pack.jobID}.zip`,\n            },\n            layer: 1,\n            groupID: groupID\n        })\n    })\n\n    await deployJobsUseCase.createBuildJobs(buildJobs);\n\n    //2-(1) L2- deployJob(deployment)\n    let jobParam: ICreateDeployJobParam = {\n        appID: viewModel.studio.appId,\n        type: "deployment",\n        deployConfig: {\n            process: {\n                configModelIDs: getProcessConfigList(),\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == "bpmn"))\n            }\n        },\n        layer: 2,\n        groupID: groupID,\n        platformSelection: props.platformSelection\n    }\n\n    await deployJobsUseCase.startDeploymentJob(jobParam);\n}\n\nfunction getProcessConfigList() {\n    let processConfigList = Array<IProcessConfigModelItem>();\n    items.value.forEach((asset) => {\n        if (asset.type == "module" && asset.anyChildChecked && asset.children) {\n            const usingService = asset.children.find(c => c.type == "entityDesigner");\n            if (!usingService)\n                return;\n\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\n            asset.children.forEach(child => {\n                if (child.checked && child.type == "process") {\n                    processConfigList.push({\n                        moduleName: serviceName,\n                        model: {\n                            id: child.id,\n                            name: child.name,\n                            version: child.version!\n                        }\n                    })\n                }\n            })\n        }\n    })\n    return processConfigList;\n}\n\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\n    if (jobData.items[0].ownerType == "module") {\n        let edModel = jobData.items.find(e => e.type == "entityDesigner");\n        if (!edModel)\n            throw new Error("!!! this module cannot deploy. Because its have not a service");\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\n    }\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\n}\n\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\n    const map: Record<keyof IOrganizationCloud, string> = { azure: "Public Cloud", plateauGCP: "Plateau Platform Playground" };\n    if (pureVal) {\n        return Object.keys(map).find(e => {\n            if (map[e as keyof IOrganizationCloud] === name) {\n                return true;\n            }\n        })\n    } else {\n        let key = Object.keys(map).includes(name);\n        if (!key)\n            return;\n        return map[name as keyof IOrganizationCloud];\n    }\n}\n\nfunction onTargetSelect(value: string) {\n    selectedTarget.value = value\n}\n\nconst isModuleImported = (item: IModule) => {\n    const hasAVersion = item.relatedApplications.find(e => e.applicationID == viewModel.studio.appId)?.importedVersion;\n    if(item.mainOwner != viewModel.studio.appId && item.relatedApplications.at(0)?.applicationID != viewModel.studio.appId && hasAVersion)\n        return true;\n    return false;\n}\n\n<\/script>\n\n\n<style scoped>\n.container {\n    padding: 32px 20px 20px;\n}\n\n.settings-container {\n    position: relative;\n    top: 0px;\n    left: 0px;\n}\n\n.custom-text {\n    /* position: absolute; */\n    font-family: \'Roboto\';\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 18px;\n    /* left: 24px; */\n    color: #212121;\n}\n\n/* .custom-text.title{\n    top: 92px;\n}\n\n.custom-text.environment{\n    top: 174px;\n} */\n\n.radio-button {\n    position: absolute;\n    top: 60px;\n    left: 20px;\n    cursor: pointer;\n}\n\n.radio-text {\n    position: absolute;\n    top: 59px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n    user-select: none;\n    cursor: pointer;\n}\n\n.existing-app-url {\n    position: absolute;\n    width: 760px;\n    height: 40px;\n    top: 114px;\n    left: 20px;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #bcbcbc;\n    border-radius: 4px;\n    font: normal normal normal 14px/19px Roboto;\n    letter-spacing: 0px;\n    padding: 10px 0px 10px 10px;\n}\n\n.url-error {\n    border: 1px solid red;\n}\n\n.url-disable {\n    opacity: 0.5;\n}\n\n.existing-app-url::placeholder {\n    color: #bcbcbc;\n    user-select: none;\n}\n\n.modules-selected-checkbox {\n    cursor: pointer;\n}\n\n.modules-selected-text {\n    font: normal normal normal 14px/19px Roboto;\n    color: #757575;\n    margin: 0 0 13px 30px;\n    ;\n}\n\n/* .modules-selected-text.deploy {\n    top: 257px;\n} */\n\n.text-number {\n    font: normal normal bold 14px/19px Roboto;\n    color: #212121;\n}\n\n.modules-datatable {\n    width: 760px;\n    height: 288px;\n    border: 1px solid #bcbcbc;\n    overflow-x: hidden;\n    overflow-y: auto;\n    margin-bottom: 20px;\n}\n\n/* .modules-datatable.deploy {\n    top: 286px;\n} */\n\n.modules-datatable::-webkit-scrollbar {\n    width: 4px;\n}\n\n.modules-datatable::-webkit-scrollbar-thumb {\n    background: #bcbcbc 0% 0% no-repeat padding-box;\n    border-radius: 10px;\n}\n\n.modules-datatable::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n\n.row-container {\n    width: 100%;\n    height: 36px;\n    position: relative;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #e0e0e0;\n}\n\n.chevron {\n    position: absolute;\n    left: 4px;\n    color: #757575;\n    font-size: 24px;\n}\n\n.chevron.disabled {\n    pointer-events: none;\n    color: #D5D5D5;\n}\n\n.module-checkbox {\n    position: absolute;\n    top: 10px;\n    left: 43px;\n    cursor: pointer;\n}\n\n.module-name {\n    position: absolute;\n    top: 9px;\n    left: 69px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.module-name.imported {\n    top: 10px;\n    left: 87px;\n}\n.module-name.disabled {\n    color: #D5D5D5;\n}\n\n.model-checkbox {\n    position: absolute;\n    top: 10px;\n    left: 59px;\n    cursor: pointer;\n}\n\n.model-icon {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 85px;\n}\n\n.app-tier-model-icon {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 69px\n}\n\n.app-tier-model-name {\n    position: absolute;\n    top: 10px;\n    left: 87px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.app-tier-model-name.disabled {\n    color: #D5D5D5;\n}\n\n.model-name {\n    position: absolute;\n    top: 9px;\n    left: 103px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.model-name.disabled {\n    color: #D5D5D5;\n}\n\n.version-text {\n    margin: 10px 7px 10px auto;\n    display: table;\n    font: normal normal normal 12px/16px Roboto;\n    color: #757575;\n    cursor: pointer;\n    user-select: none;\n}\n\n.version-text.disabled {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.version-icon {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #D5D5D5;\n}\n\n.version-icon.disabled {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #EEEEEE;\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.footer {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: end;\n}\n\n.footer.deploy {\n    position: relative;\n    width: 100%;\n}\n\n.footer.export {\n    margin-top: 102px;\n}\n\n.cancel-button {\n    border-radius: 4px;\n    user-select: none;\n    font-style: normal;\n    font-weight: 500;\n    font-family: "ROBOTO";\n    font-size: 15px;\n    color: #757575;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n\n\n\n.save-button {\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    user-select: none;\n    font-weight: 500;\n    font-size: 15px;\n    color: #ffffff;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n\n.mobile-publish-text,\n.web-publish-text {\n    padding: 5px 12px;\n    margin-bottom: 52px;\n    width: 100%;\n    color: #757575;\n    font-size: 14px;\n    background: #F5F5FA;\n    border-radius: 4px;\n    display: flex;\n    align-items: center;\n}\n\n.mobile-publish-text i,\n.web-publish-text i {\n    font-size: 24px;\n    color: #151233;\n    margin-right: 4px;\n}\n\n.save-button.deploy {\n    padding: 10px 16px;\n}\n\n.button-disable .save-button {\n    color: #757575;\n    cursor: default;\n}\n\n.button-disable .save-button:hover+.button-tooltip,\n.start-screen:hover .button-tooltip,\n.row-container:hover .button-tooltip,\n.publish-info:hover .button-tooltip {\n    visibility: visible;\n    transition: opacity 0.3s ease-out 1s;\n    opacity: 1;\n}\n\n.button-tooltip {\n    visibility: hidden;\n    position: absolute;\n    background: #757575;\n    color: #FFFFFF;\n    font-size: 11px;\n    font-family: \'Roboto\';\n    text-align: center;\n    border-radius: 4px;\n    letter-spacing: 0.2px;\n    padding: 6px 8px 6px 8px;\n    top: 56px;\n    left: 63px;\n    opacity: 0;\n}\n\n.publish-info {\n    color: #757575;\n    font-size: 20px;\n    margin-left: 10px;\n}\n\n.qjson-color {\n    color: #449dd1;\n}\n\n.yaml-color {\n    color: #449dd1;\n}\n.namedcomp-color {\n    color: #212121;\n}\n.app-settings-color {\n    color: #151233;\n}\n\n.js-color {\n    color: #449dd1;\n}\n\n.css-color {\n    color: #151233;\n}\n\n.process-color {\n    color: #007c77;\n}\n\n.bpmn-color {\n    color: #007c77;\n}\n\n.entity-designer-color {\n    color: #e9724c;\n}\n\n.select-environment {\n    width: 100%;\n    font-size: 15px;\n    height: 40px;\n    line-height: 40px;\n    margin-top: 4px\n}\n</style>\n\n<style>\n.selected-environment {\n    background-color: transparent;\n    border-radius: 4px;\n    border: 1px solid #BCBCBC;\n    color: #212121;\n    padding-left: 12px;\n}\n\n.custom-placeholder:empty:before {\n    color: #BCBCBC !important;\n    font-weight: 400;\n}\n\n.custom-select .items .option {\n    font-size: 14px;\n    padding-left: 12px;\n    line-height: 32px;\n}\n\n.custom-select .items .option:hover {\n    background-color: #EEEEEE;\n    color: #212121;\n}\n\n.custom-select .items .option.disabled:hover {\n    background-color: #FFFFFF;\n    color: #212121;\n}\n\n.custom-select.select-environment .items {\n    margin-top: 4px;\n    color: #212121;\n    border-radius: 4px;\n    border: 1px solid #E3E3E3;\n    overflow: hidden;\n    background-color: #FFFFFF;\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\n    position: static !important;\n}\n</style>\n'],sourceRoot:""}]);const a=l},68394:(e,n,t)=>{t.d(n,{Z:()=>a});var o=t(34663),i=t.n(o),s=t(7638),l=t.n(s)()(i());l.push([e.id,"\n.selected-environment {\n    background-color: transparent;\n    border-radius: 4px;\n    border: 1px solid #BCBCBC;\n    color: #212121;\n    padding-left: 12px;\n}\n.custom-placeholder:empty:before {\n    color: #BCBCBC !important;\n    font-weight: 400;\n}\n.custom-select .items .option {\n    font-size: 14px;\n    padding-left: 12px;\n    line-height: 32px;\n}\n.custom-select .items .option:hover {\n    background-color: #EEEEEE;\n    color: #212121;\n}\n.custom-select .items .option.disabled:hover {\n    background-color: #FFFFFF;\n    color: #212121;\n}\n.custom-select.select-environment .items {\n    margin-top: 4px;\n    color: #212121;\n    border-radius: 4px;\n    border: 1px solid #E3E3E3;\n    overflow: hidden;\n    background-color: #FFFFFF;\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\n    position: static !important;\n}\n","",{version:3,sources:["webpack://./src/presentation/vue3/components/dialogs/publish/publishDialog.vue"],names:[],mappings:";AAk3CA;IACI,6BAA6B;IAC7B,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,kBAAkB;AACtB;AAEA;IACI,yBAAyB;IACzB,gBAAgB;AACpB;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;AAEA;IACI,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,yBAAyB;IACzB,0CAA0C;IAC1C,2BAA2B;AAC/B",sourcesContent:['<template>\n    <div class="container">\n        <div>\n            <CheckboxComp :class="[\'modules-selected-checkbox\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']"\n                :minus="mainCheckboxState == false" :check="mainCheckboxState == true"\n                @click="handleModuleCountCheckboxEvent(mainCheckboxState == undefined)" />\n            <div :class="[\'modules-selected-text\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']">\n                <span class="text-number">{{  allChildCheckedModulesCount + anyChildCheckedModulesCount + checkedRootLevelModelsCount }}</span>\n                of <span class="text-number">{{ totalRootLevelCount }}</span> items selected\n            </div>\n        </div>\n\n        <div :class="[\'modules-datatable\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']">\n            <div v-for="item in items">\n                <div v-if="item?.type == \'module\'">\n                    <div class="row-container">\n                        <i v-if="!item.imported" :class="\'mdi mdi-menu\' + (item.collapsed ? \'-right\' : \'-down\') + \' chevron\' + (!item.children || item.children.length == 0 ? \' disabled\': \'\')"\n                            @click="handleCollapse(item)" />\n                        <CheckboxComp class="module-checkbox" :check="item.allChildChecked"\n                            :minus="!item.allChildChecked && item.anyChildChecked" :disabled="item.disabled"\n                            @click="handleItemCheckEvent(item)" />\n                        <i v-if="item.imported" class="app-tier-model-icon mdi mdi-puzzle" />\n                        <span :class="[\'module-name\', item.imported ? ` imported` : (item.disabled ? \' disabled\': \'\')]">{{ item.name }}</span>\n                        <div v-if="item.imported" class=\'version-text\' @click="moduleVersionDialog(item)">\n                            {{ item.version ? item.version : \'No version\' }}\n                            <i :class="[\'mdi mdi-pencil-outline version-icon\']"></i>\n                        </div>\n                    </div>\n                    <div class="row-container" v-show="!item.imported && !item.collapsed" v-for="child in item?.children">\n                        <CheckboxComp class="model-checkbox" :check="child.checked" :disabled="child.disabled"\n                            @click="handleItemCheckEvent(child)" />\n                        <i v-if="child.type != \'module\'" :class="\'model-icon \' + ModelContants.getModelVisualInfo(child.type, undefined).icon" \n                            :style="{ color: ModelContants.getModelVisualInfo(child.type, undefined).color }" />\n                        \n                        <span :class="[\'model-name\', child.disabled ? \' disabled\' : \'\']">{{ child.name }}</span>\n                        <div v-if="!child.usageType || child.usageType == \'appSettings\'" :class="[\'version-text\', child.disabled ? \'disabled\' : \'\']" @click="versionDialog(child)">\n                            {{ child.version ? child.version : \'No version\' }} <i v-if="!child.usageType || child.usageType == \'appSettings\'" :class="[\'mdi mdi-pencil-outline version-icon\', child.disabled ? \'disabled\' : \'\']"></i>\n                        </div>\n                        <span v-if="child.disabled && !child.version" class="button-tooltip" \n                            style="z-index: 1; width: 300px;">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\n                        </span>\n                    </div>\n                </div>\n                <div v-else>\n                    <div class="row-container">\n                        <CheckboxComp class="module-checkbox" :check="item?.checked" :disabled="item.disabled"\n                            @click="handleItemCheckEvent(item)" />\n                        <i v-if="item?.type == \'qjson\'" class="mdi mdi-palette qjson-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'yaml\'" class="mdi mdi-cog-outline yaml-color app-tier-model-icon" />\n                        <i v-if="item?.type == \'js\'"\n                            class="mdi mdi-cog-outline js-color app-tier-model-icon" />\n                        <i v-if="item?.type == \'css\'"\n                            class="mdi mdi-music-accidental-sharp css-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'process\'" class="mdi mdi-auto-fix process-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'bpmn\'" class="mdi mdi-vector-polyline bpmn-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'entityDesigner\'"\n                            class="mdi mdi-database entity-designer-color app-tier-model-icon" />\n                        <i v-else-if="item?.type == \'flow\'" class="mdi mdi-step-forward bpmn-color app-tier-model-icon" />\n                        <i v-else-if="item.type == \'namedComponent\'" class="mdi mdi-cube-outline namedcomp-color app-tier-model-icon"></i>\n                        <i v-else-if="item.type == \'appSettings\'" class="mdi mdi-cog app-settings-color app-tier-model-icon"></i>\n                        <span class="app-tier-model-name">{{ item?.name }}\n                            <span class="start-screen" v-if="startScreen?.ID == item.id">\n                                <i class="mdi mdi-home-outline"></i>\n                                <span class="button-tooltip" style="top: -30px; left: 2px; z-index: 1; width: 80px;">Start\n                                    Screen</span>\n                            </span>\n                        </span>\n\n                        <span v-if="!item.usageType" :class="[\'version-text\', item.disabled ? \'disabled\' : \'\']" @click="versionDialog(item)">\n                            {{ item.version ? item.version : \'No version\' }} <i v-if="!item.usageType" :class="[\'mdi mdi-pencil-outline version-icon\', item.disabled ? \'disabled\' : \'\']"></i>\n                        </span>\n                        <span v-if="item.disabled && !item.version" class="button-tooltip"\n                            style="z-index: 1; width: 300px;">No version available for publishing. <b>Stop Working</b> on this item and choose the <b>Ready to Publish</b> option.\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div v-if="props.screenType == \'Deploy\'" style="margin-bottom: 102px">\n            <div style="display: flex; align-items: center;">\n                <span class="custom-text environment"> Publish To </span>\n                <span class="publish-info">\n                    <i class="mdi mdi-information"></i>\n                    <span class="button-tooltip" style="top: 460px; left: 96px; z-index: 1; width: 231px;">Publish To\n                        options may change depending on the module type you choose.</span>\n                </span>\n            </div>\n\n            <CustomSelect :options="publishTargets" @input="onTargetSelect" :selectedOption="selectedTarget"\n                :default="selectedTarget" :disabledOptions="disabledOptions" selectedClass="selected-environment"\n                placeholder="Select the publish environment of your application" class="select-environment">\n            </CustomSelect>\n        </div>\n\x3c!--         <div v-if="props.screenType == \'Deploy\' && !props.platformSelection.web && props.platformSelection.mobile"\n            class="mobile-publish-text">\n            <i class="mdi mdi-information"></i>\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\n        </div> --\x3e\n        <div :class="[\'footer\', props.screenType == \'Deploy\' ? \'deploy\' : \'export\']">\n            <div :class="[\'cancel-button\', props.screenType == \'Deploy\' ? \'deploy\' : \'\']" @click="close">Cancel</div>\n            <div v-if="props.screenType == \'Export\'" :class="(saveButtonDisable ? \' button-disable\' : \'\')" @click="!saveButtonDisable && save()">\n                <span class="save-button ">DOWNLOAD</span>\n                <span v-if="!isThereVersion" class="button-tooltip" \n                    style="top: -80px; left: 626px; z-index: 1; width: 145px;">There are no items ready to publish. At least one of your items must be ready to publish.</span>\n                <span v-else-if="!isStartScreenOK" class="button-tooltip"\n                    style="top: -46px; left: 640px; z-index: 1; width: 120px;">You need to include your start screen.</span>\n                <span v-else-if="!isAllDependenciesOK" class="button-tooltip" \n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">{{ dependencyErrorStr }}</span>\n            </div>\n            <div v-if="props.screenType == \'Deploy\'" :class="[(saveButtonDisable ? \' button-disable\' : \'\')]" @click="!saveButtonDisable && save()">\n                <span class="save-button deploy">PUBLISH</span>\n                <span v-if="!isStartScreenOK" class="button-tooltip"\n                    style="top: -46px; left: 652px; z-index: 1; width: 120px;">You need to include your start screen.</span>\n                <span v-else-if="!selectedTarget" class="button-tooltip"\n                    style="top: -46px; left: 644px; z-index: 1; width: 123px;">You need to select a publish environment.</span>\n                <span v-else-if="!isThereVersion" class="button-tooltip" \n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">There are no items ready to publish. At least one of your items must be ready to publish.</span>\n                <span v-else-if="!isAllDependenciesOK" class="button-tooltip" \n                    style="top: -95px; left: 644px; z-index: 1; width: 135px;">{{ dependencyErrorStr }}</span>\n            </div>\n\n        </div>\n    </div>\n</template>\n\n\n<script setup lang="ts">\nimport { CryptoHelper } from "@stechquick/algae/lib/helpers/cryptoHelper";\nimport { PlateauHelper } from "@stechquick/algae/lib/helpers/plateau/plateauHelper";\nimport { computed, defineAsyncComponent, onMounted, ref } from "vue";\nimport { IOrganizationCloud } from "../../../../../../../common/clean/domain/useCases/ICloudProvider";\nimport { DeployType, ICreateDeployJobParam, ICreateExportJobParam, IExportItem, IExportJobData, IPlatformSelection, IProcessConfigModelItem } from "../../../../../../../common/qCloudTemp/exporter";\nimport { ModelContants } from "../../../../../../../common/qCloudTemp/modelContants";\nimport { IQJsonAdditionals, UsageType, APP_ITEM_CONTENT_TYPES } from "../../../../../../../common/qCloudTemp/quickCloud";\nimport { container } from "../../../../../domain/core/diContainer";\nimport { IQCloudApi } from "../../../../../domain/infrastructure/IQCloudApi";\nimport { IModel, IModelHistoryInfo, IModule, IModuleVersion } from "../../../../../domain/model/models";\nimport { IDialog } from "../../../../../domain/presentation/IDialog";\nimport { ICreateExportJob } from "../../../../../domain/useCase/ICreateExportJob";\nimport { IDeployJobs } from "../../../../../domain/useCase/IDeployJobs";\nimport { IJobUtils } from "../../../../../domain/useCase/IJobUtils";\nimport { IListMultiModelVersions } from "../../../../../domain/useCase/IListMultiModelVersions";\nimport { IPackJobs } from "../../../../../domain/useCase/IPackJobs";\nimport { IUseCaseExecutor } from "../../../../../domain/useCase/IUseCaseExecutor";\nimport { IViewModel } from "../../../../../domain/viewModel/IViewModel";\nimport { IViewModelManager } from "../../../../../domain/viewModel/IViewModelManager";\nimport CustomSelect from "../../../components/customSelect.vue";\nimport CheckboxComp from "../../checkboxComp.vue";\nimport { IListMultiModuleVersions } from "../../../../../domain/useCase/IListMultiModuleVersions";\n\ninterface ITableData {\n    id: string;\n    parentId?: string;\n    collapsed?: boolean;\n    anyChildChecked?: boolean;\n    allChildChecked?: boolean;\n    checked?: boolean;\n    name: string;\n    type: IModel["modelType"] | IModule["objectType"];\n    version?: string;\n    disabled?: boolean | true;\n    children?: Array<ITableData>;\n    usageType?: UsageType;\n    imported?: boolean;\n}\n\ninterface IDeployScreenAdditionalProps {\n    screenType: "Export" | "Deploy";\n    platformSelection: IPlatformSelection;\n}\n\ninterface IDisabledOptions {\n    index: number\n    cause: string;\n}\n\nconst props = defineProps<IDeployScreenAdditionalProps>();\nconst viewModel = container.resolve<IViewModel>(IViewModel);\nconst viewModelManager = container.resolve<IViewModelManager>(IViewModelManager);\nconst dialog = container.resolve<IDialog>(IDialog);\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst deployJobsUseCase = container.resolve<IDeployJobs>(IDeployJobs);\nconst qcloudApi = container.resolve<IQCloudApi>(IQCloudApi);\nconst packJobsUseCase = container.resolve<IPackJobs>(IPackJobs);\nconst jobUtils = container.resolve<IJobUtils>(IJobUtils);\nconst emit = defineEmits(["close"]);\nconst items = ref<Array<ITableData>>([]);\nconst validations = ref<boolean>(true);\nconst selectedTarget = ref<string>("");\nconst disabledOptions = ref<Array<IDisabledOptions>>();\nconst publishTargets = ref<Array<string>>();\nconst modelHistories = ref<Map<string, Array<IModelHistoryInfo>>>();\nconst importedModuleVersions = ref<Map<string, Array<IModuleVersion>>>();\nconst startScreen = ref<IModel>();\nconst dependencyMap = ref<Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>>();\nconst dependencyErrorStr = ref<string>(\'\');\n\nonMounted(async () => {\n    await Promise.all([\n        executor.executeUseCase<IListMultiModelVersions>(IListMultiModelVersions, { }).then(res => modelHistories.value = res),\n        executor.executeUseCase<IListMultiModuleVersions>(IListMultiModuleVersions, { }).then(res => importedModuleVersions.value = res)\n    ])\n    initDependencies();\n    handleItems();\n    props.screenType == "Deploy" && syncPublishTargets();\n    validations.value = validate();\n})\n\nconst allChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == "module" && e.allChildChecked).length);\nconst anyChildCheckedModulesCount = computed(() => items.value.filter(e => e.type == "module" && !e.allChildChecked && e.anyChildChecked).length);\nconst checkedRootLevelModelsCount = computed(() => items.value.filter(e => e.type != "module" && e.checked).length);\nconst totalRootLevelCount = computed(() => items.value.length);\nconst saveButtonDisable = computed(() => (props.screenType == "Deploy" && props.platformSelection.web && selectedTarget.value == "") || !validations.value || !items.value.some((item) => item.checked || item.anyChildChecked) || (props.screenType == "Export" && !validateStartScreen()) || !validateDependencies());\nconst mainCheckboxState = computed(() => items.value.length == allChildCheckedModulesCount.value ? true \n        : (anyChildCheckedModulesCount.value + checkedRootLevelModelsCount.value > 0  ? false : undefined));\nconst isThereVersion = computed(() => checkMaxVersionOfAllItems());\nconst isAllDependenciesOK = computed(validateDependencies)\nconst isStartScreenOK = computed(validateStartScreen)\n\nfunction validate() {\n    let result = true;\n    const modules = items.value.filter(e => e.type == "module" && e.anyChildChecked);\n    const appLayerItems = items.value.filter(e => e.type == "qjson" && e.checked);\n\n    startScreen.value = (viewModel.studio.items as Array<IModel>).find(item => item.isRootPage);\n    if(!startScreen.value)\n        return false;\n\n    if (props.screenType == "Deploy") {\n        if (modules.length > 0)\n            result = modules.map(e => e.children).filter(e => !e?.find(f => f.type == "entityDesigner" && f.checked)).length <= 0\n\n        let isApplicationWillDeploy = appLayerItems.length > 0;\n        if (isApplicationWillDeploy) {\n            result = appLayerItems\n                .map(e => viewModel.studio.items.find(item => item.ID == e.id) as IModel)\n                .findIndex(e => ((e.additionals as IQJsonAdditionals).isRootPage)) != -1;\n        }\n    }\n\n    return result;\n}\n\nfunction validateDependencies() {\n    const checkMap = new Map<string, boolean>();\n    items.value.forEach(item => {\n        if(item.type == \'module\' && item.children && item.children.length > 0)\n            item.children.forEach(child => checkMap.set(child.id, child.checked == true))\n        else\n            checkMap.set(item.id, item.checked == true)\n    })\n\n    const mustBeCheckedMap = new Map<string, Array<string>>();\n    dependencyMap.value?.forEach((deps, id) => {\n        if(!checkMap.get(id)) \n            return;\n\n        deps.dependedTo.forEach(dependedId => {\n            if(checkMap.get(dependedId))\n                return;\n\n            if(mustBeCheckedMap.has(id)){\n                const vals = mustBeCheckedMap.get(id)!\n                vals.push(dependedId)\n                mustBeCheckedMap.set(id, vals)\n            }else {\n                mustBeCheckedMap.set(id, [dependedId])\n            }\n            \n        });\n    })\n\n    //set deps error text\n    const [firstItemID] = mustBeCheckedMap.keys();\n    if(firstItemID) {\n        const firstItemDeps = mustBeCheckedMap.get(firstItemID);\n        const firstItemDepStr = firstItemDeps ? firstItemDeps.map(findItem).map(e => e?.name).join(\', \') : \'\';\n        dependencyErrorStr.value =`Select ${firstItemDepStr} first. ${findItem(firstItemID)?.name} depends on ${firstItemDepStr}.`\n    }\n\n    return mustBeCheckedMap.size == 0\n}\n\nfunction validateStartScreen() {\n    return (items.value.find((item) => item.id == startScreen.value?.ID))?.checked\n}\n\nfunction findItem (ID: string) {\n    for(const item of items.value){\n        if(item.type != \'module\' && item.id == ID)\n            return item;\n        if(item.type == \'module\' && item.children && item.children.length> 0 ){\n            const f = item.children.find(e => e.id == ID)\n            if(f) return f\n        }\n    }\n}\n\nfunction initDependencies() {\n    const map = new Map<string, { dependedTo: Array<string>, dependedBy: Array<string>}>();\n    const depMap = new Map<string, Array<string>>();\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path) => {\n            if (item.objectType != "model") { return; }\n\n            const isImportedModule = item.parent.objectType == "module" && isModuleImported(item.parent);\n            \n            let version: string | undefined;\n            if(!isImportedModule){\n                const maxVersion = getItemMaxVersion(item)\n                if(!maxVersion)\n                    return depMap.set(item.ID, item.dependentModels ? item.dependentModels.map(e => e.modelId) : Array<string>());\n                version = maxVersion;\n            }\n            else {\n                const moduleVersions = importedModuleVersions.value?.get(item.parent.ID)\n                const moduleVersion = (item.parent as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n\n                const importedModuleModel = moduleVersions?.filter(e => e.version == moduleVersion).flatMap(e => e.relatedModelHistories).find(e => e.modelID == item.ID)\n                version = importedModuleModel?.version\n            }\n\n            const historyItem = modelHistories.value?.get(item.ID)?.find(e => e.version == version);\n\n            depMap.set(item.ID, historyItem?.dependentModels ? historyItem?.dependentModels.map(e => e.modelId) : Array<string>())\n    });\n\n    \n    depMap.forEach((dependedTo, modelId) => {\n        const dependedBy = Array<string>();\n        depMap.forEach((dependencies, depModelId) => {\n            if (dependencies.some(depId => depId == modelId))\n                dependedBy.push(depModelId)\n        })\n        map.set(modelId, {dependedBy, dependedTo});\n    })\n    dependencyMap.value = map;\n}\n\nfunction isModelDepended(item: ITableData) {\n    const deps = dependencyMap.value?.get(item.id)?.dependedBy\n    if(!deps) return false;\n\n    return deps.some(dep => items.value.some(item => {\n        if(item.type == \'module\' && item.anyChildChecked){\n            return item.children?.some(child => child.checked && child.id == dep)\n        }\n        return item.id == dep && item.checked\n    }));\n}\n\nasync function handleItems() {\n    // - modules and module items\n    items.value = viewModel.studio.items\n        .filter((item) => item.objectType == "module" && item.children.length > 0)\n        .map((item) => {\n            const isImportedModule = isModuleImported(item as IModule);\n            const moduleVersion = (item as IModule).relatedApplications.find(app => app.applicationID == viewModel.studio.appId)?.importedVersion\n            const relatedModelHistories = isImportedModule ? importedModuleVersions.value?.get(item.ID)?.find(module => module.version == moduleVersion)?.relatedModelHistories : undefined\n            const tableData: ITableData = {\n                id: item.ID,\n                collapsed: true,\n                name: item.name,\n                type: "module",\n                imported: isImportedModule,\n                version: moduleVersion,\n                children: (item as IModule).children\n                    .filter((child) => child.objectType == "model")\n                    .map(child => child as IModel)\n                    .map(child => {\n                        const childModel: ITableData = {id: child.ID,parentId: item.ID,name: child.name,type: (child as IModel).modelType}\n                        if(!isImportedModule || child.isUnmodifiable){\n                            const maxVersion = getItemMaxVersion(child)                         \n                            return {\n                                ...childModel,\n                                checked: maxVersion ? true : child.isUnmodifiable,\n                                disabled: maxVersion ? false : !child.isUnmodifiable,\n                                version: child.isUnmodifiable ? \'latest\' : maxVersion,\n                            } as ITableData\n                        }\n                        \n                        const importedModulesModel = relatedModelHistories?.find(e => e.modelID == child.ID)\n                        return {...childModel, checked: true,disabled: false, version: importedModulesModel?.version } as ITableData\n                    })\n            }\n            handleParentCheckedStatus(tableData);\n            return tableData;\n        });\n\n    // - App Settings\n    const appSettings = viewModel.studio.items.find(e => e.name == \'App Settings\')!\n    const maxVersion = getItemMaxVersion(appSettings as IModel)\n    appSettings && items.value.push({\n        id: appSettings.ID,\n        name: appSettings.name,\n        checked: true,\n        disabled: false,\n        type: (appSettings as IModel).modelType,\n        version: !maxVersion ? \'latest\' : maxVersion\n    });\n\n    // - application items\n    viewModel.studio.items\n        .filter((item) => item.objectType == "model" && item.modelType != "appSettings" && item.usageType != "appSettings" && item.usageType != "appAssetList")\n        .map(item => item as IModel)\n        .forEach(item => {\n            const maxVersion = getItemMaxVersion(item)\n            items.value.push({\n                    id: item.ID,\n                    name: item.name,\n                    checked: maxVersion ? true : item.isUnmodifiable,\n                    disabled: maxVersion ? false : !item.isUnmodifiable,\n                    type: item.modelType,\n                    version: item.isUnmodifiable ? \'latest\' : maxVersion,\n                });\n        });\n        \n    // - UI Settings\n    const uiSettingsID = CryptoHelper.CreateGuid();\n    const uiSettingsModels = viewModel.studio.items.filter((item) => item.objectType == "model" && item.usageType == "appSettings") as Array<IModel>;\n    const uiSettings: ITableData = {\n        id: uiSettingsID,\n        collapsed: true,\n        name: "UI Settings",\n        type: "module",\n        imported: false,\n        children: uiSettingsModels.map(settings => {\n            const maxVersion = getItemMaxVersion(settings)\n            return {\n                id: settings.ID,\n                parentId: uiSettingsID,\n                name: settings.name,\n                type: settings.modelType,\n                checked: maxVersion != undefined,\n                usageType: settings?.usageType,\n                disabled: !maxVersion,\n                version: maxVersion,\n            }\n        }) as Array<ITableData>,\n    };\n    handleParentCheckedStatus(uiSettings);\n\n    // - Styled Components\n    const uiAssetID = CryptoHelper.CreateGuid();\n    const appAssetList = viewModel.studio.items.filter((item) => item.objectType == "model" && item.usageType == "appAssetList") as Array<IModel>;\n    const uiAssetList: ITableData = {\n        id: uiAssetID,\n        collapsed: true,\n        name: "Styled Components",\n        type: "module",\n        imported: false,\n        anyChildChecked: true,\n        allChildChecked: true,\n        children: appAssetList.map((asset) => ({\n            id: asset.ID,\n            parentId: uiAssetID,\n            name: asset.name,\n            type: asset.modelType,\n            checked: true,\n            usageType: asset?.usageType,\n        })) as Array<ITableData>,\n    };\n    handleParentCheckedStatus(uiAssetList);\n\n    items.value.unshift(uiAssetList);\n    items.value.unshift(uiSettings);\n}\n\nfunction getItemMaxVersion(item: IModel): string | undefined {\n    if (!modelHistories.value?.has(item.ID))\n        return undefined;\n\n    const versions = modelHistories.value.get(item.ID);\n    if (!versions)\n        return undefined;\n\n    const findMaxVersion = (versions: Array<string>) => {\n        const versionNumbers = versions.map(v => {\n            const parts: Array<string> = v.split(".");\n            return parseInt(parts[0]) * 10 + parseInt(parts[1]) * 1;\n        })\n\n        versionNumbers.sort((a, b) => b - a);\n\n        const maxVersion = versionNumbers[0];\n        return `${Math.floor(maxVersion / 10)}.${maxVersion % 10}`;\n    }\n\n    return findMaxVersion(versions.map(e => e.version!));\n\n}\nfunction checkMaxVersionOfAllItems() {\n    let isThereVersion: boolean = false;\n    items.value.forEach(item => {\n        if(item.type == "module") {\n            item.children?.forEach(child => {\n                if(child.version) {\n                    isThereVersion = true;\n                }\n                \n            })\n        }\n        else {\n            if(item.version) {\n                isThereVersion = true;\n            }\n        }\n    })\n    return isThereVersion;\n}\nfunction handleModuleCountCheckboxEvent(value: boolean) {\n    items.value.filter(e => !e.disabled).forEach((item) => {\n        item.checked = value;\n        const allItemsCheckable = item.allChildChecked != undefined && item.children && item.children.length > 0 && !item.children.some(c => c.disabled);\n        if (allItemsCheckable) item.allChildChecked = value;\n        if (item.anyChildChecked != undefined) item.anyChildChecked = value;\n        if (item.children) item.children.filter(c => !c.disabled).forEach((child) => (child.checked = value));\n    });\n\n    validations.value = validate();\n    props.screenType == "Deploy" && syncPublishTargets();\n}\n\nfunction handleCollapse(item: ITableData) {\n    item.collapsed = !item.collapsed;\n}\n\nfunction checkAllDependents(item: ITableData) {\n    if(item.disabled || item.checked) return;\n\n    item.checked = true\n    item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!);\n\n    const deps = dependencyMap.value?.get(item.id)?.dependedTo\n    if(!deps) return;\n\n    deps.forEach(dep => {\n        items.value.forEach(item => {\n            if(item.type == \'module\' && !item.allChildChecked){\n                const willCheckItem = item.children?.find(child => !child.checked && child.id == dep)\n                willCheckItem && checkAllDependents(willCheckItem)\n                handleParentCheckedStatus(item)\n                return;\n            }\n\n            if(!item.checked && item.id == dep) {\n                checkAllDependents(item)\n                item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\n            }\n        })\n    });\n}\n\nfunction handleItemCheckEvent(item: ITableData) {\n    if(item.disabled || isModelDepended(item) || item.name == \'App Settings\')\n        return;\n\n    if(item.type != "module") {\n        if(item.checked){\n            item.checked = false;\n            item.parentId && handleParentCheckedStatus(items.value.find((i) => i.id == item.parentId)!)\n        } else {\n            checkAllDependents(item)\n        }\n    } else {\n        if (item.children && item.children.filter(c => !c.disabled).length > 0) {\n            if (item.anyChildChecked) {\n                item.children.filter(c => !c.disabled).forEach(child => child.checked = false);\n                item.checked = false;\n                handleParentCheckedStatus(item);\n            } else {\n                item.children.forEach(checkAllDependents);\n                item.checked = true;\n            }\n        }\n        else {\n            item.checked = !item.checked;\n            item.allChildChecked = false;\n        }\n    }\n\n    validations.value = validate();\n    props.screenType == "Deploy" && syncPublishTargets();\n}\n\nfunction handleParentCheckedStatus(item: ITableData) {\n    item.disabled = item.children && (item.children.length == 0 || !item.children?.some(child => !child.disabled))\n    item.allChildChecked = item.children && item.children.length > 0 && !item.children.some((child) => !child.checked || child.disabled);\n    item.anyChildChecked = item.children?.some((child) => child.checked && !child.disabled);\n}\n\nfunction syncPublishTargets() {\n    publishTargets.value = []; disabledOptions.value = [];\n\n    const targets = viewModel.user?.selectedOrganization?.actions?.publish?.targets;\n    if (!targets)\n        return;\n\n    const isSelectAnyItem = items.value.find(e => e.anyChildChecked || e.checked);\n    if (!isSelectAnyItem) {\n        publishTargets.value = Object.entries(targets).map(e => cloudTargetMap(e[0])!);\n        const disabledOptionList = Array<IDisabledOptions>();\n        for (let i = 0; i < publishTargets.value.length; i++) {\n            disabledOptionList.push({ index: i, cause: "You need to include items to publish." })\n        }\n        disabledOptions.value = disabledOptionList;\n        return;\n    }\n\n    const checkedPublishTargets = checkAndSetDisabledCauses(targets);\n    const sortedTargets = checkedPublishTargets.sort((e, f) => (!e.cause === !f.cause) ? 0 : e.cause ? 1 : -1);\n\n    const disabledOptionList = Array<IDisabledOptions>();\n    for (let i = 0; i < sortedTargets.length; i++) {\n        const cause = sortedTargets[i].cause;\n        if (cause) disabledOptionList.push({ index: i, cause })\n    }\n    disabledOptions.value = disabledOptionList;\n    publishTargets.value = sortedTargets.map(e => e.optionName);\n\n    selectedTarget.value = !sortedTargets[0].cause ? sortedTargets[0].optionName : "";\n}\n\nfunction checkAndSetDisabledCauses(targets: Record<keyof IOrganizationCloud, boolean>) {\n    const list = Array<{ optionName: string, cause?: string }>();\n\n    Object.keys(targets).forEach(e => {\n        const key = e as keyof IOrganizationCloud;\n        const value = targets[key];\n        const optionName = cloudTargetMap(key)!;\n        if (!value)\n            return list.push({ optionName, cause: "You are not authorized to publish to this target." });\n\n\n        switch (key) {\n            case "azure":\n                const traverseSelectedItems = (status: boolean, items?: Array<ITableData>) => {\n                    if (!items || items.length == 0) { return status; }\n                    for (const item of items) {\n                        if (item.checked || item.anyChildChecked) {\n                            if (item.type == "module") {\n                                status = traverseSelectedItems(status, item.children);\n                            }\n                            if (item.type == "entityDesigner" || item.type == "bpmn" || item.type == "process") {\n                                status = false;\n                                break;\n                            }\n                        }\n\n                    }\n                    return status;\n                }\n\n                const status = traverseSelectedItems(true, items.value);\n                if (!status)\n                    return list.push({ optionName, cause: "Entity and process models cannot be published to this target." });\n                break;\n            case "plateauGCP":\n                const modulesHasNotAnEDModel =  items.value.filter(e => e.name != "UI Settings").find(e => e.type == "module" && e.anyChildChecked && e.children?.some(c => c.checked && (c.type == "bpmn" || c.type == "process")) && !e.children?.some(c => c.type == "entityDesigner" && c.checked))\n                if (modulesHasNotAnEDModel)\n                    return list.push({optionName, cause: `This target not available. Selected module \'${modulesHasNotAnEDModel.name}\' has not any Data Model.`})\n                break;\n        }\n\n        list.push({ optionName });\n    })\n\n    return list;\n}\n\nfunction updateDependencyMap(newVersion: string, item: ITableData) { \n    const deps = dependencyMap.value?.get(item.id);\n    dependencyMap.value?.set(item.id, {\n        dependedBy: deps?.dependedBy || Array<string>(), \n        dependedTo: modelHistories.value?.get(item.id)?.find(e => e.version == newVersion)?.dependentModels?.map(e => e.modelId) || Array<string>()\n    })\n}\n\nfunction versionDialog(item: ITableData) {\n    const clickedNode = { id: item.id, state: { checked: item.checked }, text: item.name, type: item.type, version: item.version };\n    const hasAnyVersion = modelHistories.value?.has(item.id);\n    const options = { clickedNode, cb: (version: string) => { \n        item.version = version;\n        updateDependencyMap(version, item);\n    } } as any;\n\n    if (hasAnyVersion) {\n        options.versions = modelHistories.value?.get(item.id)\n    }\n    dialog.showDialog(\n        defineAsyncComponent(() => import("../../application/modelVersionDialog.vue")),\n        { closable: true, title: "Change Version", width: "1080px", maxHeight: "500px", overflow: "auto" }, options\n    );\n}\n\n\nfunction moduleVersionDialog(item: ITableData) {\n    dialog.showDialog(\n        defineAsyncComponent(() => import("../../application/moduleVersionDialog.vue")),\n        { closable: true, title: "Change Version", width: "1080px", maxHeight: "500px", overflow: "auto" },\n        { module: { ID: item.id }, versions: importedModuleVersions.value?.get(item.id), cb: (moduleVersion: IModuleVersion) => { \n            item.version = moduleVersion.version;\n            item.children?.forEach(child => {\n                const modulesModel = moduleVersion.relatedModelHistories.find(e => e.modelID == child.id)\n                child.version = modulesModel?.version\n                updateDependencyMap(modulesModel?.version!, child);\n            })\n        }}\n    );\n}\n\nfunction close() {\n    emit("close");\n}\n\nasync function save() {\n    executor.execute(\n        async () => {\n            const initAsGroup = async () => {\n                const groupID = CryptoHelper.CreateGuid();\n                await initHistory(groupID);\n                await packJob(groupID);\n                return groupID;\n            }\n\n            const isFlowBackend = viewModel.user?.selectedOrganization?.applications.flow;\n\n            switch (props.screenType) {\n                case "Export":\n                    if(isFlowBackend) {\n                        const deployItems = await createAzureDeployItems();\n                        await packJobsUseCase.createPackJobs([{\n                            appID: viewModel.studio.appId,\n                            exportType: "qui",\n                            selectionData: deployItems\n                        }]);\n                        break;\n                    }\n\n                    const groupID = await initAsGroup();\n                    await createExportJob(groupID);\n                    break;\n                case "Deploy":\n                    switch (cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud) {\n                        case "plateauGCP":\n                            const groupID = await initAsGroup();\n                            await createDeployJob(groupID);\n                            break;\n                        case "azure":\n                            const deployItems = await createAzureDeployItems();\n                            await deployJobsUseCase.createAppDeployJob(deployItems, props.platformSelection);\n                            break;\n                    }\n            }\n            emit("close");\n        },\n        { loading: true });\n}\n\nasync function createAzureDeployItems() {\n    const deployItems: Array<IExportItem> = [];\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\n        if (item.objectType != "model") { return; }\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const traverseSelectedItems = (items?: Array<ITableData>) => {\n        if (!items || items.length == 0) { return; }\n        items.filter(e => e.checked || e.anyChildChecked).forEach(item => {\n            if (item.type == "module") {\n                traverseSelectedItems(item.children);\n                return;\n            }\n\n            const itemMap = itemIdObj[item.id];\n\n            const deployItem: IExportItem = {\n                id: item.id,\n                name: jobUtils.getFileFullname(itemMap.item),\n                path: itemMap.path,\n                type: jobUtils.getItemType(itemMap.item),\n                ver: item.version || "latest",\n                isRootPage: itemMap.item.isRootPage,\n                modulePrefix: itemMap.prefix,\n                ownerType: \'application\',\n                ownerName: viewModel.studio.appName,\n                size: itemMap.item.size,\n                createDate: itemMap.item.createDate,\n            };\n            deployItems.push(deployItem)\n        });\n    };\n\n    traverseSelectedItems(items.value);\n\n    return deployItems;\n}\n\nasync function initHistory(groupID: string) {\n    return qcloudApi.initPublishHistory({\n        appID: viewModel.studio.appId,\n        ID: groupID,\n        isMultiStep: true,\n        type: props.screenType == "Deploy" ? "publish" : "download",\n        cloudProvider: props.screenType == "Deploy" ? cloudTargetMap(selectedTarget.value!, true) as keyof IOrganizationCloud : undefined,\n        platform: props.platformSelection\n    });\n}\n\nasync function packJob(groupID: string) {\n    let exportItemMap = new Map<string, Array<IExportItem>>();\n    const appName = viewModel.studio.appName;\n\n    const itemIdObj: Record<string, { item: IModel, path: string, prefix?: string }> = {};\n    viewModelManager.flatMapItems(viewModel.studio.items, (item, path, prefix) => {\n        if (item.objectType != "model") { return; }\n        itemIdObj[item.ID] = { item, path, prefix };\n        return item;\n    });\n\n    const createExportObject = (tableItem: ITableData) => {\n        const item = itemIdObj[tableItem.id].item;\n        const isAppItem = APP_ITEM_CONTENT_TYPES.some(type => type == item.modelType);\n        const retVal: IExportItem = {\n            id: tableItem.id,\n            ver: tableItem.version!,\n            type: jobUtils.getItemType(item),\n            path: itemIdObj[tableItem.id].path,\n            modulePrefix: itemIdObj[tableItem.id].prefix,\n            name: jobUtils.getFileFullname(item),\n            ownerType: isAppItem ? \'application\' : (item.parent.objectType as "module" | "application"),\n            ownerName: isAppItem ? appName : item.parent.name,\n        };\n        return retVal;\n    }\n\n    const addToExportItem = (key: string, obj: IExportItem) => {\n        key = obj.ownerType == \'module\' ? `mdl-${key}` : key; // for same named module and app\n        let items = exportItemMap.get(key);\n        if(items && items.length > 0){\n            items.push(obj);\n            exportItemMap.set(key, items);\n        } else\n            exportItemMap.set(key, [obj]);\n    }\n\n    items.value.filter(e => e.checked ?? e.anyChildChecked).forEach((asset) => {\n        if (asset.type == \'module\') {\n            asset.children!.filter(e => e.checked).forEach(child => {\n                const obj = createExportObject(child);\n                if (obj.type == "entityDesigner")\n                    obj.entityGenerationDomain = viewModel.user!.selectedOrganization!.actions?.entityGenerationDomain;\n\n                const useSeperateModule = obj.type == \'bpmn\' || obj.type == \'entityDesigner\' || obj.type == \'process\';\n                addToExportItem(useSeperateModule ? asset.name : appName, obj);\n            });\n        } else {\n            const obj = createExportObject(asset);\n            if (asset.type == \'qjson\'){\n                const isRootPage = viewModel.studio.items.find(i => i.objectType == "model" && i.modelType == "qjson" && (i.additionals as IQJsonAdditionals).isRootPage && i.ID == asset.id);\n                obj.isRootPage = isRootPage ? true : undefined;\n            }\n            addToExportItem(appName, obj);\n        }\n    })\n\n    let jobs = Array<ICreateExportJobParam>();\n    exportItemMap.forEach((v, k) => {\n        jobs.push({\n            appID: viewModel.studio.appId,\n            exportType: "qui", //(props.platformSelection.mobile && !props.platformSelection.web) ? "model":  "qui"\n            selectionData: v,\n            cause: props.screenType == \'Export\' ? \'download\': "publish",\n            layer: 0,\n            groupID: groupID,\n            platformSelection: props.platformSelection\n        })\n    })\n    \n    await packJobsUseCase.createPackJobs(jobs);\n}\n\nasync function createExportJob(groupID: string) {\n    await executor.executeUseCase<ICreateExportJob>(ICreateExportJob, {\n        appID: viewModel.studio.appId,\n        exportType: "qui",\n        selectionData: [],\n        layer: 1,\n        groupID: groupID\n    });\n}\n\nasync function createDeployJob(groupID: string) {\n    //1-(n) L1- deployJob(build)\n    let packages = await qcloudApi.getExportJobsByGroupId({ groupID })\n        .then(jobs => jobs.jobs.map(e => {\n            const jobData = e.jobData as IExportJobData;\n            return {\n                ownerName: jobData.items[0].ownerName,\n                jobID: e.jobID,\n                type: jobData.items[0].ownerType,\n                mainDir: getDeployableArchiveRoot(jobData)\n            }\n        }));\n\n    if (!packages || packages.length <= 0)\n        return;\n\n    let buildJobs = Array<ICreateDeployJobParam>();\n    packages.forEach(pack => {\n        buildJobs.push({\n            appID: viewModel.studio.appId,\n            type: "build",\n            package: {\n                type: pack.type as DeployType,\n                name: pack.ownerName!,\n                mainDir: pack.mainDir,\n                zip: `${pack.jobID}.zip`,\n            },\n            layer: 1,\n            groupID: groupID\n        })\n    })\n\n    await deployJobsUseCase.createBuildJobs(buildJobs);\n\n    //2-(1) L2- deployJob(deployment)\n    let jobParam: ICreateDeployJobParam = {\n        appID: viewModel.studio.appId,\n        type: "deployment",\n        deployConfig: {\n            process: {\n                configModelIDs: getProcessConfigList(),\n                enabled: items.value.some(e => e.anyChildChecked && e.children?.some(e => e.checked && e.type == "bpmn"))\n            }\n        },\n        layer: 2,\n        groupID: groupID,\n        platformSelection: props.platformSelection\n    }\n\n    await deployJobsUseCase.startDeploymentJob(jobParam);\n}\n\nfunction getProcessConfigList() {\n    let processConfigList = Array<IProcessConfigModelItem>();\n    items.value.forEach((asset) => {\n        if (asset.type == "module" && asset.anyChildChecked && asset.children) {\n            const usingService = asset.children.find(c => c.type == "entityDesigner");\n            if (!usingService)\n                return;\n\n            const serviceName = PlateauHelper.getServiceNameFromModel(usingService.name);\n            asset.children.forEach(child => {\n                if (child.checked && child.type == "process") {\n                    processConfigList.push({\n                        moduleName: serviceName,\n                        model: {\n                            id: child.id,\n                            name: child.name,\n                            version: child.version!\n                        }\n                    })\n                }\n            })\n        }\n    })\n    return processConfigList;\n}\n\nfunction getDeployableArchiveRoot(jobData: IExportJobData) {\n    if (jobData.items[0].ownerType == "module") {\n        let edModel = jobData.items.find(e => e.type == "entityDesigner");\n        if (!edModel)\n            throw new Error("!!! this module cannot deploy. Because its have not a service");\n        return PlateauHelper.getServiceNameFromModel(edModel.name);\n    }\n    return PlateauHelper.getQuiPackageNameFromAppName(jobData.app.name);\n}\n\nfunction cloudTargetMap(name: string, pureVal: boolean = false) {\n    const map: Record<keyof IOrganizationCloud, string> = { azure: "Public Cloud", plateauGCP: "Plateau Platform Playground" };\n    if (pureVal) {\n        return Object.keys(map).find(e => {\n            if (map[e as keyof IOrganizationCloud] === name) {\n                return true;\n            }\n        })\n    } else {\n        let key = Object.keys(map).includes(name);\n        if (!key)\n            return;\n        return map[name as keyof IOrganizationCloud];\n    }\n}\n\nfunction onTargetSelect(value: string) {\n    selectedTarget.value = value\n}\n\nconst isModuleImported = (item: IModule) => {\n    const hasAVersion = item.relatedApplications.find(e => e.applicationID == viewModel.studio.appId)?.importedVersion;\n    if(item.mainOwner != viewModel.studio.appId && item.relatedApplications.at(0)?.applicationID != viewModel.studio.appId && hasAVersion)\n        return true;\n    return false;\n}\n\n<\/script>\n\n\n<style scoped>\n.container {\n    padding: 32px 20px 20px;\n}\n\n.settings-container {\n    position: relative;\n    top: 0px;\n    left: 0px;\n}\n\n.custom-text {\n    /* position: absolute; */\n    font-family: \'Roboto\';\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 18px;\n    /* left: 24px; */\n    color: #212121;\n}\n\n/* .custom-text.title{\n    top: 92px;\n}\n\n.custom-text.environment{\n    top: 174px;\n} */\n\n.radio-button {\n    position: absolute;\n    top: 60px;\n    left: 20px;\n    cursor: pointer;\n}\n\n.radio-text {\n    position: absolute;\n    top: 59px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n    user-select: none;\n    cursor: pointer;\n}\n\n.existing-app-url {\n    position: absolute;\n    width: 760px;\n    height: 40px;\n    top: 114px;\n    left: 20px;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #bcbcbc;\n    border-radius: 4px;\n    font: normal normal normal 14px/19px Roboto;\n    letter-spacing: 0px;\n    padding: 10px 0px 10px 10px;\n}\n\n.url-error {\n    border: 1px solid red;\n}\n\n.url-disable {\n    opacity: 0.5;\n}\n\n.existing-app-url::placeholder {\n    color: #bcbcbc;\n    user-select: none;\n}\n\n.modules-selected-checkbox {\n    cursor: pointer;\n}\n\n.modules-selected-text {\n    font: normal normal normal 14px/19px Roboto;\n    color: #757575;\n    margin: 0 0 13px 30px;\n    ;\n}\n\n/* .modules-selected-text.deploy {\n    top: 257px;\n} */\n\n.text-number {\n    font: normal normal bold 14px/19px Roboto;\n    color: #212121;\n}\n\n.modules-datatable {\n    width: 760px;\n    height: 288px;\n    border: 1px solid #bcbcbc;\n    overflow-x: hidden;\n    overflow-y: auto;\n    margin-bottom: 20px;\n}\n\n/* .modules-datatable.deploy {\n    top: 286px;\n} */\n\n.modules-datatable::-webkit-scrollbar {\n    width: 4px;\n}\n\n.modules-datatable::-webkit-scrollbar-thumb {\n    background: #bcbcbc 0% 0% no-repeat padding-box;\n    border-radius: 10px;\n}\n\n.modules-datatable::-webkit-scrollbar-thumb:hover {\n    background: #555;\n}\n\n.row-container {\n    width: 100%;\n    height: 36px;\n    position: relative;\n    background: #ffffff 0% 0% no-repeat padding-box;\n    border: 1px solid #e0e0e0;\n}\n\n.chevron {\n    position: absolute;\n    left: 4px;\n    color: #757575;\n    font-size: 24px;\n}\n\n.chevron.disabled {\n    pointer-events: none;\n    color: #D5D5D5;\n}\n\n.module-checkbox {\n    position: absolute;\n    top: 10px;\n    left: 43px;\n    cursor: pointer;\n}\n\n.module-name {\n    position: absolute;\n    top: 9px;\n    left: 69px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.module-name.imported {\n    top: 10px;\n    left: 87px;\n}\n.module-name.disabled {\n    color: #D5D5D5;\n}\n\n.model-checkbox {\n    position: absolute;\n    top: 10px;\n    left: 59px;\n    cursor: pointer;\n}\n\n.model-icon {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 85px;\n}\n\n.app-tier-model-icon {\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 6px;\n    left: 69px\n}\n\n.app-tier-model-name {\n    position: absolute;\n    top: 10px;\n    left: 87px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.app-tier-model-name.disabled {\n    color: #D5D5D5;\n}\n\n.model-name {\n    position: absolute;\n    top: 9px;\n    left: 103px;\n    font: normal normal normal 14px/19px Roboto;\n    color: #212121;\n}\n\n.model-name.disabled {\n    color: #D5D5D5;\n}\n\n.version-text {\n    margin: 10px 7px 10px auto;\n    display: table;\n    font: normal normal normal 12px/16px Roboto;\n    color: #757575;\n    cursor: pointer;\n    user-select: none;\n}\n\n.version-text.disabled {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.version-icon {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #D5D5D5;\n}\n\n.version-icon.disabled {\n    font: normal normal normal 16px/19px Material Design Icons;\n    color: #EEEEEE;\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.footer {\n    position: relative;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: end;\n}\n\n.footer.deploy {\n    position: relative;\n    width: 100%;\n}\n\n.footer.export {\n    margin-top: 102px;\n}\n\n.cancel-button {\n    border-radius: 4px;\n    user-select: none;\n    font-style: normal;\n    font-weight: 500;\n    font-family: "ROBOTO";\n    font-size: 15px;\n    color: #757575;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n\n\n\n.save-button {\n    background: #151233 0% 0% no-repeat padding-box;\n    border-radius: 4px;\n    user-select: none;\n    font-weight: 500;\n    font-size: 15px;\n    color: #ffffff;\n    padding: 10px 16px;\n    cursor: pointer;\n}\n\n.mobile-publish-text,\n.web-publish-text {\n    padding: 5px 12px;\n    margin-bottom: 52px;\n    width: 100%;\n    color: #757575;\n    font-size: 14px;\n    background: #F5F5FA;\n    border-radius: 4px;\n    display: flex;\n    align-items: center;\n}\n\n.mobile-publish-text i,\n.web-publish-text i {\n    font-size: 24px;\n    color: #151233;\n    margin-right: 4px;\n}\n\n.save-button.deploy {\n    padding: 10px 16px;\n}\n\n.button-disable .save-button {\n    color: #757575;\n    cursor: default;\n}\n\n.button-disable .save-button:hover+.button-tooltip,\n.start-screen:hover .button-tooltip,\n.row-container:hover .button-tooltip,\n.publish-info:hover .button-tooltip {\n    visibility: visible;\n    transition: opacity 0.3s ease-out 1s;\n    opacity: 1;\n}\n\n.button-tooltip {\n    visibility: hidden;\n    position: absolute;\n    background: #757575;\n    color: #FFFFFF;\n    font-size: 11px;\n    font-family: \'Roboto\';\n    text-align: center;\n    border-radius: 4px;\n    letter-spacing: 0.2px;\n    padding: 6px 8px 6px 8px;\n    top: 56px;\n    left: 63px;\n    opacity: 0;\n}\n\n.publish-info {\n    color: #757575;\n    font-size: 20px;\n    margin-left: 10px;\n}\n\n.qjson-color {\n    color: #449dd1;\n}\n\n.yaml-color {\n    color: #449dd1;\n}\n.namedcomp-color {\n    color: #212121;\n}\n.app-settings-color {\n    color: #151233;\n}\n\n.js-color {\n    color: #449dd1;\n}\n\n.css-color {\n    color: #151233;\n}\n\n.process-color {\n    color: #007c77;\n}\n\n.bpmn-color {\n    color: #007c77;\n}\n\n.entity-designer-color {\n    color: #e9724c;\n}\n\n.select-environment {\n    width: 100%;\n    font-size: 15px;\n    height: 40px;\n    line-height: 40px;\n    margin-top: 4px\n}\n</style>\n\n<style>\n.selected-environment {\n    background-color: transparent;\n    border-radius: 4px;\n    border: 1px solid #BCBCBC;\n    color: #212121;\n    padding-left: 12px;\n}\n\n.custom-placeholder:empty:before {\n    color: #BCBCBC !important;\n    font-weight: 400;\n}\n\n.custom-select .items .option {\n    font-size: 14px;\n    padding-left: 12px;\n    line-height: 32px;\n}\n\n.custom-select .items .option:hover {\n    background-color: #EEEEEE;\n    color: #212121;\n}\n\n.custom-select .items .option.disabled:hover {\n    background-color: #FFFFFF;\n    color: #212121;\n}\n\n.custom-select.select-environment .items {\n    margin-top: 4px;\n    color: #212121;\n    border-radius: 4px;\n    border: 1px solid #E3E3E3;\n    overflow: hidden;\n    background-color: #FFFFFF;\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.2);\n    position: static !important;\n}\n</style>\n'],sourceRoot:""}]);const a=l},30647:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.CryptoHelper=void 0;var t=function(){function e(){}return e.GetRandomWord=function(e,n){return Math.random().toString(e).substring(2,n+2)},e.CreateGuid=function(){var n=this;return[8,4,4,4,6].map((function(e){return n.GetRandomWord(36,e)})).join("-")+(++e.guidCounter%215e7).toString(36)},e.guidCounter=0,e}();n.CryptoHelper=t},43147:(e,n)=>{n.b=void 0;var t=function(){function e(){}return e.purify=function(e){return e.replace(/[^a-zA-Z0-9]/g,"").toLowerCase()},e.getPlateauEnvironmentName=function(n,t){if(!n||!t)throw new Error("Environment name prefix or application name not found!!!");return""+(n=(n.endsWith("-")?n:n+"-").toLowerCase())+e.purify(t)},e.getQuiPackageNameFromAppName=function(n){return e.purify(n)+"-qui"},e.getApplicationUINameFromQuiPkg=function(n){return e.purify(n.replace("-qui","ui"))},e.getApplicationHostNamePrefix=function(n){return e.purify(n)+"ui"},e.getServiceNameFromModel=function(n){return e.purify(n.replace(".dm",""))},e}();n.b=t},66059:(e,n,t)=>{let o;t.d(n,{T:()=>i,o:()=>d});const i=o={quick:{modelKeys:{self:"qjson"}},flow:{modelKeys:{design:"flow-design",runtime:"flow-runtime"}},flowEntity:{modelKeys:{single:"flow-entity"}}},s={color:"#449DD1",icon:"mdi mdi-cog-outline"},l={color:"#212121",icon:"mdi mdi-image-outline "},a={qjson:e=>e&&"quickComponent"==e.qjsonType?{color:"#449DD1",icon:"mdi mdi-shape-outline"}:{color:"#449DD1",icon:"mdi mdi-palette"},css:{color:"#151233",icon:"mdi mdi-music-accidental-sharp"},js:s,ts:s,yaml:s,entityDesigner:{color:"#E9724C",icon:"mdi mdi-database"},bpmn:{color:"#007C77",icon:"mdi mdi-vector-polyline"},process:{color:"#007C77",icon:"mdi mdi-auto-fix"},flow:{color:"#007C77",icon:"mdi mdi-step-forward"},flowEntity:{color:"blue",icon:"mdi mdi-step-forward"},namedComponent:{color:"#212121",icon:"mdi mdi-cube-outline"},step:new Error("unimplemented for namedComponent"),jpeg:l,jpg:l,png:l,svg:l,gif:l,woff:{color:"#007C77",icon:"mdi-format-font,"},woff2:{color:"#007C77",icon:"mdi-format-font,"},ttf:{color:"#007C77",icon:"mdi-format-font,"},lottie:l,appSettings:new Error("unimplemented for appSettings"),json:new Error("unimplemented for json")};class d{static getModelVisualInfo(e,n){const t=a[e];if(t instanceof Error)throw t;return"function"==typeof t?t(n):t}}},55398:(e,n,t)=>{t.d(n,{P1:()=>i,P4:()=>o,X$:()=>s});const o=["png","jpg","jpeg","svg","gif"],i=["qjson","css","png","jpg","jpeg","svg","gif","lottie","json","woff","woff2","ttf"],s={alert:"Alert Component",pipeline:"Pipeline",loading:"Loading Component",settings:"Settings File",localProxy:"Local Proxy File",contSvc:"Container Services File",css:"Style File",compList:"Component List",globalLocalization:"Global Localization",assetList:"Asset List"}},89139:(e,n,t)=>{t.d(n,{i:()=>o});const o=Symbol.for("ICreateExportJob")},31705:(e,n,t)=>{t.d(n,{F:()=>o});const o=Symbol.for("IDeployJobs")},81616:(e,n,t)=>{t.d(n,{y:()=>o});const o=Symbol.for("IJobUtils")},62376:(e,n,t)=>{t.d(n,{q:()=>o});const o=Symbol.for("IListMultiModelVersions")},17379:(e,n,t)=>{t.d(n,{y:()=>o});const o=Symbol.for("IListMultiModuleVersions")},26580:(e,n,t)=>{t.d(n,{k:()=>o});const o=Symbol.for("IPackJobs")},70443:(e,n,t)=>{t.r(n),t.d(n,{default:()=>Ve});var o=t(71093),i=t(66190),s=t(73843),l=t(46233),a=t(30647),d=t(43147),r=t(66059),p=t(55398),c=t(5627),m=t(28246),u=t(91056),h=t(89139),b=t(31705),f=t(81616),v=t(62376),y=t(26580),A=t(83487),I=t(88613),g=t(54848),C=t(74849),x=t(74137),k=t(17379);const D=e=>((0,o.dD)("data-v-71db724d"),e=e(),(0,o.Cn)(),e),M={class:"container"},w={class:"text-number"},T={class:"text-number"},B={key:0},S={class:"row-container"},E=["onClick"],j={key:1,class:"app-tier-model-icon mdi mdi-puzzle"},V=["onClick"],P=D((()=>(0,o._)("i",{class:(0,i.normalizeClass)(["mdi mdi-pencil-outline version-icon"])},null,-1))),z={class:"row-container"},U=["onClick"],O={key:2,class:"button-tooltip",style:{"z-index":"1",width:"300px"}},N=D((()=>(0,o._)("b",null,"Stop Working",-1))),J=D((()=>(0,o._)("b",null,"Ready to Publish",-1))),F={key:1},H={class:"row-container"},R={key:0,class:"mdi mdi-palette qjson-color app-tier-model-icon"},L={key:1,class:"mdi mdi-cog-outline yaml-color app-tier-model-icon"},q={key:2,class:"mdi mdi-cog-outline js-color app-tier-model-icon"},G={key:3,class:"mdi mdi-music-accidental-sharp css-color app-tier-model-icon"},_={key:4,class:"mdi mdi-auto-fix process-color app-tier-model-icon"},W={key:5,class:"mdi mdi-vector-polyline bpmn-color app-tier-model-icon"},Y={key:6,class:"mdi mdi-database entity-designer-color app-tier-model-icon"},Q={key:7,class:"mdi mdi-step-forward bpmn-color app-tier-model-icon"},Z={key:8,class:"mdi mdi-cube-outline namedcomp-color app-tier-model-icon"},$={key:9,class:"mdi mdi-cog app-settings-color app-tier-model-icon"},K={class:"app-tier-model-name"},X={key:0,class:"start-screen"},ee=[D((()=>(0,o._)("i",{class:"mdi mdi-home-outline"},null,-1))),D((()=>(0,o._)("span",{class:"button-tooltip",style:{top:"-30px",left:"2px","z-index":"1",width:"80px"}},"Start Screen",-1)))],ne=["onClick"],te={key:11,class:"button-tooltip",style:{"z-index":"1",width:"300px"}},oe=D((()=>(0,o._)("b",null,"Stop Working",-1))),ie=D((()=>(0,o._)("b",null,"Ready to Publish",-1))),se={key:0,style:{"margin-bottom":"102px"}},le=(0,o.uE)('<div style="display:flex;align-items:center;" data-v-71db724d><span class="custom-text environment" data-v-71db724d> Publish To </span><span class="publish-info" data-v-71db724d><i class="mdi mdi-information" data-v-71db724d></i><span class="button-tooltip" style="top:460px;left:96px;z-index:1;width:231px;" data-v-71db724d>Publish To options may change depending on the module type you choose.</span></span></div>',1),ae=D((()=>(0,o._)("span",{class:"save-button"},"DOWNLOAD",-1))),de={key:0,class:"button-tooltip",style:{top:"-80px",left:"626px","z-index":"1",width:"145px"}},re={key:1,class:"button-tooltip",style:{top:"-46px",left:"640px","z-index":"1",width:"120px"}},pe={key:2,class:"button-tooltip",style:{top:"-95px",left:"644px","z-index":"1",width:"135px"}},ce=D((()=>(0,o._)("span",{class:"save-button deploy"},"PUBLISH",-1))),me={key:0,class:"button-tooltip",style:{top:"-46px",left:"652px","z-index":"1",width:"120px"}},ue={key:1,class:"button-tooltip",style:{top:"-46px",left:"644px","z-index":"1",width:"123px"}},he={key:2,class:"button-tooltip",style:{top:"-95px",left:"644px","z-index":"1",width:"135px"}},be={key:3,class:"button-tooltip",style:{top:"-95px",left:"644px","z-index":"1",width:"135px"}},fe=(0,o.aZ)({__name:"publishDialog",props:{screenType:null,platformSelection:null},emits:["close"],setup(e,{emit:n}){const D=e,fe=c.nC.resolve(I.J),ve=c.nC.resolve(g.B),ye=c.nC.resolve(u.u),Ae=c.nC.resolve(A.y),Ie=c.nC.resolve(b.F),ge=c.nC.resolve(m.B),Ce=c.nC.resolve(y.k),xe=c.nC.resolve(f.y),ke=(0,s.iH)([]),De=(0,s.iH)(!0),Me=(0,s.iH)(""),we=(0,s.iH)(),Te=(0,s.iH)(),Be=(0,s.iH)(),Se=(0,s.iH)(),Ee=(0,s.iH)(),je=(0,s.iH)(),Ve=(0,s.iH)("");(0,o.bv)((async()=>{await Promise.all([Ae.executeUseCase(v.q,{}).then((e=>Be.value=e)),Ae.executeUseCase(k.y,{}).then((e=>Se.value=e))]),function(){const e=new Map,n=new Map;ve.flatMapItems(fe.studio.items,((e,t)=>{var o,i,s,l;if("model"!=e.objectType)return;let a;if("module"==e.parent.objectType&&dn(e.parent)){const n=null===(o=Se.value)||void 0===o?void 0:o.get(e.parent.ID),t=null===(i=e.parent.relatedApplications.find((e=>e.applicationID==fe.studio.appId)))||void 0===i?void 0:i.importedVersion,s=null==n?void 0:n.filter((e=>e.version==t)).flatMap((e=>e.relatedModelHistories)).find((n=>n.modelID==e.ID));a=null==s?void 0:s.version}else{const t=We(e);if(!t)return n.set(e.ID,e.dependentModels?e.dependentModels.map((e=>e.modelId)):Array());a=t}const d=null===(l=null===(s=Be.value)||void 0===s?void 0:s.get(e.ID))||void 0===l?void 0:l.find((e=>e.version==a));n.set(e.ID,(null==d?void 0:d.dependentModels)?null==d?void 0:d.dependentModels.map((e=>e.modelId)):Array())})),n.forEach(((t,o)=>{const i=Array();n.forEach(((e,n)=>{e.some((e=>e==o))&&i.push(n)})),e.set(o,{dependedBy:i,dependedTo:t})})),je.value=e}(),async function(){ke.value=fe.studio.items.filter((e=>"module"==e.objectType&&e.children.length>0)).map((e=>{var n,t,o,i;const s=dn(e),l=null===(n=e.relatedApplications.find((e=>e.applicationID==fe.studio.appId)))||void 0===n?void 0:n.importedVersion,a=s?null===(i=null===(o=null===(t=Se.value)||void 0===t?void 0:t.get(e.ID))||void 0===o?void 0:o.find((e=>e.version==l)))||void 0===i?void 0:i.relatedModelHistories:void 0,d={id:e.ID,collapsed:!0,name:e.name,type:"module",imported:s,version:l,children:e.children.filter((e=>"model"==e.objectType)).map((e=>e)).map((n=>{const t={id:n.ID,parentId:e.ID,name:n.name,type:n.modelType};if(!s||n.isUnmodifiable){const e=We(n);return{...t,checked:!!e||n.isUnmodifiable,disabled:!e&&!n.isUnmodifiable,version:n.isUnmodifiable?"latest":e}}const o=null==a?void 0:a.find((e=>e.modelID==n.ID));return{...t,checked:!0,disabled:!1,version:null==o?void 0:o.version}}))};return Ze(d),d}));const e=fe.studio.items.find((e=>"App Settings"==e.name)),n=We(e);e&&ke.value.push({id:e.ID,name:e.name,checked:!0,disabled:!1,type:e.modelType,version:n||"latest"}),fe.studio.items.filter((e=>"model"==e.objectType&&"appSettings"!=e.modelType&&"appSettings"!=e.usageType&&"appAssetList"!=e.usageType)).map((e=>e)).forEach((e=>{const n=We(e);ke.value.push({id:e.ID,name:e.name,checked:!!n||e.isUnmodifiable,disabled:!n&&!e.isUnmodifiable,type:e.modelType,version:e.isUnmodifiable?"latest":n})}));const t=a.CryptoHelper.CreateGuid(),o=fe.studio.items.filter((e=>"model"==e.objectType&&"appSettings"==e.usageType)),i={id:t,collapsed:!0,name:"UI Settings",type:"module",imported:!1,children:o.map((e=>{const n=We(e);return{id:e.ID,parentId:t,name:e.name,type:e.modelType,checked:null!=n,usageType:null==e?void 0:e.usageType,disabled:!n,version:n}}))};Ze(i);const s=a.CryptoHelper.CreateGuid(),l=fe.studio.items.filter((e=>"model"==e.objectType&&"appAssetList"==e.usageType)),d={id:s,collapsed:!0,name:"Styled Components",type:"module",imported:!1,anyChildChecked:!0,allChildChecked:!0,children:l.map((e=>({id:e.ID,parentId:s,name:e.name,type:e.modelType,checked:!0,usageType:null==e?void 0:e.usageType})))};Ze(d),ke.value.unshift(d),ke.value.unshift(i)}(),"Deploy"==D.screenType&&$e(),De.value=Le()}));const Pe=(0,o.Fl)((()=>ke.value.filter((e=>"module"==e.type&&e.allChildChecked)).length)),ze=(0,o.Fl)((()=>ke.value.filter((e=>"module"==e.type&&!e.allChildChecked&&e.anyChildChecked)).length)),Ue=(0,o.Fl)((()=>ke.value.filter((e=>"module"!=e.type&&e.checked)).length)),Oe=(0,o.Fl)((()=>ke.value.length)),Ne=(0,o.Fl)((()=>"Deploy"==D.screenType&&D.platformSelection.web&&""==Me.value||!De.value||!ke.value.some((e=>e.checked||e.anyChildChecked))||"Export"==D.screenType&&!Ge()||!qe())),Je=(0,o.Fl)((()=>ke.value.length==Pe.value||!(ze.value+Ue.value>0)&&void 0)),Fe=(0,o.Fl)((()=>function(){let e=!1;return ke.value.forEach((n=>{var t;"module"==n.type?null===(t=n.children)||void 0===t||t.forEach((n=>{n.version&&(e=!0)})):n.version&&(e=!0)})),e}())),He=(0,o.Fl)(qe),Re=(0,o.Fl)(Ge);function Le(){let e=!0;const n=ke.value.filter((e=>"module"==e.type&&e.anyChildChecked)),t=ke.value.filter((e=>"qjson"==e.type&&e.checked));return Ee.value=fe.studio.items.find((e=>e.isRootPage)),!!Ee.value&&("Deploy"==D.screenType&&(n.length>0&&(e=n.map((e=>e.children)).filter((e=>!(null==e?void 0:e.find((e=>"entityDesigner"==e.type&&e.checked))))).length<=0),t.length>0&&(e=-1!=t.map((e=>fe.studio.items.find((n=>n.ID==e.id)))).findIndex((e=>e.additionals.isRootPage)))),e)}function qe(){var e,n;const t=new Map;ke.value.forEach((e=>{"module"==e.type&&e.children&&e.children.length>0?e.children.forEach((e=>t.set(e.id,1==e.checked))):t.set(e.id,1==e.checked)}));const o=new Map;null===(e=je.value)||void 0===e||e.forEach(((e,n)=>{t.get(n)&&e.dependedTo.forEach((e=>{if(!t.get(e))if(o.has(n)){const t=o.get(n);t.push(e),o.set(n,t)}else o.set(n,[e])}))}));const[i]=o.keys();if(i){const e=o.get(i),t=e?e.map(_e).map((e=>null==e?void 0:e.name)).join(", "):"";Ve.value=`Select ${t} first. ${null===(n=_e(i))||void 0===n?void 0:n.name} depends on ${t}.`}return 0==o.size}function Ge(){var e;return null===(e=ke.value.find((e=>{var n;return e.id==(null===(n=Ee.value)||void 0===n?void 0:n.ID)})))||void 0===e?void 0:e.checked}function _e(e){for(const n of ke.value){if("module"!=n.type&&n.id==e)return n;if("module"==n.type&&n.children&&n.children.length>0){const t=n.children.find((n=>n.id==e));if(t)return t}}}function We(e){var n;if(!(null===(n=Be.value)||void 0===n?void 0:n.has(e.ID)))return;const t=Be.value.get(e.ID);return t?(e=>{const n=e.map((e=>{const n=e.split(".");return 10*parseInt(n[0])+1*parseInt(n[1])}));n.sort(((e,n)=>n-e));const t=n[0];return`${Math.floor(t/10)}.${t%10}`})(t.map((e=>e.version))):void 0}function Ye(e){var n,t;if(e.disabled||e.checked)return;e.checked=!0,e.parentId&&Ze(ke.value.find((n=>n.id==e.parentId)));const o=null===(t=null===(n=je.value)||void 0===n?void 0:n.get(e.id))||void 0===t?void 0:t.dependedTo;o&&o.forEach((e=>{ke.value.forEach((n=>{var t;if("module"==n.type&&!n.allChildChecked){const o=null===(t=n.children)||void 0===t?void 0:t.find((n=>!n.checked&&n.id==e));return o&&Ye(o),void Ze(n)}n.checked||n.id!=e||(Ye(n),n.parentId&&Ze(ke.value.find((e=>e.id==n.parentId))))}))}))}function Qe(e){e.disabled||function(e){var n,t;const o=null===(t=null===(n=je.value)||void 0===n?void 0:n.get(e.id))||void 0===t?void 0:t.dependedBy;return!!o&&o.some((e=>ke.value.some((n=>{var t;return"module"==n.type&&n.anyChildChecked?null===(t=n.children)||void 0===t?void 0:t.some((n=>n.checked&&n.id==e)):n.id==e&&n.checked}))))}(e)||"App Settings"==e.name||("module"!=e.type?e.checked?(e.checked=!1,e.parentId&&Ze(ke.value.find((n=>n.id==e.parentId)))):Ye(e):e.children&&e.children.filter((e=>!e.disabled)).length>0?e.anyChildChecked?(e.children.filter((e=>!e.disabled)).forEach((e=>e.checked=!1)),e.checked=!1,Ze(e)):(e.children.forEach(Ye),e.checked=!0):(e.checked=!e.checked,e.allChildChecked=!1),De.value=Le(),"Deploy"==D.screenType&&$e())}function Ze(e){var n,t;e.disabled=e.children&&(0==e.children.length||!(null===(n=e.children)||void 0===n?void 0:n.some((e=>!e.disabled)))),e.allChildChecked=e.children&&e.children.length>0&&!e.children.some((e=>!e.checked||e.disabled)),e.anyChildChecked=null===(t=e.children)||void 0===t?void 0:t.some((e=>e.checked&&!e.disabled))}function $e(){var e,n,t,o;Te.value=[],we.value=[];const i=null===(o=null===(t=null===(n=null===(e=fe.user)||void 0===e?void 0:e.selectedOrganization)||void 0===n?void 0:n.actions)||void 0===t?void 0:t.publish)||void 0===o?void 0:o.targets;if(!i)return;if(!ke.value.find((e=>e.anyChildChecked||e.checked))){Te.value=Object.entries(i).map((e=>ln(e[0])));const e=Array();for(let n=0;n<Te.value.length;n++)e.push({index:n,cause:"You need to include items to publish."});return void(we.value=e)}const s=function(e){const n=Array();return Object.keys(e).forEach((t=>{const o=t,i=e[o],s=ln(o);if(!i)return n.push({optionName:s,cause:"You are not authorized to publish to this target."});switch(o){case"azure":const e=(n,t)=>{if(!t||0==t.length)return n;for(const o of t)if((o.checked||o.anyChildChecked)&&("module"==o.type&&(n=e(n,o.children)),"entityDesigner"==o.type||"bpmn"==o.type||"process"==o.type)){n=!1;break}return n};if(!e(!0,ke.value))return n.push({optionName:s,cause:"Entity and process models cannot be published to this target."});break;case"plateauGCP":const t=ke.value.filter((e=>"UI Settings"!=e.name)).find((e=>{var n,t;return"module"==e.type&&e.anyChildChecked&&(null===(n=e.children)||void 0===n?void 0:n.some((e=>e.checked&&("bpmn"==e.type||"process"==e.type))))&&!(null===(t=e.children)||void 0===t?void 0:t.some((e=>"entityDesigner"==e.type&&e.checked)))}));if(t)return n.push({optionName:s,cause:`This target not available. Selected module '${t.name}' has not any Data Model.`})}n.push({optionName:s})})),n}(i),l=s.sort(((e,n)=>!e.cause==!n.cause?0:e.cause?1:-1)),a=Array();for(let e=0;e<l.length;e++){const n=l[e].cause;n&&a.push({index:e,cause:n})}we.value=a,Te.value=l.map((e=>e.optionName)),Me.value=l[0].cause?"":l[0].optionName}function Ke(e,n){var t,o,i,s,l,a;const d=null===(t=je.value)||void 0===t?void 0:t.get(n.id);null===(o=je.value)||void 0===o||o.set(n.id,{dependedBy:(null==d?void 0:d.dependedBy)||Array(),dependedTo:(null===(a=null===(l=null===(s=null===(i=Be.value)||void 0===i?void 0:i.get(n.id))||void 0===s?void 0:s.find((n=>n.version==e)))||void 0===l?void 0:l.dependentModels)||void 0===a?void 0:a.map((e=>e.modelId)))||Array()})}function Xe(e){var n,i;const s={clickedNode:{id:e.id,state:{checked:e.checked},text:e.name,type:e.type,version:e.version},cb:n=>{e.version=n,Ke(n,e)}};(null===(n=Be.value)||void 0===n?void 0:n.has(e.id))&&(s.versions=null===(i=Be.value)||void 0===i?void 0:i.get(e.id)),ye.showDialog((0,o.RC)((()=>t.e(245).then(t.bind(t,60801)))),{closable:!0,title:"Change Version",width:"1080px",maxHeight:"500px",overflow:"auto"},s)}function en(){n("close")}async function nn(){Ae.execute((async()=>{var e,t;const o=async()=>{const e=a.CryptoHelper.CreateGuid();return await async function(e){return ge.initPublishHistory({appID:fe.studio.appId,ID:e,isMultiStep:!0,type:"Deploy"==D.screenType?"publish":"download",cloudProvider:"Deploy"==D.screenType?ln(Me.value,!0):void 0,platform:D.platformSelection})}(e),await async function(e){let n=new Map;const t=fe.studio.appName,o={};ve.flatMapItems(fe.studio.items,((e,n,t)=>{if("model"==e.objectType)return o[e.ID]={item:e,path:n,prefix:t},e}));const i=e=>{const n=o[e.id].item,i=p.P1.some((e=>e==n.modelType));return{id:e.id,ver:e.version,type:xe.getItemType(n),path:o[e.id].path,modulePrefix:o[e.id].prefix,name:xe.getFileFullname(n),ownerType:i?"application":n.parent.objectType,ownerName:i?t:n.parent.name}},s=(e,t)=>{e="module"==t.ownerType?`mdl-${e}`:e;let o=n.get(e);o&&o.length>0?(o.push(t),n.set(e,o)):n.set(e,[t])};ke.value.filter((e=>{var n;return null!==(n=e.checked)&&void 0!==n?n:e.anyChildChecked})).forEach((e=>{if("module"==e.type)e.children.filter((e=>e.checked)).forEach((n=>{var o;const l=i(n);"entityDesigner"==l.type&&(l.entityGenerationDomain=null===(o=fe.user.selectedOrganization.actions)||void 0===o?void 0:o.entityGenerationDomain);const a="bpmn"==l.type||"entityDesigner"==l.type||"process"==l.type;s(a?e.name:t,l)}));else{const n=i(e);if("qjson"==e.type){const t=fe.studio.items.find((n=>"model"==n.objectType&&"qjson"==n.modelType&&n.additionals.isRootPage&&n.ID==e.id));n.isRootPage=!!t||void 0}s(t,n)}}));let l=Array();n.forEach(((n,t)=>{l.push({appID:fe.studio.appId,exportType:"qui",selectionData:n,cause:"Export"==D.screenType?"download":"publish",layer:0,groupID:e,platformSelection:D.platformSelection})})),await Ce.createPackJobs(l)}(e),e},i=null===(t=null===(e=fe.user)||void 0===e?void 0:e.selectedOrganization)||void 0===t?void 0:t.applications.flow;switch(D.screenType){case"Export":if(i){const e=await tn();await Ce.createPackJobs([{appID:fe.studio.appId,exportType:"qui",selectionData:e}]);break}const e=await o();await async function(e){await Ae.executeUseCase(h.i,{appID:fe.studio.appId,exportType:"qui",selectionData:[],layer:1,groupID:e})}(e);break;case"Deploy":switch(ln(Me.value,!0)){case"plateauGCP":const e=await o();await async function(e){let n=await ge.getExportJobsByGroupId({groupID:e}).then((e=>e.jobs.map((e=>{const n=e.jobData;return{ownerName:n.items[0].ownerName,jobID:e.jobID,type:n.items[0].ownerType,mainDir:sn(n)}}))));if(!n||n.length<=0)return;let t=Array();n.forEach((n=>{t.push({appID:fe.studio.appId,type:"build",package:{type:n.type,name:n.ownerName,mainDir:n.mainDir,zip:`${n.jobID}.zip`},layer:1,groupID:e})})),await Ie.createBuildJobs(t);let o={appID:fe.studio.appId,type:"deployment",deployConfig:{process:{configModelIDs:on(),enabled:ke.value.some((e=>{var n;return e.anyChildChecked&&(null===(n=e.children)||void 0===n?void 0:n.some((e=>e.checked&&"bpmn"==e.type)))}))}},layer:2,groupID:e,platformSelection:D.platformSelection};await Ie.startDeploymentJob(o)}(e);break;case"azure":const n=await tn();await Ie.createAppDeployJob(n,D.platformSelection)}}n("close")}),{loading:!0})}async function tn(){const e=[],n={};ve.flatMapItems(fe.studio.items,((e,t,o)=>{if("model"==e.objectType)return n[e.ID]={item:e,path:t,prefix:o},e}));const t=o=>{o&&0!=o.length&&o.filter((e=>e.checked||e.anyChildChecked)).forEach((o=>{if("module"==o.type)return void t(o.children);const i=n[o.id],s={id:o.id,name:xe.getFileFullname(i.item),path:i.path,type:xe.getItemType(i.item),ver:o.version||"latest",isRootPage:i.item.isRootPage,modulePrefix:i.prefix,ownerType:"application",ownerName:fe.studio.appName,size:i.item.size,createDate:i.item.createDate};e.push(s)}))};return t(ke.value),e}function on(){let e=Array();return ke.value.forEach((n=>{if("module"==n.type&&n.anyChildChecked&&n.children){const t=n.children.find((e=>"entityDesigner"==e.type));if(!t)return;const o=d.b.getServiceNameFromModel(t.name);n.children.forEach((n=>{n.checked&&"process"==n.type&&e.push({moduleName:o,model:{id:n.id,name:n.name,version:n.version}})}))}})),e}function sn(e){if("module"==e.items[0].ownerType){let n=e.items.find((e=>"entityDesigner"==e.type));if(!n)throw new Error("!!! this module cannot deploy. Because its have not a service");return d.b.getServiceNameFromModel(n.name)}return d.b.getQuiPackageNameFromAppName(e.app.name)}function ln(e,n=!1){const t={azure:"Public Cloud",plateauGCP:"Plateau Platform Playground"};return n?Object.keys(t).find((n=>{if(t[n]===e)return!0})):Object.keys(t).includes(e)?t[e]:void 0}function an(e){Me.value=e}const dn=e=>{var n,t;const o=null===(n=e.relatedApplications.find((e=>e.applicationID==fe.studio.appId)))||void 0===n?void 0:n.importedVersion;return!(e.mainOwner==fe.studio.appId||(null===(t=e.relatedApplications.at(0))||void 0===t?void 0:t.applicationID)==fe.studio.appId||!o)};return(e,n)=>((0,o.wg)(),(0,o.iD)("div",M,[(0,o._)("div",null,[(0,o.Wm)(x.Z,{class:(0,i.normalizeClass)(["modules-selected-checkbox","Deploy"==D.screenType?"deploy":""]),minus:0==(0,s.SU)(Je),check:1==(0,s.SU)(Je),onClick:n[0]||(n[0]=e=>{return n=null==(0,s.SU)(Je),ke.value.filter((e=>!e.disabled)).forEach((e=>{e.checked=n,null!=e.allChildChecked&&e.children&&e.children.length>0&&!e.children.some((e=>e.disabled))&&(e.allChildChecked=n),null!=e.anyChildChecked&&(e.anyChildChecked=n),e.children&&e.children.filter((e=>!e.disabled)).forEach((e=>e.checked=n))})),De.value=Le(),void("Deploy"==D.screenType&&$e());var n})},null,8,["class","minus","check"]),(0,o._)("div",{class:(0,i.normalizeClass)(["modules-selected-text","Deploy"==D.screenType?"deploy":""])},[(0,o._)("span",w,(0,i.toDisplayString)((0,s.SU)(Pe)+(0,s.SU)(ze)+(0,s.SU)(Ue)),1),(0,o.Uk)(" of "),(0,o._)("span",T,(0,i.toDisplayString)((0,s.SU)(Oe)),1),(0,o.Uk)(" items selected ")],2)]),(0,o._)("div",{class:(0,i.normalizeClass)(["modules-datatable","Deploy"==D.screenType?"deploy":""])},[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(ke.value,(e=>{var n;return(0,o.wg)(),(0,o.iD)("div",null,["module"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("div",B,[(0,o._)("div",S,[e.imported?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("i",{key:0,class:(0,i.normalizeClass)("mdi mdi-menu"+(e.collapsed?"-right":"-down")+" chevron"+(e.children&&0!=e.children.length?"":" disabled")),onClick:n=>function(e){e.collapsed=!e.collapsed}(e)},null,10,E)),(0,o.Wm)(x.Z,{class:"module-checkbox",check:e.allChildChecked,minus:!e.allChildChecked&&e.anyChildChecked,disabled:e.disabled,onClick:n=>Qe(e)},null,8,["check","minus","disabled","onClick"]),e.imported?((0,o.wg)(),(0,o.iD)("i",j)):(0,o.kq)("v-if",!0),(0,o._)("span",{class:(0,i.normalizeClass)(["module-name",e.imported?" imported":e.disabled?" disabled":""])},(0,i.toDisplayString)(e.name),3),e.imported?((0,o.wg)(),(0,o.iD)("div",{key:2,class:"version-text",onClick:n=>function(e){var n;ye.showDialog((0,o.RC)((()=>t.e(5872).then(t.bind(t,45872)))),{closable:!0,title:"Change Version",width:"1080px",maxHeight:"500px",overflow:"auto"},{module:{ID:e.id},versions:null===(n=Se.value)||void 0===n?void 0:n.get(e.id),cb:n=>{var t;e.version=n.version,null===(t=e.children)||void 0===t||t.forEach((e=>{const t=n.relatedModelHistories.find((n=>n.modelID==e.id));e.version=null==t?void 0:t.version,Ke(null==t?void 0:t.version,e)}))}})}(e)},[(0,o.Uk)((0,i.toDisplayString)(e.version?e.version:"No version")+" ",1),P],8,V)):(0,o.kq)("v-if",!0)]),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(null==e?void 0:e.children,(n=>(0,o.wy)(((0,o.wg)(),(0,o.iD)("div",z,[(0,o.Wm)(x.Z,{class:"model-checkbox",check:n.checked,disabled:n.disabled,onClick:e=>Qe(n)},null,8,["check","disabled","onClick"]),"module"!=n.type?((0,o.wg)(),(0,o.iD)("i",{key:0,class:(0,i.normalizeClass)("model-icon "+(0,s.SU)(r.o).getModelVisualInfo(n.type,void 0).icon),style:(0,i.normalizeStyle)({color:(0,s.SU)(r.o).getModelVisualInfo(n.type,void 0).color})},null,6)):(0,o.kq)("v-if",!0),(0,o._)("span",{class:(0,i.normalizeClass)(["model-name",n.disabled?" disabled":""])},(0,i.toDisplayString)(n.name),3),n.usageType&&"appSettings"!=n.usageType?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("div",{key:1,class:(0,i.normalizeClass)(["version-text",n.disabled?"disabled":""]),onClick:e=>Xe(n)},[(0,o.Uk)((0,i.toDisplayString)(n.version?n.version:"No version")+" ",1),n.usageType&&"appSettings"!=n.usageType?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("i",{key:0,class:(0,i.normalizeClass)(["mdi mdi-pencil-outline version-icon",n.disabled?"disabled":""])},null,2))],10,U)),n.disabled&&!n.version?((0,o.wg)(),(0,o.iD)("span",O,[(0,o.Uk)("No version available for publishing. "),N,(0,o.Uk)(" on this item and choose the "),J,(0,o.Uk)(" option. ")])):(0,o.kq)("v-if",!0)],512)),[[l.vShow,!e.imported&&!e.collapsed]]))),256))])):((0,o.wg)(),(0,o.iD)("div",F,[(0,o._)("div",H,[(0,o.Wm)(x.Z,{class:"module-checkbox",check:null==e?void 0:e.checked,disabled:e.disabled,onClick:n=>Qe(e)},null,8,["check","disabled","onClick"]),"qjson"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("i",R)):"yaml"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("i",L)):(0,o.kq)("v-if",!0),"js"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("i",q)):(0,o.kq)("v-if",!0),"css"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("i",G)):"process"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("i",_)):"bpmn"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("i",W)):"entityDesigner"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("i",Y)):"flow"==(null==e?void 0:e.type)?((0,o.wg)(),(0,o.iD)("i",Q)):"namedComponent"==e.type?((0,o.wg)(),(0,o.iD)("i",Z)):"appSettings"==e.type?((0,o.wg)(),(0,o.iD)("i",$)):(0,o.kq)("v-if",!0),(0,o._)("span",K,[(0,o.Uk)((0,i.toDisplayString)(null==e?void 0:e.name)+" ",1),(null===(n=Ee.value)||void 0===n?void 0:n.ID)==e.id?((0,o.wg)(),(0,o.iD)("span",X,ee)):(0,o.kq)("v-if",!0)]),e.usageType?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("span",{key:10,class:(0,i.normalizeClass)(["version-text",e.disabled?"disabled":""]),onClick:n=>Xe(e)},[(0,o.Uk)((0,i.toDisplayString)(e.version?e.version:"No version")+" ",1),e.usageType?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("i",{key:0,class:(0,i.normalizeClass)(["mdi mdi-pencil-outline version-icon",e.disabled?"disabled":""])},null,2))],10,ne)),e.disabled&&!e.version?((0,o.wg)(),(0,o.iD)("span",te,[(0,o.Uk)("No version available for publishing. "),oe,(0,o.Uk)(" on this item and choose the "),ie,(0,o.Uk)(" option. ")])):(0,o.kq)("v-if",!0)])]))])})),256))],2),"Deploy"==D.screenType?((0,o.wg)(),(0,o.iD)("div",se,[le,(0,o.Wm)(C.Z,{options:Te.value,onInput:an,selectedOption:Me.value,default:Me.value,disabledOptions:we.value,selectedClass:"selected-environment",placeholder:"Select the publish environment of your application",class:"select-environment"},null,8,["options","selectedOption","default","disabledOptions"])])):(0,o.kq)("v-if",!0),(0,o.kq)('         <div v-if="props.screenType == \'Deploy\' && !props.platformSelection.web && props.platformSelection.mobile"\n            class="mobile-publish-text">\n            <i class="mdi mdi-information"></i>\n            <span>Models and static files of your mobile application will be served from Public Cloud.</span>\n        </div> '),(0,o._)("div",{class:(0,i.normalizeClass)(["footer","Deploy"==D.screenType?"deploy":"export"])},[(0,o._)("div",{class:(0,i.normalizeClass)(["cancel-button","Deploy"==D.screenType?"deploy":""]),onClick:en},"Cancel",2),"Export"==D.screenType?((0,o.wg)(),(0,o.iD)("div",{key:0,class:(0,i.normalizeClass)((0,s.SU)(Ne)?" button-disable":""),onClick:n[1]||(n[1]=e=>!(0,s.SU)(Ne)&&nn())},[ae,(0,s.SU)(Fe)?(0,s.SU)(Re)?(0,s.SU)(He)?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("span",pe,(0,i.toDisplayString)(Ve.value),1)):((0,o.wg)(),(0,o.iD)("span",re,"You need to include your start screen.")):((0,o.wg)(),(0,o.iD)("span",de,"There are no items ready to publish. At least one of your items must be ready to publish."))],2)):(0,o.kq)("v-if",!0),"Deploy"==D.screenType?((0,o.wg)(),(0,o.iD)("div",{key:1,class:(0,i.normalizeClass)([(0,s.SU)(Ne)?" button-disable":""]),onClick:n[2]||(n[2]=e=>!(0,s.SU)(Ne)&&nn())},[ce,(0,s.SU)(Re)?Me.value?(0,s.SU)(Fe)?(0,s.SU)(He)?(0,o.kq)("v-if",!0):((0,o.wg)(),(0,o.iD)("span",be,(0,i.toDisplayString)(Ve.value),1)):((0,o.wg)(),(0,o.iD)("span",he,"There are no items ready to publish. At least one of your items must be ready to publish.")):((0,o.wg)(),(0,o.iD)("span",ue,"You need to select a publish environment.")):((0,o.wg)(),(0,o.iD)("span",me,"You need to include your start screen."))],2)):(0,o.kq)("v-if",!0)],2)]))}});var ve=t(17450),ye=t.n(ve),Ae=t(29530),Ie=t.n(Ae),ge=t(16199),Ce=t.n(ge),xe=t(40458),ke=t.n(xe),De=t(62916),Me=t.n(De),we=t(92165),Te=t.n(we),Be=t(83175),Se={};Se.styleTagTransform=Te(),Se.setAttributes=ke(),Se.insert=Ce().bind(null,"head"),Se.domAPI=Ie(),Se.insertStyleElement=Me(),ye()(Be.Z,Se),Be.Z&&Be.Z.locals&&Be.Z.locals;var Ee=t(68394),je={};je.styleTagTransform=Te(),je.setAttributes=ke(),je.insert=Ce().bind(null,"head"),je.domAPI=Ie(),je.insertStyleElement=Me(),ye()(Ee.Z,je),Ee.Z&&Ee.Z.locals&&Ee.Z.locals;const Ve=(0,t(32525).Z)(fe,[["__scopeId","data-v-71db724d"]])}}]);
//# sourceMappingURL=443.js.map
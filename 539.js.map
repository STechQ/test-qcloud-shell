{"version":3,"file":"539.js","mappings":"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","sources":["webpack://qcloud_shell/./src/presentation/vue3/pages/superuser.vue?2f61","webpack://qcloud_shell/./src/presentation/vue3/pages/superuser.vue?e42e","webpack://qcloud_shell/./src/presentation/vue3/pages/superuser.vue?b1bf","webpack://qcloud_shell/./src/presentation/vue3/pages/superuser.vue"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.content-area[data-v-8dd3748a] {\\n  overflow-y: scroll;\\n  height: 100%;\\n}\\n.tables-area[data-v-8dd3748a] {\\n  width: 70%;\\n  margin-left: 15%;\\n  margin-top: 10px;\\n}\\n.section-area[data-v-8dd3748a] {\\n  margin-bottom: 25px;\\n}\\n.header-text[data-v-8dd3748a] {\\n  font-weight: bold;\\n  margin-bottom: 5px;\\n}\\n\\n/* .btn-new-item {\\n  float: right;\\n} */\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/presentation/vue3/pages/superuser.vue\"],\"names\":[],\"mappings\":\";AAoSA;EACE,kBAAkB;EAClB,YAAY;AACd;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,gBAAgB;AAClB;AAEA;EACE,mBAAmB;AACrB;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;;GAEG\",\"sourcesContent\":[\"<script setup lang=\\\"ts\\\">\\nimport { defineAsyncComponent, onBeforeMount, onMounted, ref } from \\\"vue\\\";\\nimport { AuthenticationType, IDomain, ISystemUser, ITenantUser } from '@stechquick/algae/lib/qCloudTemp/quickCloud';\\nimport { container } from '../../../domain/core/diContainer';\\nimport { routeDefinition } from '../../../domain/presentation/IRouter';\\nimport { ISystemUserManagement } from '../../../domain/useCase/ISystemUserManagement';\\nimport { IUseCaseExecutor } from '../../../domain/useCase/IUseCaseExecutor';\\nimport { ILocalization } from \\\"../../../domain/infrastructure/ILocalization\\\";\\nimport { IDialog } from \\\"../../../domain/presentation/IDialog\\\";\\nimport { IViewModel } from \\\"../../../domain/viewModel/IViewModel\\\";\\nimport { CreatePromiseData } from \\\"@stechquick/algae/lib/helpers/createPromiseData\\\";\\n\\ninterface IInitOptions {\\n  domains?: boolean;\\n  tenants?: boolean;\\n  systemUsers?: boolean;\\n}\\n\\ninterface ITenantDomainRelation {\\n  domainID: string;\\n  tenantID: string;\\n  domainName: string;\\n  tenantName: string;\\n  loginType: AuthenticationType;\\n}\\n\\nrouteDefinition({ noAuth: true });\\n\\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\\nconst systemUserManagement = container.resolve<ISystemUserManagement>(ISystemUserManagement);\\nconst localization = container.resolve<ILocalization>(ILocalization);\\nconst dialog = container.resolve<IDialog>(IDialog);\\n\\nconst domains = ref<Array<IDomain>>([]);\\nconst tenants = ref<Array<ITenantUser>>([]);\\nconst domainTenantRelations = ref<Array<ITenantDomainRelation>>([]);\\nconst systemUsers = ref<Array<ISystemUser>>([]);\\n\\nfunction fillRelationTableData(domains: Array<IDomain>, tenants: Array<ITenantUser>) {\\n  const items: Array<ITenantDomainRelation> = [];\\n\\n  tenants.forEach(tenant => {\\n    const relations = tenant.tenantRelations;\\n    if (!relations) { return; }\\n\\n    relations.forEach(relation => {\\n      const domain = domains.find(i => i.ID == relation.tenantID)!;\\n      const item: ITenantDomainRelation = {\\n        domainID: relation.tenantID,\\n        domainName: domain.name,\\n        tenantID: tenant.ID,\\n        tenantName: tenant.name,\\n        loginType: relation.loginType,\\n      }\\n      items.push(item);\\n    });\\n  });\\n\\n  domainTenantRelations.value = items;\\n}\\n\\nasync function getData(options: IInitOptions) {\\n  await executor.execute(async () => {\\n    const domainsProm = options.domains ? systemUserManagement.listDomains() : (async () => domains.value)();\\n    const tenantsProm = options.tenants ? systemUserManagement.listTenants() : (async () => tenants.value)();\\n    const systemUsersProm = options.systemUsers ? systemUserManagement.listSystemUsers() : (async () => systemUsers.value)();\\n\\n    [domains.value, tenants.value, systemUsers.value] = await Promise.all([domainsProm, tenantsProm, systemUsersProm]);\\n\\n    if (options.tenants) {\\n      fillRelationTableData(domains.value, tenants.value);\\n    }\\n  }, { loading: true });\\n}\\n\\nconst checkUserProm = CreatePromiseData<void>();\\n\\nonBeforeMount(async () => {\\n  await executor.execute(async () => {\\n    await systemUserManagement.checkUser();\\n    checkUserProm.resolver();\\n  }, { loading: true });\\n});\\n\\nonMounted(async () => {\\n  await checkUserProm.promise;\\n  await getData({ domains: true, tenants: true, systemUsers: true });\\n});\\n\\nconst dtBasicOptions = {\\n  filterable: false, perPage: 10, perPageValues: [],\\n  sortIcon: { base: 'mdi', is: 'mdi mdi-unfold-less-horizontal', up: 'mdi mdi-arrow-up', down: 'mdi mdi-arrow-down' },\\n};\\n\\nconst domainsDtOptions = {\\n  ...dtBasicOptions,\\n  headings: {\\n    ID: \\\"Domain ID\\\",\\n    name: \\\"Domain Name\\\",\\n    dbName: \\\"Database Name\\\",\\n    createdBy: localization.get('applicationListcreatedByHeader'),\\n    createDate: localization.get('applicationListcreatedDateHeader'),\\n  }\\n};\\n\\nconst tenantsDtOptions = {\\n  ...dtBasicOptions,\\n  headings: {\\n    ID: \\\"Tenant ID\\\",\\n    name: \\\" Tenant Name\\\",\\n    createdBy: localization.get('applicationListcreatedByHeader'),\\n    createDate: localization.get('applicationListcreatedDateHeader'),\\n  }\\n};\\n\\nconst relationsDtOptions = {\\n  ...dtBasicOptions,\\n  headings: {\\n    domainID: \\\"Domain ID\\\",\\n    domainName: \\\"Domain Name\\\",\\n    tenantID: \\\"Tenant ID\\\",\\n    tenantName: \\\"Tenant Name\\\",\\n    loginType: \\\"Login Type\\\",\\n  }\\n};\\n\\nconst systemUsersDtOptions = {\\n  ...dtBasicOptions,\\n  headings: {\\n    ID: \\\"User ID\\\",\\n    userName: \\\"Domain Name\\\",\\n    loginType: \\\"Login Type\\\",\\n    createdBy: localization.get('applicationListcreatedByHeader'),\\n    createDate: localization.get('applicationListcreatedDateHeader'),\\n  }\\n};\\n\\nlet dtOptions: any = { month: '2-digit', day: '2-digit', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' };\\nconst domainsDatatableColumns = ref(['ID', 'name', 'dbName', 'createdBy', 'createDate', \\\"actions\\\"]);\\nconst tenantsDatatableColumns = ref(['ID', 'name', 'createdBy', 'createDate', \\\"actions\\\"]);\\nconst relationsDatatableColumns = ref(['domainID', 'domainName', 'tenantID', 'tenantName', \\\"loginType\\\", \\\"actions\\\"]);\\nconst systemUsersDatatableColumns = ref(['ID', 'userName', \\\"loginType\\\", 'createdBy', 'createDate', \\\"actions\\\"]);\\nconst domainsDataTable = ref(domainsDtOptions);\\nconst tenantsDataTable = ref(tenantsDtOptions);\\nconst relationsDataTable = ref(relationsDtOptions);\\nconst systemUsersDataTable = ref(systemUsersDtOptions);\\n\\nasync function createNewDomian() {\\n  const closeCb = async (reason: \\\"close\\\" | \\\"outclick\\\" | \\\"component\\\") => {\\n    if (reason != \\\"component\\\") { return; }\\n    await getData({ domains: true });\\n  };\\n\\n  dialog.showDialog(defineAsyncComponent(() => import(`../components/dialogs/superuser/createDomain.vue`)), { closable: true, title: \\\"Create Domain\\\", closeCb }, {});\\n}\\n\\nasync function createNewTenant() {\\n  const closeCb = async (reason: \\\"close\\\" | \\\"outclick\\\" | \\\"component\\\") => {\\n    if (reason != \\\"component\\\") { return; }\\n    await getData({ tenants: true });\\n  };\\n\\n  dialog.showDialog(defineAsyncComponent(() => import(`../components/dialogs/superuser/createTenant.vue`)), { closable: true, title: \\\"Create Tenant\\\", closeCb }, {});\\n}\\n\\nasync function createNewRelation() {\\n  const closeCb = async (reason: \\\"close\\\" | \\\"outclick\\\" | \\\"component\\\") => {\\n    if (reason != \\\"component\\\") { return; }\\n    await getData({ domains: true, tenants: true });\\n  };\\n\\n  const domainOptions = domains.value.map(i => { return { text: i.name, value: i.ID } });\\n  const tenantOptions = tenants.value.map(i => { return { text: i.name, value: i.ID } });\\n\\n  dialog.showDialog(defineAsyncComponent(\\n    () => import(`../components/dialogs/superuser/attachDomainToTenant.vue`)),\\n    { closable: true, title: \\\"Attach Domain To Tenant\\\", closeCb },\\n    { domainOptions, tenantOptions },\\n  );\\n}\\n\\nasync function createNewSystemUSer() {\\n  const closeCb = async (reason: \\\"close\\\" | \\\"outclick\\\" | \\\"component\\\") => {\\n    if (reason != \\\"component\\\") { return; }\\n    await getData({ systemUsers: true });\\n  };\\n\\n  dialog.showDialog(defineAsyncComponent(() => import(`../components/dialogs/superuser/createSystemUser.vue`)), { closable: true, title: \\\"Create New System User\\\", closeCb }, {});\\n}\\n\\nasync function deleteDomian(domainID: string, domainName: string) {\\n  await executor.execute(async () => {\\n    await systemUserManagement.deleteDomain(domainID, domainName);\\n    await getData({ domains: true, tenants: true });\\n  }, { loading: true });\\n}\\n\\nasync function deleteTenant(tenantID: string, tenantName: string) {\\n  await executor.execute(async () => {\\n    await systemUserManagement.deleteTenant(tenantID, tenantName);\\n    await getData({ tenants: true });\\n  }, { loading: true });\\n}\\n\\nasync function deleteSystemUser(systemUserID: string, systemUserName: string) {\\n  await executor.execute(async () => {\\n    await systemUserManagement.deleteSystemUser(systemUserID, systemUserName);\\n    await getData({ systemUsers: true });\\n  }, { loading: true });\\n}\\n\\nasync function removeRelation(domainID: string, tenantID: string, domainName: string, tenantName: string) {\\n  await executor.execute(async () => {\\n    await systemUserManagement.detachDomainFromTenant(domainID, tenantID, domainName, tenantName);\\n    await getData({ tenants: true });\\n  }, { loading: true });\\n}\\n\\n</script>\\n<template>\\n  <div class=\\\"content-area\\\">\\n    <div class=\\\"tables-area\\\">\\n      <div class=\\\"section-area\\\">\\n        <div>\\n          <button @click=\\\"getData({ domains: true, tenants: true, systemUsers: true })\\\">Refresh Tables</button>\\n        </div>\\n      </div>\\n      <div class=\\\"section-area\\\">\\n        <div class=\\\"header-text\\\">Domains <button @click=\\\"createNewDomian()\\\" class=\\\"btn-new-item\\\">Create New\\n            Domain</button></div>\\n        <div>\\n          <v-client-table ref='table' :data=\\\"domains\\\" :columns=\\\"domainsDatatableColumns\\\" :options=\\\"domainsDataTable\\\">\\n            <template #createdDate=\\\"props\\\">\\n              <span>{{ new Intl.DateTimeFormat(\\\"tr-TR\\\", dtOptions).format(new Date(props.row.createDate)) }}</span>\\n            </template>\\n            <template #actions=\\\"props\\\">\\n              <div>\\n                <button @click=\\\"deleteDomian(props.row.ID, props.row.name)\\\">Delete</button>\\n              </div>\\n            </template>\\n          </v-client-table>\\n        </div>\\n      </div>\\n      <div class=\\\"section-area\\\">\\n        <div class=\\\"header-text\\\">Tenants <button @click=\\\"createNewTenant()\\\">Create New Tenant</button></div>\\n        <div>\\n          <v-client-table ref='table' :data=\\\"tenants\\\" :columns=\\\"tenantsDatatableColumns\\\" :options=\\\"tenantsDataTable\\\">\\n            <template #createdDate=\\\"props\\\">\\n              <span>{{ new Intl.DateTimeFormat(\\\"tr-TR\\\", dtOptions).format(new Date(props.row.createDate)) }}</span>\\n            </template>\\n            <template #actions=\\\"props\\\">\\n              <div>\\n                <button @click=\\\"deleteTenant(props.row.ID, props.row.name)\\\">Delete</button>\\n              </div>\\n            </template>\\n          </v-client-table>\\n        </div>\\n      </div>\\n      <div class=\\\"section-area\\\">\\n        <div class=\\\"header-text\\\">Tenant & Domain Relations <button @click=\\\"createNewRelation()\\\">Add New\\n            Relation</button></div>\\n        <div>\\n          <v-client-table ref='table' :data=\\\"domainTenantRelations\\\" :columns=\\\"relationsDatatableColumns\\\"\\n            :options=\\\"relationsDataTable\\\">\\n            <template #actions=\\\"props\\\">\\n              <div>\\n                <button\\n                  @click=\\\"removeRelation(props.row.domainID, props.row.tenantID, props.row.domainName, props.row.tenantName)\\\">Remove</button>\\n              </div>\\n            </template>\\n          </v-client-table>\\n        </div>\\n      </div>\\n      <div class=\\\"section-area\\\">\\n        <div class=\\\"header-text\\\">System Users <button @click=\\\"createNewSystemUSer()\\\">Create System User</button>\\n        </div>\\n        <div>\\n          <v-client-table ref='table' :data=\\\"systemUsers\\\" :columns=\\\"systemUsersDatatableColumns\\\"\\n            :options=\\\"systemUsersDataTable\\\">\\n            <template #actions=\\\"props\\\">\\n              <div>\\n                <button @click=\\\"deleteSystemUser(props.row.ID, props.row.userName)\\\">Delete</button>\\n              </div>\\n            </template>\\n          </v-client-table>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</template>\\n\\n<style scoped>\\n.content-area {\\n  overflow-y: scroll;\\n  height: 100%;\\n}\\n\\n.tables-area {\\n  width: 70%;\\n  margin-left: 15%;\\n  margin-top: 10px;\\n}\\n\\n.section-area {\\n  margin-bottom: 25px;\\n}\\n\\n.header-text {\\n  font-weight: bold;\\n  margin-bottom: 5px;\\n}\\n\\n/* .btn-new-item {\\n  float: right;\\n} */\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, unref as _unref, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-8dd3748a\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"content-area\" }\nconst _hoisted_2 = { class: \"tables-area\" }\nconst _hoisted_3 = { class: \"section-area\" }\nconst _hoisted_4 = { class: \"section-area\" }\nconst _hoisted_5 = { class: \"header-text\" }\nconst _hoisted_6 = /*#__PURE__*/_createTextVNode(\"Domains \")\nconst _hoisted_7 = [\"onClick\"]\nconst _hoisted_8 = { class: \"section-area\" }\nconst _hoisted_9 = { class: \"header-text\" }\nconst _hoisted_10 = /*#__PURE__*/_createTextVNode(\"Tenants \")\nconst _hoisted_11 = [\"onClick\"]\nconst _hoisted_12 = { class: \"section-area\" }\nconst _hoisted_13 = { class: \"header-text\" }\nconst _hoisted_14 = /*#__PURE__*/_createTextVNode(\"Tenant & Domain Relations \")\nconst _hoisted_15 = [\"onClick\"]\nconst _hoisted_16 = { class: \"section-area\" }\nconst _hoisted_17 = { class: \"header-text\" }\nconst _hoisted_18 = /*#__PURE__*/_createTextVNode(\"System Users \")\nconst _hoisted_19 = [\"onClick\"]\n\nimport { defineAsyncComponent, onBeforeMount, onMounted, ref } from \"vue\";\nimport { AuthenticationType, IDomain, ISystemUser, ITenantUser } from '@stechquick/algae/lib/qCloudTemp/quickCloud';\nimport { container } from '../../../domain/core/diContainer';\nimport { routeDefinition } from '../../../domain/presentation/IRouter';\nimport { ISystemUserManagement } from '../../../domain/useCase/ISystemUserManagement';\nimport { IUseCaseExecutor } from '../../../domain/useCase/IUseCaseExecutor';\nimport { ILocalization } from \"../../../domain/infrastructure/ILocalization\";\nimport { IDialog } from \"../../../domain/presentation/IDialog\";\nimport { IViewModel } from \"../../../domain/viewModel/IViewModel\";\nimport { CreatePromiseData } from \"@stechquick/algae/lib/helpers/createPromiseData\";\n\ninterface IInitOptions {\n  domains?: boolean;\n  tenants?: boolean;\n  systemUsers?: boolean;\n}\n\ninterface ITenantDomainRelation {\n  domainID: string;\n  tenantID: string;\n  domainName: string;\n  tenantName: string;\n  loginType: AuthenticationType;\n}\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'superuser',\n  setup(__props) {\n\nrouteDefinition({ noAuth: true });\n\nconst executor = container.resolve<IUseCaseExecutor>(IUseCaseExecutor);\nconst systemUserManagement = container.resolve<ISystemUserManagement>(ISystemUserManagement);\nconst localization = container.resolve<ILocalization>(ILocalization);\nconst dialog = container.resolve<IDialog>(IDialog);\n\nconst domains = ref<Array<IDomain>>([]);\nconst tenants = ref<Array<ITenantUser>>([]);\nconst domainTenantRelations = ref<Array<ITenantDomainRelation>>([]);\nconst systemUsers = ref<Array<ISystemUser>>([]);\n\nfunction fillRelationTableData(domains: Array<IDomain>, tenants: Array<ITenantUser>) {\n  const items: Array<ITenantDomainRelation> = [];\n\n  tenants.forEach(tenant => {\n    const relations = tenant.tenantRelations;\n    if (!relations) { return; }\n\n    relations.forEach(relation => {\n      const domain = domains.find(i => i.ID == relation.tenantID)!;\n      const item: ITenantDomainRelation = {\n        domainID: relation.tenantID,\n        domainName: domain.name,\n        tenantID: tenant.ID,\n        tenantName: tenant.name,\n        loginType: relation.loginType,\n      }\n      items.push(item);\n    });\n  });\n\n  domainTenantRelations.value = items;\n}\n\nasync function getData(options: IInitOptions) {\n  await executor.execute(async () => {\n    const domainsProm = options.domains ? systemUserManagement.listDomains() : (async () => domains.value)();\n    const tenantsProm = options.tenants ? systemUserManagement.listTenants() : (async () => tenants.value)();\n    const systemUsersProm = options.systemUsers ? systemUserManagement.listSystemUsers() : (async () => systemUsers.value)();\n\n    [domains.value, tenants.value, systemUsers.value] = await Promise.all([domainsProm, tenantsProm, systemUsersProm]);\n\n    if (options.tenants) {\n      fillRelationTableData(domains.value, tenants.value);\n    }\n  }, { loading: true });\n}\n\nconst checkUserProm = CreatePromiseData<void>();\n\nonBeforeMount(async () => {\n  await executor.execute(async () => {\n    await systemUserManagement.checkUser();\n    checkUserProm.resolver();\n  }, { loading: true });\n});\n\nonMounted(async () => {\n  await checkUserProm.promise;\n  await getData({ domains: true, tenants: true, systemUsers: true });\n});\n\nconst dtBasicOptions = {\n  filterable: false, perPage: 10, perPageValues: [],\n  sortIcon: { base: 'mdi', is: 'mdi mdi-unfold-less-horizontal', up: 'mdi mdi-arrow-up', down: 'mdi mdi-arrow-down' },\n};\n\nconst domainsDtOptions = {\n  ...dtBasicOptions,\n  headings: {\n    ID: \"Domain ID\",\n    name: \"Domain Name\",\n    dbName: \"Database Name\",\n    createdBy: localization.get('applicationListcreatedByHeader'),\n    createDate: localization.get('applicationListcreatedDateHeader'),\n  }\n};\n\nconst tenantsDtOptions = {\n  ...dtBasicOptions,\n  headings: {\n    ID: \"Tenant ID\",\n    name: \" Tenant Name\",\n    createdBy: localization.get('applicationListcreatedByHeader'),\n    createDate: localization.get('applicationListcreatedDateHeader'),\n  }\n};\n\nconst relationsDtOptions = {\n  ...dtBasicOptions,\n  headings: {\n    domainID: \"Domain ID\",\n    domainName: \"Domain Name\",\n    tenantID: \"Tenant ID\",\n    tenantName: \"Tenant Name\",\n    loginType: \"Login Type\",\n  }\n};\n\nconst systemUsersDtOptions = {\n  ...dtBasicOptions,\n  headings: {\n    ID: \"User ID\",\n    userName: \"Domain Name\",\n    loginType: \"Login Type\",\n    createdBy: localization.get('applicationListcreatedByHeader'),\n    createDate: localization.get('applicationListcreatedDateHeader'),\n  }\n};\n\nlet dtOptions: any = { month: '2-digit', day: '2-digit', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' };\nconst domainsDatatableColumns = ref(['ID', 'name', 'dbName', 'createdBy', 'createDate', \"actions\"]);\nconst tenantsDatatableColumns = ref(['ID', 'name', 'createdBy', 'createDate', \"actions\"]);\nconst relationsDatatableColumns = ref(['domainID', 'domainName', 'tenantID', 'tenantName', \"loginType\", \"actions\"]);\nconst systemUsersDatatableColumns = ref(['ID', 'userName', \"loginType\", 'createdBy', 'createDate', \"actions\"]);\nconst domainsDataTable = ref(domainsDtOptions);\nconst tenantsDataTable = ref(tenantsDtOptions);\nconst relationsDataTable = ref(relationsDtOptions);\nconst systemUsersDataTable = ref(systemUsersDtOptions);\n\nasync function createNewDomian() {\n  const closeCb = async (reason: \"close\" | \"outclick\" | \"component\") => {\n    if (reason != \"component\") { return; }\n    await getData({ domains: true });\n  };\n\n  dialog.showDialog(defineAsyncComponent(() => import(`../components/dialogs/superuser/createDomain.vue`)), { closable: true, title: \"Create Domain\", closeCb }, {});\n}\n\nasync function createNewTenant() {\n  const closeCb = async (reason: \"close\" | \"outclick\" | \"component\") => {\n    if (reason != \"component\") { return; }\n    await getData({ tenants: true });\n  };\n\n  dialog.showDialog(defineAsyncComponent(() => import(`../components/dialogs/superuser/createTenant.vue`)), { closable: true, title: \"Create Tenant\", closeCb }, {});\n}\n\nasync function createNewRelation() {\n  const closeCb = async (reason: \"close\" | \"outclick\" | \"component\") => {\n    if (reason != \"component\") { return; }\n    await getData({ domains: true, tenants: true });\n  };\n\n  const domainOptions = domains.value.map(i => { return { text: i.name, value: i.ID } });\n  const tenantOptions = tenants.value.map(i => { return { text: i.name, value: i.ID } });\n\n  dialog.showDialog(defineAsyncComponent(\n    () => import(`../components/dialogs/superuser/attachDomainToTenant.vue`)),\n    { closable: true, title: \"Attach Domain To Tenant\", closeCb },\n    { domainOptions, tenantOptions },\n  );\n}\n\nasync function createNewSystemUSer() {\n  const closeCb = async (reason: \"close\" | \"outclick\" | \"component\") => {\n    if (reason != \"component\") { return; }\n    await getData({ systemUsers: true });\n  };\n\n  dialog.showDialog(defineAsyncComponent(() => import(`../components/dialogs/superuser/createSystemUser.vue`)), { closable: true, title: \"Create New System User\", closeCb }, {});\n}\n\nasync function deleteDomian(domainID: string, domainName: string) {\n  await executor.execute(async () => {\n    await systemUserManagement.deleteDomain(domainID, domainName);\n    await getData({ domains: true, tenants: true });\n  }, { loading: true });\n}\n\nasync function deleteTenant(tenantID: string, tenantName: string) {\n  await executor.execute(async () => {\n    await systemUserManagement.deleteTenant(tenantID, tenantName);\n    await getData({ tenants: true });\n  }, { loading: true });\n}\n\nasync function deleteSystemUser(systemUserID: string, systemUserName: string) {\n  await executor.execute(async () => {\n    await systemUserManagement.deleteSystemUser(systemUserID, systemUserName);\n    await getData({ systemUsers: true });\n  }, { loading: true });\n}\n\nasync function removeRelation(domainID: string, tenantID: string, domainName: string, tenantName: string) {\n  await executor.execute(async () => {\n    await systemUserManagement.detachDomainFromTenant(domainID, tenantID, domainName, tenantName);\n    await getData({ tenants: true });\n  }, { loading: true });\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_v_client_table = _resolveComponent(\"v-client-table\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createElementVNode(\"div\", null, [\n          _createElementVNode(\"button\", {\n            onClick: _cache[0] || (_cache[0] = ($event: any) => (getData({ domains: true, tenants: true, systemUsers: true })))\n          }, \"Refresh Tables\")\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_4, [\n        _createElementVNode(\"div\", _hoisted_5, [\n          _hoisted_6,\n          _createElementVNode(\"button\", {\n            onClick: _cache[1] || (_cache[1] = ($event: any) => (createNewDomian())),\n            class: \"btn-new-item\"\n          }, \"Create New Domain\")\n        ]),\n        _createElementVNode(\"div\", null, [\n          _createVNode(_component_v_client_table, {\n            ref: \"table\",\n            data: domains.value,\n            columns: domainsDatatableColumns.value,\n            options: domainsDataTable.value\n          }, {\n            createdDate: _withCtx((props) => [\n              _createElementVNode(\"span\", null, _toDisplayString(new Intl.DateTimeFormat(\"tr-TR\", _unref(dtOptions)).format(new Date(props.row.createDate))), 1 /* TEXT */)\n            ]),\n            actions: _withCtx((props) => [\n              _createElementVNode(\"div\", null, [\n                _createElementVNode(\"button\", {\n                  onClick: ($event: any) => (deleteDomian(props.row.ID, props.row.name))\n                }, \"Delete\", 8 /* PROPS */, _hoisted_7)\n              ])\n            ]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"data\", \"columns\", \"options\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_8, [\n        _createElementVNode(\"div\", _hoisted_9, [\n          _hoisted_10,\n          _createElementVNode(\"button\", {\n            onClick: _cache[2] || (_cache[2] = ($event: any) => (createNewTenant()))\n          }, \"Create New Tenant\")\n        ]),\n        _createElementVNode(\"div\", null, [\n          _createVNode(_component_v_client_table, {\n            ref: \"table\",\n            data: tenants.value,\n            columns: tenantsDatatableColumns.value,\n            options: tenantsDataTable.value\n          }, {\n            createdDate: _withCtx((props) => [\n              _createElementVNode(\"span\", null, _toDisplayString(new Intl.DateTimeFormat(\"tr-TR\", _unref(dtOptions)).format(new Date(props.row.createDate))), 1 /* TEXT */)\n            ]),\n            actions: _withCtx((props) => [\n              _createElementVNode(\"div\", null, [\n                _createElementVNode(\"button\", {\n                  onClick: ($event: any) => (deleteTenant(props.row.ID, props.row.name))\n                }, \"Delete\", 8 /* PROPS */, _hoisted_11)\n              ])\n            ]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"data\", \"columns\", \"options\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_12, [\n        _createElementVNode(\"div\", _hoisted_13, [\n          _hoisted_14,\n          _createElementVNode(\"button\", {\n            onClick: _cache[3] || (_cache[3] = ($event: any) => (createNewRelation()))\n          }, \"Add New Relation\")\n        ]),\n        _createElementVNode(\"div\", null, [\n          _createVNode(_component_v_client_table, {\n            ref: \"table\",\n            data: domainTenantRelations.value,\n            columns: relationsDatatableColumns.value,\n            options: relationsDataTable.value\n          }, {\n            actions: _withCtx((props) => [\n              _createElementVNode(\"div\", null, [\n                _createElementVNode(\"button\", {\n                  onClick: ($event: any) => (removeRelation(props.row.domainID, props.row.tenantID, props.row.domainName, props.row.tenantName))\n                }, \"Remove\", 8 /* PROPS */, _hoisted_15)\n              ])\n            ]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"data\", \"columns\", \"options\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_16, [\n        _createElementVNode(\"div\", _hoisted_17, [\n          _hoisted_18,\n          _createElementVNode(\"button\", {\n            onClick: _cache[4] || (_cache[4] = ($event: any) => (createNewSystemUSer()))\n          }, \"Create System User\")\n        ]),\n        _createElementVNode(\"div\", null, [\n          _createVNode(_component_v_client_table, {\n            ref: \"table\",\n            data: systemUsers.value,\n            columns: systemUsersDatatableColumns.value,\n            options: systemUsersDataTable.value\n          }, {\n            actions: _withCtx((props) => [\n              _createElementVNode(\"div\", null, [\n                _createElementVNode(\"button\", {\n                  onClick: ($event: any) => (deleteSystemUser(props.row.ID, props.row.userName))\n                }, \"Delete\", 8 /* PROPS */, _hoisted_19)\n              ])\n            ]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"data\", \"columns\", \"options\"])\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n})","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./superuser.vue?vue&type=style&index=0&id=8dd3748a&scoped=true&lang=css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./superuser.vue?vue&type=style&index=0&id=8dd3748a&scoped=true&lang=css\";\n       export default content && content.locals ? content.locals : undefined;\n","import script from \"./superuser.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./superuser.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./superuser.vue?vue&type=style&index=0&id=8dd3748a&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/QCloud-Shell/QCloud-Shell/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-8dd3748a\"]])\n\nexport default __exports__"],"names":["___CSS_LOADER_EXPORT___","push","module","id","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","__name","setup","__props","noAuth","executor","IUseCaseExecutor","systemUserManagement","ISystemUserManagement","localization","ILocalization","dialog","IDialog","domains","tenants","domainTenantRelations","systemUsers","async","getData","options","execute","domainsProm","listDomains","value","tenantsProm","listTenants","systemUsersProm","listSystemUsers","Promise","all","items","forEach","tenant","relations","tenantRelations","relation","domain","find","i","ID","tenantID","item","domainID","domainName","name","tenantName","loginType","fillRelationTableData","loading","checkUserProm","checkUser","resolver","promise","dtBasicOptions","filterable","perPage","perPageValues","sortIcon","base","is","up","down","domainsDtOptions","headings","dbName","createdBy","get","createDate","tenantsDtOptions","relationsDtOptions","systemUsersDtOptions","userName","dtOptions","month","day","year","hour","minute","second","domainsDatatableColumns","tenantsDatatableColumns","relationsDatatableColumns","systemUsersDatatableColumns","domainsDataTable","tenantsDataTable","relationsDataTable","systemUsersDataTable","_ctx","_cache","_component_v_client_table","_","onClick","$event","showDialog","closable","title","closeCb","reason","ref","data","columns","createdDate","props","Intl","DateTimeFormat","format","Date","row","actions","deleteDomain","deleteTenant","domainOptions","map","text","tenantOptions","detachDomainFromTenant","systemUserID","systemUserName","deleteSystemUser","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement"],"sourceRoot":""}